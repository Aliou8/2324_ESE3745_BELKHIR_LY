
stm32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b90  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007d68  08007d68  00008d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  00009090  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00008da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  00009090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08007db8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000090  08007e48  00009090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08007e48  00009444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d39  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f1  00000000  00000000  00022df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  000261f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001096  00000000  00000000  00027750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028930  00000000  00000000  000287e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a802  00000000  00000000  00051116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001128c0  00000000  00000000  0006b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e1d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad4  00000000  00000000  0017e21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00183cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d50 	.word	0x08007d50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	08007d50 	.word	0x08007d50

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96a 	b.w	8000514 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fa1f f68c 	uxth.w	r6, ip
 800028e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ae:	f080 8112 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810f 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fa1f f38e 	uxth.w	r3, lr
 80002c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295
 80002de:	f080 80fc 	bcs.w	80004da <__udivmoddi4+0x282>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f9 	bls.w	80004da <__udivmoddi4+0x282>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	1b9b      	subs	r3, r3, r6
 80002ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80f0 	bcc.w	8000504 <__udivmoddi4+0x2ac>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 8090 	bne.w	800045c <__udivmoddi4+0x204>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	fa1f f78c 	uxth.w	r7, ip
 8000348:	2101      	movs	r1, #1
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb08 4416 	mls	r4, r8, r6, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2b4>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb4 f0f8 	udiv	r0, r4, r8
 800037e:	fb08 4410 	mls	r4, r8, r0, r4
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80b0 	bhi.w	80004fe <__udivmoddi4+0x2a6>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b8:	fa04 f301 	lsl.w	r3, r4, r1
 80003bc:	ea43 030c 	orr.w	r3, r3, ip
 80003c0:	40f4      	lsrs	r4, r6
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	0c38      	lsrs	r0, r7, #16
 80003c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003cc:	fbb4 fef0 	udiv	lr, r4, r0
 80003d0:	fa1f fc87 	uxth.w	ip, r7
 80003d4:	fb00 441e 	mls	r4, r0, lr, r4
 80003d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003dc:	fb0e f90c 	mul.w	r9, lr, ip
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ee:	f080 8084 	bcs.w	80004fa <__udivmoddi4+0x2a2>
 80003f2:	45a1      	cmp	r9, r4
 80003f4:	f240 8081 	bls.w	80004fa <__udivmoddi4+0x2a2>
 80003f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	eba4 0409 	sub.w	r4, r4, r9
 8000402:	fa1f f983 	uxth.w	r9, r3
 8000406:	fbb4 f3f0 	udiv	r3, r4, r0
 800040a:	fb00 4413 	mls	r4, r0, r3, r4
 800040e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000412:	fb03 fc0c 	mul.w	ip, r3, ip
 8000416:	45a4      	cmp	ip, r4
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1d2>
 800041a:	193c      	adds	r4, r7, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000420:	d267      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0x29a>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800042e:	fba0 9302 	umull	r9, r3, r0, r2
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	429c      	cmp	r4, r3
 8000438:	46ce      	mov	lr, r9
 800043a:	469c      	mov	ip, r3
 800043c:	d351      	bcc.n	80004e2 <__udivmoddi4+0x28a>
 800043e:	d04e      	beq.n	80004de <__udivmoddi4+0x286>
 8000440:	b155      	cbz	r5, 8000458 <__udivmoddi4+0x200>
 8000442:	ebb8 030e 	subs.w	r3, r8, lr
 8000446:	eb64 040c 	sbc.w	r4, r4, ip
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	40cb      	lsrs	r3, r1
 8000450:	431e      	orrs	r6, r3
 8000452:	40cc      	lsrs	r4, r1
 8000454:	e9c5 6400 	strd	r6, r4, [r5]
 8000458:	2100      	movs	r1, #0
 800045a:	e750      	b.n	80002fe <__udivmoddi4+0xa6>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f103 	lsr.w	r1, r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa24 f303 	lsr.w	r3, r4, r3
 800046c:	4094      	lsls	r4, r2
 800046e:	430c      	orrs	r4, r1
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3110 	mls	r1, r8, r0, r3
 8000484:	0c23      	lsrs	r3, r4, #16
 8000486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048a:	fb00 f107 	mul.w	r1, r0, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x24c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 36ff 	add.w	r6, r0, #4294967295
 800049a:	d22c      	bcs.n	80004f6 <__udivmoddi4+0x29e>
 800049c:	4299      	cmp	r1, r3
 800049e:	d92a      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ac:	fb08 3311 	mls	r3, r8, r1, r3
 80004b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b4:	fb01 f307 	mul.w	r3, r1, r7
 80004b8:	42a3      	cmp	r3, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x276>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c4:	d213      	bcs.n	80004ee <__udivmoddi4+0x296>
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d911      	bls.n	80004ee <__udivmoddi4+0x296>
 80004ca:	3902      	subs	r1, #2
 80004cc:	4464      	add	r4, ip
 80004ce:	1ae4      	subs	r4, r4, r3
 80004d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d4:	e739      	b.n	800034a <__udivmoddi4+0xf2>
 80004d6:	4604      	mov	r4, r0
 80004d8:	e6f0      	b.n	80002bc <__udivmoddi4+0x64>
 80004da:	4608      	mov	r0, r1
 80004dc:	e706      	b.n	80002ec <__udivmoddi4+0x94>
 80004de:	45c8      	cmp	r8, r9
 80004e0:	d2ae      	bcs.n	8000440 <__udivmoddi4+0x1e8>
 80004e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7a8      	b.n	8000440 <__udivmoddi4+0x1e8>
 80004ee:	4631      	mov	r1, r6
 80004f0:	e7ed      	b.n	80004ce <__udivmoddi4+0x276>
 80004f2:	4603      	mov	r3, r0
 80004f4:	e799      	b.n	800042a <__udivmoddi4+0x1d2>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e7d4      	b.n	80004a4 <__udivmoddi4+0x24c>
 80004fa:	46d6      	mov	lr, sl
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fe:	4463      	add	r3, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e74d      	b.n	80003a0 <__udivmoddi4+0x148>
 8000504:	4606      	mov	r6, r0
 8000506:	4623      	mov	r3, r4
 8000508:	4608      	mov	r0, r1
 800050a:	e70f      	b.n	800032c <__udivmoddi4+0xd4>
 800050c:	3e02      	subs	r6, #2
 800050e:	4463      	add	r3, ip
 8000510:	e730      	b.n	8000374 <__udivmoddi4+0x11c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	@ 0x30
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800051e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2220      	movs	r2, #32
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f007 fbe1 	bl	8007cf8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000536:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000538:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800053e:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000540:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000544:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000546:	4b2e      	ldr	r3, [pc, #184]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <MX_ADC1_Init+0xe8>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000552:	4b2b      	ldr	r3, [pc, #172]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000558:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <MX_ADC1_Init+0xe8>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000560:	2204      	movs	r2, #4
 8000562:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000566:	2200      	movs	r2, #0
 8000568:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056a:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <MX_ADC1_Init+0xe8>)
 800056c:	2200      	movs	r2, #0
 800056e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000572:	2201      	movs	r2, #1
 8000574:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057e:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000584:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058a:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <MX_ADC1_Init+0xe8>)
 800058c:	2200      	movs	r2, #0
 800058e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <MX_ADC1_Init+0xe8>)
 8000594:	2200      	movs	r2, #0
 8000596:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000598:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <MX_ADC1_Init+0xe8>)
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a0:	4817      	ldr	r0, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xe8>)
 80005a2:	f001 f975 	bl	8001890 <HAL_ADC_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005ac:	f000 faa2 	bl	8000af4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b8:	4619      	mov	r1, r3
 80005ba:	4811      	ldr	r0, [pc, #68]	@ (8000600 <MX_ADC1_Init+0xe8>)
 80005bc:	f001 ff8a 	bl	80024d4 <HAL_ADCEx_MultiModeConfigChannel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005c6:	f000 fa95 	bl	8000af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_ADC1_Init+0xec>)
 80005cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ce:	2306      	movs	r3, #6
 80005d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d6:	237f      	movs	r3, #127	@ 0x7f
 80005d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005da:	2304      	movs	r3, #4
 80005dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <MX_ADC1_Init+0xe8>)
 80005e8:	f001 fb0e 	bl	8001c08 <HAL_ADC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005f2:	f000 fa7f 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	3730      	adds	r7, #48	@ 0x30
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000ac 	.word	0x200000ac
 8000604:	21800100 	.word	0x21800100

08000608 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2220      	movs	r2, #32
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f007 fb6f 	bl	8007cf8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 800061c:	4a2b      	ldr	r2, [pc, #172]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000622:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000626:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000640:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000642:	2204      	movs	r2, #4
 8000644:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 800064e:	2200      	movs	r2, #0
 8000650:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000654:	2201      	movs	r2, #1
 8000656:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000662:	2200      	movs	r2, #0
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000668:	2200      	movs	r2, #0
 800066a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 8000684:	f001 f904 	bl	8001890 <HAL_ADC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800068e:	f000 fa31 	bl	8000af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_ADC2_Init+0xc8>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC2_Init+0xc0>)
 80006b0:	f001 faaa 	bl	8001c08 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006ba:	f000 fa1b 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000118 	.word	0x20000118
 80006cc:	50000100 	.word	0x50000100
 80006d0:	19200040 	.word	0x19200040

080006d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a4      	sub	sp, #144	@ 0x90
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f0:	2254      	movs	r2, #84	@ 0x54
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f007 faff 	bl	8007cf8 <memset>
  if(adcHandle->Instance==ADC1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000702:	d174      	bne.n	80007ee <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800070a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800070e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f957 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000720:	f000 f9e8 	bl	8000af4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000724:	4b63      	ldr	r3, [pc, #396]	@ (80008b4 <HAL_ADC_MspInit+0x1e0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a62      	ldr	r2, [pc, #392]	@ (80008b4 <HAL_ADC_MspInit+0x1e0>)
 800072c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800072e:	4b61      	ldr	r3, [pc, #388]	@ (80008b4 <HAL_ADC_MspInit+0x1e0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10b      	bne.n	800074e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000736:	4b60      	ldr	r3, [pc, #384]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a5f      	ldr	r2, [pc, #380]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 800073c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b5d      	ldr	r3, [pc, #372]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
 800074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b5a      	ldr	r3, [pc, #360]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a59      	ldr	r2, [pc, #356]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b57      	ldr	r3, [pc, #348]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	623b      	str	r3, [r7, #32]
 8000764:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b54      	ldr	r3, [pc, #336]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a53      	ldr	r2, [pc, #332]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b51      	ldr	r3, [pc, #324]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
 800077c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b4e      	ldr	r3, [pc, #312]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a4d      	ldr	r2, [pc, #308]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b4b      	ldr	r3, [pc, #300]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000796:	2304      	movs	r3, #4
 8000798:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079a:	2303      	movs	r3, #3
 800079c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007aa:	4619      	mov	r1, r3
 80007ac:	4843      	ldr	r0, [pc, #268]	@ (80008bc <HAL_ADC_MspInit+0x1e8>)
 80007ae:	f002 f939 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80007b2:	2302      	movs	r3, #2
 80007b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007cc:	f002 f92a 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d0:	2303      	movs	r3, #3
 80007d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d4:	2303      	movs	r3, #3
 80007d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007e4:	4619      	mov	r1, r3
 80007e6:	4836      	ldr	r0, [pc, #216]	@ (80008c0 <HAL_ADC_MspInit+0x1ec>)
 80007e8:	f002 f91c 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007ec:	e05e      	b.n	80008ac <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a34      	ldr	r2, [pc, #208]	@ (80008c4 <HAL_ADC_MspInit+0x1f0>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d159      	bne.n	80008ac <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000802:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000804:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f8dd 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000814:	f000 f96e 	bl	8000af4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000818:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <HAL_ADC_MspInit+0x1e0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a25      	ldr	r2, [pc, #148]	@ (80008b4 <HAL_ADC_MspInit+0x1e0>)
 8000820:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <HAL_ADC_MspInit+0x1e0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d10b      	bne.n	8000842 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800082a:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000830:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a1c      	ldr	r2, [pc, #112]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_ADC_MspInit+0x1e4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000872:	230b      	movs	r3, #11
 8000874:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000876:	2303      	movs	r3, #3
 8000878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <HAL_ADC_MspInit+0x1e8>)
 800088a:	f002 f8cb 	bl	8002a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000892:	2303      	movs	r3, #3
 8000894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a8:	f002 f8bc 	bl	8002a24 <HAL_GPIO_Init>
}
 80008ac:	bf00      	nop
 80008ae:	3790      	adds	r7, #144	@ 0x90
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000184 	.word	0x20000184
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000800 	.word	0x48000800
 80008c0:	48000400 	.word	0x48000400
 80008c4:	50000100 	.word	0x50000100

080008c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b3f      	ldr	r3, [pc, #252]	@ (80009dc <MX_GPIO_Init+0x114>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a3e      	ldr	r2, [pc, #248]	@ (80009dc <MX_GPIO_Init+0x114>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b3c      	ldr	r3, [pc, #240]	@ (80009dc <MX_GPIO_Init+0x114>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f6:	4b39      	ldr	r3, [pc, #228]	@ (80009dc <MX_GPIO_Init+0x114>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a38      	ldr	r2, [pc, #224]	@ (80009dc <MX_GPIO_Init+0x114>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <MX_GPIO_Init+0x114>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a32      	ldr	r2, [pc, #200]	@ (80009dc <MX_GPIO_Init+0x114>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <MX_GPIO_Init+0x114>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MX_GPIO_Init+0x114>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	4a2c      	ldr	r2, [pc, #176]	@ (80009dc <MX_GPIO_Init+0x114>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <MX_GPIO_Init+0x114>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_GPIO_Init+0x114>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	4a26      	ldr	r2, [pc, #152]	@ (80009dc <MX_GPIO_Init+0x114>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094a:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_GPIO_Init+0x114>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2120      	movs	r1, #32
 800095a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095e:	f002 f9e3 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	481e      	ldr	r0, [pc, #120]	@ (80009e0 <MX_GPIO_Init+0x118>)
 8000968:	f002 f9de 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4818      	ldr	r0, [pc, #96]	@ (80009e4 <MX_GPIO_Init+0x11c>)
 8000984:	f002 f84e 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000988:	2320      	movs	r3, #32
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a2:	f002 f83f 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80009a6:	2304      	movs	r3, #4
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <MX_GPIO_Init+0x118>)
 80009be:	f002 f831 	bl	8002a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2028      	movs	r0, #40	@ 0x28
 80009c8:	f001 ff44 	bl	8002854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009cc:	2028      	movs	r0, #40	@ 0x28
 80009ce:	f001 ff5b 	bl	8002888 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000c00 	.word	0x48000c00
 80009e4:	48000800 	.word	0x48000800

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ec:	f000 fd43 	bl	8001476 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f824 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f7ff ff68 	bl	80008c8 <MX_GPIO_Init>
  MX_ADC2_Init();
 80009f8:	f7ff fe06 	bl	8000608 <MX_ADC2_Init>
  MX_ADC1_Init();
 80009fc:	f7ff fd8c 	bl	8000518 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a00:	f000 f976 	bl	8000cf0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a04:	f000 fa42 	bl	8000e8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a08:	f000 fb76 	bl	80010f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a0c:	f000 fbc0 	bl	8001190 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000a10:	2100      	movs	r1, #0
 8000a12:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <main+0x50>)
 8000a14:	f003 fb58 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <main+0x50>)
 8000a1c:	f004 fdca 	bl	80055b4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <main+0x50>)
 8000a24:	f003 fb50 	bl	80040c8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000a28:	2104      	movs	r1, #4
 8000a2a:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <main+0x50>)
 8000a2c:	f004 fdc2 	bl	80055b4 <HAL_TIMEx_PWMN_Start>

  Shell_Init() ;
 8000a30:	f000 fca2 	bl	8001378 <Shell_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <main+0x4c>
 8000a38:	200001d4 	.word	0x200001d4

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	@ 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	2238      	movs	r2, #56	@ 0x38
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f007 f954 	bl	8007cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f002 f99e 	bl	8002da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a6c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	2303      	movs	r3, #3
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000a76:	2306      	movs	r3, #6
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a7a:	2355      	movs	r3, #85	@ 0x55
 8000a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fa3a 	bl	8002f08 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000a9a:	f000 f82b 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fd38 	bl	800352c <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ac2:	f000 f817 	bl	8000af4 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	@ 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 fce1 	bl	80014a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b36:	f002 f9d7 	bl	8002ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b64:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 020c 	add.w	r2, r7, #12
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 feac 	bl	80038d8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b80:	f002 fe7e 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8000b84:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_InitTick+0xc8>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	0c9b      	lsrs	r3, r3, #18
 8000b90:	3b01      	subs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000b96:	4a20      	ldr	r2, [pc, #128]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000b9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb4:	4817      	ldr	r0, [pc, #92]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bb6:	f003 f955 	bl	8003e64 <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11b      	bne.n	8000c00 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bca:	f003 f9a3 	bl	8003f14 <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d111      	bne.n	8000c00 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bdc:	2036      	movs	r0, #54	@ 0x36
 8000bde:	f001 fe53 	bl	8002888 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d808      	bhi.n	8000bfa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2036      	movs	r0, #54	@ 0x36
 8000bee:	f001 fe31 	bl	8002854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <HAL_InitTick+0xd4>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e002      	b.n	8000c00 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3730      	adds	r7, #48	@ 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	20000188 	.word	0x20000188
 8000c18:	40001000 	.word	0x40001000
 8000c1c:	20000088 	.word	0x20000088

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <USART2_IRQHandler+0x10>)
 8000c86:	f005 f817 	bl	8005cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000026c 	.word	0x2000026c

08000c94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <USART3_IRQHandler+0x10>)
 8000c9a:	f005 f80d 	bl	8005cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000300 	.word	0x20000300

08000ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000cac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cb0:	f002 f852 	bl	8002d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM6_DAC_IRQHandler+0x10>)
 8000cbe:	f003 fb15 	bl	80042ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000188 	.word	0x20000188

08000ccc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	@ (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b09c      	sub	sp, #112	@ 0x70
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2234      	movs	r2, #52	@ 0x34
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f006 ffe4 	bl	8007cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d30:	4b54      	ldr	r3, [pc, #336]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d32:	4a55      	ldr	r2, [pc, #340]	@ (8000e88 <MX_TIM1_Init+0x198>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7-1;
 8000d36:	4b53      	ldr	r3, [pc, #332]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d38:	2206      	movs	r2, #6
 8000d3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d3c:	4b51      	ldr	r3, [pc, #324]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d3e:	2220      	movs	r2, #32
 8000d40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000d42:	4b50      	ldr	r3, [pc, #320]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d44:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000d48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d50:	4b4c      	ldr	r3, [pc, #304]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d56:	4b4b      	ldr	r3, [pc, #300]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5c:	4849      	ldr	r0, [pc, #292]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d5e:	f003 f881 	bl	8003e64 <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d68:	f7ff fec4 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d76:	4619      	mov	r1, r3
 8000d78:	4842      	ldr	r0, [pc, #264]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d7a:	f003 fd1b 	bl	80047b4 <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d84:	f7ff feb6 	bl	8000af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d88:	483e      	ldr	r0, [pc, #248]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000d8a:	f003 f93b 	bl	8004004 <HAL_TIM_PWM_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d94:	f7ff feae 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000da8:	4619      	mov	r1, r3
 8000daa:	4836      	ldr	r0, [pc, #216]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000dac:	f004 fcc4 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000db6:	f7ff fe9d 	bl	8000af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dba:	2360      	movs	r3, #96	@ 0x60
 8000dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 614;
 8000dbe:	f240 2366 	movw	r3, #614	@ 0x266
 8000dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4828      	ldr	r0, [pc, #160]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000de2:	f003 fbd3 	bl	800458c <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000dec:	f7ff fe82 	bl	8000af4 <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 8000df0:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 8000df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4821      	ldr	r0, [pc, #132]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000e00:	f003 fbc4 	bl	800458c <HAL_TIM_PWM_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000e0a:	f7ff fe73 	bl	8000af4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e16:	2208      	movs	r2, #8
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481a      	ldr	r0, [pc, #104]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000e1c:	f003 fbb6 	bl	800458c <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000e26:	f7ff fe65 	bl	8000af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 13;
 8000e36:	230d      	movs	r3, #13
 8000e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000e68:	f004 fcfc 	bl	8005864 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8000e72:	f7ff fe3f 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e76:	4803      	ldr	r0, [pc, #12]	@ (8000e84 <MX_TIM1_Init+0x194>)
 8000e78:	f000 f8d6 	bl	8001028 <HAL_TIM_MspPostInit>

}
 8000e7c:	bf00      	nop
 8000e7e:	3770      	adds	r7, #112	@ 0x70
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200001d4 	.word	0x200001d4
 8000e88:	40012c00 	.word	0x40012c00

08000e8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000eac:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <MX_TIM3_Init+0x94>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ec2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000ee8:	f004 fab5 	bl	8005456 <HAL_TIMEx_HallSensor_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000ef2:	f7ff fdff 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000ef6:	2350      	movs	r3, #80	@ 0x50
 8000ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <MX_TIM3_Init+0x90>)
 8000f04:	f004 fc18 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f0e:	f7ff fdf1 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000220 	.word	0x20000220
 8000f20:	40000400 	.word	0x40000400

08000f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_TIM_Base_MspInit+0x38>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10b      	bne.n	8000f4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_TIM_Base_MspInit+0x3c>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3a:	4a09      	ldr	r2, [pc, #36]	@ (8000f60 <HAL_TIM_Base_MspInit+0x3c>)
 8000f3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <HAL_TIM_Base_MspInit+0x3c>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a26      	ldr	r2, [pc, #152]	@ (800101c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d145      	bne.n	8001012 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f86:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f92:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000fce:	2350      	movs	r3, #80	@ 0x50
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f001 fd1a 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ff0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001002:	2302      	movs	r3, #2
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800100e:	f001 fd09 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	@ 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40000400 	.word	0x40000400
 8001020:	40021000 	.word	0x40021000
 8001024:	48000800 	.word	0x48000800

08001028 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a29      	ldr	r2, [pc, #164]	@ (80010ec <HAL_TIM_MspPostInit+0xc4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d14b      	bne.n	80010e2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <HAL_TIM_MspPostInit+0xc8>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	4a28      	ldr	r2, [pc, #160]	@ (80010f0 <HAL_TIM_MspPostInit+0xc8>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <HAL_TIM_MspPostInit+0xc8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <HAL_TIM_MspPostInit+0xc8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a22      	ldr	r2, [pc, #136]	@ (80010f0 <HAL_TIM_MspPostInit+0xc8>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <HAL_TIM_MspPostInit+0xc8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800107a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800108c:	2306      	movs	r3, #6
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4817      	ldr	r0, [pc, #92]	@ (80010f4 <HAL_TIM_MspPostInit+0xcc>)
 8001098:	f001 fcc4 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800109c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80010ae:	2304      	movs	r3, #4
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <HAL_TIM_MspPostInit+0xcc>)
 80010ba:	f001 fcb3 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80010be:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010d0:	2306      	movs	r3, #6
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f001 fca1 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400

080010f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 80010fe:	4a23      	ldr	r2, [pc, #140]	@ (800118c <MX_USART2_UART_Init+0x94>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001140:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001142:	f004 fc8e 	bl	8005a62 <HAL_UART_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800114c:	f7ff fcd2 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001150:	2100      	movs	r1, #0
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001154:	f006 fd05 	bl	8007b62 <HAL_UARTEx_SetTxFifoThreshold>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800115e:	f7ff fcc9 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001166:	f006 fd3a 	bl	8007bde <HAL_UARTEx_SetRxFifoThreshold>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001170:	f7ff fcc0 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_USART2_UART_Init+0x90>)
 8001176:	f006 fcbb 	bl	8007af0 <HAL_UARTEx_DisableFifoMode>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001180:	f7ff fcb8 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000026c 	.word	0x2000026c
 800118c:	40004400 	.word	0x40004400

08001190 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 8001196:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <MX_USART3_UART_Init+0x94>)
 8001198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d8:	4811      	ldr	r0, [pc, #68]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011da:	f004 fc42 	bl	8005a62 <HAL_UART_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011e4:	f7ff fc86 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011ec:	f006 fcb9 	bl	8007b62 <HAL_UARTEx_SetTxFifoThreshold>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011f6:	f7ff fc7d 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4808      	ldr	r0, [pc, #32]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 80011fe:	f006 fcee 	bl	8007bde <HAL_UARTEx_SetRxFifoThreshold>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001208:	f7ff fc74 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_USART3_UART_Init+0x90>)
 800120e:	f006 fc6f 	bl	8007af0 <HAL_UARTEx_DisableFifoMode>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001218:	f7ff fc6c 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000300 	.word	0x20000300
 8001224:	40004800 	.word	0x40004800

08001228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0a0      	sub	sp, #128	@ 0x80
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	2254      	movs	r2, #84	@ 0x54
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f006 fd55 	bl	8007cf8 <memset>
  if(uartHandle->Instance==USART2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a45      	ldr	r2, [pc, #276]	@ (8001368 <HAL_UART_MspInit+0x140>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d13f      	bne.n	80012d8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f002 fbaf 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001270:	f7ff fc40 	bl	8000af4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001274:	4b3d      	ldr	r3, [pc, #244]	@ (800136c <HAL_UART_MspInit+0x144>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	4a3c      	ldr	r2, [pc, #240]	@ (800136c <HAL_UART_MspInit+0x144>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001280:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <HAL_UART_MspInit+0x144>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HAL_UART_MspInit+0x144>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	4a36      	ldr	r2, [pc, #216]	@ (800136c <HAL_UART_MspInit+0x144>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001298:	4b34      	ldr	r3, [pc, #208]	@ (800136c <HAL_UART_MspInit+0x144>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a4:	230c      	movs	r3, #12
 80012a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b4:	2307      	movs	r3, #7
 80012b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c2:	f001 fbaf 	bl	8002a24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2026      	movs	r0, #38	@ 0x26
 80012cc:	f001 fac2 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d0:	2026      	movs	r0, #38	@ 0x26
 80012d2:	f001 fad9 	bl	8002888 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012d6:	e043      	b.n	8001360 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a24      	ldr	r2, [pc, #144]	@ (8001370 <HAL_UART_MspInit+0x148>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d13e      	bne.n	8001360 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e2:	2304      	movs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fb6a 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80012fa:	f7ff fbfb 	bl	8000af4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fe:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_UART_MspInit+0x144>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	4a1a      	ldr	r2, [pc, #104]	@ (800136c <HAL_UART_MspInit+0x144>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001308:	6593      	str	r3, [r2, #88]	@ 0x58
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_UART_MspInit+0x144>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_UART_MspInit+0x144>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a14      	ldr	r2, [pc, #80]	@ (800136c <HAL_UART_MspInit+0x144>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_UART_MspInit+0x144>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800132e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001332:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001340:	2307      	movs	r3, #7
 8001342:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001348:	4619      	mov	r1, r3
 800134a:	480a      	ldr	r0, [pc, #40]	@ (8001374 <HAL_UART_MspInit+0x14c>)
 800134c:	f001 fb6a 	bl	8002a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2027      	movs	r0, #39	@ 0x27
 8001356:	f001 fa7d 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800135a:	2027      	movs	r0, #39	@ 0x27
 800135c:	f001 fa94 	bl	8002888 <HAL_NVIC_EnableIRQ>
}
 8001360:	bf00      	nop
 8001362:	3780      	adds	r7, #128	@ 0x80
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40004400 	.word	0x40004400
 800136c:	40021000 	.word	0x40021000
 8001370:	40004800 	.word	0x40004800
 8001374:	48000800 	.word	0x48000800

08001378 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

	memset(argv, (int)NULL, MAX_ARGS*sizeof(char*));
 800137c:	2224      	movs	r2, #36	@ 0x24
 800137e:	2100      	movs	r1, #0
 8001380:	4816      	ldr	r0, [pc, #88]	@ (80013dc <Shell_Init+0x64>)
 8001382:	f006 fcb9 	bl	8007cf8 <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001386:	2240      	movs	r2, #64	@ 0x40
 8001388:	2100      	movs	r1, #0
 800138a:	4815      	ldr	r0, [pc, #84]	@ (80013e0 <Shell_Init+0x68>)
 800138c:	f006 fcb4 	bl	8007cf8 <memset>
	memset(uartRxBuffer, (int)NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <Shell_Init+0x6c>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, (int)NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001396:	2240      	movs	r2, #64	@ 0x40
 8001398:	2100      	movs	r1, #0
 800139a:	4813      	ldr	r0, [pc, #76]	@ (80013e8 <Shell_Init+0x70>)
 800139c:	f006 fcac 	bl	8007cf8 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80013a0:	2201      	movs	r2, #1
 80013a2:	4910      	ldr	r1, [pc, #64]	@ (80013e4 <Shell_Init+0x6c>)
 80013a4:	4811      	ldr	r0, [pc, #68]	@ (80013ec <Shell_Init+0x74>)
 80013a6:	f004 fc3b 	bl	8005c20 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80013aa:	4811      	ldr	r0, [pc, #68]	@ (80013f0 <Shell_Init+0x78>)
 80013ac:	f7fe ff34 	bl	8000218 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	490d      	ldr	r1, [pc, #52]	@ (80013f0 <Shell_Init+0x78>)
 80013ba:	480c      	ldr	r0, [pc, #48]	@ (80013ec <Shell_Init+0x74>)
 80013bc:	f004 fba1 	bl	8005b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <Shell_Init+0x7c>)
 80013c2:	f7fe ff29 	bl	8000218 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <Shell_Init+0x7c>)
 80013d0:	4806      	ldr	r0, [pc, #24]	@ (80013ec <Shell_Init+0x74>)
 80013d2:	f004 fb96 	bl	8005b02 <HAL_UART_Transmit>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000041c 	.word	0x2000041c
 80013e0:	200003dc 	.word	0x200003dc
 80013e4:	20000398 	.word	0x20000398
 80013e8:	2000039c 	.word	0x2000039c
 80013ec:	2000026c 	.word	0x2000026c
 80013f0:	20000020 	.word	0x20000020
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
		newCmdReady = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <HAL_UART_RxCpltCallback+0x20>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001406:	2201      	movs	r2, #1
 8001408:	4904      	ldr	r1, [pc, #16]	@ (800141c <HAL_UART_RxCpltCallback+0x24>)
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <HAL_UART_RxCpltCallback+0x28>)
 800140c:	f004 fc08 	bl	8005c20 <HAL_UART_Receive_IT>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000394 	.word	0x20000394
 800141c:	20000398 	.word	0x20000398
 8001420:	2000026c 	.word	0x2000026c

08001424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001424:	480d      	ldr	r0, [pc, #52]	@ (800145c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001426:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001428:	f7ff fc50 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	@ (8001464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	@ (8001470 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f006 fc59 	bl	8007d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001456:	f7ff fac7 	bl	80009e8 <main>

0800145a <LoopForever>:

LoopForever:
    b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
  ldr   r0, =_estack
 800145c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001468:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 800146c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001470:	20000444 	.word	0x20000444

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>

08001476 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f001 f9dc 	bl	800283e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001486:	200f      	movs	r0, #15
 8001488:	f7ff fb5e 	bl	8000b48 <HAL_InitTick>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	e001      	b.n	800149c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001498:	f7ff fb32 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800149c:	79fb      	ldrb	r3, [r7, #7]

}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_IncTick+0x1c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_IncTick+0x20>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a03      	ldr	r2, [pc, #12]	@ (80014c4 <HAL_IncTick+0x1c>)
 80014b8:	6013      	str	r3, [r2, #0]
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	20000440 	.word	0x20000440
 80014c8:	2000008c 	.word	0x2000008c

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000440 	.word	0x20000440

080014e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3360      	adds	r3, #96	@ 0x60
 800155e:	461a      	mov	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <LL_ADC_SetOffset+0x44>)
 800156e:	4013      	ands	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	4313      	orrs	r3, r2
 800157c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	03fff000 	.word	0x03fff000

08001594 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3360      	adds	r3, #96	@ 0x60
 80015a2:	461a      	mov	r2, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3360      	adds	r3, #96	@ 0x60
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3360      	adds	r3, #96	@ 0x60
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	431a      	orrs	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001620:	bf00      	nop
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3360      	adds	r3, #96	@ 0x60
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	615a      	str	r2, [r3, #20]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3330      	adds	r3, #48	@ 0x30
 8001698:	461a      	mov	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	211f      	movs	r1, #31
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	0e9b      	lsrs	r3, r3, #26
 80016c0:	f003 011f 	and.w	r1, r3, #31
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 031f 	and.w	r3, r3, #31
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	431a      	orrs	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3314      	adds	r3, #20
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	0e5b      	lsrs	r3, r3, #25
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	0d1b      	lsrs	r3, r3, #20
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	2107      	movs	r1, #7
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	0d1b      	lsrs	r3, r3, #20
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	431a      	orrs	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0318 	and.w	r3, r3, #24
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <LL_ADC_SetChannelSingleDiff+0x44>)
 800175c:	40d9      	lsrs	r1, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	400b      	ands	r3, r1
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	431a      	orrs	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	0007ffff 	.word	0x0007ffff

08001780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6093      	str	r3, [r2, #8]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017b8:	d101      	bne.n	80017be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001808:	d101      	bne.n	800180e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <LL_ADC_IsEnabled+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_ADC_IsEnabled+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b04      	cmp	r3, #4
 8001854:	d101      	bne.n	800185a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b08      	cmp	r3, #8
 800187a:	d101      	bne.n	8001880 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1a9      	b.n	8001bfe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7fe ff0b 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff67 	bl	80017a4 <LL_ADC_IsDeepPowerDownEnabled>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff4d 	bl	8001780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff82 	bl	80017f4 <LL_ADC_IsInternalRegulatorEnabled>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d115      	bne.n	8001922 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff66 	bl	80017cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001900:	4b9c      	ldr	r3, [pc, #624]	@ (8001b74 <HAL_ADC_Init+0x2e4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	4a9c      	ldr	r2, [pc, #624]	@ (8001b78 <HAL_ADC_Init+0x2e8>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	3301      	adds	r3, #1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001914:	e002      	b.n	800191c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3b01      	subs	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff64 	bl	80017f4 <LL_ADC_IsInternalRegulatorEnabled>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff75 	bl	8001842 <LL_ADC_REG_IsConversionOngoing>
 8001958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 8142 	bne.w	8001bec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 813e 	bne.w	8001bec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001974:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001978:	f043 0202 	orr.w	r2, r3, #2
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff49 	bl	800181c <LL_ADC_IsEnabled>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d141      	bne.n	8001a14 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_Init+0x114>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a77      	ldr	r2, [pc, #476]	@ (8001b7c <HAL_ADC_Init+0x2ec>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d10f      	bne.n	80019c4 <HAL_ADC_Init+0x134>
 80019a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80019a8:	f7ff ff38 	bl	800181c <LL_ADC_IsEnabled>
 80019ac:	4604      	mov	r4, r0
 80019ae:	4873      	ldr	r0, [pc, #460]	@ (8001b7c <HAL_ADC_Init+0x2ec>)
 80019b0:	f7ff ff34 	bl	800181c <LL_ADC_IsEnabled>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4323      	orrs	r3, r4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e012      	b.n	80019ea <HAL_ADC_Init+0x15a>
 80019c4:	486e      	ldr	r0, [pc, #440]	@ (8001b80 <HAL_ADC_Init+0x2f0>)
 80019c6:	f7ff ff29 	bl	800181c <LL_ADC_IsEnabled>
 80019ca:	4604      	mov	r4, r0
 80019cc:	486d      	ldr	r0, [pc, #436]	@ (8001b84 <HAL_ADC_Init+0x2f4>)
 80019ce:	f7ff ff25 	bl	800181c <LL_ADC_IsEnabled>
 80019d2:	4603      	mov	r3, r0
 80019d4:	431c      	orrs	r4, r3
 80019d6:	486c      	ldr	r0, [pc, #432]	@ (8001b88 <HAL_ADC_Init+0x2f8>)
 80019d8:	f7ff ff20 	bl	800181c <LL_ADC_IsEnabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	4323      	orrs	r3, r4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d012      	beq.n	8001a14 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019f6:	d004      	beq.n	8001a02 <HAL_ADC_Init+0x172>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5f      	ldr	r2, [pc, #380]	@ (8001b7c <HAL_ADC_Init+0x2ec>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_Init+0x176>
 8001a02:	4a62      	ldr	r2, [pc, #392]	@ (8001b8c <HAL_ADC_Init+0x2fc>)
 8001a04:	e000      	b.n	8001a08 <HAL_ADC_Init+0x178>
 8001a06:	4a62      	ldr	r2, [pc, #392]	@ (8001b90 <HAL_ADC_Init+0x300>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f7ff fd68 	bl	80014e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7f5b      	ldrb	r3, [r3, #29]
 8001a18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a46:	3b01      	subs	r3, #1
 8001a48:	045b      	lsls	r3, r3, #17
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	4b48      	ldr	r3, [pc, #288]	@ (8001b94 <HAL_ADC_Init+0x304>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	69b9      	ldr	r1, [r7, #24]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fee4 	bl	8001868 <LL_ADC_INJ_IsConversionOngoing>
 8001aa0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d17f      	bne.n	8001ba8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d17c      	bne.n	8001ba8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ab2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001aba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001aca:	f023 0302 	bic.w	r3, r3, #2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d017      	beq.n	8001b10 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001aee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001af8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6911      	ldr	r1, [r2, #16]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b0e:	e013      	b.n	8001b38 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d12a      	bne.n	8001b98 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b64:	430a      	orrs	r2, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	e019      	b.n	8001ba8 <HAL_ADC_Init+0x318>
 8001b74:	20000000 	.word	0x20000000
 8001b78:	053e2d63 	.word	0x053e2d63
 8001b7c:	50000100 	.word	0x50000100
 8001b80:	50000400 	.word	0x50000400
 8001b84:	50000500 	.word	0x50000500
 8001b88:	50000600 	.word	0x50000600
 8001b8c:	50000300 	.word	0x50000300
 8001b90:	50000700 	.word	0x50000700
 8001b94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10c      	bne.n	8001bca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f023 010f 	bic.w	r1, r3, #15
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	1e5a      	subs	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc8:	e007      	b.n	8001bda <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 020f 	bic.w	r2, r2, #15
 8001bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bea:	e007      	b.n	8001bfc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	f043 0210 	orr.w	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	bf00      	nop

08001c08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0b6      	sub	sp, #216	@ 0xd8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x24>
 8001c26:	2302      	movs	r3, #2
 8001c28:	f000 bc13 	b.w	8002452 <HAL_ADC_ConfigChannel+0x84a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fe02 	bl	8001842 <LL_ADC_REG_IsConversionOngoing>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 83f3 	bne.w	800242c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f7ff fd18 	bl	8001688 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fdf0 	bl	8001842 <LL_ADC_REG_IsConversionOngoing>
 8001c62:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fdfc 	bl	8001868 <LL_ADC_INJ_IsConversionOngoing>
 8001c70:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 81d9 	bne.w	8002030 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 81d4 	bne.w	8002030 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c90:	d10f      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7ff fd1f 	bl	80016e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fcd9 	bl	8001662 <LL_ADC_SetSamplingTimeCommonConfig>
 8001cb0:	e00e      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f7ff fd0e 	bl	80016e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fcc9 	bl	8001662 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d022      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d02:	f7ff fc23 	bl	800154c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f7ff fc6f 	bl	80015f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x126>
 8001d28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d2c:	e000      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x128>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	461a      	mov	r2, r3
 8001d32:	f7ff fc7b 	bl	800162c <LL_ADC_SetOffsetSaturation>
 8001d36:	e17b      	b.n	8002030 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fc28 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x15c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fc1d 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	e01e      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x19a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fc12 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e004      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x1b2>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	e018      	b.n	8001dec <HAL_ADC_ConfigChannel+0x1e4>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e004      	b.n	8001dec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fbe1 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2101      	movs	r1, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fbc5 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x222>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fbba 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	e01e      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x260>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fbaf 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e004      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x278>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	e018      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x2aa>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	e004      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fb7e 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fb62 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x2e8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2102      	movs	r1, #2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fb57 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	f003 021f 	and.w	r2, r3, #31
 8001eee:	e01e      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x326>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fb4c 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e004      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x33e>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	e016      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x36c>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f66:	2320      	movs	r3, #32
 8001f68:	e004      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fb1d 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fb01 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x3aa>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2103      	movs	r1, #3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff faf6 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	e017      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x3da>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff faeb 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e003      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x3f2>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	e011      	b.n	800201e <HAL_ADC_ConfigChannel+0x416>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800200a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800200c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e003      	b.n	800201e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800201e:	429a      	cmp	r2, r3
 8002020:	d106      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	2103      	movs	r1, #3
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fac8 	bl	80015c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fbf1 	bl	800181c <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 813d 	bne.w	80022bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	461a      	mov	r2, r3
 8002050:	f7ff fb72 	bl	8001738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4aa2      	ldr	r2, [pc, #648]	@ (80022e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f040 812e 	bne.w	80022bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10b      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x480>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	3301      	adds	r3, #1
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2b09      	cmp	r3, #9
 800207e:	bf94      	ite	ls
 8002080:	2301      	movls	r3, #1
 8002082:	2300      	movhi	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e019      	b.n	80020bc <HAL_ADC_ConfigChannel+0x4b4>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002098:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800209a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80020a0:	2320      	movs	r3, #32
 80020a2:	e003      	b.n	80020ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80020a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2b09      	cmp	r3, #9
 80020b4:	bf94      	ite	ls
 80020b6:	2301      	movls	r3, #1
 80020b8:	2300      	movhi	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d079      	beq.n	80021b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x4d4>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	3301      	adds	r3, #1
 80020d4:	069b      	lsls	r3, r3, #26
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020da:	e015      	b.n	8002108 <HAL_ADC_ConfigChannel+0x500>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80020ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e003      	b.n	8002100 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x520>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	3301      	adds	r3, #1
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	e017      	b.n	8002158 <HAL_ADC_ConfigChannel+0x550>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002138:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800213a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e003      	b.n	800214c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	ea42 0103 	orr.w	r1, r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <HAL_ADC_ConfigChannel+0x576>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	3301      	adds	r3, #1
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	051b      	lsls	r3, r3, #20
 800217c:	e018      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x5a8>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800218c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e003      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800219a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b0:	430b      	orrs	r3, r1
 80021b2:	e07e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x5c8>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	3301      	adds	r3, #1
 80021c8:	069b      	lsls	r3, r3, #26
 80021ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ce:	e015      	b.n	80021fc <HAL_ADC_ConfigChannel+0x5f4>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80021de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e003      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80021ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_ADC_ConfigChannel+0x614>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	3301      	adds	r3, #1
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	e017      	b.n	800224c <HAL_ADC_ConfigChannel+0x644>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	61fb      	str	r3, [r7, #28]
  return result;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002234:	2320      	movs	r3, #32
 8002236:	e003      	b.n	8002240 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	ea42 0103 	orr.w	r1, r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10d      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x670>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	3301      	adds	r3, #1
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	3b1e      	subs	r3, #30
 8002270:	051b      	lsls	r3, r3, #20
 8002272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002276:	e01b      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x6a8>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	613b      	str	r3, [r7, #16]
  return result;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e003      	b.n	800229c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f003 021f 	and.w	r2, r3, #31
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	3b1e      	subs	r3, #30
 80022aa:	051b      	lsls	r3, r3, #20
 80022ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7ff fa12 	bl	80016e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80be 	beq.w	8002446 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022d2:	d004      	beq.n	80022de <HAL_ADC_ConfigChannel+0x6d6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <HAL_ADC_ConfigChannel+0x6e4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10a      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x6ec>
 80022de:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80022e0:	e009      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x6ee>
 80022e2:	bf00      	nop
 80022e4:	407f0000 	.word	0x407f0000
 80022e8:	80080000 	.word	0x80080000
 80022ec:	50000100 	.word	0x50000100
 80022f0:	50000300 	.word	0x50000300
 80022f4:	4b59      	ldr	r3, [pc, #356]	@ (800245c <HAL_ADC_ConfigChannel+0x854>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f91a 	bl	8001530 <LL_ADC_GetCommonPathInternalCh>
 80022fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a56      	ldr	r2, [pc, #344]	@ (8002460 <HAL_ADC_ConfigChannel+0x858>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x70c>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a55      	ldr	r2, [pc, #340]	@ (8002464 <HAL_ADC_ConfigChannel+0x85c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d13a      	bne.n	800238a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d134      	bne.n	800238a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002328:	d005      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x72e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4e      	ldr	r2, [pc, #312]	@ (8002468 <HAL_ADC_ConfigChannel+0x860>)
 8002330:	4293      	cmp	r3, r2
 8002332:	f040 8085 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800233e:	d004      	beq.n	800234a <HAL_ADC_ConfigChannel+0x742>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a49      	ldr	r2, [pc, #292]	@ (800246c <HAL_ADC_ConfigChannel+0x864>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_ADC_ConfigChannel+0x746>
 800234a:	4a49      	ldr	r2, [pc, #292]	@ (8002470 <HAL_ADC_ConfigChannel+0x868>)
 800234c:	e000      	b.n	8002350 <HAL_ADC_ConfigChannel+0x748>
 800234e:	4a43      	ldr	r2, [pc, #268]	@ (800245c <HAL_ADC_ConfigChannel+0x854>)
 8002350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002354:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f7ff f8d5 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002360:	4b44      	ldr	r3, [pc, #272]	@ (8002474 <HAL_ADC_ConfigChannel+0x86c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	4a44      	ldr	r2, [pc, #272]	@ (8002478 <HAL_ADC_ConfigChannel+0x870>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800237a:	e002      	b.n	8002382 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3b01      	subs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002388:	e05a      	b.n	8002440 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a3b      	ldr	r2, [pc, #236]	@ (800247c <HAL_ADC_ConfigChannel+0x874>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d125      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11f      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a31      	ldr	r2, [pc, #196]	@ (800246c <HAL_ADC_ConfigChannel+0x864>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d104      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x7ac>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a34      	ldr	r2, [pc, #208]	@ (8002480 <HAL_ADC_ConfigChannel+0x878>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d047      	beq.n	8002444 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0x7c0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2a      	ldr	r2, [pc, #168]	@ (800246c <HAL_ADC_ConfigChannel+0x864>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x7c4>
 80023c8:	4a29      	ldr	r2, [pc, #164]	@ (8002470 <HAL_ADC_ConfigChannel+0x868>)
 80023ca:	e000      	b.n	80023ce <HAL_ADC_ConfigChannel+0x7c6>
 80023cc:	4a23      	ldr	r2, [pc, #140]	@ (800245c <HAL_ADC_ConfigChannel+0x854>)
 80023ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f7ff f896 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023de:	e031      	b.n	8002444 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a27      	ldr	r2, [pc, #156]	@ (8002484 <HAL_ADC_ConfigChannel+0x87c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d12d      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d127      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <HAL_ADC_ConfigChannel+0x864>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d022      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002408:	d004      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x80c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <HAL_ADC_ConfigChannel+0x864>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x810>
 8002414:	4a16      	ldr	r2, [pc, #88]	@ (8002470 <HAL_ADC_ConfigChannel+0x868>)
 8002416:	e000      	b.n	800241a <HAL_ADC_ConfigChannel+0x812>
 8002418:	4a10      	ldr	r2, [pc, #64]	@ (800245c <HAL_ADC_ConfigChannel+0x854>)
 800241a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800241e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7ff f870 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
 800242a:	e00c      	b.n	8002446 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800243e:	e002      	b.n	8002446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800244e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002452:	4618      	mov	r0, r3
 8002454:	37d8      	adds	r7, #216	@ 0xd8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	50000700 	.word	0x50000700
 8002460:	c3210000 	.word	0xc3210000
 8002464:	90c00010 	.word	0x90c00010
 8002468:	50000600 	.word	0x50000600
 800246c:	50000100 	.word	0x50000100
 8002470:	50000300 	.word	0x50000300
 8002474:	20000000 	.word	0x20000000
 8002478:	053e2d63 	.word	0x053e2d63
 800247c:	c7520000 	.word	0xc7520000
 8002480:	50000500 	.word	0x50000500
 8002484:	cb840000 	.word	0xcb840000

08002488 <LL_ADC_IsEnabled>:
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_ADC_IsEnabled+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_ADC_IsEnabled+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_REG_IsConversionOngoing>:
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b0a1      	sub	sp, #132	@ 0x84
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0e7      	b.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024fa:	2300      	movs	r3, #0
 80024fc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024fe:	2300      	movs	r3, #0
 8002500:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800250a:	d102      	bne.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800250c:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	e009      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6e      	ldr	r2, [pc, #440]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d102      	bne.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800251c:	4b6d      	ldr	r3, [pc, #436]	@ (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	e001      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10b      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0be      	b.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ffb1 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 800254c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ffab 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80a0 	bne.w	80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 809c 	bne.w	80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002570:	d004      	beq.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a55      	ldr	r2, [pc, #340]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800257c:	4b56      	ldr	r3, [pc, #344]	@ (80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800257e:	e000      	b.n	8002582 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002580:	4b56      	ldr	r3, [pc, #344]	@ (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002582:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d04b      	beq.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800258c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800259e:	035b      	lsls	r3, r3, #13
 80025a0:	430b      	orrs	r3, r1
 80025a2:	431a      	orrs	r2, r3
 80025a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b0:	d004      	beq.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a45      	ldr	r2, [pc, #276]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10f      	bne.n	80025dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80025bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025c0:	f7ff ff62 	bl	8002488 <LL_ADC_IsEnabled>
 80025c4:	4604      	mov	r4, r0
 80025c6:	4841      	ldr	r0, [pc, #260]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025c8:	f7ff ff5e 	bl	8002488 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4323      	orrs	r3, r4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e012      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80025dc:	483c      	ldr	r0, [pc, #240]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025de:	f7ff ff53 	bl	8002488 <LL_ADC_IsEnabled>
 80025e2:	4604      	mov	r4, r0
 80025e4:	483b      	ldr	r0, [pc, #236]	@ (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025e6:	f7ff ff4f 	bl	8002488 <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	431c      	orrs	r4, r3
 80025ee:	483c      	ldr	r0, [pc, #240]	@ (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80025f0:	f7ff ff4a 	bl	8002488 <LL_ADC_IsEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4323      	orrs	r3, r4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d056      	beq.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800260e:	f023 030f 	bic.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	6811      	ldr	r1, [r2, #0]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	6892      	ldr	r2, [r2, #8]
 800261a:	430a      	orrs	r2, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002620:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002622:	e047      	b.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800262c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800262e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002638:	d004      	beq.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a23      	ldr	r2, [pc, #140]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d10f      	bne.n	8002664 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002644:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002648:	f7ff ff1e 	bl	8002488 <LL_ADC_IsEnabled>
 800264c:	4604      	mov	r4, r0
 800264e:	481f      	ldr	r0, [pc, #124]	@ (80026cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002650:	f7ff ff1a 	bl	8002488 <LL_ADC_IsEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	4323      	orrs	r3, r4
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e012      	b.n	800268a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002664:	481a      	ldr	r0, [pc, #104]	@ (80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002666:	f7ff ff0f 	bl	8002488 <LL_ADC_IsEnabled>
 800266a:	4604      	mov	r4, r0
 800266c:	4819      	ldr	r0, [pc, #100]	@ (80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800266e:	f7ff ff0b 	bl	8002488 <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	431c      	orrs	r4, r3
 8002676:	481a      	ldr	r0, [pc, #104]	@ (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002678:	f7ff ff06 	bl	8002488 <LL_ADC_IsEnabled>
 800267c:	4603      	mov	r3, r0
 800267e:	4323      	orrs	r3, r4
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800268e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002696:	f023 030f 	bic.w	r3, r3, #15
 800269a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800269c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800269e:	e009      	b.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026b2:	e000      	b.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3784      	adds	r7, #132	@ 0x84
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	50000100 	.word	0x50000100
 80026d0:	50000400 	.word	0x50000400
 80026d4:	50000500 	.word	0x50000500
 80026d8:	50000300 	.word	0x50000300
 80026dc:	50000700 	.word	0x50000700
 80026e0:	50000600 	.word	0x50000600

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	@ (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	@ (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	@ (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	@ 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	@ 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff4c 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002862:	f7ff ff63 	bl	800272c <__NVIC_GetPriorityGrouping>
 8002866:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f7ff ffb3 	bl	80027d8 <NVIC_EncodePriority>
 8002872:	4602      	mov	r2, r0
 8002874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff82 	bl	8002784 <__NVIC_SetPriority>
}
 8002880:	bf00      	nop
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff56 	bl	8002748 <__NVIC_EnableIRQ>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d005      	beq.n	80028c8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2204      	movs	r2, #4
 80028c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e037      	b.n	8002938 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020e 	bic.w	r2, r2, #14
 80028d6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002914:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00c      	beq.n	8002938 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800292c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002936:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d00d      	beq.n	800298a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e047      	b.n	8002a1a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 020e 	bic.w	r2, r2, #14
 8002998:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00c      	beq.n	80029fa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
    }
  }
  return status;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a32:	e15a      	b.n	8002cea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 814c 	beq.w	8002ce4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d005      	beq.n	8002a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d130      	bne.n	8002ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 0201 	and.w	r2, r3, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d017      	beq.n	8002b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d123      	bne.n	8002b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80a6 	beq.w	8002ce4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b98:	4b5b      	ldr	r3, [pc, #364]	@ (8002d08 <HAL_GPIO_Init+0x2e4>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002d08 <HAL_GPIO_Init+0x2e4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ba4:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <HAL_GPIO_Init+0x2e4>)
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb0:	4a56      	ldr	r2, [pc, #344]	@ (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bda:	d01f      	beq.n	8002c1c <HAL_GPIO_Init+0x1f8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a4c      	ldr	r2, [pc, #304]	@ (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d019      	beq.n	8002c18 <HAL_GPIO_Init+0x1f4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a4b      	ldr	r2, [pc, #300]	@ (8002d14 <HAL_GPIO_Init+0x2f0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1f0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a4a      	ldr	r2, [pc, #296]	@ (8002d18 <HAL_GPIO_Init+0x2f4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1ec>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a49      	ldr	r2, [pc, #292]	@ (8002d1c <HAL_GPIO_Init+0x2f8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1e8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a48      	ldr	r2, [pc, #288]	@ (8002d20 <HAL_GPIO_Init+0x2fc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1e4>
 8002c04:	2305      	movs	r3, #5
 8002c06:	e00a      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c08:	2306      	movs	r3, #6
 8002c0a:	e008      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e004      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	f002 0203 	and.w	r2, r2, #3
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	4093      	lsls	r3, r2
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c2e:	4937      	ldr	r1, [pc, #220]	@ (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c3c:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c60:	4a30      	ldr	r2, [pc, #192]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c66:	4b2f      	ldr	r3, [pc, #188]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c8a:	4a26      	ldr	r2, [pc, #152]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c90:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cde:	4a11      	ldr	r2, [pc, #68]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f ae9d 	bne.w	8002a34 <HAL_GPIO_Init+0x10>
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	48000400 	.word	0x48000400
 8002d14:	48000800 	.word	0x48000800
 8002d18:	48000c00 	.word	0x48000c00
 8002d1c:	48001000 	.word	0x48001000
 8002d20:	48001400 	.word	0x48001400
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d6e:	4a05      	ldr	r2, [pc, #20]	@ (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f806 	bl	8002d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40010400 	.word	0x40010400

08002d88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d141      	bne.n	8002e32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dae:	4b4b      	ldr	r3, [pc, #300]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	d131      	bne.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dbc:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dc2:	4a46      	ldr	r2, [pc, #280]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dcc:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dd4:	4a41      	ldr	r2, [pc, #260]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ddc:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2232      	movs	r2, #50	@ 0x32
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	0c9b      	lsrs	r3, r3, #18
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df2:	e002      	b.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dfa:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e06:	d102      	bne.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f2      	bne.n	8002df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e0e:	4b33      	ldr	r3, [pc, #204]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1a:	d158      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e057      	b.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e20:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e26:	4a2d      	ldr	r2, [pc, #180]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e30:	e04d      	b.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e38:	d141      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3a:	4b28      	ldr	r3, [pc, #160]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d131      	bne.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e48:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e4e:	4a23      	ldr	r2, [pc, #140]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e58:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e60:	4a1e      	ldr	r2, [pc, #120]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2232      	movs	r2, #50	@ 0x32
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7e:	e002      	b.n	8002e86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e92:	d102      	bne.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f2      	bne.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea6:	d112      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e011      	b.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ebc:	e007      	b.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ebe:	4b07      	ldr	r3, [pc, #28]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ec6:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ecc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	431bde83 	.word	0x431bde83

08002ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef6:	6093      	str	r3, [r2, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40007000 	.word	0x40007000

08002f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e2fe      	b.n	8003518 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d075      	beq.n	8003012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f26:	4b97      	ldr	r3, [pc, #604]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f30:	4b94      	ldr	r3, [pc, #592]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3e>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_OscConfig+0x44>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d10b      	bne.n	8002f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	4b8d      	ldr	r3, [pc, #564]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d05b      	beq.n	8003010 <HAL_RCC_OscConfig+0x108>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d157      	bne.n	8003010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e2d9      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x74>
 8002f6e:	4b85      	ldr	r3, [pc, #532]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a84      	ldr	r2, [pc, #528]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xb0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x98>
 8002f86:	4b7f      	ldr	r3, [pc, #508]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b7c      	ldr	r3, [pc, #496]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7b      	ldr	r2, [pc, #492]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xb0>
 8002fa0:	4b78      	ldr	r3, [pc, #480]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a77      	ldr	r2, [pc, #476]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b75      	ldr	r3, [pc, #468]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a74      	ldr	r2, [pc, #464]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fa84 	bl	80014cc <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fa80 	bl	80014cc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	@ 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e29e      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fda:	4b6a      	ldr	r3, [pc, #424]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xc0>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fa70 	bl	80014cc <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fa6c 	bl	80014cc <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	@ 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e28a      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003002:	4b60      	ldr	r3, [pc, #384]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0xe8>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d075      	beq.n	800310a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301e:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003028:	4b56      	ldr	r3, [pc, #344]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d102      	bne.n	800303e <HAL_RCC_OscConfig+0x136>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d002      	beq.n	8003044 <HAL_RCC_OscConfig+0x13c>
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d11f      	bne.n	8003084 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003044:	4b4f      	ldr	r3, [pc, #316]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x154>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e25d      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b49      	ldr	r3, [pc, #292]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	4946      	ldr	r1, [pc, #280]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003070:	4b45      	ldr	r3, [pc, #276]	@ (8003188 <HAL_RCC_OscConfig+0x280>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fd67 	bl	8000b48 <HAL_InitTick>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e249      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d023      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b3d      	ldr	r3, [pc, #244]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3c      	ldr	r2, [pc, #240]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fa18 	bl	80014cc <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe fa14 	bl	80014cc <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e232      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b2:	4b34      	ldr	r3, [pc, #208]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b31      	ldr	r3, [pc, #196]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	492d      	ldr	r1, [pc, #180]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
 80030d2:	e01a      	b.n	800310a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f9f4 	bl	80014cc <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe f9f0 	bl	80014cc <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e20e      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fa:	4b22      	ldr	r3, [pc, #136]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1e0>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d041      	beq.n	800319a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01c      	beq.n	8003158 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003124:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fe f9cd 	bl	80014cc <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe f9c9 	bl	80014cc <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1e7      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003148:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <HAL_RCC_OscConfig+0x22e>
 8003156:	e020      	b.n	800319a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315e:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe f9b0 	bl	80014cc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316e:	e00d      	b.n	800318c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe f9ac 	bl	80014cc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d906      	bls.n	800318c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1ca      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	20000088 	.word	0x20000088
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800318c:	4b8c      	ldr	r3, [pc, #560]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ea      	bne.n	8003170 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80a6 	beq.w	80032f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ac:	4b84      	ldr	r3, [pc, #528]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x2b4>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x2b6>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b7f      	ldr	r3, [pc, #508]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	4a7e      	ldr	r2, [pc, #504]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ce:	4b7c      	ldr	r3, [pc, #496]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031da:	2301      	movs	r3, #1
 80031dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031de:	4b79      	ldr	r3, [pc, #484]	@ (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ea:	4b76      	ldr	r3, [pc, #472]	@ (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a75      	ldr	r2, [pc, #468]	@ (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f6:	f7fe f969 	bl	80014cc <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7fe f965 	bl	80014cc <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e183      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	4b6c      	ldr	r3, [pc, #432]	@ (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_RCC_OscConfig+0x32e>
 8003224:	4b66      	ldr	r3, [pc, #408]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	4a65      	ldr	r2, [pc, #404]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003234:	e024      	b.n	8003280 <HAL_RCC_OscConfig+0x378>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d110      	bne.n	8003260 <HAL_RCC_OscConfig+0x358>
 800323e:	4b60      	ldr	r3, [pc, #384]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	4a5e      	ldr	r2, [pc, #376]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800324e:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003254:	4a5a      	ldr	r2, [pc, #360]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800325e:	e00f      	b.n	8003280 <HAL_RCC_OscConfig+0x378>
 8003260:	4b57      	ldr	r3, [pc, #348]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	4a56      	ldr	r2, [pc, #344]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003270:	4b53      	ldr	r3, [pc, #332]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	4a52      	ldr	r2, [pc, #328]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d016      	beq.n	80032b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fe f920 	bl	80014cc <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003290:	f7fe f91c 	bl	80014cc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e138      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	4b46      	ldr	r3, [pc, #280]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ed      	beq.n	8003290 <HAL_RCC_OscConfig+0x388>
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe f909 	bl	80014cc <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe f905 	bl	80014cc <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e121      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d4:	4b3a      	ldr	r3, [pc, #232]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ed      	bne.n	80032be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032e2:	7ffb      	ldrb	r3, [r7, #31]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e8:	4b35      	ldr	r3, [pc, #212]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	4a34      	ldr	r2, [pc, #208]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d03c      	beq.n	800337a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003308:	4b2d      	ldr	r3, [pc, #180]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800330e:	4a2c      	ldr	r2, [pc, #176]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe f8d8 	bl	80014cc <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003320:	f7fe f8d4 	bl	80014cc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0f2      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003332:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ef      	beq.n	8003320 <HAL_RCC_OscConfig+0x418>
 8003340:	e01b      	b.n	800337a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003342:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003348:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003352:	f7fe f8bb 	bl	80014cc <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800335a:	f7fe f8b7 	bl	80014cc <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0d5      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800336c:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800336e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ef      	bne.n	800335a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80c9 	beq.w	8003516 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003384:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b0c      	cmp	r3, #12
 800338e:	f000 8083 	beq.w	8003498 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d15e      	bne.n	8003458 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a08      	ldr	r2, [pc, #32]	@ (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe f891 	bl	80014cc <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ac:	e00c      	b.n	80033c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fe f88d 	bl	80014cc <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d905      	bls.n	80033c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0ab      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c8:	4b55      	ldr	r3, [pc, #340]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ec      	bne.n	80033ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d4:	4b52      	ldr	r3, [pc, #328]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	4b52      	ldr	r3, [pc, #328]	@ (8003524 <HAL_RCC_OscConfig+0x61c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6a11      	ldr	r1, [r2, #32]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033ee:	0212      	lsls	r2, r2, #8
 80033f0:	4311      	orrs	r1, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033f6:	0852      	lsrs	r2, r2, #1
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0552      	lsls	r2, r2, #21
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003402:	0852      	lsrs	r2, r2, #1
 8003404:	3a01      	subs	r2, #1
 8003406:	0652      	lsls	r2, r2, #25
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800340e:	06d2      	lsls	r2, r2, #27
 8003410:	430a      	orrs	r2, r1
 8003412:	4943      	ldr	r1, [pc, #268]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 8003414:	4313      	orrs	r3, r2
 8003416:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b41      	ldr	r3, [pc, #260]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a40      	ldr	r2, [pc, #256]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 800341e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003424:	4b3e      	ldr	r3, [pc, #248]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a3d      	ldr	r2, [pc, #244]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800342e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe f84c 	bl	80014cc <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe f848 	bl	80014cc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e066      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	4b35      	ldr	r3, [pc, #212]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x530>
 8003456:	e05e      	b.n	8003516 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003458:	4b31      	ldr	r3, [pc, #196]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 800345e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe f832 	bl	80014cc <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe f82e 	bl	80014cc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04c      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347e:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800348a:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	4924      	ldr	r1, [pc, #144]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <HAL_RCC_OscConfig+0x620>)
 8003492:	4013      	ands	r3, r2
 8003494:	60cb      	str	r3, [r1, #12]
 8003496:	e03e      	b.n	8003516 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e039      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <HAL_RCC_OscConfig+0x618>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d12c      	bne.n	8003512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	3b01      	subs	r3, #1
 80034c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d123      	bne.n	8003512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d11b      	bne.n	8003512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d113      	bne.n	8003512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	3b01      	subs	r3, #1
 80034f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d109      	bne.n	8003512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	019f800c 	.word	0x019f800c
 8003528:	feeefffc 	.word	0xfeeefffc

0800352c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e11e      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b91      	ldr	r3, [pc, #580]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b8e      	ldr	r3, [pc, #568]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	498c      	ldr	r1, [pc, #560]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b8a      	ldr	r3, [pc, #552]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e106      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d073      	beq.n	8003668 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d129      	bne.n	80035dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003588:	4b81      	ldr	r3, [pc, #516]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0f4      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003598:	f000 f9d0 	bl	800393c <RCC_GetSysClockFreqFromPLLSource>
 800359c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4a7c      	ldr	r2, [pc, #496]	@ (8003794 <HAL_RCC_ClockConfig+0x268>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d93f      	bls.n	8003626 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d033      	beq.n	8003626 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d12f      	bne.n	8003626 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035c6:	4b72      	ldr	r3, [pc, #456]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ce:	4a70      	ldr	r2, [pc, #448]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e024      	b.n	8003626 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0c6      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f4:	4b66      	ldr	r3, [pc, #408]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0be      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003604:	f000 f8ce 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4a61      	ldr	r2, [pc, #388]	@ (8003794 <HAL_RCC_ClockConfig+0x268>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d909      	bls.n	8003626 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003612:	4b5f      	ldr	r3, [pc, #380]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800361a:	4a5d      	ldr	r2, [pc, #372]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 800361c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003620:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b5a      	ldr	r3, [pc, #360]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4957      	ldr	r1, [pc, #348]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd ff48 	bl	80014cc <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fd ff44 	bl	80014cc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e095      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b4e      	ldr	r3, [pc, #312]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b43      	ldr	r3, [pc, #268]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a42      	ldr	r2, [pc, #264]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003686:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800368a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003698:	4b3d      	ldr	r3, [pc, #244]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4936      	ldr	r1, [pc, #216]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
 80036ba:	e008      	b.n	80036ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b80      	cmp	r3, #128	@ 0x80
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036c2:	4b33      	ldr	r3, [pc, #204]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a32      	ldr	r2, [pc, #200]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 80036c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ce:	4b2f      	ldr	r3, [pc, #188]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d21d      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036dc:	4b2b      	ldr	r3, [pc, #172]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 020f 	bic.w	r2, r3, #15
 80036e4:	4929      	ldr	r1, [pc, #164]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036ec:	f7fd feee 	bl	80014cc <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fd feea 	bl	80014cc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e03b      	b.n	8003782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b20      	ldr	r3, [pc, #128]	@ (800378c <HAL_RCC_ClockConfig+0x260>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d1ed      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4917      	ldr	r1, [pc, #92]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490f      	ldr	r1, [pc, #60]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003756:	f000 f825 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <HAL_RCC_ClockConfig+0x264>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490c      	ldr	r1, [pc, #48]	@ (8003798 <HAL_RCC_ClockConfig+0x26c>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	fa22 f303 	lsr.w	r3, r2, r3
 8003772:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <HAL_RCC_ClockConfig+0x270>)
 8003774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <HAL_RCC_ClockConfig+0x274>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd f9e4 	bl	8000b48 <HAL_InitTick>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000
 8003790:	40021000 	.word	0x40021000
 8003794:	04c4b400 	.word	0x04c4b400
 8003798:	08007d68 	.word	0x08007d68
 800379c:	20000000 	.word	0x20000000
 80037a0:	20000088 	.word	0x20000088

080037a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037aa:	4b2c      	ldr	r3, [pc, #176]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d102      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003860 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e047      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c8:	4b26      	ldr	r3, [pc, #152]	@ (8003864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	e03e      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037ce:	4b23      	ldr	r3, [pc, #140]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d136      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037e4:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3301      	adds	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d10c      	bne.n	8003812 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	4a16      	ldr	r2, [pc, #88]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003802:	68d2      	ldr	r2, [r2, #12]
 8003804:	0a12      	lsrs	r2, r2, #8
 8003806:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
      break;
 8003810:	e00c      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003812:	4a13      	ldr	r2, [pc, #76]	@ (8003860 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	4a10      	ldr	r2, [pc, #64]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	0a12      	lsrs	r2, r2, #8
 8003820:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
      break;
 800382a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_GetSysClockFreq+0xb8>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0e5b      	lsrs	r3, r3, #25
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	3301      	adds	r3, #1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e001      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800384c:	693b      	ldr	r3, [r7, #16]
}
 800384e:	4618      	mov	r0, r3
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	00f42400 	.word	0x00f42400
 8003864:	016e3600 	.word	0x016e3600

08003868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_RCC_GetHCLKFreq+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003884:	f7ff fff0 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4904      	ldr	r1, [pc, #16]	@ (80038a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	08007d78 	.word	0x08007d78

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b0:	f7ff ffda 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0adb      	lsrs	r3, r3, #11
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08007d78 	.word	0x08007d78

080038d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	220f      	movs	r2, #15
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80038f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800390c:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800391a:	4b07      	ldr	r3, [pc, #28]	@ (8003938 <HAL_RCC_GetClockConfig+0x60>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 020f 	and.w	r2, r3, #15
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	40022000 	.word	0x40022000

0800393c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003942:	4b1e      	ldr	r3, [pc, #120]	@ (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800394c:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d10c      	bne.n	800397a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003960:	4a17      	ldr	r2, [pc, #92]	@ (80039c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396a:	68d2      	ldr	r2, [r2, #12]
 800396c:	0a12      	lsrs	r2, r2, #8
 800396e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	617b      	str	r3, [r7, #20]
    break;
 8003978:	e00c      	b.n	8003994 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	4a0e      	ldr	r2, [pc, #56]	@ (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	0a12      	lsrs	r2, r2, #8
 8003988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    break;
 8003992:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003994:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0e5b      	lsrs	r3, r3, #25
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	3301      	adds	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039ae:	687b      	ldr	r3, [r7, #4]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40021000 	.word	0x40021000
 80039c0:	016e3600 	.word	0x016e3600
 80039c4:	00f42400 	.word	0x00f42400

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d0:	2300      	movs	r3, #0
 80039d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d4:	2300      	movs	r3, #0
 80039d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8098 	beq.w	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b43      	ldr	r3, [pc, #268]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b40      	ldr	r3, [pc, #256]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fa:	4a3f      	ldr	r2, [pc, #252]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a02:	4b3d      	ldr	r3, [pc, #244]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a12:	4b3a      	ldr	r3, [pc, #232]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a39      	ldr	r2, [pc, #228]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a1e:	f7fd fd55 	bl	80014cc <HAL_GetTick>
 8003a22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a24:	e009      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fd fd51 	bl	80014cc <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d902      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	74fb      	strb	r3, [r7, #19]
        break;
 8003a38:	e005      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a3a:	4b30      	ldr	r3, [pc, #192]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0ef      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d159      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d019      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a68:	4b23      	ldr	r3, [pc, #140]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a84:	4b1c      	ldr	r3, [pc, #112]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a94:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fd fd11 	bl	80014cc <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd fd0d 	bl	80014cc <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d902      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ec      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ada:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae8:	4903      	ldr	r1, [pc, #12]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003af0:	e008      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	74bb      	strb	r3, [r7, #18]
 8003af6:	e005      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b04:	7c7b      	ldrb	r3, [r7, #17]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4ba7      	ldr	r3, [pc, #668]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0e:	4aa6      	ldr	r2, [pc, #664]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b22:	4ba1      	ldr	r3, [pc, #644]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b28:	f023 0203 	bic.w	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	499d      	ldr	r1, [pc, #628]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b44:	4b98      	ldr	r3, [pc, #608]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	f023 020c 	bic.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4995      	ldr	r1, [pc, #596]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b66:	4b90      	ldr	r3, [pc, #576]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	498c      	ldr	r1, [pc, #560]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b88:	4b87      	ldr	r3, [pc, #540]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	4984      	ldr	r1, [pc, #528]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003baa:	4b7f      	ldr	r3, [pc, #508]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	497b      	ldr	r1, [pc, #492]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bcc:	4b76      	ldr	r3, [pc, #472]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	4973      	ldr	r1, [pc, #460]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bee:	4b6e      	ldr	r3, [pc, #440]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	496a      	ldr	r1, [pc, #424]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c10:	4b65      	ldr	r3, [pc, #404]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4962      	ldr	r1, [pc, #392]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c32:	4b5d      	ldr	r3, [pc, #372]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	4959      	ldr	r1, [pc, #356]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c54:	4b54      	ldr	r3, [pc, #336]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c5a:	f023 0203 	bic.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	4951      	ldr	r1, [pc, #324]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c76:	4b4c      	ldr	r3, [pc, #304]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c84:	4948      	ldr	r1, [pc, #288]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c98:	4b43      	ldr	r3, [pc, #268]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	4940      	ldr	r1, [pc, #256]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cc2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cd0:	4b35      	ldr	r3, [pc, #212]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cde:	4932      	ldr	r1, [pc, #200]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cee:	d105      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d015      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d08:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	4924      	ldr	r1, [pc, #144]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d26:	d105      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d28:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d015      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d40:	4b19      	ldr	r3, [pc, #100]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4e:	4916      	ldr	r1, [pc, #88]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d60:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4a10      	ldr	r2, [pc, #64]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d019      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	4908      	ldr	r1, [pc, #32]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d96:	d109      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a02      	ldr	r2, [pc, #8]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003da2:	60d3      	str	r3, [r2, #12]
 8003da4:	e002      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003db8:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	4926      	ldr	r1, [pc, #152]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dd8:	4b21      	ldr	r3, [pc, #132]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a20      	ldr	r2, [pc, #128]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003df0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dfe:	4918      	ldr	r1, [pc, #96]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e28:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	490a      	ldr	r1, [pc, #40]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e54:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e049      	b.n	8003f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd f84a 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fdc4 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e054      	b.n	8003fd6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f56:	d01d      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <HAL_TIM_Base_Start_IT+0xd8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <HAL_TIM_Base_Start_IT+0xe8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d115      	bne.n	8003fc0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <HAL_TIM_Base_Start_IT+0xec>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d015      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0xbe>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fac:	d011      	beq.n	8003fd2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbe:	e008      	b.n	8003fd2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e000      	b.n	8003fd4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40013400 	.word	0x40013400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40015000 	.word	0x40015000
 8004000:	00010007 	.word	0x00010007

08004004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e049      	b.n	80040aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f841 	bl	80040b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f000 fcf4 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_TIM_PWM_Start+0x24>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e03c      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d109      	bne.n	8004106 <HAL_TIM_PWM_Start+0x3e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	e02f      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d109      	bne.n	8004120 <HAL_TIM_PWM_Start+0x58>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e022      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d109      	bne.n	800413a <HAL_TIM_PWM_Start+0x72>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e015      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b10      	cmp	r3, #16
 800413e:	d109      	bne.n	8004154 <HAL_TIM_PWM_Start+0x8c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e008      	b.n	8004166 <HAL_TIM_PWM_Start+0x9e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0a6      	b.n	80042bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_TIM_PWM_Start+0xb6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800417c:	e023      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d104      	bne.n	800418e <HAL_TIM_PWM_Start+0xc6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800418c:	e01b      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start+0xd6>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800419c:	e013      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0xe6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041ac:	e00b      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0xf6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	e003      	b.n	80041c6 <HAL_TIM_PWM_Start+0xfe>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f91c 	bl	800540c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a3a      	ldr	r2, [pc, #232]	@ (80042c4 <HAL_TIM_PWM_Start+0x1fc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d018      	beq.n	8004210 <HAL_TIM_PWM_Start+0x148>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a39      	ldr	r2, [pc, #228]	@ (80042c8 <HAL_TIM_PWM_Start+0x200>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <HAL_TIM_PWM_Start+0x148>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a37      	ldr	r2, [pc, #220]	@ (80042cc <HAL_TIM_PWM_Start+0x204>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00e      	beq.n	8004210 <HAL_TIM_PWM_Start+0x148>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a36      	ldr	r2, [pc, #216]	@ (80042d0 <HAL_TIM_PWM_Start+0x208>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_TIM_PWM_Start+0x148>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a34      	ldr	r2, [pc, #208]	@ (80042d4 <HAL_TIM_PWM_Start+0x20c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_TIM_PWM_Start+0x148>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a33      	ldr	r2, [pc, #204]	@ (80042d8 <HAL_TIM_PWM_Start+0x210>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_TIM_PWM_Start+0x14c>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <HAL_TIM_PWM_Start+0x14e>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a25      	ldr	r2, [pc, #148]	@ (80042c4 <HAL_TIM_PWM_Start+0x1fc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d022      	beq.n	800427a <HAL_TIM_PWM_Start+0x1b2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423c:	d01d      	beq.n	800427a <HAL_TIM_PWM_Start+0x1b2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a26      	ldr	r2, [pc, #152]	@ (80042dc <HAL_TIM_PWM_Start+0x214>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d018      	beq.n	800427a <HAL_TIM_PWM_Start+0x1b2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <HAL_TIM_PWM_Start+0x218>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_TIM_PWM_Start+0x1b2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a23      	ldr	r2, [pc, #140]	@ (80042e4 <HAL_TIM_PWM_Start+0x21c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00e      	beq.n	800427a <HAL_TIM_PWM_Start+0x1b2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a19      	ldr	r2, [pc, #100]	@ (80042c8 <HAL_TIM_PWM_Start+0x200>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_TIM_PWM_Start+0x1b2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a18      	ldr	r2, [pc, #96]	@ (80042cc <HAL_TIM_PWM_Start+0x204>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_TIM_PWM_Start+0x1b2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <HAL_TIM_PWM_Start+0x210>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d115      	bne.n	80042a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <HAL_TIM_PWM_Start+0x220>)
 8004282:	4013      	ands	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b06      	cmp	r3, #6
 800428a:	d015      	beq.n	80042b8 <HAL_TIM_PWM_Start+0x1f0>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004292:	d011      	beq.n	80042b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	e008      	b.n	80042b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e000      	b.n	80042ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40013400 	.word	0x40013400
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800
 80042d8:	40015000 	.word	0x40015000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	00010007 	.word	0x00010007

080042ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d020      	beq.n	8004350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01b      	beq.n	8004350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0202 	mvn.w	r2, #2
 8004320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fb5c 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fb4e 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb5f 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d020      	beq.n	800439c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01b      	beq.n	800439c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0204 	mvn.w	r2, #4
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fb36 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb28 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fb39 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d020      	beq.n	80043e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0208 	mvn.w	r2, #8
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fb10 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fb02 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fb13 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d020      	beq.n	8004434 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01b      	beq.n	8004434 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0210 	mvn.w	r2, #16
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2208      	movs	r2, #8
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 faea 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fadc 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 faed 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0201 	mvn.w	r2, #1
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc fb3c 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 fa8d 	bl	80059a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f001 fa85 	bl	80059b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 faa7 	bl	8004a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0220 	mvn.w	r2, #32
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f001 fa4d 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00c      	beq.n	8004516 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f001 fa59 	bl	80059c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f001 fa51 	bl	80059dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00c      	beq.n	800455e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f001 fa49 	bl	80059f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800457a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f001 fa41 	bl	8005a04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0ff      	b.n	80047aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b14      	cmp	r3, #20
 80045b6:	f200 80f0 	bhi.w	800479a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045ba:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	08004615 	.word	0x08004615
 80045c4:	0800479b 	.word	0x0800479b
 80045c8:	0800479b 	.word	0x0800479b
 80045cc:	0800479b 	.word	0x0800479b
 80045d0:	08004655 	.word	0x08004655
 80045d4:	0800479b 	.word	0x0800479b
 80045d8:	0800479b 	.word	0x0800479b
 80045dc:	0800479b 	.word	0x0800479b
 80045e0:	08004697 	.word	0x08004697
 80045e4:	0800479b 	.word	0x0800479b
 80045e8:	0800479b 	.word	0x0800479b
 80045ec:	0800479b 	.word	0x0800479b
 80045f0:	080046d7 	.word	0x080046d7
 80045f4:	0800479b 	.word	0x0800479b
 80045f8:	0800479b 	.word	0x0800479b
 80045fc:	0800479b 	.word	0x0800479b
 8004600:	08004719 	.word	0x08004719
 8004604:	0800479b 	.word	0x0800479b
 8004608:	0800479b 	.word	0x0800479b
 800460c:	0800479b 	.word	0x0800479b
 8004610:	08004759 	.word	0x08004759
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fabc 	bl	8004b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0204 	bic.w	r2, r2, #4
 800463e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	619a      	str	r2, [r3, #24]
      break;
 8004652:	e0a5      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fb36 	bl	8004ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800466e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6999      	ldr	r1, [r3, #24]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	021a      	lsls	r2, r3, #8
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	619a      	str	r2, [r3, #24]
      break;
 8004694:	e084      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fba9 	bl	8004df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0208 	orr.w	r2, r2, #8
 80046b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0204 	bic.w	r2, r2, #4
 80046c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	61da      	str	r2, [r3, #28]
      break;
 80046d4:	e064      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fc1b 	bl	8004f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69d9      	ldr	r1, [r3, #28]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	021a      	lsls	r2, r3, #8
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	61da      	str	r2, [r3, #28]
      break;
 8004716:	e043      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fc8e 	bl	8005040 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004756:	e023      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fcd8 	bl	8005114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004772:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004782:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004798:	e002      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
      break;
 800479e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop

080047b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_ConfigClockSource+0x1c>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e0f6      	b.n	80049be <HAL_TIM_ConfigClockSource+0x20a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80047ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a6f      	ldr	r2, [pc, #444]	@ (80049c8 <HAL_TIM_ConfigClockSource+0x214>)
 800480a:	4293      	cmp	r3, r2
 800480c:	f000 80c1 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004810:	4a6d      	ldr	r2, [pc, #436]	@ (80049c8 <HAL_TIM_ConfigClockSource+0x214>)
 8004812:	4293      	cmp	r3, r2
 8004814:	f200 80c6 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004818:	4a6c      	ldr	r2, [pc, #432]	@ (80049cc <HAL_TIM_ConfigClockSource+0x218>)
 800481a:	4293      	cmp	r3, r2
 800481c:	f000 80b9 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004820:	4a6a      	ldr	r2, [pc, #424]	@ (80049cc <HAL_TIM_ConfigClockSource+0x218>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f200 80be 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004828:	4a69      	ldr	r2, [pc, #420]	@ (80049d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	f000 80b1 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004830:	4a67      	ldr	r2, [pc, #412]	@ (80049d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	f200 80b6 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004838:	4a66      	ldr	r2, [pc, #408]	@ (80049d4 <HAL_TIM_ConfigClockSource+0x220>)
 800483a:	4293      	cmp	r3, r2
 800483c:	f000 80a9 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004840:	4a64      	ldr	r2, [pc, #400]	@ (80049d4 <HAL_TIM_ConfigClockSource+0x220>)
 8004842:	4293      	cmp	r3, r2
 8004844:	f200 80ae 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004848:	4a63      	ldr	r2, [pc, #396]	@ (80049d8 <HAL_TIM_ConfigClockSource+0x224>)
 800484a:	4293      	cmp	r3, r2
 800484c:	f000 80a1 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004850:	4a61      	ldr	r2, [pc, #388]	@ (80049d8 <HAL_TIM_ConfigClockSource+0x224>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f200 80a6 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004858:	4a60      	ldr	r2, [pc, #384]	@ (80049dc <HAL_TIM_ConfigClockSource+0x228>)
 800485a:	4293      	cmp	r3, r2
 800485c:	f000 8099 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004860:	4a5e      	ldr	r2, [pc, #376]	@ (80049dc <HAL_TIM_ConfigClockSource+0x228>)
 8004862:	4293      	cmp	r3, r2
 8004864:	f200 809e 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004868:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800486c:	f000 8091 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004870:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004874:	f200 8096 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004878:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800487c:	f000 8089 	beq.w	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 8004880:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004884:	f200 808e 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488c:	d03e      	beq.n	800490c <HAL_TIM_ConfigClockSource+0x158>
 800488e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004892:	f200 8087 	bhi.w	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800489a:	f000 8086 	beq.w	80049aa <HAL_TIM_ConfigClockSource+0x1f6>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a2:	d87f      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048a4:	2b70      	cmp	r3, #112	@ 0x70
 80048a6:	d01a      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x12a>
 80048a8:	2b70      	cmp	r3, #112	@ 0x70
 80048aa:	d87b      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048ac:	2b60      	cmp	r3, #96	@ 0x60
 80048ae:	d050      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x19e>
 80048b0:	2b60      	cmp	r3, #96	@ 0x60
 80048b2:	d877      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048b4:	2b50      	cmp	r3, #80	@ 0x50
 80048b6:	d03c      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x17e>
 80048b8:	2b50      	cmp	r3, #80	@ 0x50
 80048ba:	d873      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048bc:	2b40      	cmp	r3, #64	@ 0x40
 80048be:	d058      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x1be>
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d86f      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048c4:	2b30      	cmp	r3, #48	@ 0x30
 80048c6:	d064      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 80048c8:	2b30      	cmp	r3, #48	@ 0x30
 80048ca:	d86b      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d060      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d867      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d05c      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d05a      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x1de>
 80048dc:	e062      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ee:	f000 fd6d 	bl	80053cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	609a      	str	r2, [r3, #8]
      break;
 800490a:	e04f      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800491c:	f000 fd56 	bl	80053cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800492e:	609a      	str	r2, [r3, #8]
      break;
 8004930:	e03c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	461a      	mov	r2, r3
 8004940:	f000 fcc8 	bl	80052d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2150      	movs	r1, #80	@ 0x50
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fd21 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004950:	e02c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800495e:	461a      	mov	r2, r3
 8004960:	f000 fce7 	bl	8005332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2160      	movs	r1, #96	@ 0x60
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fd11 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004970:	e01c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	461a      	mov	r2, r3
 8004980:	f000 fca8 	bl	80052d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2140      	movs	r1, #64	@ 0x40
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fd01 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 8004990:	e00c      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 fcf8 	bl	8005392 <TIM_ITRx_SetConfig>
      break;
 80049a2:	e003      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e000      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80049aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	00100070 	.word	0x00100070
 80049cc:	00100060 	.word	0x00100060
 80049d0:	00100050 	.word	0x00100050
 80049d4:	00100040 	.word	0x00100040
 80049d8:	00100030 	.word	0x00100030
 80049dc:	00100020 	.word	0x00100020

080049e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a4c      	ldr	r2, [pc, #304]	@ (8004b74 <TIM_Base_SetConfig+0x144>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d017      	beq.n	8004a78 <TIM_Base_SetConfig+0x48>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4e:	d013      	beq.n	8004a78 <TIM_Base_SetConfig+0x48>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a49      	ldr	r2, [pc, #292]	@ (8004b78 <TIM_Base_SetConfig+0x148>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00f      	beq.n	8004a78 <TIM_Base_SetConfig+0x48>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a48      	ldr	r2, [pc, #288]	@ (8004b7c <TIM_Base_SetConfig+0x14c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <TIM_Base_SetConfig+0x48>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a47      	ldr	r2, [pc, #284]	@ (8004b80 <TIM_Base_SetConfig+0x150>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_Base_SetConfig+0x48>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a46      	ldr	r2, [pc, #280]	@ (8004b84 <TIM_Base_SetConfig+0x154>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_Base_SetConfig+0x48>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a45      	ldr	r2, [pc, #276]	@ (8004b88 <TIM_Base_SetConfig+0x158>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d108      	bne.n	8004a8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a39      	ldr	r2, [pc, #228]	@ (8004b74 <TIM_Base_SetConfig+0x144>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d023      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a98:	d01f      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a36      	ldr	r2, [pc, #216]	@ (8004b78 <TIM_Base_SetConfig+0x148>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a35      	ldr	r2, [pc, #212]	@ (8004b7c <TIM_Base_SetConfig+0x14c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a34      	ldr	r2, [pc, #208]	@ (8004b80 <TIM_Base_SetConfig+0x150>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a33      	ldr	r2, [pc, #204]	@ (8004b84 <TIM_Base_SetConfig+0x154>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a33      	ldr	r2, [pc, #204]	@ (8004b8c <TIM_Base_SetConfig+0x15c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a32      	ldr	r2, [pc, #200]	@ (8004b90 <TIM_Base_SetConfig+0x160>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a31      	ldr	r2, [pc, #196]	@ (8004b94 <TIM_Base_SetConfig+0x164>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0xaa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b88 <TIM_Base_SetConfig+0x158>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <TIM_Base_SetConfig+0x144>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <TIM_Base_SetConfig+0x110>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <TIM_Base_SetConfig+0x154>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00f      	beq.n	8004b40 <TIM_Base_SetConfig+0x110>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1a      	ldr	r2, [pc, #104]	@ (8004b8c <TIM_Base_SetConfig+0x15c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00b      	beq.n	8004b40 <TIM_Base_SetConfig+0x110>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <TIM_Base_SetConfig+0x160>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <TIM_Base_SetConfig+0x110>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a18      	ldr	r2, [pc, #96]	@ (8004b94 <TIM_Base_SetConfig+0x164>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_Base_SetConfig+0x110>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	@ (8004b88 <TIM_Base_SetConfig+0x158>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d105      	bne.n	8004b66 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	611a      	str	r2, [r3, #16]
  }
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40013400 	.word	0x40013400
 8004b88:	40015000 	.word	0x40015000
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 0201 	bic.w	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f023 0302 	bic.w	r3, r3, #2
 8004be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a30      	ldr	r2, [pc, #192]	@ (8004cb4 <TIM_OC1_SetConfig+0x11c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <TIM_OC1_SetConfig+0x88>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb8 <TIM_OC1_SetConfig+0x120>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00f      	beq.n	8004c20 <TIM_OC1_SetConfig+0x88>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a2e      	ldr	r2, [pc, #184]	@ (8004cbc <TIM_OC1_SetConfig+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <TIM_OC1_SetConfig+0x88>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc0 <TIM_OC1_SetConfig+0x128>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_OC1_SetConfig+0x88>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc4 <TIM_OC1_SetConfig+0x12c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC1_SetConfig+0x88>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc8 <TIM_OC1_SetConfig+0x130>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10c      	bne.n	8004c3a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0308 	bic.w	r3, r3, #8
 8004c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f023 0304 	bic.w	r3, r3, #4
 8004c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <TIM_OC1_SetConfig+0x11c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <TIM_OC1_SetConfig+0xd2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb8 <TIM_OC1_SetConfig+0x120>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <TIM_OC1_SetConfig+0xd2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <TIM_OC1_SetConfig+0x124>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_OC1_SetConfig+0xd2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc0 <TIM_OC1_SetConfig+0x128>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_OC1_SetConfig+0xd2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <TIM_OC1_SetConfig+0x12c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_OC1_SetConfig+0xd2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a18      	ldr	r2, [pc, #96]	@ (8004cc8 <TIM_OC1_SetConfig+0x130>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d111      	bne.n	8004c8e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	621a      	str	r2, [r3, #32]
}
 8004ca8:	bf00      	nop
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40013400 	.word	0x40013400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800
 8004cc8:	40015000 	.word	0x40015000

08004ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f023 0210 	bic.w	r2, r3, #16
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0320 	bic.w	r3, r3, #32
 8004d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ddc <TIM_OC2_SetConfig+0x110>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_OC2_SetConfig+0x74>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a2b      	ldr	r2, [pc, #172]	@ (8004de0 <TIM_OC2_SetConfig+0x114>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC2_SetConfig+0x74>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004de4 <TIM_OC2_SetConfig+0x118>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10d      	bne.n	8004d5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <TIM_OC2_SetConfig+0x110>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <TIM_OC2_SetConfig+0xc0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <TIM_OC2_SetConfig+0x114>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <TIM_OC2_SetConfig+0xc0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004de8 <TIM_OC2_SetConfig+0x11c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <TIM_OC2_SetConfig+0xc0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a1d      	ldr	r2, [pc, #116]	@ (8004dec <TIM_OC2_SetConfig+0x120>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_OC2_SetConfig+0xc0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004df0 <TIM_OC2_SetConfig+0x124>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_OC2_SetConfig+0xc0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a17      	ldr	r2, [pc, #92]	@ (8004de4 <TIM_OC2_SetConfig+0x118>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d113      	bne.n	8004db4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40013400 	.word	0x40013400
 8004de4:	40015000 	.word	0x40015000
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800

08004df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2b      	ldr	r2, [pc, #172]	@ (8004f00 <TIM_OC3_SetConfig+0x10c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC3_SetConfig+0x72>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2a      	ldr	r2, [pc, #168]	@ (8004f04 <TIM_OC3_SetConfig+0x110>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC3_SetConfig+0x72>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a29      	ldr	r2, [pc, #164]	@ (8004f08 <TIM_OC3_SetConfig+0x114>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10d      	bne.n	8004e82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <TIM_OC3_SetConfig+0x10c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xbe>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f04 <TIM_OC3_SetConfig+0x110>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xbe>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1d      	ldr	r2, [pc, #116]	@ (8004f0c <TIM_OC3_SetConfig+0x118>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xbe>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f10 <TIM_OC3_SetConfig+0x11c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xbe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f14 <TIM_OC3_SetConfig+0x120>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_OC3_SetConfig+0xbe>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a16      	ldr	r2, [pc, #88]	@ (8004f08 <TIM_OC3_SetConfig+0x114>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d113      	bne.n	8004eda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40013400 	.word	0x40013400
 8004f08:	40015000 	.word	0x40015000
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a2c      	ldr	r2, [pc, #176]	@ (8005028 <TIM_OC4_SetConfig+0x110>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_OC4_SetConfig+0x74>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800502c <TIM_OC4_SetConfig+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC4_SetConfig+0x74>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a2a      	ldr	r2, [pc, #168]	@ (8005030 <TIM_OC4_SetConfig+0x118>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10d      	bne.n	8004fa8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a1f      	ldr	r2, [pc, #124]	@ (8005028 <TIM_OC4_SetConfig+0x110>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <TIM_OC4_SetConfig+0xc0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800502c <TIM_OC4_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_OC4_SetConfig+0xc0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a1e      	ldr	r2, [pc, #120]	@ (8005034 <TIM_OC4_SetConfig+0x11c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_OC4_SetConfig+0xc0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005038 <TIM_OC4_SetConfig+0x120>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_OC4_SetConfig+0xc0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a1c      	ldr	r2, [pc, #112]	@ (800503c <TIM_OC4_SetConfig+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC4_SetConfig+0xc0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a17      	ldr	r2, [pc, #92]	@ (8005030 <TIM_OC4_SetConfig+0x118>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d113      	bne.n	8005000 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004fe6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	019b      	lsls	r3, r3, #6
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40015000 	.word	0x40015000
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800

08005040 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800506e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005084:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <TIM_OC5_SetConfig+0xbc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <TIM_OC5_SetConfig+0x82>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <TIM_OC5_SetConfig+0xc0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_OC5_SetConfig+0x82>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <TIM_OC5_SetConfig+0xc4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_OC5_SetConfig+0x82>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <TIM_OC5_SetConfig+0xc8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_OC5_SetConfig+0x82>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a15      	ldr	r2, [pc, #84]	@ (800510c <TIM_OC5_SetConfig+0xcc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC5_SetConfig+0x82>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <TIM_OC5_SetConfig+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d109      	bne.n	80050d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	621a      	str	r2, [r3, #32]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800
 8005110:	40015000 	.word	0x40015000

08005114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800515a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	051b      	lsls	r3, r3, #20
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1a      	ldr	r2, [pc, #104]	@ (80051d4 <TIM_OC6_SetConfig+0xc0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <TIM_OC6_SetConfig+0x84>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <TIM_OC6_SetConfig+0xc4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_OC6_SetConfig+0x84>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <TIM_OC6_SetConfig+0xc8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00b      	beq.n	8005198 <TIM_OC6_SetConfig+0x84>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a17      	ldr	r2, [pc, #92]	@ (80051e0 <TIM_OC6_SetConfig+0xcc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_OC6_SetConfig+0x84>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a16      	ldr	r2, [pc, #88]	@ (80051e4 <TIM_OC6_SetConfig+0xd0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC6_SetConfig+0x84>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a15      	ldr	r2, [pc, #84]	@ (80051e8 <TIM_OC6_SetConfig+0xd4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800519e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	029b      	lsls	r3, r3, #10
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800
 80051e8:	40015000 	.word	0x40015000

080051ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f023 0201 	bic.w	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a28      	ldr	r2, [pc, #160]	@ (80052b8 <TIM_TI1_SetConfig+0xcc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01b      	beq.n	8005252 <TIM_TI1_SetConfig+0x66>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d017      	beq.n	8005252 <TIM_TI1_SetConfig+0x66>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a25      	ldr	r2, [pc, #148]	@ (80052bc <TIM_TI1_SetConfig+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_TI1_SetConfig+0x66>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a24      	ldr	r2, [pc, #144]	@ (80052c0 <TIM_TI1_SetConfig+0xd4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_TI1_SetConfig+0x66>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a23      	ldr	r2, [pc, #140]	@ (80052c4 <TIM_TI1_SetConfig+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_TI1_SetConfig+0x66>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4a22      	ldr	r2, [pc, #136]	@ (80052c8 <TIM_TI1_SetConfig+0xdc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_TI1_SetConfig+0x66>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a21      	ldr	r2, [pc, #132]	@ (80052cc <TIM_TI1_SetConfig+0xe0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_TI1_SetConfig+0x66>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4a20      	ldr	r2, [pc, #128]	@ (80052d0 <TIM_TI1_SetConfig+0xe4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d101      	bne.n	8005256 <TIM_TI1_SetConfig+0x6a>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <TIM_TI1_SetConfig+0x6c>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e003      	b.n	8005276 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800527c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	b2db      	uxtb	r3, r3
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f023 030a 	bic.w	r3, r3, #10
 8005290:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f003 030a 	and.w	r3, r3, #10
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40013400 	.word	0x40013400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40015000 	.word	0x40015000

080052d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 030a 	bic.w	r3, r3, #10
 8005310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f023 0210 	bic.w	r2, r3, #16
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800535c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800536e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80053a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f043 0307 	orr.w	r3, r3, #7
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2201      	movs	r2, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b08a      	sub	sp, #40	@ 0x28
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0a0      	b.n	80055ac <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fb fd70 	bl	8000f64 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7ff faca 	bl	8004a30 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2203      	movs	r2, #3
 80054aa:	f7ff fe9f 	bl	80051ec <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 020c 	bic.w	r2, r2, #12
 80054bc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6999      	ldr	r1, [r3, #24]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054de:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80054ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005502:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0204 	orr.w	r2, r2, #4
 8005526:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800552c:	2300      	movs	r3, #0
 800552e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005530:	2370      	movs	r3, #112	@ 0x70
 8005532:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005534:	2300      	movs	r3, #0
 8005536:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f107 020c 	add.w	r2, r7, #12
 800554e:	4611      	mov	r1, r2
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fbbb 	bl	8004ccc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005568:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005578:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3728      	adds	r7, #40	@ 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_TIMEx_PWMN_Start+0x24>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e022      	b.n	800561e <HAL_TIMEx_PWMN_Start+0x6a>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d109      	bne.n	80055f2 <HAL_TIMEx_PWMN_Start+0x3e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e015      	b.n	800561e <HAL_TIMEx_PWMN_Start+0x6a>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d109      	bne.n	800560c <HAL_TIMEx_PWMN_Start+0x58>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e008      	b.n	800561e <HAL_TIMEx_PWMN_Start+0x6a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e073      	b.n	800570e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_TIMEx_PWMN_Start+0x82>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005634:	e013      	b.n	800565e <HAL_TIMEx_PWMN_Start+0xaa>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d104      	bne.n	8005646 <HAL_TIMEx_PWMN_Start+0x92>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005644:	e00b      	b.n	800565e <HAL_TIMEx_PWMN_Start+0xaa>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d104      	bne.n	8005656 <HAL_TIMEx_PWMN_Start+0xa2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005654:	e003      	b.n	800565e <HAL_TIMEx_PWMN_Start+0xaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2204      	movs	r2, #4
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f9d6 	bl	8005a18 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800567a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a25      	ldr	r2, [pc, #148]	@ (8005718 <HAL_TIMEx_PWMN_Start+0x164>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d022      	beq.n	80056cc <HAL_TIMEx_PWMN_Start+0x118>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568e:	d01d      	beq.n	80056cc <HAL_TIMEx_PWMN_Start+0x118>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a21      	ldr	r2, [pc, #132]	@ (800571c <HAL_TIMEx_PWMN_Start+0x168>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_TIMEx_PWMN_Start+0x118>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a20      	ldr	r2, [pc, #128]	@ (8005720 <HAL_TIMEx_PWMN_Start+0x16c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_TIMEx_PWMN_Start+0x118>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005724 <HAL_TIMEx_PWMN_Start+0x170>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_TIMEx_PWMN_Start+0x118>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005728 <HAL_TIMEx_PWMN_Start+0x174>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_TIMEx_PWMN_Start+0x118>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <HAL_TIMEx_PWMN_Start+0x178>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIMEx_PWMN_Start+0x118>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005730 <HAL_TIMEx_PWMN_Start+0x17c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d115      	bne.n	80056f8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	4b18      	ldr	r3, [pc, #96]	@ (8005734 <HAL_TIMEx_PWMN_Start+0x180>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d015      	beq.n	800570a <HAL_TIMEx_PWMN_Start+0x156>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e4:	d011      	beq.n	800570a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	e008      	b.n	800570a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e000      	b.n	800570c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40013400 	.word	0x40013400
 800572c:	40014000 	.word	0x40014000
 8005730:	40015000 	.word	0x40015000
 8005734:	00010007 	.word	0x00010007

08005738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e074      	b.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a34      	ldr	r2, [pc, #208]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a33      	ldr	r2, [pc, #204]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a31      	ldr	r2, [pc, #196]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005794:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80057a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a21      	ldr	r2, [pc, #132]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a15      	ldr	r2, [pc, #84]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a18      	ldr	r2, [pc, #96]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a11      	ldr	r2, [pc, #68]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10c      	bne.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40013400 	.word	0x40013400
 8005850:	40015000 	.word	0x40015000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40014000 	.word	0x40014000

08005864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800587c:	2302      	movs	r3, #2
 800587e:	e078      	b.n	8005972 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d11c      	bne.n	8005960 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	051b      	lsls	r3, r3, #20
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40013400 	.word	0x40013400
 8005988:	40015000 	.word	0x40015000

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1a      	ldr	r2, [r3, #32]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e042      	b.n	8005afa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fb fbce 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2224      	movs	r2, #36	@ 0x24
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 ff61 	bl	8006974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fc62 	bl	800637c <UART_SetConfig>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e01b      	b.n	8005afa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0201 	orr.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 ffe0 	bl	8006ab8 <UART_CheckIdleState>
 8005af8:	4603      	mov	r3, r0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08a      	sub	sp, #40	@ 0x28
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d17b      	bne.n	8005c14 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UART_Transmit+0x26>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e074      	b.n	8005c16 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2221      	movs	r2, #33	@ 0x21
 8005b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b3c:	f7fb fcc6 	bl	80014cc <HAL_GetTick>
 8005b40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5a:	d108      	bne.n	8005b6e <HAL_UART_Transmit+0x6c>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e003      	b.n	8005b76 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b76:	e030      	b.n	8005bda <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2180      	movs	r1, #128	@ 0x80
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f001 f842 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e03d      	b.n	8005c16 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	e007      	b.n	8005bc8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1c8      	bne.n	8005b78 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2140      	movs	r1, #64	@ 0x40
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f001 f80b 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e006      	b.n	8005c16 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	@ 0x28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d137      	bne.n	8005ca8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_UART_Receive_IT+0x24>
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e030      	b.n	8005caa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <HAL_UART_Receive_IT+0x94>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d01f      	beq.n	8005c98 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d018      	beq.n	8005c98 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	613b      	str	r3, [r7, #16]
   return(result);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	69f9      	ldr	r1, [r7, #28]
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e6      	bne.n	8005c66 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f001 f822 	bl	8006ce8 <UART_Start_Receive_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	e000      	b.n	8005caa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3728      	adds	r7, #40	@ 0x28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40008000 	.word	0x40008000

08005cb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b0ba      	sub	sp, #232	@ 0xe8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ce2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11b      	bne.n	8005d2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8300 	beq.w	8006322 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
      }
      return;
 8005d2a:	e2fa      	b.n	8006322 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8123 	beq.w	8005f7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f70 <HAL_UART_IRQHandler+0x2b8>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005d46:	4b8b      	ldr	r3, [pc, #556]	@ (8005f74 <HAL_UART_IRQHandler+0x2bc>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8116 	beq.w	8005f7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <HAL_UART_IRQHandler+0xc8>
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	f043 0201 	orr.w	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d011      	beq.n	8005db0 <HAL_UART_IRQHandler+0xf8>
 8005d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da6:	f043 0204 	orr.w	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d011      	beq.n	8005de0 <HAL_UART_IRQHandler+0x128>
 8005dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd6:	f043 0202 	orr.w	r2, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005df8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8005f70 <HAL_UART_IRQHandler+0x2b8>)
 8005dfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2208      	movs	r2, #8
 8005e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d012      	beq.n	8005e4e <HAL_UART_IRQHandler+0x196>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00c      	beq.n	8005e4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8266 	beq.w	8006326 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d013      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d105      	bne.n	8005e7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea2:	2b40      	cmp	r3, #64	@ 0x40
 8005ea4:	d005      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d054      	beq.n	8005f5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f83a 	bl	8006f2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec2:	2b40      	cmp	r3, #64	@ 0x40
 8005ec4:	d146      	bne.n	8005f54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1d9      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d017      	beq.n	8005f4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f22:	4a15      	ldr	r2, [pc, #84]	@ (8005f78 <HAL_UART_IRQHandler+0x2c0>)
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fc fd12 	bl	8002956 <HAL_DMA_Abort_IT>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d019      	beq.n	8005f6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005f46:	4610      	mov	r0, r2
 8005f48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4a:	e00f      	b.n	8005f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f9ff 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f52:	e00b      	b.n	8005f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f9fb 	bl	8006350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5a:	e007      	b.n	8005f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f9f7 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005f6a:	e1dc      	b.n	8006326 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	bf00      	nop
    return;
 8005f6e:	e1da      	b.n	8006326 <HAL_UART_IRQHandler+0x66e>
 8005f70:	10000001 	.word	0x10000001
 8005f74:	04000120 	.word	0x04000120
 8005f78:	08006ff9 	.word	0x08006ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	f040 8170 	bne.w	8006266 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8169 	beq.w	8006266 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8162 	beq.w	8006266 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b40      	cmp	r3, #64	@ 0x40
 8005fb6:	f040 80d8 	bne.w	800616a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80af 	beq.w	8006130 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	f080 80a7 	bcs.w	8006130 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 8087 	bne.w	800610e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006014:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800601c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800602a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800602e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006036:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1da      	bne.n	8006000 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800605a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800606e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006072:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e1      	bne.n	800604a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800609c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e3      	bne.n	8006086 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060dc:	f023 0310 	bic.w	r3, r3, #16
 80060e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e4      	bne.n	80060cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006108:	4618      	mov	r0, r3
 800610a:	f7fc fbcb 	bl	80028a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006120:	b29b      	uxth	r3, r3
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	b29b      	uxth	r3, r3
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f91b 	bl	8006364 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800612e:	e0fc      	b.n	800632a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800613a:	429a      	cmp	r2, r3
 800613c:	f040 80f5 	bne.w	800632a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b20      	cmp	r3, #32
 8006150:	f040 80eb 	bne.w	800632a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f8fe 	bl	8006364 <HAL_UARTEx_RxEventCallback>
      return;
 8006168:	e0df      	b.n	800632a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006176:	b29b      	uxth	r3, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80d1 	beq.w	800632e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800618c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80cc 	beq.w	800632e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e4      	bne.n	8006196 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	623b      	str	r3, [r7, #32]
   return(result);
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e1      	bne.n	80061cc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	60fb      	str	r3, [r7, #12]
   return(result);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f023 0310 	bic.w	r3, r3, #16
 8006230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	69b9      	ldr	r1, [r7, #24]
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	617b      	str	r3, [r7, #20]
   return(result);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e4      	bne.n	800621c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f880 	bl	8006364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006264:	e063      	b.n	800632e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800626a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00e      	beq.n	8006290 <HAL_UART_IRQHandler+0x5d8>
 8006272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d008      	beq.n	8006290 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fc13 	bl	8007ab4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800628e:	e051      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006298:	2b00      	cmp	r3, #0
 800629a:	d014      	beq.n	80062c6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d105      	bne.n	80062b4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03a      	beq.n	8006332 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
    }
    return;
 80062c4:	e035      	b.n	8006332 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_UART_IRQHandler+0x62e>
 80062d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fe9c 	bl	800701c <UART_EndTransmit_IT>
    return;
 80062e4:	e026      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <HAL_UART_IRQHandler+0x64e>
 80062f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fbec 	bl	8007adc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006304:	e016      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800630a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_UART_IRQHandler+0x67c>
 8006312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006316:	2b00      	cmp	r3, #0
 8006318:	da0c      	bge.n	8006334 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fbd4 	bl	8007ac8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006320:	e008      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
      return;
 8006322:	bf00      	nop
 8006324:	e006      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
    return;
 8006326:	bf00      	nop
 8006328:	e004      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
      return;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
      return;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <HAL_UART_IRQHandler+0x67c>
    return;
 8006332:	bf00      	nop
  }
}
 8006334:	37e8      	adds	r7, #232	@ 0xe8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop

0800633c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800637c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006380:	b08c      	sub	sp, #48	@ 0x30
 8006382:	af00      	add	r7, sp, #0
 8006384:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	431a      	orrs	r2, r3
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	431a      	orrs	r2, r3
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4baa      	ldr	r3, [pc, #680]	@ (8006654 <UART_SetConfig+0x2d8>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a9f      	ldr	r2, [pc, #636]	@ (8006658 <UART_SetConfig+0x2dc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e4:	4313      	orrs	r3, r2
 80063e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80063f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006406:	f023 010f 	bic.w	r1, r3, #15
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a90      	ldr	r2, [pc, #576]	@ (800665c <UART_SetConfig+0x2e0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d125      	bne.n	800646c <UART_SetConfig+0xf0>
 8006420:	4b8f      	ldr	r3, [pc, #572]	@ (8006660 <UART_SetConfig+0x2e4>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b03      	cmp	r3, #3
 800642c:	d81a      	bhi.n	8006464 <UART_SetConfig+0xe8>
 800642e:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <UART_SetConfig+0xb8>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006445 	.word	0x08006445
 8006438:	08006455 	.word	0x08006455
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800645d 	.word	0x0800645d
 8006444:	2301      	movs	r3, #1
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800644a:	e116      	b.n	800667a <UART_SetConfig+0x2fe>
 800644c:	2302      	movs	r3, #2
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006452:	e112      	b.n	800667a <UART_SetConfig+0x2fe>
 8006454:	2304      	movs	r3, #4
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645a:	e10e      	b.n	800667a <UART_SetConfig+0x2fe>
 800645c:	2308      	movs	r3, #8
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006462:	e10a      	b.n	800667a <UART_SetConfig+0x2fe>
 8006464:	2310      	movs	r3, #16
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646a:	e106      	b.n	800667a <UART_SetConfig+0x2fe>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a7c      	ldr	r2, [pc, #496]	@ (8006664 <UART_SetConfig+0x2e8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d138      	bne.n	80064e8 <UART_SetConfig+0x16c>
 8006476:	4b7a      	ldr	r3, [pc, #488]	@ (8006660 <UART_SetConfig+0x2e4>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	f003 030c 	and.w	r3, r3, #12
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d82d      	bhi.n	80064e0 <UART_SetConfig+0x164>
 8006484:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0x110>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064e1 	.word	0x080064e1
 8006498:	080064e1 	.word	0x080064e1
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064c9 	.word	0x080064c9
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c6:	e0d8      	b.n	800667a <UART_SetConfig+0x2fe>
 80064c8:	2302      	movs	r3, #2
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ce:	e0d4      	b.n	800667a <UART_SetConfig+0x2fe>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064d6:	e0d0      	b.n	800667a <UART_SetConfig+0x2fe>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e0cc      	b.n	800667a <UART_SetConfig+0x2fe>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064e6:	e0c8      	b.n	800667a <UART_SetConfig+0x2fe>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006668 <UART_SetConfig+0x2ec>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d125      	bne.n	800653e <UART_SetConfig+0x1c2>
 80064f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006660 <UART_SetConfig+0x2e4>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064fc:	2b30      	cmp	r3, #48	@ 0x30
 80064fe:	d016      	beq.n	800652e <UART_SetConfig+0x1b2>
 8006500:	2b30      	cmp	r3, #48	@ 0x30
 8006502:	d818      	bhi.n	8006536 <UART_SetConfig+0x1ba>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d00a      	beq.n	800651e <UART_SetConfig+0x1a2>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d814      	bhi.n	8006536 <UART_SetConfig+0x1ba>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <UART_SetConfig+0x19a>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d008      	beq.n	8006526 <UART_SetConfig+0x1aa>
 8006514:	e00f      	b.n	8006536 <UART_SetConfig+0x1ba>
 8006516:	2300      	movs	r3, #0
 8006518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800651c:	e0ad      	b.n	800667a <UART_SetConfig+0x2fe>
 800651e:	2302      	movs	r3, #2
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006524:	e0a9      	b.n	800667a <UART_SetConfig+0x2fe>
 8006526:	2304      	movs	r3, #4
 8006528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800652c:	e0a5      	b.n	800667a <UART_SetConfig+0x2fe>
 800652e:	2308      	movs	r3, #8
 8006530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006534:	e0a1      	b.n	800667a <UART_SetConfig+0x2fe>
 8006536:	2310      	movs	r3, #16
 8006538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800653c:	e09d      	b.n	800667a <UART_SetConfig+0x2fe>
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a4a      	ldr	r2, [pc, #296]	@ (800666c <UART_SetConfig+0x2f0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d125      	bne.n	8006594 <UART_SetConfig+0x218>
 8006548:	4b45      	ldr	r3, [pc, #276]	@ (8006660 <UART_SetConfig+0x2e4>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006552:	2bc0      	cmp	r3, #192	@ 0xc0
 8006554:	d016      	beq.n	8006584 <UART_SetConfig+0x208>
 8006556:	2bc0      	cmp	r3, #192	@ 0xc0
 8006558:	d818      	bhi.n	800658c <UART_SetConfig+0x210>
 800655a:	2b80      	cmp	r3, #128	@ 0x80
 800655c:	d00a      	beq.n	8006574 <UART_SetConfig+0x1f8>
 800655e:	2b80      	cmp	r3, #128	@ 0x80
 8006560:	d814      	bhi.n	800658c <UART_SetConfig+0x210>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <UART_SetConfig+0x1f0>
 8006566:	2b40      	cmp	r3, #64	@ 0x40
 8006568:	d008      	beq.n	800657c <UART_SetConfig+0x200>
 800656a:	e00f      	b.n	800658c <UART_SetConfig+0x210>
 800656c:	2300      	movs	r3, #0
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006572:	e082      	b.n	800667a <UART_SetConfig+0x2fe>
 8006574:	2302      	movs	r3, #2
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800657a:	e07e      	b.n	800667a <UART_SetConfig+0x2fe>
 800657c:	2304      	movs	r3, #4
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006582:	e07a      	b.n	800667a <UART_SetConfig+0x2fe>
 8006584:	2308      	movs	r3, #8
 8006586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800658a:	e076      	b.n	800667a <UART_SetConfig+0x2fe>
 800658c:	2310      	movs	r3, #16
 800658e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006592:	e072      	b.n	800667a <UART_SetConfig+0x2fe>
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a35      	ldr	r2, [pc, #212]	@ (8006670 <UART_SetConfig+0x2f4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d12a      	bne.n	80065f4 <UART_SetConfig+0x278>
 800659e:	4b30      	ldr	r3, [pc, #192]	@ (8006660 <UART_SetConfig+0x2e4>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ac:	d01a      	beq.n	80065e4 <UART_SetConfig+0x268>
 80065ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b2:	d81b      	bhi.n	80065ec <UART_SetConfig+0x270>
 80065b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b8:	d00c      	beq.n	80065d4 <UART_SetConfig+0x258>
 80065ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065be:	d815      	bhi.n	80065ec <UART_SetConfig+0x270>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <UART_SetConfig+0x250>
 80065c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c8:	d008      	beq.n	80065dc <UART_SetConfig+0x260>
 80065ca:	e00f      	b.n	80065ec <UART_SetConfig+0x270>
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d2:	e052      	b.n	800667a <UART_SetConfig+0x2fe>
 80065d4:	2302      	movs	r3, #2
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065da:	e04e      	b.n	800667a <UART_SetConfig+0x2fe>
 80065dc:	2304      	movs	r3, #4
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e2:	e04a      	b.n	800667a <UART_SetConfig+0x2fe>
 80065e4:	2308      	movs	r3, #8
 80065e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ea:	e046      	b.n	800667a <UART_SetConfig+0x2fe>
 80065ec:	2310      	movs	r3, #16
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f2:	e042      	b.n	800667a <UART_SetConfig+0x2fe>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a17      	ldr	r2, [pc, #92]	@ (8006658 <UART_SetConfig+0x2dc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d13a      	bne.n	8006674 <UART_SetConfig+0x2f8>
 80065fe:	4b18      	ldr	r3, [pc, #96]	@ (8006660 <UART_SetConfig+0x2e4>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006604:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006608:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800660c:	d01a      	beq.n	8006644 <UART_SetConfig+0x2c8>
 800660e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006612:	d81b      	bhi.n	800664c <UART_SetConfig+0x2d0>
 8006614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006618:	d00c      	beq.n	8006634 <UART_SetConfig+0x2b8>
 800661a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800661e:	d815      	bhi.n	800664c <UART_SetConfig+0x2d0>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <UART_SetConfig+0x2b0>
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006628:	d008      	beq.n	800663c <UART_SetConfig+0x2c0>
 800662a:	e00f      	b.n	800664c <UART_SetConfig+0x2d0>
 800662c:	2300      	movs	r3, #0
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006632:	e022      	b.n	800667a <UART_SetConfig+0x2fe>
 8006634:	2302      	movs	r3, #2
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800663a:	e01e      	b.n	800667a <UART_SetConfig+0x2fe>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006642:	e01a      	b.n	800667a <UART_SetConfig+0x2fe>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664a:	e016      	b.n	800667a <UART_SetConfig+0x2fe>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006652:	e012      	b.n	800667a <UART_SetConfig+0x2fe>
 8006654:	cfff69f3 	.word	0xcfff69f3
 8006658:	40008000 	.word	0x40008000
 800665c:	40013800 	.word	0x40013800
 8006660:	40021000 	.word	0x40021000
 8006664:	40004400 	.word	0x40004400
 8006668:	40004800 	.word	0x40004800
 800666c:	40004c00 	.word	0x40004c00
 8006670:	40005000 	.word	0x40005000
 8006674:	2310      	movs	r3, #16
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4aae      	ldr	r2, [pc, #696]	@ (8006938 <UART_SetConfig+0x5bc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	f040 8097 	bne.w	80067b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006686:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800668a:	2b08      	cmp	r3, #8
 800668c:	d823      	bhi.n	80066d6 <UART_SetConfig+0x35a>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <UART_SetConfig+0x318>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066d7 	.word	0x080066d7
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066d7 	.word	0x080066d7
 80066a4:	080066c7 	.word	0x080066c7
 80066a8:	080066d7 	.word	0x080066d7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066d7 	.word	0x080066d7
 80066b4:	080066cf 	.word	0x080066cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fd f8e2 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 80066bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066be:	e010      	b.n	80066e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c0:	4b9e      	ldr	r3, [pc, #632]	@ (800693c <UART_SetConfig+0x5c0>)
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066c4:	e00d      	b.n	80066e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fd f86d 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 80066ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066cc:	e009      	b.n	80066e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066d4:	e005      	b.n	80066e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8130 	beq.w	800694a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	4a94      	ldr	r2, [pc, #592]	@ (8006940 <UART_SetConfig+0x5c4>)
 80066f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f4:	461a      	mov	r2, r3
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	4413      	add	r3, r2
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	429a      	cmp	r2, r3
 800670c:	d305      	bcc.n	800671a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	429a      	cmp	r2, r3
 8006718:	d903      	bls.n	8006722 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006720:	e113      	b.n	800694a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	2200      	movs	r2, #0
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	60fa      	str	r2, [r7, #12]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	4a84      	ldr	r2, [pc, #528]	@ (8006940 <UART_SetConfig+0x5c4>)
 8006730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006734:	b29b      	uxth	r3, r3
 8006736:	2200      	movs	r2, #0
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006740:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006744:	f7f9 fd70 	bl	8000228 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4610      	mov	r0, r2
 800674e:	4619      	mov	r1, r3
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	020b      	lsls	r3, r1, #8
 800675a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800675e:	0202      	lsls	r2, r0, #8
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	6849      	ldr	r1, [r1, #4]
 8006764:	0849      	lsrs	r1, r1, #1
 8006766:	2000      	movs	r0, #0
 8006768:	460c      	mov	r4, r1
 800676a:	4605      	mov	r5, r0
 800676c:	eb12 0804 	adds.w	r8, r2, r4
 8006770:	eb43 0905 	adc.w	r9, r3, r5
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	469a      	mov	sl, r3
 800677c:	4693      	mov	fp, r2
 800677e:	4652      	mov	r2, sl
 8006780:	465b      	mov	r3, fp
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 fd4f 	bl	8000228 <__aeabi_uldivmod>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4613      	mov	r3, r2
 8006790:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006798:	d308      	bcc.n	80067ac <UART_SetConfig+0x430>
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067a0:	d204      	bcs.n	80067ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a3a      	ldr	r2, [r7, #32]
 80067a8:	60da      	str	r2, [r3, #12]
 80067aa:	e0ce      	b.n	800694a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067b2:	e0ca      	b.n	800694a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067bc:	d166      	bne.n	800688c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80067be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d827      	bhi.n	8006816 <UART_SetConfig+0x49a>
 80067c6:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <UART_SetConfig+0x450>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	08006801 	.word	0x08006801
 80067d8:	08006817 	.word	0x08006817
 80067dc:	08006807 	.word	0x08006807
 80067e0:	08006817 	.word	0x08006817
 80067e4:	08006817 	.word	0x08006817
 80067e8:	08006817 	.word	0x08006817
 80067ec:	0800680f 	.word	0x0800680f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fd f846 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 80067f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067f6:	e014      	b.n	8006822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fd f858 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067fe:	e010      	b.n	8006822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006800:	4b4e      	ldr	r3, [pc, #312]	@ (800693c <UART_SetConfig+0x5c0>)
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006804:	e00d      	b.n	8006822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fc ffcd 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 800680a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800680c:	e009      	b.n	8006822 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006814:	e005      	b.n	8006822 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8090 	beq.w	800694a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682e:	4a44      	ldr	r2, [pc, #272]	@ (8006940 <UART_SetConfig+0x5c4>)
 8006830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006834:	461a      	mov	r2, r3
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	fbb3 f3f2 	udiv	r3, r3, r2
 800683c:	005a      	lsls	r2, r3, #1
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	441a      	add	r2, r3
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	fbb2 f3f3 	udiv	r3, r2, r3
 800684e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	2b0f      	cmp	r3, #15
 8006854:	d916      	bls.n	8006884 <UART_SetConfig+0x508>
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800685c:	d212      	bcs.n	8006884 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f023 030f 	bic.w	r3, r3, #15
 8006866:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	b29b      	uxth	r3, r3
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	b29a      	uxth	r2, r3
 8006874:	8bfb      	ldrh	r3, [r7, #30]
 8006876:	4313      	orrs	r3, r2
 8006878:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	8bfa      	ldrh	r2, [r7, #30]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	e062      	b.n	800694a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800688a:	e05e      	b.n	800694a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800688c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006890:	2b08      	cmp	r3, #8
 8006892:	d828      	bhi.n	80068e6 <UART_SetConfig+0x56a>
 8006894:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <UART_SetConfig+0x520>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	080068e7 	.word	0x080068e7
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	080068e7 	.word	0x080068e7
 80068b4:	080068e7 	.word	0x080068e7
 80068b8:	080068e7 	.word	0x080068e7
 80068bc:	080068df 	.word	0x080068df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fc ffde 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068c6:	e014      	b.n	80068f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c8:	f7fc fff0 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 80068cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068ce:	e010      	b.n	80068f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d0:	4b1a      	ldr	r3, [pc, #104]	@ (800693c <UART_SetConfig+0x5c0>)
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068d4:	e00d      	b.n	80068f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d6:	f7fc ff65 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 80068da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068dc:	e009      	b.n	80068f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068e4:	e005      	b.n	80068f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068f0:	bf00      	nop
    }

    if (pclk != 0U)
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d028      	beq.n	800694a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	4a10      	ldr	r2, [pc, #64]	@ (8006940 <UART_SetConfig+0x5c4>)
 80068fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006902:	461a      	mov	r2, r3
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	fbb3 f2f2 	udiv	r2, r3, r2
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	441a      	add	r2, r3
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	fbb2 f3f3 	udiv	r3, r2, r3
 800691a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d910      	bls.n	8006944 <UART_SetConfig+0x5c8>
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006928:	d20c      	bcs.n	8006944 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	b29a      	uxth	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
 8006934:	e009      	b.n	800694a <UART_SetConfig+0x5ce>
 8006936:	bf00      	nop
 8006938:	40008000 	.word	0x40008000
 800693c:	00f42400 	.word	0x00f42400
 8006940:	08007d80 	.word	0x08007d80
      }
      else
      {
        ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2201      	movs	r2, #1
 800694e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2201      	movs	r2, #1
 8006956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2200      	movs	r2, #0
 800695e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2200      	movs	r2, #0
 8006964:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006966:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800696a:	4618      	mov	r0, r3
 800696c:	3730      	adds	r7, #48	@ 0x30
 800696e:	46bd      	mov	sp, r7
 8006970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01a      	beq.n	8006a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a72:	d10a      	bne.n	8006a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	605a      	str	r2, [r3, #4]
  }
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b098      	sub	sp, #96	@ 0x60
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ac8:	f7fa fd00 	bl	80014cc <HAL_GetTick>
 8006acc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d12f      	bne.n	8006b3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f88e 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d022      	beq.n	8006b3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e6      	bne.n	8006af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e063      	b.n	8006c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0304 	and.w	r3, r3, #4
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d149      	bne.n	8006bde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b52:	2200      	movs	r2, #0
 8006b54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f857 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d03c      	beq.n	8006bde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	623b      	str	r3, [r7, #32]
   return(result);
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e6      	bne.n	8006b64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bb6:	61fa      	str	r2, [r7, #28]
 8006bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	69b9      	ldr	r1, [r7, #24]
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e5      	bne.n	8006b96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e012      	b.n	8006c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3758      	adds	r7, #88	@ 0x58
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1c:	e04f      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d04b      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c26:	f7fa fc51 	bl	80014cc <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d302      	bcc.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e04e      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d037      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b80      	cmp	r3, #128	@ 0x80
 8006c52:	d034      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b40      	cmp	r3, #64	@ 0x40
 8006c58:	d031      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d110      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f95b 	bl	8006f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e029      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c98:	d111      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f941 	bl	8006f2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e00f      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d0a0      	beq.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b0a3      	sub	sp, #140	@ 0x8c
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	88fa      	ldrh	r2, [r7, #6]
 8006d08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d1a:	d10e      	bne.n	8006d3a <UART_Start_Receive_IT+0x52>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <UART_Start_Receive_IT+0x48>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d2e:	e02d      	b.n	8006d8c <UART_Start_Receive_IT+0xa4>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	22ff      	movs	r2, #255	@ 0xff
 8006d34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d38:	e028      	b.n	8006d8c <UART_Start_Receive_IT+0xa4>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10d      	bne.n	8006d5e <UART_Start_Receive_IT+0x76>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <UART_Start_Receive_IT+0x6c>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	22ff      	movs	r2, #255	@ 0xff
 8006d4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d52:	e01b      	b.n	8006d8c <UART_Start_Receive_IT+0xa4>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	227f      	movs	r2, #127	@ 0x7f
 8006d58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d5c:	e016      	b.n	8006d8c <UART_Start_Receive_IT+0xa4>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d66:	d10d      	bne.n	8006d84 <UART_Start_Receive_IT+0x9c>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <UART_Start_Receive_IT+0x92>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	227f      	movs	r2, #127	@ 0x7f
 8006d74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d78:	e008      	b.n	8006d8c <UART_Start_Receive_IT+0xa4>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	223f      	movs	r2, #63	@ 0x3f
 8006d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d82:	e003      	b.n	8006d8c <UART_Start_Receive_IT+0xa4>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2222      	movs	r2, #34	@ 0x22
 8006d98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006dac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006dc0:	673a      	str	r2, [r7, #112]	@ 0x70
 8006dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006dc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006dce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e3      	bne.n	8006d9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ddc:	d14f      	bne.n	8006e7e <UART_Start_Receive_IT+0x196>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d349      	bcc.n	8006e7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df2:	d107      	bne.n	8006e04 <UART_Start_Receive_IT+0x11c>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a47      	ldr	r2, [pc, #284]	@ (8006f1c <UART_Start_Receive_IT+0x234>)
 8006e00:	675a      	str	r2, [r3, #116]	@ 0x74
 8006e02:	e002      	b.n	8006e0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a46      	ldr	r2, [pc, #280]	@ (8006f20 <UART_Start_Receive_IT+0x238>)
 8006e08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01a      	beq.n	8006e48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e36:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e4      	bne.n	8006e12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006e6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_Start_Receive_IT+0x160>
 8006e7c:	e046      	b.n	8006f0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e86:	d107      	bne.n	8006e98 <UART_Start_Receive_IT+0x1b0>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d103      	bne.n	8006e98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a24      	ldr	r2, [pc, #144]	@ (8006f24 <UART_Start_Receive_IT+0x23c>)
 8006e94:	675a      	str	r2, [r3, #116]	@ 0x74
 8006e96:	e002      	b.n	8006e9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a23      	ldr	r2, [pc, #140]	@ (8006f28 <UART_Start_Receive_IT+0x240>)
 8006e9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d019      	beq.n	8006eda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006eba:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e6      	bne.n	8006ea6 <UART_Start_Receive_IT+0x1be>
 8006ed8:	e018      	b.n	8006f0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f043 0320 	orr.w	r3, r3, #32
 8006eee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ef8:	623b      	str	r3, [r7, #32]
 8006efa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	69f9      	ldr	r1, [r7, #28]
 8006efe:	6a3a      	ldr	r2, [r7, #32]
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	378c      	adds	r7, #140	@ 0x8c
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	08007749 	.word	0x08007749
 8006f20:	080073e5 	.word	0x080073e5
 8006f24:	0800722d 	.word	0x0800722d
 8006f28:	08007075 	.word	0x08007075

08006f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b095      	sub	sp, #84	@ 0x54
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e6      	bne.n	8006f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f7c:	f023 0301 	bic.w	r3, r3, #1
 8006f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e3      	bne.n	8006f66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d118      	bne.n	8006fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0310 	bic.w	r3, r3, #16
 8006fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6979      	ldr	r1, [r7, #20]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006fec:	bf00      	nop
 8006fee:	3754      	adds	r7, #84	@ 0x54
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff f99e 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007014:	bf00      	nop
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	60bb      	str	r3, [r7, #8]
   return(result);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	61bb      	str	r3, [r7, #24]
 8007044:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6979      	ldr	r1, [r7, #20]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	613b      	str	r3, [r7, #16]
   return(result);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e6      	bne.n	8007024 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff f969 	bl	800633c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706a:	bf00      	nop
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b09c      	sub	sp, #112	@ 0x70
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007082:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800708c:	2b22      	cmp	r3, #34	@ 0x22
 800708e:	f040 80be 	bne.w	800720e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800709c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80070a0:	b2d9      	uxtb	r1, r3
 80070a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ac:	400a      	ands	r2, r1
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 80a1 	bne.w	800721e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e6      	bne.n	80070dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800711e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	667b      	str	r3, [r7, #100]	@ 0x64
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800712e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007130:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007134:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800713c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e5      	bne.n	800710e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a33      	ldr	r2, [pc, #204]	@ (8007228 <UART_RxISR_8BIT+0x1b4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d01f      	beq.n	80071a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d018      	beq.n	80071a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	623b      	str	r3, [r7, #32]
   return(result);
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007182:	663b      	str	r3, [r7, #96]	@ 0x60
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800718c:	633b      	str	r3, [r7, #48]	@ 0x30
 800718e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d12e      	bne.n	8007206 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	69b9      	ldr	r1, [r7, #24]
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	617b      	str	r3, [r7, #20]
   return(result);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e6      	bne.n	80071ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d103      	bne.n	80071f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2210      	movs	r2, #16
 80071f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff f8b0 	bl	8006364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007204:	e00b      	b.n	800721e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fa f8f6 	bl	80013f8 <HAL_UART_RxCpltCallback>
}
 800720c:	e007      	b.n	800721e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	699a      	ldr	r2, [r3, #24]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0208 	orr.w	r2, r2, #8
 800721c:	619a      	str	r2, [r3, #24]
}
 800721e:	bf00      	nop
 8007220:	3770      	adds	r7, #112	@ 0x70
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40008000 	.word	0x40008000

0800722c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b09c      	sub	sp, #112	@ 0x70
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800723a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007244:	2b22      	cmp	r3, #34	@ 0x22
 8007246:	f040 80be 	bne.w	80073c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007250:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007258:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800725a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800725e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007262:	4013      	ands	r3, r2
 8007264:	b29a      	uxth	r2, r3
 8007266:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007268:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	f040 80a1 	bne.w	80073d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80072b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e6      	bne.n	8007294 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80072e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80072e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e5      	bne.n	80072c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a33      	ldr	r2, [pc, #204]	@ (80073e0 <UART_RxISR_16BIT+0x1b4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d01f      	beq.n	8007358 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d018      	beq.n	8007358 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	61fb      	str	r3, [r7, #28]
   return(result);
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800733a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007346:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800734a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e6      	bne.n	8007326 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d12e      	bne.n	80073be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	60bb      	str	r3, [r7, #8]
   return(result);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f023 0310 	bic.w	r3, r3, #16
 800737a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6979      	ldr	r1, [r7, #20]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	613b      	str	r3, [r7, #16]
   return(result);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d103      	bne.n	80073ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2210      	movs	r2, #16
 80073ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fe ffd4 	bl	8006364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073bc:	e00b      	b.n	80073d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fa f81a 	bl	80013f8 <HAL_UART_RxCpltCallback>
}
 80073c4:	e007      	b.n	80073d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699a      	ldr	r2, [r3, #24]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0208 	orr.w	r2, r2, #8
 80073d4:	619a      	str	r2, [r3, #24]
}
 80073d6:	bf00      	nop
 80073d8:	3770      	adds	r7, #112	@ 0x70
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40008000 	.word	0x40008000

080073e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b0ac      	sub	sp, #176	@ 0xb0
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800741a:	2b22      	cmp	r3, #34	@ 0x22
 800741c:	f040 8183 	bne.w	8007726 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007426:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800742a:	e126      	b.n	800767a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007436:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800743a:	b2d9      	uxtb	r1, r3
 800743c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007440:	b2da      	uxtb	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007446:	400a      	ands	r2, r1
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800745c:	b29b      	uxth	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	2b00      	cmp	r3, #0
 800747c:	d053      	beq.n	8007526 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800747e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d011      	beq.n	80074ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800748a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800748e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2201      	movs	r2, #1
 800749c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a4:	f043 0201 	orr.w	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d011      	beq.n	80074de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80074ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00b      	beq.n	80074de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2202      	movs	r2, #2
 80074cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	f043 0204 	orr.w	r2, r3, #4
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d011      	beq.n	800750e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2204      	movs	r2, #4
 80074fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007504:	f043 0202 	orr.w	r2, r3, #2
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fe ff19 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 80a3 	bne.w	800767a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007556:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007558:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800755c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007564:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e4      	bne.n	8007534 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3308      	adds	r3, #8
 8007570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800757a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800757c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3308      	adds	r3, #8
 800758e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007592:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007594:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007598:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80075a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e1      	bne.n	800756a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a60      	ldr	r2, [pc, #384]	@ (8007740 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d021      	beq.n	8007608 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01a      	beq.n	8007608 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80075e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80075f6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e4      	bne.n	80075d2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d130      	bne.n	8007672 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	f023 0310 	bic.w	r3, r3, #16
 800762a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007638:	643b      	str	r3, [r7, #64]	@ 0x40
 800763a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800763e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e4      	bne.n	8007616 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b10      	cmp	r3, #16
 8007658:	d103      	bne.n	8007662 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2210      	movs	r2, #16
 8007660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe fe7a 	bl	8006364 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007670:	e00e      	b.n	8007690 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7f9 fec0 	bl	80013f8 <HAL_UART_RxCpltCallback>
        break;
 8007678:	e00a      	b.n	8007690 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800767a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800767e:	2b00      	cmp	r3, #0
 8007680:	d006      	beq.n	8007690 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	f47f aece 	bne.w	800742c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007696:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800769a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d049      	beq.n	8007736 <UART_RxISR_8BIT_FIFOEN+0x352>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076a8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d242      	bcs.n	8007736 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80076d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e3      	bne.n	80076b0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a16      	ldr	r2, [pc, #88]	@ (8007744 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80076ec:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f043 0320 	orr.w	r3, r3, #32
 8007702:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6979      	ldr	r1, [r7, #20]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	613b      	str	r3, [r7, #16]
   return(result);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007724:	e007      	b.n	8007736 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0208 	orr.w	r2, r2, #8
 8007734:	619a      	str	r2, [r3, #24]
}
 8007736:	bf00      	nop
 8007738:	37b0      	adds	r7, #176	@ 0xb0
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40008000 	.word	0x40008000
 8007744:	08007075 	.word	0x08007075

08007748 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0ae      	sub	sp, #184	@ 0xb8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007756:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800777e:	2b22      	cmp	r3, #34	@ 0x22
 8007780:	f040 8187 	bne.w	8007a92 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800778a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800778e:	e12a      	b.n	80079e6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007796:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80077a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80077a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80077aa:	4013      	ands	r3, r2
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b8:	1c9a      	adds	r2, r3, #2
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d053      	beq.n	800788e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d011      	beq.n	8007816 <UART_RxISR_16BIT_FIFOEN+0xce>
 80077f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2201      	movs	r2, #1
 8007804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780c:	f043 0201 	orr.w	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2202      	movs	r2, #2
 8007834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783c:	f043 0204 	orr.w	r2, r3, #4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d011      	beq.n	8007876 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2204      	movs	r2, #4
 8007864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786c:	f043 0202 	orr.w	r2, r3, #2
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7fe fd65 	bl	8006350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 80a5 	bne.w	80079e6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80078c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e2      	bne.n	800789c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80078fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007900:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007904:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800790c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e1      	bne.n	80078d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a60      	ldr	r2, [pc, #384]	@ (8007aac <UART_RxISR_16BIT_FIFOEN+0x364>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d021      	beq.n	8007974 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01a      	beq.n	8007974 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800794c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800794e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007962:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007966:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800796e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e4      	bne.n	800793e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d130      	bne.n	80079de <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007992:	f023 0310 	bic.w	r3, r3, #16
 8007996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80079a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e4      	bne.n	8007982 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	2b10      	cmp	r3, #16
 80079c4:	d103      	bne.n	80079ce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2210      	movs	r2, #16
 80079cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fe fcc4 	bl	8006364 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80079dc:	e00e      	b.n	80079fc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7f9 fd0a 	bl	80013f8 <HAL_UART_RxCpltCallback>
        break;
 80079e4:	e00a      	b.n	80079fc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079e6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80079ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f47f aeca 	bne.w	8007790 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d049      	beq.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a14:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d242      	bcs.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3308      	adds	r3, #8
 8007a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007a40:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e3      	bne.n	8007a1c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007a58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f043 0320 	orr.w	r3, r3, #32
 8007a6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a7c:	61fb      	str	r3, [r7, #28]
 8007a7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	69b9      	ldr	r1, [r7, #24]
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e4      	bne.n	8007a5a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a90:	e007      	b.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0208 	orr.w	r2, r2, #8
 8007aa0:	619a      	str	r2, [r3, #24]
}
 8007aa2:	bf00      	nop
 8007aa4:	37b8      	adds	r7, #184	@ 0xb8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40008000 	.word	0x40008000
 8007ab0:	0800722d 	.word	0x0800722d

08007ab4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b02:	2302      	movs	r3, #2
 8007b04:	e027      	b.n	8007b56 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2224      	movs	r2, #36	@ 0x24
 8007b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e02d      	b.n	8007bd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2224      	movs	r2, #36	@ 0x24
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f850 	bl	8007c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e02d      	b.n	8007c52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2224      	movs	r2, #36	@ 0x24
 8007c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0201 	bic.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f812 	bl	8007c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d108      	bne.n	8007c7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c7c:	e031      	b.n	8007ce2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c7e:	2308      	movs	r3, #8
 8007c80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c82:	2308      	movs	r3, #8
 8007c84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	0e5b      	lsrs	r3, r3, #25
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	0f5b      	lsrs	r3, r3, #29
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	7b3a      	ldrb	r2, [r7, #12]
 8007caa:	4911      	ldr	r1, [pc, #68]	@ (8007cf0 <UARTEx_SetNbDataToProcess+0x94>)
 8007cac:	5c8a      	ldrb	r2, [r1, r2]
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cb2:	7b3a      	ldrb	r2, [r7, #12]
 8007cb4:	490f      	ldr	r1, [pc, #60]	@ (8007cf4 <UARTEx_SetNbDataToProcess+0x98>)
 8007cb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	7b7a      	ldrb	r2, [r7, #13]
 8007cc8:	4909      	ldr	r1, [pc, #36]	@ (8007cf0 <UARTEx_SetNbDataToProcess+0x94>)
 8007cca:	5c8a      	ldrb	r2, [r1, r2]
 8007ccc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cd0:	7b7a      	ldrb	r2, [r7, #13]
 8007cd2:	4908      	ldr	r1, [pc, #32]	@ (8007cf4 <UARTEx_SetNbDataToProcess+0x98>)
 8007cd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ce2:	bf00      	nop
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	08007d98 	.word	0x08007d98
 8007cf4:	08007da0 	.word	0x08007da0

08007cf8 <memset>:
 8007cf8:	4402      	add	r2, r0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d100      	bne.n	8007d02 <memset+0xa>
 8007d00:	4770      	bx	lr
 8007d02:	f803 1b01 	strb.w	r1, [r3], #1
 8007d06:	e7f9      	b.n	8007cfc <memset+0x4>

08007d08 <__libc_init_array>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007d40 <__libc_init_array+0x38>)
 8007d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8007d44 <__libc_init_array+0x3c>)
 8007d0e:	1b64      	subs	r4, r4, r5
 8007d10:	10a4      	asrs	r4, r4, #2
 8007d12:	2600      	movs	r6, #0
 8007d14:	42a6      	cmp	r6, r4
 8007d16:	d109      	bne.n	8007d2c <__libc_init_array+0x24>
 8007d18:	4d0b      	ldr	r5, [pc, #44]	@ (8007d48 <__libc_init_array+0x40>)
 8007d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d4c <__libc_init_array+0x44>)
 8007d1c:	f000 f818 	bl	8007d50 <_init>
 8007d20:	1b64      	subs	r4, r4, r5
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	2600      	movs	r6, #0
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	d105      	bne.n	8007d36 <__libc_init_array+0x2e>
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d30:	4798      	blx	r3
 8007d32:	3601      	adds	r6, #1
 8007d34:	e7ee      	b.n	8007d14 <__libc_init_array+0xc>
 8007d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3a:	4798      	blx	r3
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	e7f2      	b.n	8007d26 <__libc_init_array+0x1e>
 8007d40:	08007db0 	.word	0x08007db0
 8007d44:	08007db0 	.word	0x08007db0
 8007d48:	08007db0 	.word	0x08007db0
 8007d4c:	08007db4 	.word	0x08007db4

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr
