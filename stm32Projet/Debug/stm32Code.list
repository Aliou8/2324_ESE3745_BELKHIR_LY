
stm32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df00  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800e0e0  0800e0e0  0000f0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e614  0800e614  00010290  2**0
                  CONTENTS
  4 .ARM          00000008  0800e614  0800e614  0000f614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e61c  0800e61c  00010290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e61c  0800e61c  0000f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e620  0800e620  0000f620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000290  20000000  0800e624  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000290  0800e8b4  00010290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800e8b4  000107a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbe8  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003909  00000000  00000000  0002bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0002f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001156  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a54e  00000000  00000000  00031f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c070  00000000  00000000  0005c4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114a7c  00000000  00000000  0007853c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cfb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007560  00000000  00000000  0018cffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0019455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e0c8 	.word	0x0800e0c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	0800e0c8 	.word	0x0800e0c8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fc74 	bl	800a95a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <MX_ADC1_Init+0xe8>)
 800107c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_ADC1_Init+0xe8>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	4817      	ldr	r0, [pc, #92]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010de:	f001 fd31 	bl	8002b44 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 faae 	bl	8001648 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010f8:	f002 fec2 	bl	8003e80 <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001102:	f000 faa1 	bl	8001648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800110e:	2303      	movs	r3, #3
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	@ 0x7f
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001124:	f002 f8c2 	bl	80032ac <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800112e:	f000 fa8b 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	@ 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002ac 	.word	0x200002ac
 8001140:	08600004 	.word	0x08600004

08001144 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f009 fc02 	bl	800a95a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001158:	4a2b      	ldr	r2, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc4>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800115e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001162:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800117e:	2204      	movs	r2, #4
 8001180:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001190:	2201      	movs	r2, #1
 8001192:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011c0:	f001 fcc0 	bl	8002b44 <HAL_ADC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ca:	f000 fa3d 	bl	8001648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_ADC2_Init+0xc8>)
 80011d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d2:	2306      	movs	r3, #6
 80011d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011da:	237f      	movs	r3, #127	@ 0x7f
 80011dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011de:	2304      	movs	r3, #4
 80011e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011ec:	f002 f85e 	bl	80032ac <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011f6:	f000 fa27 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000318 	.word	0x20000318
 8001208:	50000100 	.word	0x50000100
 800120c:	19200040 	.word	0x19200040

08001210 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0a4      	sub	sp, #144	@ 0x90
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f009 fb92 	bl	800a95a <memset>
  if(adcHandle->Instance==ADC1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123e:	d174      	bne.n	800132a <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001246:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001250:	4618      	mov	r0, r3
 8001252:	f004 f88f 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800125c:	f000 f9f4 	bl	8001648 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001260:	4b63      	ldr	r3, [pc, #396]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a62      	ldr	r2, [pc, #392]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001268:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800126a:	4b61      	ldr	r3, [pc, #388]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10b      	bne.n	800128a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a5f      	ldr	r2, [pc, #380]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001278:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b5a      	ldr	r3, [pc, #360]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a59      	ldr	r2, [pc, #356]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b57      	ldr	r3, [pc, #348]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b54      	ldr	r3, [pc, #336]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a53      	ldr	r2, [pc, #332]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b51      	ldr	r3, [pc, #324]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b4e      	ldr	r3, [pc, #312]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a4d      	ldr	r2, [pc, #308]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b4b      	ldr	r3, [pc, #300]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d2:	2304      	movs	r3, #4
 80012d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012e6:	4619      	mov	r1, r3
 80012e8:	4843      	ldr	r0, [pc, #268]	@ (80013f8 <HAL_ADC_MspInit+0x1e8>)
 80012ea:	f003 f871 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012ee:	2302      	movs	r3, #2
 80012f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f003 f862 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800130c:	2303      	movs	r3, #3
 800130e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001310:	2303      	movs	r3, #3
 8001312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001320:	4619      	mov	r1, r3
 8001322:	4836      	ldr	r0, [pc, #216]	@ (80013fc <HAL_ADC_MspInit+0x1ec>)
 8001324:	f003 f854 	bl	80043d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001328:	e05e      	b.n	80013e8 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a34      	ldr	r2, [pc, #208]	@ (8001400 <HAL_ADC_MspInit+0x1f0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d159      	bne.n	80013e8 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800133a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800133e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001344:	4618      	mov	r0, r3
 8001346:	f004 f815 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001350:	f000 f97a 	bl	8001648 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001354:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a25      	ldr	r2, [pc, #148]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 800135c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10b      	bne.n	800137e <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800136c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a16      	ldr	r2, [pc, #88]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80013ae:	230b      	movs	r3, #11
 80013b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <HAL_ADC_MspInit+0x1e8>)
 80013c6:	f003 f803 	bl	80043d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80013ca:	2301      	movs	r3, #1
 80013cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e4:	f002 fff4 	bl	80043d0 <HAL_GPIO_Init>
}
 80013e8:	bf00      	nop
 80013ea:	3790      	adds	r7, #144	@ 0x90
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000384 	.word	0x20000384
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000400 	.word	0x48000400
 8001400:	50000100 	.word	0x50000100

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_GPIO_Init+0x114>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a3e      	ldr	r2, [pc, #248]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a38      	ldr	r2, [pc, #224]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <MX_GPIO_Init+0x114>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a2c      	ldr	r2, [pc, #176]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <MX_GPIO_Init+0x114>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a26      	ldr	r2, [pc, #152]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149a:	f003 f91b 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2104      	movs	r1, #4
 80014a2:	481e      	ldr	r0, [pc, #120]	@ (800151c <MX_GPIO_Init+0x118>)
 80014a4:	f003 f916 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4818      	ldr	r0, [pc, #96]	@ (8001520 <MX_GPIO_Init+0x11c>)
 80014c0:	f002 ff86 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80014c4:	2320      	movs	r3, #32
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f002 ff77 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80014e2:	2304      	movs	r3, #4
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <MX_GPIO_Init+0x118>)
 80014fa:	f002 ff69 	bl	80043d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2028      	movs	r0, #40	@ 0x28
 8001504:	f002 fe7c 	bl	8004200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001508:	2028      	movs	r0, #40	@ 0x28
 800150a:	f002 fe93 	bl	8004234 <HAL_NVIC_EnableIRQ>

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	48000c00 	.word	0x48000c00
 8001520:	48000800 	.word	0x48000800

08001524 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]



HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	@ (8001544 <__io_putchar+0x20>)
 8001536:	f006 f8b4 	bl	80076a2 <HAL_UART_Transmit>

//HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);

return chr;
 800153a:	687b      	ldr	r3, [r7, #4]

}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000470 	.word	0x20000470

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154c:	f001 f84f 	bl	80025ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001550:	f000 f81e 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001554:	f7ff ff56 	bl	8001404 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001558:	f7ff fdf4 	bl	8001144 <MX_ADC2_Init>
  MX_ADC1_Init();
 800155c:	f7ff fd7a 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001560:	f000 fa36 	bl	80019d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001564:	f000 fb02 	bl	8001b6c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001568:	f000 fc36 	bl	8001dd8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800156c:	f000 fc80 	bl	8001e70 <MX_USART3_UART_Init>

  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  //HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
  //HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
  Shell_Init() ;
 8001570:	f000 feb8 	bl	80022e4 <Shell_Init>
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8001574:	217f      	movs	r1, #127	@ 0x7f
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <main+0x44>)
 8001578:	f002 fc20 	bl	8003dbc <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800157c:	f000 fef2 	bl	8002364 <Shell_Loop>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

     HAL_Delay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f001 f86b 	bl	800265c <HAL_Delay>
		Shell_Loop();
 8001586:	bf00      	nop
 8001588:	e7f8      	b.n	800157c <main+0x34>
 800158a:	bf00      	nop
 800158c:	200002ac 	.word	0x200002ac

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	@ 0x50
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	2238      	movs	r2, #56	@ 0x38
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f009 f9db 	bl	800a95a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f003 f8ca 	bl	800474c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	2303      	movs	r3, #3
 80015c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015ca:	2306      	movs	r3, #6
 80015cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015ce:	2355      	movs	r3, #85	@ 0x55
 80015d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015da:	2302      	movs	r3, #2
 80015dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 f966 	bl	80048b4 <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015ee:	f000 f82b 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2303      	movs	r3, #3
 80015f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2104      	movs	r1, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fc64 	bl	8004ed8 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001616:	f000 f817 	bl	8001648 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	3750      	adds	r7, #80	@ 0x50
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001636:	f000 fff3 	bl	8002620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40001000 	.word	0x40001000

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <Error_Handler+0x8>

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <HAL_MspInit+0x44>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165e:	4a0e      	ldr	r2, [pc, #56]	@ (8001698 <HAL_MspInit+0x44>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	@ 0x60
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <HAL_MspInit+0x44>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_MspInit+0x44>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	4a08      	ldr	r2, [pc, #32]	@ (8001698 <HAL_MspInit+0x44>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6593      	str	r3, [r2, #88]	@ 0x58
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_MspInit+0x44>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800168a:	f003 f903 	bl	8004894 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	@ 0x30
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001760 <HAL_InitTick+0xc4>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <HAL_InitTick+0xc4>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b8:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <HAL_InitTick+0xc4>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c4:	f107 020c 	add.w	r2, r7, #12
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fdd8 	bl	8005284 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016d4:	f003 fdaa 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 80016d8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016dc:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <HAL_InitTick+0xc8>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	3b01      	subs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <HAL_InitTick+0xcc>)
 80016ea:	4a20      	ldr	r2, [pc, #128]	@ (800176c <HAL_InitTick+0xd0>)
 80016ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <HAL_InitTick+0xcc>)
 80016f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001768 <HAL_InitTick+0xcc>)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_InitTick+0xcc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_InitTick+0xcc>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001708:	4817      	ldr	r0, [pc, #92]	@ (8001768 <HAL_InitTick+0xcc>)
 800170a:	f004 f881 	bl	8005810 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11b      	bne.n	8001754 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800171c:	4812      	ldr	r0, [pc, #72]	@ (8001768 <HAL_InitTick+0xcc>)
 800171e:	f004 f8cf 	bl	80058c0 <HAL_TIM_Base_Start_IT>
 8001722:	4603      	mov	r3, r0
 8001724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800172c:	2b00      	cmp	r3, #0
 800172e:	d111      	bne.n	8001754 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001730:	2036      	movs	r0, #54	@ 0x36
 8001732:	f002 fd7f 	bl	8004234 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d808      	bhi.n	800174e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	2036      	movs	r0, #54	@ 0x36
 8001742:	f002 fd5d 	bl	8004200 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_InitTick+0xd4>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e002      	b.n	8001754 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001758:	4618      	mov	r0, r3
 800175a:	3730      	adds	r7, #48	@ 0x30
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	431bde83 	.word	0x431bde83
 8001768:	20000388 	.word	0x20000388
 800176c:	40001000 	.word	0x40001000
 8001770:	200000c0 	.word	0x200000c0

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <USART2_IRQHandler+0x10>)
 80017da:	f006 f83d 	bl	8007858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000470 	.word	0x20000470

080017e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <USART3_IRQHandler+0x10>)
 80017ee:	f006 f833 	bl	8007858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000504 	.word	0x20000504

080017fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001800:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001804:	f002 ff7e 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <TIM6_DAC_IRQHandler+0x10>)
 8001812:	f004 fadd 	bl	8005dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000388 	.word	0x20000388

08001820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return 1;
 8001824:	2301      	movs	r3, #1
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_kill>:

int _kill(int pid, int sig)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800183a:	f009 f93d 	bl	800aab8 <__errno>
 800183e:	4603      	mov	r3, r0
 8001840:	2216      	movs	r2, #22
 8001842:	601a      	str	r2, [r3, #0]
  return -1;
 8001844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_exit>:

void _exit (int status)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ffe7 	bl	8001830 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001862:	bf00      	nop
 8001864:	e7fd      	b.n	8001862 <_exit+0x12>

08001866 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e00a      	b.n	800188e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001878:	f3af 8000 	nop.w
 800187c:	4601      	mov	r1, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60ba      	str	r2, [r7, #8]
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf0      	blt.n	8001878 <_read+0x12>
  }

  return len;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e009      	b.n	80018c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	60ba      	str	r2, [r7, #8]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe32 	bl	8001524 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbf1      	blt.n	80018b2 <_write+0x12>
  }
  return len;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_close>:

int _close(int file)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001900:	605a      	str	r2, [r3, #4]
  return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_isatty>:

int _isatty(int file)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f009 f8a2 	bl	800aab8 <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20020000 	.word	0x20020000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	200003d4 	.word	0x200003d4
 80019a8:	200007a8 	.word	0x200007a8

080019ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b09c      	sub	sp, #112	@ 0x70
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2234      	movs	r2, #52	@ 0x34
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f008 ffa5 	bl	800a95a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a10:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a12:	4a55      	ldr	r2, [pc, #340]	@ (8001b68 <MX_TIM1_Init+0x198>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7-1;
 8001a16:	4b53      	ldr	r3, [pc, #332]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a18:	2206      	movs	r2, #6
 8001a1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a1c:	4b51      	ldr	r3, [pc, #324]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a1e:	2220      	movs	r2, #32
 8001a20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001a22:	4b50      	ldr	r3, [pc, #320]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a24:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001a28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a30:	4b4c      	ldr	r3, [pc, #304]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a36:	4b4b      	ldr	r3, [pc, #300]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a38:	2280      	movs	r2, #128	@ 0x80
 8001a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a3c:	4849      	ldr	r0, [pc, #292]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a3e:	f003 fee7 	bl	8005810 <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a48:	f7ff fdfe 	bl	8001648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a56:	4619      	mov	r1, r3
 8001a58:	4842      	ldr	r0, [pc, #264]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a5a:	f004 fc1d 	bl	8006298 <HAL_TIM_ConfigClockSource>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a64:	f7ff fdf0 	bl	8001648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a68:	483e      	ldr	r0, [pc, #248]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a6a:	f003 ffa1 	bl	80059b0 <HAL_TIM_PWM_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a74:	f7ff fde8 	bl	8001648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4836      	ldr	r0, [pc, #216]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001a8c:	f005 fc24 	bl	80072d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a96:	f7ff fdd7 	bl	8001648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9a:	2360      	movs	r3, #96	@ 0x60
 8001a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 614;
 8001a9e:	f240 2366 	movw	r3, #614	@ 0x266
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4828      	ldr	r0, [pc, #160]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001ac2:	f004 fad5 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001acc:	f7ff fdbc 	bl	8001648 <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 8001ad0:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 8001ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ad6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ada:	2204      	movs	r2, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4821      	ldr	r0, [pc, #132]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001ae0:	f004 fac6 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001aea:	f7ff fdad 	bl	8001648 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001af2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001af6:	2208      	movs	r2, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	481a      	ldr	r0, [pc, #104]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001afc:	f004 fab8 	bl	8006070 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001b06:	f7ff fd9f 	bl	8001648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 13;
 8001b16:	230d      	movs	r3, #13
 8001b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4807      	ldr	r0, [pc, #28]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001b48:	f005 fc5c 	bl	8007404 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8001b52:	f7ff fd79 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b56:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <MX_TIM1_Init+0x194>)
 8001b58:	f000 f8d6 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001b5c:	bf00      	nop
 8001b5e:	3770      	adds	r7, #112	@ 0x70
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200003d8 	.word	0x200003d8
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c00 <MX_TIM3_Init+0x94>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001bc8:	f005 f9b7 	bl	8006f3a <HAL_TIMEx_HallSensor_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bd2:	f7ff fd39 	bl	8001648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001bd6:	2350      	movs	r3, #80	@ 0x50
 8001bd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <MX_TIM3_Init+0x90>)
 8001be4:	f005 fb78 	bl	80072d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001bee:	f7ff fd2b 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000424 	.word	0x20000424
 8001c00:	40000400 	.word	0x40000400

08001c04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_TIM_Base_MspInit+0x38>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10b      	bne.n	8001c2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_TIM_Base_MspInit+0x3c>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <HAL_TIM_Base_MspInit+0x3c>)
 8001c1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_TIM_Base_MspInit+0x3c>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40021000 	.word	0x40021000

08001c44 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d145      	bne.n	8001cf2 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	4a25      	ldr	r2, [pc, #148]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c72:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	4a1f      	ldr	r2, [pc, #124]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001cae:	2350      	movs	r3, #80	@ 0x50
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ccc:	f002 fb80 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001cee:	f002 fb6f 	bl	80043d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40021000 	.word	0x40021000
 8001d04:	48000800 	.word	0x48000800

08001d08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a29      	ldr	r2, [pc, #164]	@ (8001dcc <HAL_TIM_MspPostInit+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d14b      	bne.n	8001dc2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <HAL_TIM_MspPostInit+0xc8>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	4a28      	ldr	r2, [pc, #160]	@ (8001dd0 <HAL_TIM_MspPostInit+0xc8>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d36:	4b26      	ldr	r3, [pc, #152]	@ (8001dd0 <HAL_TIM_MspPostInit+0xc8>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_TIM_MspPostInit+0xc8>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	4a22      	ldr	r2, [pc, #136]	@ (8001dd0 <HAL_TIM_MspPostInit+0xc8>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_TIM_MspPostInit+0xc8>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001d5a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	4817      	ldr	r0, [pc, #92]	@ (8001dd4 <HAL_TIM_MspPostInit+0xcc>)
 8001d78:	f002 fb2a 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001d7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	480e      	ldr	r0, [pc, #56]	@ (8001dd4 <HAL_TIM_MspPostInit+0xcc>)
 8001d9a:	f002 fb19 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001d9e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001db0:	2306      	movs	r3, #6
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbe:	f002 fb07 	bl	80043d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	@ 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001dde:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <MX_USART2_UART_Init+0x94>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e20:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e22:	f005 fbee 	bl	8007602 <HAL_UART_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f7ff fc0c 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e34:	f007 fc65 	bl	8009702 <HAL_UARTEx_SetTxFifoThreshold>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f7ff fc03 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e46:	f007 fc9a 	bl	800977e <HAL_UARTEx_SetRxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f7ff fbfa 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <MX_USART2_UART_Init+0x90>)
 8001e56:	f007 fc1b 	bl	8009690 <HAL_UARTEx_DisableFifoMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f7ff fbf2 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000470 	.word	0x20000470
 8001e6c:	40004400 	.word	0x40004400

08001e70 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <MX_USART3_UART_Init+0x94>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001eba:	f005 fba2 	bl	8007602 <HAL_UART_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f7ff fbc0 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001ecc:	f007 fc19 	bl	8009702 <HAL_UARTEx_SetTxFifoThreshold>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ed6:	f7ff fbb7 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001ede:	f007 fc4e 	bl	800977e <HAL_UARTEx_SetRxFifoThreshold>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f7ff fbae 	bl	8001648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_USART3_UART_Init+0x90>)
 8001eee:	f007 fbcf 	bl	8009690 <HAL_UARTEx_DisableFifoMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f7ff fba6 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000504 	.word	0x20000504
 8001f04:	40004800 	.word	0x40004800

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0a0      	sub	sp, #128	@ 0x80
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f20:	f107 0318 	add.w	r3, r7, #24
 8001f24:	2254      	movs	r2, #84	@ 0x54
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 fd16 	bl	800a95a <memset>
  if(uartHandle->Instance==USART2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a45      	ldr	r2, [pc, #276]	@ (8002048 <HAL_UART_MspInit+0x140>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d13f      	bne.n	8001fb8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fa15 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f50:	f7ff fb7a 	bl	8001648 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f54:	4b3d      	ldr	r3, [pc, #244]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	4a3c      	ldr	r2, [pc, #240]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f60:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b37      	ldr	r3, [pc, #220]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	4a36      	ldr	r2, [pc, #216]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f78:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f84:	230c      	movs	r3, #12
 8001f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f94:	2307      	movs	r3, #7
 8001f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa2:	f002 fa15 	bl	80043d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2026      	movs	r0, #38	@ 0x26
 8001fac:	f002 f928 	bl	8004200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb0:	2026      	movs	r0, #38	@ 0x26
 8001fb2:	f002 f93f 	bl	8004234 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fb6:	e043      	b.n	8002040 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <HAL_UART_MspInit+0x148>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d13e      	bne.n	8002040 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 f9d0 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001fda:	f7ff fb35 	bl	8001648 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	4a14      	ldr	r2, [pc, #80]	@ (800204c <HAL_UART_MspInit+0x144>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_UART_MspInit+0x144>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800200e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002012:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002020:	2307      	movs	r3, #7
 8002022:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002028:	4619      	mov	r1, r3
 800202a:	480a      	ldr	r0, [pc, #40]	@ (8002054 <HAL_UART_MspInit+0x14c>)
 800202c:	f002 f9d0 	bl	80043d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2027      	movs	r0, #39	@ 0x27
 8002036:	f002 f8e3 	bl	8004200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800203a:	2027      	movs	r0, #39	@ 0x27
 800203c:	f002 f8fa 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3780      	adds	r7, #128	@ 0x80
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40004400 	.word	0x40004400
 800204c:	40021000 	.word	0x40021000
 8002050:	40004800 	.word	0x40004800
 8002054:	48000800 	.word	0x48000800

08002058 <setPWMsDutyCycle>:
 * 
 * @param alpha Nouvelle valeur du rapport cyclique souhaité 
 */

static void setPWMsDutyCycle(int alpha)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    int alphaActuel = __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_1); // Obtient le rapport cyclique actuel de TIM_CHANNEL1
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <setPWMsDutyCycle+0x78>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002066:	60fb      	str	r3, [r7, #12]

    // Ajustement progressif du rapport cyclique
    if (alpha < alphaActuel)
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	da27      	bge.n	80020c0 <setPWMsDutyCycle+0x68>
    {
        // Si la nouvelle valeur est inférieure à l'actuelle, on la diminue progressivement
        while (alphaActuel > alpha)
 8002070:	e010      	b.n	8002094 <setPWMsDutyCycle+0x3c>
        {
            alphaActuel--; // Décrémente alphaActuel pour atteindre la cible
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3b01      	subs	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
            __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, alphaActuel);
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <setPWMsDutyCycle+0x78>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - alphaActuel);
 8002080:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <setPWMsDutyCycle+0x7c>)
 8002082:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <setPWMsDutyCycle+0x78>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1a8a      	subs	r2, r1, r2
 800208c:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_Delay(20);
 800208e:	2014      	movs	r0, #20
 8002090:	f000 fae4 	bl	800265c <HAL_Delay>
        while (alphaActuel > alpha)
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	429a      	cmp	r2, r3
 800209a:	dcea      	bgt.n	8002072 <setPWMsDutyCycle+0x1a>
            __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, alphaActuel);
            __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - alphaActuel);
            HAL_Delay(20);
        }
    }
}
 800209c:	e014      	b.n	80020c8 <setPWMsDutyCycle+0x70>
            alphaActuel++; // Incrémente alphaActuel pour atteindre la cible
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
            __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, alphaActuel);
 80020a4:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <setPWMsDutyCycle+0x78>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - alphaActuel);
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <setPWMsDutyCycle+0x7c>)
 80020ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <setPWMsDutyCycle+0x78>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1a8a      	subs	r2, r1, r2
 80020b8:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_Delay(20);
 80020ba:	2014      	movs	r0, #20
 80020bc:	f000 face 	bl	800265c <HAL_Delay>
        while (alphaActuel < alpha)
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbea      	blt.n	800209e <setPWMsDutyCycle+0x46>
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200003d8 	.word	0x200003d8
 80020d4:	40012c00 	.word	0x40012c00

080020d8 <moteurSetSpeed>:
 * 
 * @param cmd La commande de vitesse souhaitée transmise par UART 
 */

void moteurSetSpeed(char* cmd)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    double vitesse = atoi(cmd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f007 fbd9 	bl	8009898 <atoi>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa53 	bl	8000594 <__aeabi_i2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (vitesse > VITESSE_MAX)  // Limite la vitesse à la valeur maximale
 80020f6:	a322      	add	r3, pc, #136	@ (adr r3, 8002180 <moteurSetSpeed+0xa8>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002100:	f7fe fd42 	bl	8000b88 <__aeabi_dcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <moteurSetSpeed+0x3c>
    {
        vitesse = VITESSE_MAX;
 800210a:	a31d      	add	r3, pc, #116	@ (adr r3, 8002180 <moteurSetSpeed+0xa8>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
    if (vitesse < 0)  // Limite la vitesse à la valeur minimale
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002120:	f7fe fd14 	bl	8000b4c <__aeabi_dcmplt>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <moteurSetSpeed+0x5e>
    {
        vitesse = 0;
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
    uint32_t alpha = (vitesse * ALPHA_MAX)/VITESSE_MAX; // Convertit la vitesse en rapport cyclique PWM
 8002136:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <moteurSetSpeed+0xb0>)
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa1a 	bl	8000574 <__aeabi_ui2d>
 8002140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002144:	f7fe fa90 	bl	8000668 <__aeabi_dmul>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	a30b      	add	r3, pc, #44	@ (adr r3, 8002180 <moteurSetSpeed+0xa8>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe fbb1 	bl	80008bc <__aeabi_ddiv>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe fd59 	bl	8000c18 <__aeabi_d2uiz>
 8002166:	4603      	mov	r3, r0
 8002168:	60fb      	str	r3, [r7, #12]
    setPWMsDutyCycle(alpha);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff73 	bl	8002058 <setPWMsDutyCycle>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
 8002180:	00000000 	.word	0x00000000
 8002184:	40a77000 	.word	0x40a77000
 8002188:	40012c00 	.word	0x40012c00

0800218c <moteurStart>:
 * Cette fonction initialise le moteur avec un rapport cyclique correspondant à une vitesse de 50%.
 * Elle configure les canaux TIM_CHANNEL1 et TIM_CHANNEL2 avec des valeurs complémentaires pour démarrer le moteur.
 */
void moteurStart(void)

{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, ALPHA_0);
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <moteurStart+0x48>)
 8002192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002194:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <moteurStart+0x4c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0852      	lsrs	r2, r2, #1
 800219a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - ALPHA_0);
 800219c:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <moteurStart+0x48>)
 800219e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <moteurStart+0x48>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	085a      	lsrs	r2, r3, #1
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <moteurStart+0x4c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1a8a      	subs	r2, r1, r2
 80021ac:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80021ae:	2100      	movs	r1, #0
 80021b0:	4809      	ldr	r0, [pc, #36]	@ (80021d8 <moteurStart+0x4c>)
 80021b2:	f003 fc5f 	bl	8005a74 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80021b6:	2104      	movs	r1, #4
 80021b8:	4807      	ldr	r0, [pc, #28]	@ (80021d8 <moteurStart+0x4c>)
 80021ba:	f003 fc5b 	bl	8005a74 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80021be:	2100      	movs	r1, #0
 80021c0:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <moteurStart+0x4c>)
 80021c2:	f004 ff69 	bl	8007098 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80021c6:	2104      	movs	r1, #4
 80021c8:	4803      	ldr	r0, [pc, #12]	@ (80021d8 <moteurStart+0x4c>)
 80021ca:	f004 ff65 	bl	8007098 <HAL_TIMEx_PWMN_Start>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	200003d8 	.word	0x200003d8

080021dc <moteurStop>:
 * 
 * Cette fonction stoppe le moteur en mettant le rapport cyclique des canaux TIM_CHANNEL1 et TIM_CHANNEL2 à 0.
 * Elle arrête le signal PWM pour chaque canal.
 */
void moteurStop(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, ALPHA_MIN);
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <moteurStop+0x38>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MIN);
 80021e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <moteurStop+0x38>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80021f0:	2100      	movs	r1, #0
 80021f2:	4808      	ldr	r0, [pc, #32]	@ (8002214 <moteurStop+0x38>)
 80021f4:	f003 fd50 	bl	8005c98 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80021f8:	2104      	movs	r1, #4
 80021fa:	4806      	ldr	r0, [pc, #24]	@ (8002214 <moteurStop+0x38>)
 80021fc:	f003 fd4c 	bl	8005c98 <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002200:	2100      	movs	r1, #0
 8002202:	4804      	ldr	r0, [pc, #16]	@ (8002214 <moteurStop+0x38>)
 8002204:	f005 f80a 	bl	800721c <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002208:	2104      	movs	r1, #4
 800220a:	4802      	ldr	r0, [pc, #8]	@ (8002214 <moteurStop+0x38>)
 800220c:	f005 f806 	bl	800721c <HAL_TIMEx_PWMN_Stop>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200003d8 	.word	0x200003d8

08002218 <displayCurrent>:
void displayCurrent(void){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
    // Start ADC Conversion
	float AD_RES=50 ;
 800221e:	4b2e      	ldr	r3, [pc, #184]	@ (80022d8 <displayCurrent+0xc0>)
 8002220:	607b      	str	r3, [r7, #4]
     HAL_ADC_Start(&hadc1);
 8002222:	482e      	ldr	r0, [pc, #184]	@ (80022dc <displayCurrent+0xc4>)
 8002224:	f000 fe4a 	bl	8002ebc <HAL_ADC_Start>
    // Poll ADC1 Perihperal & TimeOut = 1mSec
     HAL_ADC_PollForConversion(&hadc1, 1);
 8002228:	2101      	movs	r1, #1
 800222a:	482c      	ldr	r0, [pc, #176]	@ (80022dc <displayCurrent+0xc4>)
 800222c:	f000 ff2a 	bl	8003084 <HAL_ADC_PollForConversion>
    // Read The ADC Conversion Result
     AD_RES = HAL_ADC_GetValue(&hadc1);
 8002230:	482a      	ldr	r0, [pc, #168]	@ (80022dc <displayCurrent+0xc4>)
 8002232:	f001 f82d 	bl	8003290 <HAL_ADC_GetValue>
 8002236:	ee07 0a90 	vmov	s15, r0
 800223a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223e:	edc7 7a01 	vstr	s15, [r7, #4]
     AD_RES  = AD_RES*1.65/2375 ;
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe f9b8 	bl	80005b8 <__aeabi_f2d>
 8002248:	a31d      	add	r3, pc, #116	@ (adr r3, 80022c0 <displayCurrent+0xa8>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f7fe fa0b 	bl	8000668 <__aeabi_dmul>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	a31b      	add	r3, pc, #108	@ (adr r3, 80022c8 <displayCurrent+0xb0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe fb2c 	bl	80008bc <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fcf4 	bl	8000c58 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	607b      	str	r3, [r7, #4]
     AD_RES = (AD_RES-1.65)/0.00005;
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7fe f99f 	bl	80005b8 <__aeabi_f2d>
 800227a:	a311      	add	r3, pc, #68	@ (adr r3, 80022c0 <displayCurrent+0xa8>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f83a 	bl	80002f8 <__aeabi_dsub>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	a310      	add	r3, pc, #64	@ (adr r3, 80022d0 <displayCurrent+0xb8>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe fb13 	bl	80008bc <__aeabi_ddiv>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f7fe fcdb 	bl	8000c58 <__aeabi_d2f>
 80022a2:	4603      	mov	r3, r0
 80022a4:	607b      	str	r3, [r7, #4]
     printf("val = %f \r\n",AD_RES) ;
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe f986 	bl	80005b8 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	480b      	ldr	r0, [pc, #44]	@ (80022e0 <displayCurrent+0xc8>)
 80022b2:	f008 faa9 	bl	800a808 <iprintf>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	66666666 	.word	0x66666666
 80022c4:	3ffa6666 	.word	0x3ffa6666
 80022c8:	00000000 	.word	0x00000000
 80022cc:	40a28e00 	.word	0x40a28e00
 80022d0:	eb1c432d 	.word	0xeb1c432d
 80022d4:	3f0a36e2 	.word	0x3f0a36e2
 80022d8:	42480000 	.word	0x42480000
 80022dc:	200002ac 	.word	0x200002ac
 80022e0:	0800e0e0 	.word	0x0800e0e0

080022e4 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0

	memset(argv, (int)NULL, MAX_ARGS*sizeof(char*));
 80022e8:	2224      	movs	r2, #36	@ 0x24
 80022ea:	2100      	movs	r1, #0
 80022ec:	4816      	ldr	r0, [pc, #88]	@ (8002348 <Shell_Init+0x64>)
 80022ee:	f008 fb34 	bl	800a95a <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE*sizeof(char));
 80022f2:	2240      	movs	r2, #64	@ 0x40
 80022f4:	2100      	movs	r1, #0
 80022f6:	4815      	ldr	r0, [pc, #84]	@ (800234c <Shell_Init+0x68>)
 80022f8:	f008 fb2f 	bl	800a95a <memset>
	memset(uartRxBuffer, (int)NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80022fc:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <Shell_Init+0x6c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, (int)NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002302:	2240      	movs	r2, #64	@ 0x40
 8002304:	2100      	movs	r1, #0
 8002306:	4813      	ldr	r0, [pc, #76]	@ (8002354 <Shell_Init+0x70>)
 8002308:	f008 fb27 	bl	800a95a <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800230c:	2201      	movs	r2, #1
 800230e:	4910      	ldr	r1, [pc, #64]	@ (8002350 <Shell_Init+0x6c>)
 8002310:	4811      	ldr	r0, [pc, #68]	@ (8002358 <Shell_Init+0x74>)
 8002312:	f005 fa55 	bl	80077c0 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002316:	4811      	ldr	r0, [pc, #68]	@ (800235c <Shell_Init+0x78>)
 8002318:	f7fd ffe2 	bl	80002e0 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	490d      	ldr	r1, [pc, #52]	@ (800235c <Shell_Init+0x78>)
 8002326:	480c      	ldr	r0, [pc, #48]	@ (8002358 <Shell_Init+0x74>)
 8002328:	f005 f9bb 	bl	80076a2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800232c:	480c      	ldr	r0, [pc, #48]	@ (8002360 <Shell_Init+0x7c>)
 800232e:	f7fd ffd7 	bl	80002e0 <strlen>
 8002332:	4603      	mov	r3, r0
 8002334:	b29a      	uxth	r2, r3
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	4909      	ldr	r1, [pc, #36]	@ (8002360 <Shell_Init+0x7c>)
 800233c:	4806      	ldr	r0, [pc, #24]	@ (8002358 <Shell_Init+0x74>)
 800233e:	f005 f9b0 	bl	80076a2 <HAL_UART_Transmit>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000624 	.word	0x20000624
 800234c:	200005e0 	.word	0x200005e0
 8002350:	2000059c 	.word	0x2000059c
 8002354:	200005a0 	.word	0x200005a0
 8002358:	20000470 	.word	0x20000470
 800235c:	20000020 	.word	0x20000020
 8002360:	20000004 	.word	0x20000004

08002364 <Shell_Loop>:

void Shell_Loop(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800236a:	4b6a      	ldr	r3, [pc, #424]	@ (8002514 <Shell_Loop+0x1b0>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d05b      	beq.n	800242a <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8002372:	4b69      	ldr	r3, [pc, #420]	@ (8002518 <Shell_Loop+0x1b4>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d034      	beq.n	80023e4 <Shell_Loop+0x80>
 800237a:	2b0d      	cmp	r3, #13
 800237c:	d142      	bne.n	8002404 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	2203      	movs	r2, #3
 8002384:	4965      	ldr	r1, [pc, #404]	@ (800251c <Shell_Loop+0x1b8>)
 8002386:	4866      	ldr	r0, [pc, #408]	@ (8002520 <Shell_Loop+0x1bc>)
 8002388:	f005 f98b 	bl	80076a2 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800238c:	4b65      	ldr	r3, [pc, #404]	@ (8002524 <Shell_Loop+0x1c0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <Shell_Loop+0x1c4>)
 8002392:	2100      	movs	r1, #0
 8002394:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002396:	4b65      	ldr	r3, [pc, #404]	@ (800252c <Shell_Loop+0x1c8>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800239c:	4964      	ldr	r1, [pc, #400]	@ (8002530 <Shell_Loop+0x1cc>)
 800239e:	4862      	ldr	r0, [pc, #392]	@ (8002528 <Shell_Loop+0x1c4>)
 80023a0:	f008 fae4 	bl	800a96c <strtok>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a63      	ldr	r2, [pc, #396]	@ (8002534 <Shell_Loop+0x1d0>)
 80023a8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80023aa:	e010      	b.n	80023ce <Shell_Loop+0x6a>
				argv[argc++] = token;
 80023ac:	4b5f      	ldr	r3, [pc, #380]	@ (800252c <Shell_Loop+0x1c8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	495e      	ldr	r1, [pc, #376]	@ (800252c <Shell_Loop+0x1c8>)
 80023b4:	600a      	str	r2, [r1, #0]
 80023b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002534 <Shell_Loop+0x1d0>)
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	495f      	ldr	r1, [pc, #380]	@ (8002538 <Shell_Loop+0x1d4>)
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80023c0:	495b      	ldr	r1, [pc, #364]	@ (8002530 <Shell_Loop+0x1cc>)
 80023c2:	2000      	movs	r0, #0
 80023c4:	f008 fad2 	bl	800a96c <strtok>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <Shell_Loop+0x1d0>)
 80023cc:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80023ce:	4b59      	ldr	r3, [pc, #356]	@ (8002534 <Shell_Loop+0x1d0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ea      	bne.n	80023ac <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80023d6:	4b53      	ldr	r3, [pc, #332]	@ (8002524 <Shell_Loop+0x1c0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80023dc:	4b57      	ldr	r3, [pc, #348]	@ (800253c <Shell_Loop+0x1d8>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
			break;
 80023e2:	e01f      	b.n	8002424 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80023e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002524 <Shell_Loop+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	494e      	ldr	r1, [pc, #312]	@ (8002524 <Shell_Loop+0x1c0>)
 80023ec:	600a      	str	r2, [r1, #0]
 80023ee:	4a4e      	ldr	r2, [pc, #312]	@ (8002528 <Shell_Loop+0x1c4>)
 80023f0:	2100      	movs	r1, #0
 80023f2:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295
 80023f8:	2204      	movs	r2, #4
 80023fa:	4951      	ldr	r1, [pc, #324]	@ (8002540 <Shell_Loop+0x1dc>)
 80023fc:	4848      	ldr	r0, [pc, #288]	@ (8002520 <Shell_Loop+0x1bc>)
 80023fe:	f005 f950 	bl	80076a2 <HAL_UART_Transmit>
			break;
 8002402:	e00f      	b.n	8002424 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002404:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <Shell_Loop+0x1c0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	4946      	ldr	r1, [pc, #280]	@ (8002524 <Shell_Loop+0x1c0>)
 800240c:	600a      	str	r2, [r1, #0]
 800240e:	4a42      	ldr	r2, [pc, #264]	@ (8002518 <Shell_Loop+0x1b4>)
 8002410:	7811      	ldrb	r1, [r2, #0]
 8002412:	4a45      	ldr	r2, [pc, #276]	@ (8002528 <Shell_Loop+0x1c4>)
 8002414:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	2201      	movs	r2, #1
 800241c:	493e      	ldr	r1, [pc, #248]	@ (8002518 <Shell_Loop+0x1b4>)
 800241e:	4840      	ldr	r0, [pc, #256]	@ (8002520 <Shell_Loop+0x1bc>)
 8002420:	f005 f93f 	bl	80076a2 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002424:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <Shell_Loop+0x1b0>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 800242a:	4b44      	ldr	r3, [pc, #272]	@ (800253c <Shell_Loop+0x1d8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d06c      	beq.n	800250c <Shell_Loop+0x1a8>
		if(strcmp(argv[1],"what")==0){
 8002432:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <Shell_Loop+0x1d4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4943      	ldr	r1, [pc, #268]	@ (8002544 <Shell_Loop+0x1e0>)
 8002438:	4618      	mov	r0, r3
 800243a:	f7fd fef1 	bl	8000220 <strcmp>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	221a      	movs	r2, #26
 800244a:	493f      	ldr	r1, [pc, #252]	@ (8002548 <Shell_Loop+0x1e4>)
 800244c:	4834      	ldr	r0, [pc, #208]	@ (8002520 <Shell_Loop+0x1bc>)
 800244e:	f005 f928 	bl	80076a2 <HAL_UART_Transmit>
 8002452:	e051      	b.n	80024f8 <Shell_Loop+0x194>
		}
		else if(strcmp(argv[0],"help")==0){
 8002454:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <Shell_Loop+0x1d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	493c      	ldr	r1, [pc, #240]	@ (800254c <Shell_Loop+0x1e8>)
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd fee0 	bl	8000220 <strcmp>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10e      	bne.n	8002484 <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8002466:	4a3a      	ldr	r2, [pc, #232]	@ (8002550 <Shell_Loop+0x1ec>)
 8002468:	2140      	movs	r1, #64	@ 0x40
 800246a:	483a      	ldr	r0, [pc, #232]	@ (8002554 <Shell_Loop+0x1f0>)
 800246c:	f008 f9de 	bl	800a82c <sniprintf>
 8002470:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	b29a      	uxth	r2, r3
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	4936      	ldr	r1, [pc, #216]	@ (8002554 <Shell_Loop+0x1f0>)
 800247c:	4828      	ldr	r0, [pc, #160]	@ (8002520 <Shell_Loop+0x1bc>)
 800247e:	f005 f910 	bl	80076a2 <HAL_UART_Transmit>
 8002482:	e039      	b.n	80024f8 <Shell_Loop+0x194>
		}
		else if (strcmp(argv[0],"speed")==0){
 8002484:	4b2c      	ldr	r3, [pc, #176]	@ (8002538 <Shell_Loop+0x1d4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4933      	ldr	r1, [pc, #204]	@ (8002558 <Shell_Loop+0x1f4>)
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fec8 	bl	8000220 <strcmp>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <Shell_Loop+0x13e>
			moteurSetSpeed(argv[1]);
 8002496:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <Shell_Loop+0x1d4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fe1c 	bl	80020d8 <moteurSetSpeed>
 80024a0:	e02a      	b.n	80024f8 <Shell_Loop+0x194>
		}
		else if (strcmp(argv[0],"stop")==0){
 80024a2:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <Shell_Loop+0x1d4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	492d      	ldr	r1, [pc, #180]	@ (800255c <Shell_Loop+0x1f8>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fd feb9 	bl	8000220 <strcmp>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <Shell_Loop+0x156>
			moteurStop();
 80024b4:	f7ff fe92 	bl	80021dc <moteurStop>
 80024b8:	e01e      	b.n	80024f8 <Shell_Loop+0x194>
		}
		else if (strcmp(argv[0],"start")==0){
 80024ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <Shell_Loop+0x1d4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4928      	ldr	r1, [pc, #160]	@ (8002560 <Shell_Loop+0x1fc>)
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd fead 	bl	8000220 <strcmp>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <Shell_Loop+0x16e>
			moteurStart();
 80024cc:	f7ff fe5e 	bl	800218c <moteurStart>
 80024d0:	e012      	b.n	80024f8 <Shell_Loop+0x194>
		}
		else if (strcmp(argv[0],"current")==0){
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <Shell_Loop+0x1d4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4923      	ldr	r1, [pc, #140]	@ (8002564 <Shell_Loop+0x200>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd fea1 	bl	8000220 <strcmp>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <Shell_Loop+0x186>
					displayCurrent();
 80024e4:	f7ff fe98 	bl	8002218 <displayCurrent>
 80024e8:	e006      	b.n	80024f8 <Shell_Loop+0x194>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	2214      	movs	r2, #20
 80024f0:	491d      	ldr	r1, [pc, #116]	@ (8002568 <Shell_Loop+0x204>)
 80024f2:	480b      	ldr	r0, [pc, #44]	@ (8002520 <Shell_Loop+0x1bc>)
 80024f4:	f005 f8d5 	bl	80076a2 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	221c      	movs	r2, #28
 80024fe:	491b      	ldr	r1, [pc, #108]	@ (800256c <Shell_Loop+0x208>)
 8002500:	4807      	ldr	r0, [pc, #28]	@ (8002520 <Shell_Loop+0x1bc>)
 8002502:	f005 f8ce 	bl	80076a2 <HAL_UART_Transmit>
		newCmdReady = 0;
 8002506:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <Shell_Loop+0x1d8>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
	}
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000598 	.word	0x20000598
 8002518:	2000059c 	.word	0x2000059c
 800251c:	20000088 	.word	0x20000088
 8002520:	20000470 	.word	0x20000470
 8002524:	20000620 	.word	0x20000620
 8002528:	200005e0 	.word	0x200005e0
 800252c:	20000648 	.word	0x20000648
 8002530:	0800e0ec 	.word	0x0800e0ec
 8002534:	2000064c 	.word	0x2000064c
 8002538:	20000624 	.word	0x20000624
 800253c:	20000650 	.word	0x20000650
 8002540:	2000008c 	.word	0x2000008c
 8002544:	0800e0f0 	.word	0x0800e0f0
 8002548:	200000a4 	.word	0x200000a4
 800254c:	0800e0f8 	.word	0x0800e0f8
 8002550:	0800e100 	.word	0x0800e100
 8002554:	200005a0 	.word	0x200005a0
 8002558:	0800e128 	.word	0x0800e128
 800255c:	0800e130 	.word	0x0800e130
 8002560:	0800e138 	.word	0x0800e138
 8002564:	0800e140 	.word	0x0800e140
 8002568:	20000090 	.word	0x20000090
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_UART_RxCpltCallback+0x20>)
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800257e:	2201      	movs	r2, #1
 8002580:	4904      	ldr	r1, [pc, #16]	@ (8002594 <HAL_UART_RxCpltCallback+0x24>)
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <HAL_UART_RxCpltCallback+0x28>)
 8002584:	f005 f91c 	bl	80077c0 <HAL_UART_Receive_IT>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000598 	.word	0x20000598
 8002594:	2000059c 	.word	0x2000059c
 8002598:	20000470 	.word	0x20000470

0800259c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800259c:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800259e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a0:	f7ff fa04 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a4:	480c      	ldr	r0, [pc, #48]	@ (80025d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a6:	490d      	ldr	r1, [pc, #52]	@ (80025dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a8:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <LoopForever+0xe>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025bc:	4c0a      	ldr	r4, [pc, #40]	@ (80025e8 <LoopForever+0x16>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ca:	f008 fa7b 	bl	800aac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ce:	f7fe ffbb 	bl	8001548 <main>

080025d2 <LoopForever>:

LoopForever:
    b LoopForever
 80025d2:	e7fe      	b.n	80025d2 <LoopForever>
  ldr   r0, =_estack
 80025d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025dc:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80025e0:	0800e624 	.word	0x0800e624
  ldr r2, =_sbss
 80025e4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80025e8:	200007a4 	.word	0x200007a4

080025ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC1_2_IRQHandler>

080025ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f8:	2003      	movs	r0, #3
 80025fa:	f001 fdf6 	bl	80041ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025fe:	200f      	movs	r0, #15
 8002600:	f7ff f84c 	bl	800169c <HAL_InitTick>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	e001      	b.n	8002614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002610:	f7ff f820 	bl	8001654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002614:	79fb      	ldrb	r3, [r7, #7]

}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_IncTick+0x1c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <HAL_IncTick+0x20>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4413      	add	r3, r2
 800262e:	4a03      	ldr	r2, [pc, #12]	@ (800263c <HAL_IncTick+0x1c>)
 8002630:	6013      	str	r3, [r2, #0]
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	20000654 	.word	0x20000654
 8002640:	200000c4 	.word	0x200000c4

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000654 	.word	0x20000654

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d004      	beq.n	8002680 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_Delay+0x40>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002680:	bf00      	nop
 8002682:	f7ff ffdf 	bl	8002644 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	429a      	cmp	r2, r3
 8002690:	d8f7      	bhi.n	8002682 <HAL_Delay+0x26>
  {
  }
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200000c4 	.word	0x200000c4

080026a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3360      	adds	r3, #96	@ 0x60
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <LL_ADC_SetOffset+0x44>)
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	4313      	orrs	r3, r2
 8002738:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	03fff000 	.word	0x03fff000

08002750 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3360      	adds	r3, #96	@ 0x60
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3360      	adds	r3, #96	@ 0x60
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3360      	adds	r3, #96	@ 0x60
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3360      	adds	r3, #96	@ 0x60
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	615a      	str	r2, [r3, #20]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3330      	adds	r3, #48	@ 0x30
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	4413      	add	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	211f      	movs	r1, #31
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	f003 011f 	and.w	r1, r3, #31
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	431a      	orrs	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b087      	sub	sp, #28
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3314      	adds	r3, #20
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	0e5b      	lsrs	r3, r3, #25
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	0d1b      	lsrs	r3, r3, #20
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2107      	movs	r1, #7
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	0d1b      	lsrs	r3, r3, #20
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	431a      	orrs	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0318 	and.w	r3, r3, #24
 800293a:	4908      	ldr	r1, [pc, #32]	@ (800295c <LL_ADC_SetChannelSingleDiff+0x44>)
 800293c:	40d9      	lsrs	r1, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	400b      	ands	r3, r1
 8002942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002946:	431a      	orrs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	0007ffff 	.word	0x0007ffff

08002960 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 031f 	and.w	r3, r3, #31
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6093      	str	r3, [r2, #8]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029d0:	d101      	bne.n	80029d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80029f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a20:	d101      	bne.n	8002a26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a70:	f043 0202 	orr.w	r2, r3, #2
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <LL_ADC_IsEnabled+0x18>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <LL_ADC_IsEnabled+0x1a>
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d101      	bne.n	8002ac2 <LL_ADC_IsDisableOngoing+0x18>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <LL_ADC_IsDisableOngoing+0x1a>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ae0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ae4:	f043 0204 	orr.w	r2, r3, #4
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d101      	bne.n	8002b10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d101      	bne.n	8002b36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1a9      	b.n	8002eb2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7fe fb4f 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff19 	bl	80029bc <LL_ADC_IsDeepPowerDownEnabled>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff feff 	bl	8002998 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff34 	bl	8002a0c <LL_ADC_IsInternalRegulatorEnabled>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff18 	bl	80029e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e28 <HAL_ADC_Init+0x2e4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	4a9c      	ldr	r2, [pc, #624]	@ (8002e2c <HAL_ADC_Init+0x2e8>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bc8:	e002      	b.n	8002bd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f9      	bne.n	8002bca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff16 	bl	8002a0c <LL_ADC_IsInternalRegulatorEnabled>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff76 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 8142 	bne.w	8002ea0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 813e 	bne.w	8002ea0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c2c:	f043 0202 	orr.w	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff23 	bl	8002a84 <LL_ADC_IsEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d141      	bne.n	8002cc8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADC_Init+0x114>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a77      	ldr	r2, [pc, #476]	@ (8002e30 <HAL_ADC_Init+0x2ec>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10f      	bne.n	8002c78 <HAL_ADC_Init+0x134>
 8002c58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c5c:	f7ff ff12 	bl	8002a84 <LL_ADC_IsEnabled>
 8002c60:	4604      	mov	r4, r0
 8002c62:	4873      	ldr	r0, [pc, #460]	@ (8002e30 <HAL_ADC_Init+0x2ec>)
 8002c64:	f7ff ff0e 	bl	8002a84 <LL_ADC_IsEnabled>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4323      	orrs	r3, r4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e012      	b.n	8002c9e <HAL_ADC_Init+0x15a>
 8002c78:	486e      	ldr	r0, [pc, #440]	@ (8002e34 <HAL_ADC_Init+0x2f0>)
 8002c7a:	f7ff ff03 	bl	8002a84 <LL_ADC_IsEnabled>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	486d      	ldr	r0, [pc, #436]	@ (8002e38 <HAL_ADC_Init+0x2f4>)
 8002c82:	f7ff feff 	bl	8002a84 <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	431c      	orrs	r4, r3
 8002c8a:	486c      	ldr	r0, [pc, #432]	@ (8002e3c <HAL_ADC_Init+0x2f8>)
 8002c8c:	f7ff fefa 	bl	8002a84 <LL_ADC_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4323      	orrs	r3, r4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002caa:	d004      	beq.n	8002cb6 <HAL_ADC_Init+0x172>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5f      	ldr	r2, [pc, #380]	@ (8002e30 <HAL_ADC_Init+0x2ec>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_Init+0x176>
 8002cb6:	4a62      	ldr	r2, [pc, #392]	@ (8002e40 <HAL_ADC_Init+0x2fc>)
 8002cb8:	e000      	b.n	8002cbc <HAL_ADC_Init+0x178>
 8002cba:	4a62      	ldr	r2, [pc, #392]	@ (8002e44 <HAL_ADC_Init+0x300>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f7ff fcec 	bl	80026a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7f5b      	ldrb	r3, [r3, #29]
 8002ccc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cd8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cde:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ce6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	045b      	lsls	r3, r3, #17
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <HAL_ADC_Init+0x304>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fee5 	bl	8002b1e <LL_ADC_INJ_IsConversionOngoing>
 8002d54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d17f      	bne.n	8002e5c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d17c      	bne.n	8002e5c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7e:	f023 0302 	bic.w	r3, r3, #2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d017      	beq.n	8002dc4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002da2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002dac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6911      	ldr	r1, [r2, #16]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002dc2:	e013      	b.n	8002dec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002dd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d12a      	bne.n	8002e4c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	e019      	b.n	8002e5c <HAL_ADC_Init+0x318>
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	053e2d63 	.word	0x053e2d63
 8002e30:	50000100 	.word	0x50000100
 8002e34:	50000400 	.word	0x50000400
 8002e38:	50000500 	.word	0x50000500
 8002e3c:	50000600 	.word	0x50000600
 8002e40:	50000300 	.word	0x50000300
 8002e44:	50000700 	.word	0x50000700
 8002e48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10c      	bne.n	8002e7e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f023 010f 	bic.w	r1, r3, #15
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e7c:	e007      	b.n	8002e8e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 020f 	bic.w	r2, r2, #15
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e9e:	e007      	b.n	8002eb0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f043 0210 	orr.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	bf00      	nop

08002ebc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ecc:	d004      	beq.n	8002ed8 <HAL_ADC_Start+0x1c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a67      	ldr	r2, [pc, #412]	@ (8003070 <HAL_ADC_Start+0x1b4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_Start+0x20>
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_ADC_Start+0x1b8>)
 8002eda:	e000      	b.n	8002ede <HAL_ADC_Start+0x22>
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_ADC_Start+0x1bc>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fd3e 	bl	8002960 <LL_ADC_GetMultimode>
 8002ee4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fe04 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 80b4 	bne.w	8003060 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_Start+0x4a>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0af      	b.n	8003066 <HAL_ADC_Start+0x1aa>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fe0c 	bl	8003b2c <ADC_Enable>
 8002f14:	4603      	mov	r3, r0
 8002f16:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 809b 	bne.w	8003056 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a4d      	ldr	r2, [pc, #308]	@ (8003070 <HAL_ADC_Start+0x1b4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_ADC_Start+0x96>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a4e      	ldr	r2, [pc, #312]	@ (800307c <HAL_ADC_Start+0x1c0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d002      	beq.n	8002f4e <HAL_ADC_Start+0x92>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	e003      	b.n	8002f56 <HAL_ADC_Start+0x9a>
 8002f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8003080 <HAL_ADC_Start+0x1c4>)
 8002f50:	e001      	b.n	8002f56 <HAL_ADC_Start+0x9a>
 8002f52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d002      	beq.n	8002f64 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f7c:	d106      	bne.n	8002f8c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f82:	f023 0206 	bic.w	r2, r3, #6
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f8a:	e002      	b.n	8002f92 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	221c      	movs	r2, #28
 8002f98:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a32      	ldr	r2, [pc, #200]	@ (8003070 <HAL_ADC_Start+0x1b4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_ADC_Start+0x104>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a32      	ldr	r2, [pc, #200]	@ (800307c <HAL_ADC_Start+0x1c0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d002      	beq.n	8002fbc <HAL_ADC_Start+0x100>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_Start+0x108>
 8002fbc:	4b30      	ldr	r3, [pc, #192]	@ (8003080 <HAL_ADC_Start+0x1c4>)
 8002fbe:	e001      	b.n	8002fc4 <HAL_ADC_Start+0x108>
 8002fc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d008      	beq.n	8002fde <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b09      	cmp	r3, #9
 8002fdc:	d114      	bne.n	8003008 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ff4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fd65 	bl	8002ad0 <LL_ADC_REG_StartConversion>
 8003006:	e02d      	b.n	8003064 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <HAL_ADC_Start+0x1b4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_ADC_Start+0x176>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a16      	ldr	r2, [pc, #88]	@ (800307c <HAL_ADC_Start+0x1c0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d002      	beq.n	800302e <HAL_ADC_Start+0x172>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	e003      	b.n	8003036 <HAL_ADC_Start+0x17a>
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <HAL_ADC_Start+0x1c4>)
 8003030:	e001      	b.n	8003036 <HAL_ADC_Start+0x17a>
 8003032:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003036:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00f      	beq.n	8003064 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003048:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800304c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003054:	e006      	b.n	8003064 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800305e:	e001      	b.n	8003064 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003064:	7dfb      	ldrb	r3, [r7, #23]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	50000100 	.word	0x50000100
 8003074:	50000300 	.word	0x50000300
 8003078:	50000700 	.word	0x50000700
 800307c:	50000500 	.word	0x50000500
 8003080:	50000400 	.word	0x50000400

08003084 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_PollForConversion+0x1e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a77      	ldr	r2, [pc, #476]	@ (800327c <HAL_ADC_PollForConversion+0x1f8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_PollForConversion+0x22>
 80030a2:	4b77      	ldr	r3, [pc, #476]	@ (8003280 <HAL_ADC_PollForConversion+0x1fc>)
 80030a4:	e000      	b.n	80030a8 <HAL_ADC_PollForConversion+0x24>
 80030a6:	4b77      	ldr	r3, [pc, #476]	@ (8003284 <HAL_ADC_PollForConversion+0x200>)
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fc59 	bl	8002960 <LL_ADC_GetMultimode>
 80030ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d102      	bne.n	80030be <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80030b8:	2308      	movs	r3, #8
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	e037      	b.n	800312e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d002      	beq.n	80030d0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d111      	bne.n	80030f4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0c1      	b.n	8003272 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030ee:	2304      	movs	r3, #4
 80030f0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030f2:	e01c      	b.n	800312e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030fc:	d004      	beq.n	8003108 <HAL_ADC_PollForConversion+0x84>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a5e      	ldr	r2, [pc, #376]	@ (800327c <HAL_ADC_PollForConversion+0x1f8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_ADC_PollForConversion+0x88>
 8003108:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_ADC_PollForConversion+0x1fc>)
 800310a:	e000      	b.n	800310e <HAL_ADC_PollForConversion+0x8a>
 800310c:	4b5d      	ldr	r3, [pc, #372]	@ (8003284 <HAL_ADC_PollForConversion+0x200>)
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fc34 	bl	800297c <LL_ADC_GetMultiDMATransfer>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0a3      	b.n	8003272 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800312a:	2304      	movs	r3, #4
 800312c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800312e:	f7ff fa89 	bl	8002644 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003134:	e021      	b.n	800317a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d01d      	beq.n	800317a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800313e:	f7ff fa81 	bl	8002644 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <HAL_ADC_PollForConversion+0xd0>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d112      	bne.n	800317a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e07b      	b.n	8003272 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0d6      	beq.n	8003136 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fb53 	bl	8002844 <LL_ADC_REG_IsTriggerSourceSWStart>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7f5b      	ldrb	r3, [r3, #29]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d118      	bne.n	80031de <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d111      	bne.n	80031de <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a26      	ldr	r2, [pc, #152]	@ (800327c <HAL_ADC_PollForConversion+0x1f8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_ADC_PollForConversion+0x178>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a26      	ldr	r2, [pc, #152]	@ (8003288 <HAL_ADC_PollForConversion+0x204>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d002      	beq.n	80031f8 <HAL_ADC_PollForConversion+0x174>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	e003      	b.n	8003200 <HAL_ADC_PollForConversion+0x17c>
 80031f8:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_ADC_PollForConversion+0x208>)
 80031fa:	e001      	b.n	8003200 <HAL_ADC_PollForConversion+0x17c>
 80031fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	4293      	cmp	r3, r2
 8003206:	d008      	beq.n	800321a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d002      	beq.n	800321a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b09      	cmp	r3, #9
 8003218:	d104      	bne.n	8003224 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e014      	b.n	800324e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a14      	ldr	r2, [pc, #80]	@ (800327c <HAL_ADC_PollForConversion+0x1f8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_ADC_PollForConversion+0x1be>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <HAL_ADC_PollForConversion+0x204>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d002      	beq.n	800323e <HAL_ADC_PollForConversion+0x1ba>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	e003      	b.n	8003246 <HAL_ADC_PollForConversion+0x1c2>
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <HAL_ADC_PollForConversion+0x208>)
 8003240:	e001      	b.n	8003246 <HAL_ADC_PollForConversion+0x1c2>
 8003242:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003246:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d104      	bne.n	800325e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2208      	movs	r2, #8
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e008      	b.n	8003270 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	220c      	movs	r2, #12
 800326e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	50000100 	.word	0x50000100
 8003280:	50000300 	.word	0x50000300
 8003284:	50000700 	.word	0x50000700
 8003288:	50000500 	.word	0x50000500
 800328c:	50000400 	.word	0x50000400

08003290 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0b6      	sub	sp, #216	@ 0xd8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x24>
 80032ca:	2302      	movs	r3, #2
 80032cc:	f000 bc13 	b.w	8003af6 <HAL_ADC_ConfigChannel+0x84a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fc0b 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 83f3 	bne.w	8003ad0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f7ff fab7 	bl	800286a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fbf9 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003306:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fc05 	bl	8002b1e <LL_ADC_INJ_IsConversionOngoing>
 8003314:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003318:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 81d9 	bne.w	80036d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 81d4 	bne.w	80036d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003334:	d10f      	bne.n	8003356 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	4619      	mov	r1, r3
 8003342:	f7ff fabe 	bl	80028c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fa65 	bl	800281e <LL_ADC_SetSamplingTimeCommonConfig>
 8003354:	e00e      	b.n	8003374 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	461a      	mov	r2, r3
 8003364:	f7ff faad 	bl	80028c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fa55 	bl	800281e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	08db      	lsrs	r3, r3, #3
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d022      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6919      	ldr	r1, [r3, #16]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033a6:	f7ff f9af 	bl	8002708 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f7ff f9fb 	bl	80027b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d102      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x126>
 80033cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033d0:	e000      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x128>
 80033d2:	2300      	movs	r3, #0
 80033d4:	461a      	mov	r2, r3
 80033d6:	f7ff fa07 	bl	80027e8 <LL_ADC_SetOffsetSaturation>
 80033da:	e17b      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f9b4 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x15c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f9a9 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	f003 021f 	and.w	r2, r3, #31
 8003406:	e01e      	b.n	8003446 <HAL_ADC_ConfigChannel+0x19a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f99e 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800342a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800342e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e004      	b.n	8003444 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800343a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_ADC_ConfigChannel+0x1b2>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0e9b      	lsrs	r3, r3, #26
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	e018      	b.n	8003490 <HAL_ADC_ConfigChannel+0x1e4>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003476:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800347a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003490:	429a      	cmp	r2, r3
 8003492:	d106      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f96d 	bl	800277c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f951 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x222>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff f946 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80034c4:	4603      	mov	r3, r0
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	e01e      	b.n	800350c <HAL_ADC_ConfigChannel+0x260>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff f93b 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80034ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80034f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e004      	b.n	800350a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x278>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	e018      	b.n	8003556 <HAL_ADC_ConfigChannel+0x2aa>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800353c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e004      	b.n	8003556 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800354c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003556:	429a      	cmp	r2, r3
 8003558:	d106      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff f90a 	bl	800277c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f8ee 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x2e8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2102      	movs	r1, #2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f8e3 	bl	8002750 <LL_ADC_GetOffsetChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	f003 021f 	and.w	r2, r3, #31
 8003592:	e01e      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x326>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2102      	movs	r1, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f8d8 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80035b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80035ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e004      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x33e>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	e016      	b.n	8003618 <HAL_ADC_ConfigChannel+0x36c>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80035fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003602:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800360a:	2320      	movs	r3, #32
 800360c:	e004      	b.n	8003618 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800360e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003618:	429a      	cmp	r2, r3
 800361a:	d106      	bne.n	800362a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f8a9 	bl	800277c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2103      	movs	r1, #3
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f88d 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x3aa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2103      	movs	r1, #3
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f882 	bl	8002750 <LL_ADC_GetOffsetChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	0e9b      	lsrs	r3, r3, #26
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	e017      	b.n	8003686 <HAL_ADC_ConfigChannel+0x3da>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2103      	movs	r1, #3
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff f877 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003662:	4603      	mov	r3, r0
 8003664:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800366e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003670:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003672:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003678:	2320      	movs	r3, #32
 800367a:	e003      	b.n	8003684 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800367c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_ADC_ConfigChannel+0x3f2>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	e011      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x416>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80036ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80036b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d106      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	2103      	movs	r1, #3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f854 	bl	800277c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff f9d3 	bl	8002a84 <LL_ADC_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 813d 	bne.w	8003960 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f7ff f910 	bl	8002918 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4aa2      	ldr	r2, [pc, #648]	@ (8003988 <HAL_ADC_ConfigChannel+0x6dc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f040 812e 	bne.w	8003960 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_ADC_ConfigChannel+0x480>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	3301      	adds	r3, #1
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2b09      	cmp	r3, #9
 8003722:	bf94      	ite	ls
 8003724:	2301      	movls	r3, #1
 8003726:	2300      	movhi	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e019      	b.n	8003760 <HAL_ADC_ConfigChannel+0x4b4>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800373a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800373c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800373e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e003      	b.n	8003750 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2b09      	cmp	r3, #9
 8003758:	bf94      	ite	ls
 800375a:	2301      	movls	r3, #1
 800375c:	2300      	movhi	r3, #0
 800375e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	2b00      	cmp	r3, #0
 8003762:	d079      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x4d4>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	3301      	adds	r3, #1
 8003778:	069b      	lsls	r3, r3, #26
 800377a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800377e:	e015      	b.n	80037ac <HAL_ADC_ConfigChannel+0x500>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800378e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003790:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e003      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800379c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x520>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0e9b      	lsrs	r3, r3, #26
 80037be:	3301      	adds	r3, #1
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2101      	movs	r1, #1
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	e017      	b.n	80037fc <HAL_ADC_ConfigChannel+0x550>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80037da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80037de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e003      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80037e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x576>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	3301      	adds	r3, #1
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	051b      	lsls	r3, r3, #20
 8003820:	e018      	b.n	8003854 <HAL_ADC_ConfigChannel+0x5a8>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800383a:	2320      	movs	r3, #32
 800383c:	e003      	b.n	8003846 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800383e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003854:	430b      	orrs	r3, r1
 8003856:	e07e      	b.n	8003956 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x5c8>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	0e9b      	lsrs	r3, r3, #26
 800386a:	3301      	adds	r3, #1
 800386c:	069b      	lsls	r3, r3, #26
 800386e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003872:	e015      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800388c:	2320      	movs	r3, #32
 800388e:	e003      	b.n	8003898 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3301      	adds	r3, #1
 800389a:	069b      	lsls	r3, r3, #26
 800389c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x614>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	3301      	adds	r3, #1
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	e017      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x644>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	61fb      	str	r3, [r7, #28]
  return result;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	ea42 0103 	orr.w	r1, r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10d      	bne.n	800391c <HAL_ADC_ConfigChannel+0x670>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	3301      	adds	r3, #1
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	3b1e      	subs	r3, #30
 8003914:	051b      	lsls	r3, r3, #20
 8003916:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800391a:	e01b      	b.n	8003954 <HAL_ADC_ConfigChannel+0x6a8>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	613b      	str	r3, [r7, #16]
  return result;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e003      	b.n	8003940 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f003 021f 	and.w	r2, r3, #31
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	3b1e      	subs	r3, #30
 800394e:	051b      	lsls	r3, r3, #20
 8003950:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003954:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800395a:	4619      	mov	r1, r3
 800395c:	f7fe ffb1 	bl	80028c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_ADC_ConfigChannel+0x6e0>)
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80be 	beq.w	8003aea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003976:	d004      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x6d6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <HAL_ADC_ConfigChannel+0x6e4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10a      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x6ec>
 8003982:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <HAL_ADC_ConfigChannel+0x6e8>)
 8003984:	e009      	b.n	800399a <HAL_ADC_ConfigChannel+0x6ee>
 8003986:	bf00      	nop
 8003988:	407f0000 	.word	0x407f0000
 800398c:	80080000 	.word	0x80080000
 8003990:	50000100 	.word	0x50000100
 8003994:	50000300 	.word	0x50000300
 8003998:	4b59      	ldr	r3, [pc, #356]	@ (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fea6 	bl	80026ec <LL_ADC_GetCommonPathInternalCh>
 80039a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a56      	ldr	r2, [pc, #344]	@ (8003b04 <HAL_ADC_ConfigChannel+0x858>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0x70c>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a55      	ldr	r2, [pc, #340]	@ (8003b08 <HAL_ADC_ConfigChannel+0x85c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d13a      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d134      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039cc:	d005      	beq.n	80039da <HAL_ADC_ConfigChannel+0x72e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4e      	ldr	r2, [pc, #312]	@ (8003b0c <HAL_ADC_ConfigChannel+0x860>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	f040 8085 	bne.w	8003ae4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e2:	d004      	beq.n	80039ee <HAL_ADC_ConfigChannel+0x742>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a49      	ldr	r2, [pc, #292]	@ (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x746>
 80039ee:	4a49      	ldr	r2, [pc, #292]	@ (8003b14 <HAL_ADC_ConfigChannel+0x868>)
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x748>
 80039f2:	4a43      	ldr	r2, [pc, #268]	@ (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 80039f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f7fe fe61 	bl	80026c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a04:	4b44      	ldr	r3, [pc, #272]	@ (8003b18 <HAL_ADC_ConfigChannel+0x86c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	4a44      	ldr	r2, [pc, #272]	@ (8003b1c <HAL_ADC_ConfigChannel+0x870>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a1e:	e002      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f9      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a2c:	e05a      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3b      	ldr	r2, [pc, #236]	@ (8003b20 <HAL_ADC_ConfigChannel+0x874>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d125      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11f      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a31      	ldr	r2, [pc, #196]	@ (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d104      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x7ac>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a34      	ldr	r2, [pc, #208]	@ (8003b24 <HAL_ADC_ConfigChannel+0x878>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d047      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a60:	d004      	beq.n	8003a6c <HAL_ADC_ConfigChannel+0x7c0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2a      	ldr	r2, [pc, #168]	@ (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x7c4>
 8003a6c:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_ADC_ConfigChannel+0x868>)
 8003a6e:	e000      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x7c6>
 8003a70:	4a23      	ldr	r2, [pc, #140]	@ (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 8003a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7fe fe22 	bl	80026c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a82:	e031      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a27      	ldr	r2, [pc, #156]	@ (8003b28 <HAL_ADC_ConfigChannel+0x87c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12d      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d127      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADC_ConfigChannel+0x80c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <HAL_ADC_ConfigChannel+0x864>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x810>
 8003ab8:	4a16      	ldr	r2, [pc, #88]	@ (8003b14 <HAL_ADC_ConfigChannel+0x868>)
 8003aba:	e000      	b.n	8003abe <HAL_ADC_ConfigChannel+0x812>
 8003abc:	4a10      	ldr	r2, [pc, #64]	@ (8003b00 <HAL_ADC_ConfigChannel+0x854>)
 8003abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ac2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe fdfc 	bl	80026c6 <LL_ADC_SetCommonPathInternalCh>
 8003ace:	e00c      	b.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ae2:	e002      	b.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003af2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	37d8      	adds	r7, #216	@ 0xd8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	50000700 	.word	0x50000700
 8003b04:	c3210000 	.word	0xc3210000
 8003b08:	90c00010 	.word	0x90c00010
 8003b0c:	50000600 	.word	0x50000600
 8003b10:	50000100 	.word	0x50000100
 8003b14:	50000300 	.word	0x50000300
 8003b18:	20000000 	.word	0x20000000
 8003b1c:	053e2d63 	.word	0x053e2d63
 8003b20:	c7520000 	.word	0xc7520000
 8003b24:	50000500 	.word	0x50000500
 8003b28:	cb840000 	.word	0xcb840000

08003b2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ffa1 	bl	8002a84 <LL_ADC_IsEnabled>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d176      	bne.n	8003c36 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c40 <ADC_Enable+0x114>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e062      	b.n	8003c38 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff5c 	bl	8002a34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b84:	d004      	beq.n	8003b90 <ADC_Enable+0x64>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c44 <ADC_Enable+0x118>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <ADC_Enable+0x68>
 8003b90:	4b2d      	ldr	r3, [pc, #180]	@ (8003c48 <ADC_Enable+0x11c>)
 8003b92:	e000      	b.n	8003b96 <ADC_Enable+0x6a>
 8003b94:	4b2d      	ldr	r3, [pc, #180]	@ (8003c4c <ADC_Enable+0x120>)
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fda8 	bl	80026ec <LL_ADC_GetCommonPathInternalCh>
 8003b9c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d013      	beq.n	8003bce <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <ADC_Enable+0x124>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	4a29      	ldr	r2, [pc, #164]	@ (8003c54 <ADC_Enable+0x128>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bc0:	e002      	b.n	8003bc8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f9      	bne.n	8003bc2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bce:	f7fe fd39 	bl	8002644 <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd4:	e028      	b.n	8003c28 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe ff52 	bl	8002a84 <LL_ADC_IsEnabled>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe ff22 	bl	8002a34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bf0:	f7fe fd28 	bl	8002644 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d914      	bls.n	8003c28 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d00d      	beq.n	8003c28 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c10:	f043 0210 	orr.w	r2, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e007      	b.n	8003c38 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d1cf      	bne.n	8003bd6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	8000003f 	.word	0x8000003f
 8003c44:	50000100 	.word	0x50000100
 8003c48:	50000300 	.word	0x50000300
 8003c4c:	50000700 	.word	0x50000700
 8003c50:	20000000 	.word	0x20000000
 8003c54:	053e2d63 	.word	0x053e2d63

08003c58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ff20 	bl	8002aaa <LL_ADC_IsDisableOngoing>
 8003c6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe ff07 	bl	8002a84 <LL_ADC_IsEnabled>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d047      	beq.n	8003d0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d144      	bne.n	8003d0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030d 	and.w	r3, r3, #13
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10c      	bne.n	8003caa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fee1 	bl	8002a5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ca2:	f7fe fccf 	bl	8002644 <HAL_GetTick>
 8003ca6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ca8:	e029      	b.n	8003cfe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	f043 0210 	orr.w	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e023      	b.n	8003d0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cc6:	f7fe fcbd 	bl	8002644 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d914      	bls.n	8003cfe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce6:	f043 0210 	orr.w	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e007      	b.n	8003d0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1dc      	bne.n	8003cc6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <LL_ADC_IsEnabled>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <LL_ADC_IsEnabled+0x18>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <LL_ADC_IsEnabled+0x1a>
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_StartCalibration>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_ADC_IsCalibrationOnGoing>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d82:	d101      	bne.n	8003d88 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d101      	bne.n	8003dae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e04d      	b.n	8003e74 <HAL_ADCEx_Calibration_Start+0xb8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff39 	bl	8003c58 <ADC_Disable>
 8003de6:	4603      	mov	r3, r0
 8003de8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d136      	bne.n	8003e5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003df8:	f023 0302 	bic.w	r3, r3, #2
 8003dfc:	f043 0202 	orr.w	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ff96 	bl	8003d3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e10:	e014      	b.n	8003e3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d90d      	bls.n	8003e3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e24:	f023 0312 	bic.w	r3, r3, #18
 8003e28:	f043 0210 	orr.w	r2, r3, #16
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e01b      	b.n	8003e74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff94 	bl	8003d6e <LL_ADC_IsCalibrationOnGoing>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e2      	bne.n	8003e12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	f023 0303 	bic.w	r3, r3, #3
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e5c:	e005      	b.n	8003e6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e62:	f043 0210 	orr.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	0004de01 	.word	0x0004de01

08003e80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b0a1      	sub	sp, #132	@ 0x84
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0e7      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb6:	d102      	bne.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	e009      	b.n	8003ed2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d102      	bne.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003ec8:	4b6d      	ldr	r3, [pc, #436]	@ (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	e001      	b.n	8003ed2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0be      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ff4f 	bl	8003d96 <LL_ADC_REG_IsConversionOngoing>
 8003ef8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ff49 	bl	8003d96 <LL_ADC_REG_IsConversionOngoing>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 80a0 	bne.w	800404c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 809c 	bne.w	800404c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f1c:	d004      	beq.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a55      	ldr	r2, [pc, #340]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003f28:	4b56      	ldr	r3, [pc, #344]	@ (8004084 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003f2a:	e000      	b.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003f2c:	4b56      	ldr	r3, [pc, #344]	@ (8004088 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003f2e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d04b      	beq.n	8003fd0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f4a:	035b      	lsls	r3, r3, #13
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5c:	d004      	beq.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a45      	ldr	r2, [pc, #276]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10f      	bne.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003f68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f6c:	f7ff fed3 	bl	8003d16 <LL_ADC_IsEnabled>
 8003f70:	4604      	mov	r4, r0
 8003f72:	4841      	ldr	r0, [pc, #260]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f74:	f7ff fecf 	bl	8003d16 <LL_ADC_IsEnabled>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4323      	orrs	r3, r4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e012      	b.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003f88:	483c      	ldr	r0, [pc, #240]	@ (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f8a:	f7ff fec4 	bl	8003d16 <LL_ADC_IsEnabled>
 8003f8e:	4604      	mov	r4, r0
 8003f90:	483b      	ldr	r0, [pc, #236]	@ (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f92:	f7ff fec0 	bl	8003d16 <LL_ADC_IsEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	431c      	orrs	r4, r3
 8003f9a:	483c      	ldr	r0, [pc, #240]	@ (800408c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f9c:	f7ff febb 	bl	8003d16 <LL_ADC_IsEnabled>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4323      	orrs	r3, r4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d056      	beq.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003fba:	f023 030f 	bic.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	6811      	ldr	r1, [r2, #0]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	6892      	ldr	r2, [r2, #8]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fcc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fce:	e047      	b.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003fd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe4:	d004      	beq.n	8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a23      	ldr	r2, [pc, #140]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10f      	bne.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ff0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ff4:	f7ff fe8f 	bl	8003d16 <LL_ADC_IsEnabled>
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	481f      	ldr	r0, [pc, #124]	@ (8004078 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ffc:	f7ff fe8b 	bl	8003d16 <LL_ADC_IsEnabled>
 8004000:	4603      	mov	r3, r0
 8004002:	4323      	orrs	r3, r4
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e012      	b.n	8004036 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004010:	481a      	ldr	r0, [pc, #104]	@ (800407c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004012:	f7ff fe80 	bl	8003d16 <LL_ADC_IsEnabled>
 8004016:	4604      	mov	r4, r0
 8004018:	4819      	ldr	r0, [pc, #100]	@ (8004080 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800401a:	f7ff fe7c 	bl	8003d16 <LL_ADC_IsEnabled>
 800401e:	4603      	mov	r3, r0
 8004020:	431c      	orrs	r4, r3
 8004022:	481a      	ldr	r0, [pc, #104]	@ (800408c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004024:	f7ff fe77 	bl	8003d16 <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	4323      	orrs	r3, r4
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d012      	beq.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800403a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004042:	f023 030f 	bic.w	r3, r3, #15
 8004046:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004048:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800404a:	e009      	b.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800405e:	e000      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004060:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800406a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800406e:	4618      	mov	r0, r3
 8004070:	3784      	adds	r7, #132	@ 0x84
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	bf00      	nop
 8004078:	50000100 	.word	0x50000100
 800407c:	50000400 	.word	0x50000400
 8004080:	50000500 	.word	0x50000500
 8004084:	50000300 	.word	0x50000300
 8004088:	50000700 	.word	0x50000700
 800408c:	50000600 	.word	0x50000600

08004090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040c2:	4a04      	ldr	r2, [pc, #16]	@ (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	60d3      	str	r3, [r2, #12]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040dc:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <__NVIC_GetPriorityGrouping+0x18>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0307 	and.w	r3, r3, #7
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db0b      	blt.n	800411e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4907      	ldr	r1, [pc, #28]	@ (800412c <__NVIC_EnableIRQ+0x38>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e100 	.word	0xe000e100

08004130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db0a      	blt.n	800415a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	490c      	ldr	r1, [pc, #48]	@ (800417c <__NVIC_SetPriority+0x4c>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	440b      	add	r3, r1
 8004154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004158:	e00a      	b.n	8004170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4908      	ldr	r1, [pc, #32]	@ (8004180 <__NVIC_SetPriority+0x50>)
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3b04      	subs	r3, #4
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	440b      	add	r3, r1
 800416e:	761a      	strb	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	@ 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	bf28      	it	cs
 80041a2:	2304      	movcs	r3, #4
 80041a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <NVIC_EncodePriority+0x30>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3b03      	subs	r3, #3
 80041b2:	e000      	b.n	80041b6 <NVIC_EncodePriority+0x32>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	401a      	ands	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	4313      	orrs	r3, r2
         );
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	@ 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff4c 	bl	8004090 <__NVIC_SetPriorityGrouping>
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800420e:	f7ff ff63 	bl	80040d8 <__NVIC_GetPriorityGrouping>
 8004212:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	6978      	ldr	r0, [r7, #20]
 800421a:	f7ff ffb3 	bl	8004184 <NVIC_EncodePriority>
 800421e:	4602      	mov	r2, r0
 8004220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ff82 	bl	8004130 <__NVIC_SetPriority>
}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff56 	bl	80040f4 <__NVIC_EnableIRQ>
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d005      	beq.n	8004274 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	e037      	b.n	80042e4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020e 	bic.w	r2, r2, #14
 8004282:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800428e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004292:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042c0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042e2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d00d      	beq.n	8004336 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2204      	movs	r2, #4
 800431e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e047      	b.n	80043c6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 020e 	bic.w	r2, r2, #14
 8004344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004364:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	f003 021f 	and.w	r2, r3, #31
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	2101      	movs	r1, #1
 8004374:	fa01 f202 	lsl.w	r2, r1, r2
 8004378:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004382:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004396:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800439a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
    }
  }
  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043de:	e15a      	b.n	8004696 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 814c 	beq.w	8004690 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d005      	beq.n	8004410 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800440c:	2b02      	cmp	r3, #2
 800440e:	d130      	bne.n	8004472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004446:	2201      	movs	r2, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0201 	and.w	r2, r3, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d017      	beq.n	80044ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d123      	bne.n	8004502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	08da      	lsrs	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3208      	adds	r2, #8
 80044c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	08da      	lsrs	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3208      	adds	r2, #8
 80044fc:	6939      	ldr	r1, [r7, #16]
 80044fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	2203      	movs	r2, #3
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0203 	and.w	r2, r3, #3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80a6 	beq.w	8004690 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004544:	4b5b      	ldr	r3, [pc, #364]	@ (80046b4 <HAL_GPIO_Init+0x2e4>)
 8004546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004548:	4a5a      	ldr	r2, [pc, #360]	@ (80046b4 <HAL_GPIO_Init+0x2e4>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004550:	4b58      	ldr	r3, [pc, #352]	@ (80046b4 <HAL_GPIO_Init+0x2e4>)
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800455c:	4a56      	ldr	r2, [pc, #344]	@ (80046b8 <HAL_GPIO_Init+0x2e8>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	220f      	movs	r2, #15
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004586:	d01f      	beq.n	80045c8 <HAL_GPIO_Init+0x1f8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a4c      	ldr	r2, [pc, #304]	@ (80046bc <HAL_GPIO_Init+0x2ec>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d019      	beq.n	80045c4 <HAL_GPIO_Init+0x1f4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a4b      	ldr	r2, [pc, #300]	@ (80046c0 <HAL_GPIO_Init+0x2f0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_GPIO_Init+0x1f0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a4a      	ldr	r2, [pc, #296]	@ (80046c4 <HAL_GPIO_Init+0x2f4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00d      	beq.n	80045bc <HAL_GPIO_Init+0x1ec>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a49      	ldr	r2, [pc, #292]	@ (80046c8 <HAL_GPIO_Init+0x2f8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <HAL_GPIO_Init+0x1e8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a48      	ldr	r2, [pc, #288]	@ (80046cc <HAL_GPIO_Init+0x2fc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <HAL_GPIO_Init+0x1e4>
 80045b0:	2305      	movs	r3, #5
 80045b2:	e00a      	b.n	80045ca <HAL_GPIO_Init+0x1fa>
 80045b4:	2306      	movs	r3, #6
 80045b6:	e008      	b.n	80045ca <HAL_GPIO_Init+0x1fa>
 80045b8:	2304      	movs	r3, #4
 80045ba:	e006      	b.n	80045ca <HAL_GPIO_Init+0x1fa>
 80045bc:	2303      	movs	r3, #3
 80045be:	e004      	b.n	80045ca <HAL_GPIO_Init+0x1fa>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e002      	b.n	80045ca <HAL_GPIO_Init+0x1fa>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <HAL_GPIO_Init+0x1fa>
 80045c8:	2300      	movs	r3, #0
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	f002 0203 	and.w	r2, r2, #3
 80045d0:	0092      	lsls	r2, r2, #2
 80045d2:	4093      	lsls	r3, r2
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045da:	4937      	ldr	r1, [pc, #220]	@ (80046b8 <HAL_GPIO_Init+0x2e8>)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	3302      	adds	r3, #2
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045e8:	4b39      	ldr	r3, [pc, #228]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800460c:	4a30      	ldr	r2, [pc, #192]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004612:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	43db      	mvns	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004636:	4a26      	ldr	r2, [pc, #152]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800463c:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	43db      	mvns	r3, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004660:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004666:	4b1a      	ldr	r3, [pc, #104]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800468a:	4a11      	ldr	r2, [pc, #68]	@ (80046d0 <HAL_GPIO_Init+0x300>)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3301      	adds	r3, #1
 8004694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f ae9d 	bne.w	80043e0 <HAL_GPIO_Init+0x10>
  }
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40010000 	.word	0x40010000
 80046bc:	48000400 	.word	0x48000400
 80046c0:	48000800 	.word	0x48000800
 80046c4:	48000c00 	.word	0x48000c00
 80046c8:	48001000 	.word	0x48001000
 80046cc:	48001400 	.word	0x48001400
 80046d0:	40010400 	.word	0x40010400

080046d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
 80046e0:	4613      	mov	r3, r2
 80046e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046e4:	787b      	ldrb	r3, [r7, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046f0:	e002      	b.n	80046f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800470e:	4b08      	ldr	r3, [pc, #32]	@ (8004730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800471a:	4a05      	ldr	r2, [pc, #20]	@ (8004730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f806 	bl	8004734 <HAL_GPIO_EXTI_Callback>
  }
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40010400 	.word	0x40010400

08004734 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d141      	bne.n	80047de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800475a:	4b4b      	ldr	r3, [pc, #300]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004766:	d131      	bne.n	80047cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004768:	4b47      	ldr	r3, [pc, #284]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800476e:	4a46      	ldr	r2, [pc, #280]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004778:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004780:	4a41      	ldr	r2, [pc, #260]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004786:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004788:	4b40      	ldr	r3, [pc, #256]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2232      	movs	r2, #50	@ 0x32
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a3f      	ldr	r2, [pc, #252]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	0c9b      	lsrs	r3, r3, #18
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800479e:	e002      	b.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a6:	4b38      	ldr	r3, [pc, #224]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b2:	d102      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f2      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ba:	4b33      	ldr	r3, [pc, #204]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	d158      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e057      	b.n	800487c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047dc:	e04d      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e4:	d141      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047e6:	4b28      	ldr	r3, [pc, #160]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f2:	d131      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047f4:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fa:	4a23      	ldr	r2, [pc, #140]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004804:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800480c:	4a1e      	ldr	r2, [pc, #120]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800480e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004814:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2232      	movs	r2, #50	@ 0x32
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	4a1c      	ldr	r2, [pc, #112]	@ (8004890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	0c9b      	lsrs	r3, r3, #18
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482a:	e002      	b.n	8004832 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004832:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d102      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f2      	bne.n	800482c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004852:	d112      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e011      	b.n	800487c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485e:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004868:	e007      	b.n	800487a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004872:	4a05      	ldr	r2, [pc, #20]	@ (8004888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004878:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40007000 	.word	0x40007000
 800488c:	20000000 	.word	0x20000000
 8004890:	431bde83 	.word	0x431bde83

08004894 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004898:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a04      	ldr	r2, [pc, #16]	@ (80048b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800489e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048a2:	6093      	str	r3, [r2, #8]
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40007000 	.word	0x40007000

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e2fe      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d2:	4b97      	ldr	r3, [pc, #604]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048dc:	4b94      	ldr	r3, [pc, #592]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_OscConfig+0x3e>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_OscConfig+0x44>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <HAL_RCC_OscConfig+0x108>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d157      	bne.n	80049bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e2d9      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x74>
 800491a:	4b85      	ldr	r3, [pc, #532]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a84      	ldr	r2, [pc, #528]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x98>
 8004932:	4b7f      	ldr	r3, [pc, #508]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a7e      	ldr	r2, [pc, #504]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7b      	ldr	r2, [pc, #492]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 800494c:	4b78      	ldr	r3, [pc, #480]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a77      	ldr	r2, [pc, #476]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b75      	ldr	r3, [pc, #468]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a74      	ldr	r2, [pc, #464]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd fe6a 	bl	8002644 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd fe66 	bl	8002644 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e29e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004986:	4b6a      	ldr	r3, [pc, #424]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xc0>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd fe56 	bl	8002644 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7fd fe52 	bl	8002644 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	@ 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e28a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ae:	4b60      	ldr	r3, [pc, #384]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0xe8>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d075      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ca:	4b59      	ldr	r3, [pc, #356]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d4:	4b56      	ldr	r3, [pc, #344]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	d102      	bne.n	80049ea <HAL_RCC_OscConfig+0x136>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d002      	beq.n	80049f0 <HAL_RCC_OscConfig+0x13c>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d11f      	bne.n	8004a30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_OscConfig+0x154>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e25d      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a08:	4b49      	ldr	r3, [pc, #292]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	4946      	ldr	r1, [pc, #280]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a1c:	4b45      	ldr	r3, [pc, #276]	@ (8004b34 <HAL_RCC_OscConfig+0x280>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fc fe3b 	bl	800169c <HAL_InitTick>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d043      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e249      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d023      	beq.n	8004a80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a38:	4b3d      	ldr	r3, [pc, #244]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd fdfe 	bl	8002644 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fd fdfa 	bl	8002644 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e232      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a5e:	4b34      	ldr	r3, [pc, #208]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b31      	ldr	r3, [pc, #196]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	492d      	ldr	r1, [pc, #180]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]
 8004a7e:	e01a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a80:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2a      	ldr	r2, [pc, #168]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004a86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fdda 	bl	8002644 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fd fdd6 	bl	8002644 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e20e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa6:	4b22      	ldr	r3, [pc, #136]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x1e0>
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d041      	beq.n	8004b46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aca:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad0:	4a17      	ldr	r2, [pc, #92]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ada:	f7fd fdb3 	bl	8002644 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fd fdaf 	bl	8002644 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e1e7      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0ef      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x22e>
 8004b02:	e020      	b.n	8004b46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b04:	4b0a      	ldr	r3, [pc, #40]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0a:	4a09      	ldr	r2, [pc, #36]	@ (8004b30 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fd fd96 	bl	8002644 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b1a:	e00d      	b.n	8004b38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7fd fd92 	bl	8002644 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d906      	bls.n	8004b38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1ca      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
 8004b34:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b38:	4b8c      	ldr	r3, [pc, #560]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ea      	bne.n	8004b1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80a6 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b54:	2300      	movs	r3, #0
 8004b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b58:	4b84      	ldr	r3, [pc, #528]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_OscConfig+0x2b4>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x2b6>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b72:	4a7e      	ldr	r2, [pc, #504]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b86:	2301      	movs	r3, #1
 8004b88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8a:	4b79      	ldr	r3, [pc, #484]	@ (8004d70 <HAL_RCC_OscConfig+0x4bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d118      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b96:	4b76      	ldr	r3, [pc, #472]	@ (8004d70 <HAL_RCC_OscConfig+0x4bc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a75      	ldr	r2, [pc, #468]	@ (8004d70 <HAL_RCC_OscConfig+0x4bc>)
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba2:	f7fd fd4f 	bl	8002644 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004baa:	f7fd fd4b 	bl	8002644 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e183      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004d70 <HAL_RCC_OscConfig+0x4bc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d108      	bne.n	8004be2 <HAL_RCC_OscConfig+0x32e>
 8004bd0:	4b66      	ldr	r3, [pc, #408]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd6:	4a65      	ldr	r2, [pc, #404]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004be0:	e024      	b.n	8004c2c <HAL_RCC_OscConfig+0x378>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b05      	cmp	r3, #5
 8004be8:	d110      	bne.n	8004c0c <HAL_RCC_OscConfig+0x358>
 8004bea:	4b60      	ldr	r3, [pc, #384]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004bf2:	f043 0304 	orr.w	r3, r3, #4
 8004bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	4a5a      	ldr	r2, [pc, #360]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c0a:	e00f      	b.n	8004c2c <HAL_RCC_OscConfig+0x378>
 8004c0c:	4b57      	ldr	r3, [pc, #348]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c12:	4a56      	ldr	r2, [pc, #344]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c1c:	4b53      	ldr	r3, [pc, #332]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	4a52      	ldr	r2, [pc, #328]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c24:	f023 0304 	bic.w	r3, r3, #4
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fd fd06 	bl	8002644 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fd02 	bl	8002644 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e138      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c52:	4b46      	ldr	r3, [pc, #280]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ed      	beq.n	8004c3c <HAL_RCC_OscConfig+0x388>
 8004c60:	e015      	b.n	8004c8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fd fcef 	bl	8002644 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fd fceb 	bl	8002644 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e121      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c80:	4b3a      	ldr	r3, [pc, #232]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ed      	bne.n	8004c6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c8e:	7ffb      	ldrb	r3, [r7, #31]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c94:	4b35      	ldr	r3, [pc, #212]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	4a34      	ldr	r2, [pc, #208]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d03c      	beq.n	8004d26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01c      	beq.n	8004cee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cba:	4a2c      	ldr	r2, [pc, #176]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fd fcbe 	bl	8002644 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ccc:	f7fd fcba 	bl	8002644 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0f2      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cde:	4b23      	ldr	r3, [pc, #140]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ef      	beq.n	8004ccc <HAL_RCC_OscConfig+0x418>
 8004cec:	e01b      	b.n	8004d26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cee:	4b1f      	ldr	r3, [pc, #124]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfe:	f7fd fca1 	bl	8002644 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d06:	f7fd fc9d 	bl	8002644 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0d5      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d18:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1ef      	bne.n	8004d06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80c9 	beq.w	8004ec2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d30:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	f000 8083 	beq.w	8004e44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d15e      	bne.n	8004e04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	4b09      	ldr	r3, [pc, #36]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <HAL_RCC_OscConfig+0x4b8>)
 8004d4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fd fc77 	bl	8002644 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d58:	e00c      	b.n	8004d74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fd fc73 	bl	8002644 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d905      	bls.n	8004d74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e0ab      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d74:	4b55      	ldr	r3, [pc, #340]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ec      	bne.n	8004d5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d80:	4b52      	ldr	r3, [pc, #328]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	4b52      	ldr	r3, [pc, #328]	@ (8004ed0 <HAL_RCC_OscConfig+0x61c>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6a11      	ldr	r1, [r2, #32]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0112      	lsls	r2, r2, #4
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d9a:	0212      	lsls	r2, r2, #8
 8004d9c:	4311      	orrs	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004da2:	0852      	lsrs	r2, r2, #1
 8004da4:	3a01      	subs	r2, #1
 8004da6:	0552      	lsls	r2, r2, #21
 8004da8:	4311      	orrs	r1, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dae:	0852      	lsrs	r2, r2, #1
 8004db0:	3a01      	subs	r2, #1
 8004db2:	0652      	lsls	r2, r2, #25
 8004db4:	4311      	orrs	r1, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dba:	06d2      	lsls	r2, r2, #27
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	4943      	ldr	r1, [pc, #268]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc4:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a40      	ldr	r2, [pc, #256]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fd fc32 	bl	8002644 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fd fc2e 	bl	8002644 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e066      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df6:	4b35      	ldr	r3, [pc, #212]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x530>
 8004e02:	e05e      	b.n	8004ec2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e04:	4b31      	ldr	r3, [pc, #196]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a30      	ldr	r2, [pc, #192]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fd fc18 	bl	8002644 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e18:	f7fd fc14 	bl	8002644 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e04c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2a:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e36:	4b25      	ldr	r3, [pc, #148]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	4924      	ldr	r1, [pc, #144]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004e3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <HAL_RCC_OscConfig+0x620>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	60cb      	str	r3, [r1, #12]
 8004e42:	e03e      	b.n	8004ec2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e039      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e50:	4b1e      	ldr	r3, [pc, #120]	@ (8004ecc <HAL_RCC_OscConfig+0x618>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0203 	and.w	r2, r3, #3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d12c      	bne.n	8004ebe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d123      	bne.n	8004ebe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d11b      	bne.n	8004ebe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d113      	bne.n	8004ebe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	085b      	lsrs	r3, r3, #1
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	019f800c 	.word	0x019f800c
 8004ed4:	feeefffc 	.word	0xfeeefffc

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e11e      	b.n	800512e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b91      	ldr	r3, [pc, #580]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d910      	bls.n	8004f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b8e      	ldr	r3, [pc, #568]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 020f 	bic.w	r2, r3, #15
 8004f06:	498c      	ldr	r1, [pc, #560]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b8a      	ldr	r3, [pc, #552]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e106      	b.n	800512e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d073      	beq.n	8005014 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d129      	bne.n	8004f88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f34:	4b81      	ldr	r3, [pc, #516]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0f4      	b.n	800512e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f44:	f000 f9d0 	bl	80052e8 <RCC_GetSysClockFreqFromPLLSource>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4a7c      	ldr	r2, [pc, #496]	@ (8005140 <HAL_RCC_ClockConfig+0x268>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d93f      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f52:	4b7a      	ldr	r3, [pc, #488]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d033      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d12f      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f72:	4b72      	ldr	r3, [pc, #456]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f7a:	4a70      	ldr	r2, [pc, #448]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f82:	2380      	movs	r3, #128	@ 0x80
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e024      	b.n	8004fd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f90:	4b6a      	ldr	r3, [pc, #424]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0c6      	b.n	800512e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fa0:	4b66      	ldr	r3, [pc, #408]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0be      	b.n	800512e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004fb0:	f000 f8ce 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4a61      	ldr	r2, [pc, #388]	@ (8005140 <HAL_RCC_ClockConfig+0x268>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d909      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fbe:	4b5f      	ldr	r3, [pc, #380]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fc6:	4a5d      	ldr	r2, [pc, #372]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fce:	2380      	movs	r3, #128	@ 0x80
 8004fd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b5a      	ldr	r3, [pc, #360]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4957      	ldr	r1, [pc, #348]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe4:	f7fd fb2e 	bl	8002644 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fd fb2a 	bl	8002644 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e095      	b.n	800512e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b4e      	ldr	r3, [pc, #312]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d023      	beq.n	8005068 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800502c:	4b43      	ldr	r3, [pc, #268]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4a42      	ldr	r2, [pc, #264]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8005032:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005036:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005044:	4b3d      	ldr	r3, [pc, #244]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800504c:	4a3b      	ldr	r2, [pc, #236]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 800504e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005052:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005054:	4b39      	ldr	r3, [pc, #228]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4936      	ldr	r1, [pc, #216]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
 8005066:	e008      	b.n	800507a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b80      	cmp	r3, #128	@ 0x80
 800506c:	d105      	bne.n	800507a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800506e:	4b33      	ldr	r3, [pc, #204]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4a32      	ldr	r2, [pc, #200]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 8005074:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005078:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507a:	4b2f      	ldr	r3, [pc, #188]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d21d      	bcs.n	80050c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005088:	4b2b      	ldr	r3, [pc, #172]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 020f 	bic.w	r2, r3, #15
 8005090:	4929      	ldr	r1, [pc, #164]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005098:	f7fd fad4 	bl	8002644 <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a0:	f7fd fad0 	bl	8002644 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e03b      	b.n	800512e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b20      	ldr	r3, [pc, #128]	@ (8005138 <HAL_RCC_ClockConfig+0x260>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1ed      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d0:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4917      	ldr	r1, [pc, #92]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ee:	4b13      	ldr	r3, [pc, #76]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	490f      	ldr	r1, [pc, #60]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005102:	f000 f825 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 8005106:	4602      	mov	r2, r0
 8005108:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <HAL_RCC_ClockConfig+0x264>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	490c      	ldr	r1, [pc, #48]	@ (8005144 <HAL_RCC_ClockConfig+0x26c>)
 8005114:	5ccb      	ldrb	r3, [r1, r3]
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	fa22 f303 	lsr.w	r3, r2, r3
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <HAL_RCC_ClockConfig+0x270>)
 8005120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005122:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <HAL_RCC_ClockConfig+0x274>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7fc fab8 	bl	800169c <HAL_InitTick>
 800512c:	4603      	mov	r3, r0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40022000 	.word	0x40022000
 800513c:	40021000 	.word	0x40021000
 8005140:	04c4b400 	.word	0x04c4b400
 8005144:	0800e148 	.word	0x0800e148
 8005148:	20000000 	.word	0x20000000
 800514c:	200000c0 	.word	0x200000c0

08005150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005156:	4b2c      	ldr	r3, [pc, #176]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b04      	cmp	r3, #4
 8005160:	d102      	bne.n	8005168 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005162:	4b2a      	ldr	r3, [pc, #168]	@ (800520c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e047      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005168:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 030c 	and.w	r3, r3, #12
 8005170:	2b08      	cmp	r3, #8
 8005172:	d102      	bne.n	800517a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005174:	4b26      	ldr	r3, [pc, #152]	@ (8005210 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	e03e      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800517a:	4b23      	ldr	r3, [pc, #140]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b0c      	cmp	r3, #12
 8005184:	d136      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005186:	4b20      	ldr	r3, [pc, #128]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005190:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	3301      	adds	r3, #1
 800519c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d10c      	bne.n	80051be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005210 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	4a16      	ldr	r2, [pc, #88]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ae:	68d2      	ldr	r2, [r2, #12]
 80051b0:	0a12      	lsrs	r2, r2, #8
 80051b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	617b      	str	r3, [r7, #20]
      break;
 80051bc:	e00c      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051be:	4a13      	ldr	r2, [pc, #76]	@ (800520c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	4a10      	ldr	r2, [pc, #64]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c8:	68d2      	ldr	r2, [r2, #12]
 80051ca:	0a12      	lsrs	r2, r2, #8
 80051cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	617b      	str	r3, [r7, #20]
      break;
 80051d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	0e5b      	lsrs	r3, r3, #25
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	3301      	adds	r3, #1
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e001      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051f8:	693b      	ldr	r3, [r7, #16]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	00f42400 	.word	0x00f42400
 8005210:	016e3600 	.word	0x016e3600

08005214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b03      	ldr	r3, [pc, #12]	@ (8005228 <HAL_RCC_GetHCLKFreq+0x14>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000000 	.word	0x20000000

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005230:	f7ff fff0 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b06      	ldr	r3, [pc, #24]	@ (8005250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4904      	ldr	r1, [pc, #16]	@ (8005254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	0800e158 	.word	0x0800e158

08005258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800525c:	f7ff ffda 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b06      	ldr	r3, [pc, #24]	@ (800527c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	0adb      	lsrs	r3, r3, #11
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4904      	ldr	r1, [pc, #16]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000
 8005280:	0800e158 	.word	0x0800e158

08005284 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	220f      	movs	r2, #15
 8005292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005294:	4b12      	ldr	r3, [pc, #72]	@ (80052e0 <HAL_RCC_GetClockConfig+0x5c>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0203 	and.w	r2, r3, #3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052a0:	4b0f      	ldr	r3, [pc, #60]	@ (80052e0 <HAL_RCC_GetClockConfig+0x5c>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052ac:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <HAL_RCC_GetClockConfig+0x5c>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052b8:	4b09      	ldr	r3, [pc, #36]	@ (80052e0 <HAL_RCC_GetClockConfig+0x5c>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	08db      	lsrs	r3, r3, #3
 80052be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052c6:	4b07      	ldr	r3, [pc, #28]	@ (80052e4 <HAL_RCC_GetClockConfig+0x60>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 020f 	and.w	r2, r3, #15
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	601a      	str	r2, [r3, #0]
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40022000 	.word	0x40022000

080052e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d10c      	bne.n	8005326 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800530c:	4a17      	ldr	r2, [pc, #92]	@ (800536c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	4a14      	ldr	r2, [pc, #80]	@ (8005368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005316:	68d2      	ldr	r2, [r2, #12]
 8005318:	0a12      	lsrs	r2, r2, #8
 800531a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	617b      	str	r3, [r7, #20]
    break;
 8005324:	e00c      	b.n	8005340 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005326:	4a12      	ldr	r2, [pc, #72]	@ (8005370 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	4a0e      	ldr	r2, [pc, #56]	@ (8005368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005330:	68d2      	ldr	r2, [r2, #12]
 8005332:	0a12      	lsrs	r2, r2, #8
 8005334:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]
    break;
 800533e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0e5b      	lsrs	r3, r3, #25
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	3301      	adds	r3, #1
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800535a:	687b      	ldr	r3, [r7, #4]
}
 800535c:	4618      	mov	r0, r3
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	40021000 	.word	0x40021000
 800536c:	016e3600 	.word	0x016e3600
 8005370:	00f42400 	.word	0x00f42400

08005374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800537c:	2300      	movs	r3, #0
 800537e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005380:	2300      	movs	r3, #0
 8005382:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8098 	beq.w	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005392:	2300      	movs	r3, #0
 8005394:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005396:	4b43      	ldr	r3, [pc, #268]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a2:	4b40      	ldr	r3, [pc, #256]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	4a3f      	ldr	r2, [pc, #252]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ae:	4b3d      	ldr	r3, [pc, #244]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ba:	2301      	movs	r3, #1
 80053bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053be:	4b3a      	ldr	r3, [pc, #232]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a39      	ldr	r2, [pc, #228]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ca:	f7fd f93b 	bl	8002644 <HAL_GetTick>
 80053ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d0:	e009      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d2:	f7fd f937 	bl	8002644 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d902      	bls.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	74fb      	strb	r3, [r7, #19]
        break;
 80053e4:	e005      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e6:	4b30      	ldr	r3, [pc, #192]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ef      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d159      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053f8:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005402:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01e      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	429a      	cmp	r2, r3
 8005412:	d019      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005414:	4b23      	ldr	r3, [pc, #140]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800541e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005420:	4b20      	ldr	r3, [pc, #128]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005426:	4a1f      	ldr	r2, [pc, #124]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005430:	4b1c      	ldr	r3, [pc, #112]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005436:	4a1b      	ldr	r2, [pc, #108]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005440:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fd f8f7 	bl	8002644 <HAL_GetTick>
 8005456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005458:	e00b      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fd f8f3 	bl	8002644 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d902      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	74fb      	strb	r3, [r7, #19]
            break;
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ec      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005486:	4b07      	ldr	r3, [pc, #28]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005494:	4903      	ldr	r1, [pc, #12]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800549c:	e008      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800549e:	7cfb      	ldrb	r3, [r7, #19]
 80054a0:	74bb      	strb	r3, [r7, #18]
 80054a2:	e005      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054b0:	7c7b      	ldrb	r3, [r7, #17]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d105      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b6:	4ba7      	ldr	r3, [pc, #668]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ba:	4aa6      	ldr	r2, [pc, #664]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054ce:	4ba1      	ldr	r3, [pc, #644]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d4:	f023 0203 	bic.w	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	499d      	ldr	r1, [pc, #628]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054f0:	4b98      	ldr	r3, [pc, #608]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f6:	f023 020c 	bic.w	r2, r3, #12
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4995      	ldr	r1, [pc, #596]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005512:	4b90      	ldr	r3, [pc, #576]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005518:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	498c      	ldr	r1, [pc, #560]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005534:	4b87      	ldr	r3, [pc, #540]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	4984      	ldr	r1, [pc, #528]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005556:	4b7f      	ldr	r3, [pc, #508]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	497b      	ldr	r1, [pc, #492]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005578:	4b76      	ldr	r3, [pc, #472]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	4973      	ldr	r1, [pc, #460]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800559a:	4b6e      	ldr	r3, [pc, #440]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	496a      	ldr	r1, [pc, #424]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055bc:	4b65      	ldr	r3, [pc, #404]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	4962      	ldr	r1, [pc, #392]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055de:	4b5d      	ldr	r3, [pc, #372]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	4959      	ldr	r1, [pc, #356]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005600:	4b54      	ldr	r3, [pc, #336]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005606:	f023 0203 	bic.w	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	4951      	ldr	r1, [pc, #324]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005622:	4b4c      	ldr	r3, [pc, #304]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	4948      	ldr	r1, [pc, #288]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d015      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005644:	4b43      	ldr	r3, [pc, #268]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005652:	4940      	ldr	r1, [pc, #256]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005664:	4b3b      	ldr	r3, [pc, #236]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4a3a      	ldr	r2, [pc, #232]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800566e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005678:	2b00      	cmp	r3, #0
 800567a:	d015      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800567c:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005682:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568a:	4932      	ldr	r1, [pc, #200]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800569a:	d105      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569c:	4b2d      	ldr	r3, [pc, #180]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056b4:	4b27      	ldr	r3, [pc, #156]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	4924      	ldr	r1, [pc, #144]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ec:	4b19      	ldr	r3, [pc, #100]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	4916      	ldr	r1, [pc, #88]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570c:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a10      	ldr	r2, [pc, #64]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005716:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d019      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005724:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	4908      	ldr	r1, [pc, #32]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005742:	d109      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005744:	4b03      	ldr	r3, [pc, #12]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a02      	ldr	r2, [pc, #8]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800574e:	60d3      	str	r3, [r2, #12]
 8005750:	e002      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005764:	4b29      	ldr	r3, [pc, #164]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	4926      	ldr	r1, [pc, #152]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005782:	d105      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005784:	4b21      	ldr	r3, [pc, #132]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a20      	ldr	r2, [pc, #128]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800578a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800578e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d015      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800579c:	4b1b      	ldr	r3, [pc, #108]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057aa:	4918      	ldr	r1, [pc, #96]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ba:	d105      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057bc:	4b13      	ldr	r3, [pc, #76]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a12      	ldr	r2, [pc, #72]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057d4:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e2:	490a      	ldr	r1, [pc, #40]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057f2:	d105      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a04      	ldr	r2, [pc, #16]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005800:	7cbb      	ldrb	r3, [r7, #18]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000

08005810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e049      	b.n	80058b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fc f9e4 	bl	8001c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 fe60 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d001      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e054      	b.n	8005982 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a26      	ldr	r2, [pc, #152]	@ (8005990 <HAL_TIM_Base_Start_IT+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d022      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x80>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005902:	d01d      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x80>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a22      	ldr	r2, [pc, #136]	@ (8005994 <HAL_TIM_Base_Start_IT+0xd4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d018      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x80>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a21      	ldr	r2, [pc, #132]	@ (8005998 <HAL_TIM_Base_Start_IT+0xd8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x80>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1f      	ldr	r2, [pc, #124]	@ (800599c <HAL_TIM_Base_Start_IT+0xdc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x80>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1e      	ldr	r2, [pc, #120]	@ (80059a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d009      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x80>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1c      	ldr	r2, [pc, #112]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x80>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1b      	ldr	r2, [pc, #108]	@ (80059a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d115      	bne.n	800596c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	4b19      	ldr	r3, [pc, #100]	@ (80059ac <HAL_TIM_Base_Start_IT+0xec>)
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b06      	cmp	r3, #6
 8005950:	d015      	beq.n	800597e <HAL_TIM_Base_Start_IT+0xbe>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005958:	d011      	beq.n	800597e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596a:	e008      	b.n	800597e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e000      	b.n	8005980 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800
 800599c:	40000c00 	.word	0x40000c00
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40015000 	.word	0x40015000
 80059ac:	00010007 	.word	0x00010007

080059b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e049      	b.n	8005a56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f841 	bl	8005a5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f000 fd90 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <HAL_TIM_PWM_Start+0x24>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e03c      	b.n	8005b12 <HAL_TIM_PWM_Start+0x9e>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d109      	bne.n	8005ab2 <HAL_TIM_PWM_Start+0x3e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	bf14      	ite	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	2300      	moveq	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	e02f      	b.n	8005b12 <HAL_TIM_PWM_Start+0x9e>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d109      	bne.n	8005acc <HAL_TIM_PWM_Start+0x58>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	e022      	b.n	8005b12 <HAL_TIM_PWM_Start+0x9e>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b0c      	cmp	r3, #12
 8005ad0:	d109      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0x72>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e015      	b.n	8005b12 <HAL_TIM_PWM_Start+0x9e>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d109      	bne.n	8005b00 <HAL_TIM_PWM_Start+0x8c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	e008      	b.n	8005b12 <HAL_TIM_PWM_Start+0x9e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e0a6      	b.n	8005c68 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PWM_Start+0xb6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b28:	e023      	b.n	8005b72 <HAL_TIM_PWM_Start+0xfe>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_PWM_Start+0xc6>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b38:	e01b      	b.n	8005b72 <HAL_TIM_PWM_Start+0xfe>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_PWM_Start+0xd6>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b48:	e013      	b.n	8005b72 <HAL_TIM_PWM_Start+0xfe>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_PWM_Start+0xe6>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b58:	e00b      	b.n	8005b72 <HAL_TIM_PWM_Start+0xfe>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_PWM_Start+0xf6>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b68:	e003      	b.n	8005b72 <HAL_TIM_PWM_Start+0xfe>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2201      	movs	r2, #1
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 f9b8 	bl	8006ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a3a      	ldr	r2, [pc, #232]	@ (8005c70 <HAL_TIM_PWM_Start+0x1fc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_TIM_PWM_Start+0x148>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a39      	ldr	r2, [pc, #228]	@ (8005c74 <HAL_TIM_PWM_Start+0x200>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_TIM_PWM_Start+0x148>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a37      	ldr	r2, [pc, #220]	@ (8005c78 <HAL_TIM_PWM_Start+0x204>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_TIM_PWM_Start+0x148>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a36      	ldr	r2, [pc, #216]	@ (8005c7c <HAL_TIM_PWM_Start+0x208>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_TIM_PWM_Start+0x148>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a34      	ldr	r2, [pc, #208]	@ (8005c80 <HAL_TIM_PWM_Start+0x20c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIM_PWM_Start+0x148>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a33      	ldr	r2, [pc, #204]	@ (8005c84 <HAL_TIM_PWM_Start+0x210>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_PWM_Start+0x14c>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <HAL_TIM_PWM_Start+0x14e>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a25      	ldr	r2, [pc, #148]	@ (8005c70 <HAL_TIM_PWM_Start+0x1fc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x1b2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be8:	d01d      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x1b2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a26      	ldr	r2, [pc, #152]	@ (8005c88 <HAL_TIM_PWM_Start+0x214>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d018      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x1b2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a24      	ldr	r2, [pc, #144]	@ (8005c8c <HAL_TIM_PWM_Start+0x218>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x1b2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a23      	ldr	r2, [pc, #140]	@ (8005c90 <HAL_TIM_PWM_Start+0x21c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x1b2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	@ (8005c74 <HAL_TIM_PWM_Start+0x200>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x1b2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a18      	ldr	r2, [pc, #96]	@ (8005c78 <HAL_TIM_PWM_Start+0x204>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x1b2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	@ (8005c84 <HAL_TIM_PWM_Start+0x210>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d115      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <HAL_TIM_PWM_Start+0x220>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b06      	cmp	r3, #6
 8005c36:	d015      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x1f0>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c3e:	d011      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	e008      	b.n	8005c64 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e000      	b.n	8005c66 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800
 8005c84:	40015000 	.word	0x40015000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	00010007 	.word	0x00010007

08005c98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f920 	bl	8006ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a40      	ldr	r2, [pc, #256]	@ (8005db8 <HAL_TIM_PWM_Stop+0x120>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d018      	beq.n	8005cec <HAL_TIM_PWM_Stop+0x54>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8005dbc <HAL_TIM_PWM_Stop+0x124>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <HAL_TIM_PWM_Stop+0x54>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8005dc0 <HAL_TIM_PWM_Stop+0x128>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00e      	beq.n	8005cec <HAL_TIM_PWM_Stop+0x54>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8005dc4 <HAL_TIM_PWM_Stop+0x12c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_TIM_PWM_Stop+0x54>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3a      	ldr	r2, [pc, #232]	@ (8005dc8 <HAL_TIM_PWM_Stop+0x130>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_TIM_PWM_Stop+0x54>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a39      	ldr	r2, [pc, #228]	@ (8005dcc <HAL_TIM_PWM_Stop+0x134>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d101      	bne.n	8005cf0 <HAL_TIM_PWM_Stop+0x58>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <HAL_TIM_PWM_Stop+0x5a>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d017      	beq.n	8005d26 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a1a      	ldr	r2, [r3, #32]
 8005cfc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10f      	bne.n	8005d26 <HAL_TIM_PWM_Stop+0x8e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d107      	bne.n	8005d26 <HAL_TIM_PWM_Stop+0x8e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6a1a      	ldr	r2, [r3, #32]
 8005d2c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10f      	bne.n	8005d56 <HAL_TIM_PWM_Stop+0xbe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_PWM_Stop+0xbe>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_PWM_Stop+0xce>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d64:	e023      	b.n	8005dae <HAL_TIM_PWM_Stop+0x116>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d104      	bne.n	8005d76 <HAL_TIM_PWM_Stop+0xde>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d74:	e01b      	b.n	8005dae <HAL_TIM_PWM_Stop+0x116>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d104      	bne.n	8005d86 <HAL_TIM_PWM_Stop+0xee>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d84:	e013      	b.n	8005dae <HAL_TIM_PWM_Stop+0x116>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b0c      	cmp	r3, #12
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_PWM_Stop+0xfe>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d94:	e00b      	b.n	8005dae <HAL_TIM_PWM_Stop+0x116>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_PWM_Stop+0x10e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da4:	e003      	b.n	8005dae <HAL_TIM_PWM_Stop+0x116>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800
 8005dcc:	40015000 	.word	0x40015000

08005dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d020      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01b      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0202 	mvn.w	r2, #2
 8005e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fb5c 	bl	80064d8 <HAL_TIM_IC_CaptureCallback>
 8005e20:	e005      	b.n	8005e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb4e 	bl	80064c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fb5f 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d020      	beq.n	8005e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01b      	beq.n	8005e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0204 	mvn.w	r2, #4
 8005e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fb36 	bl	80064d8 <HAL_TIM_IC_CaptureCallback>
 8005e6c:	e005      	b.n	8005e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb28 	bl	80064c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb39 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d020      	beq.n	8005ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01b      	beq.n	8005ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0208 	mvn.w	r2, #8
 8005e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb10 	bl	80064d8 <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fb02 	bl	80064c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fb13 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d020      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01b      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0210 	mvn.w	r2, #16
 8005ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2208      	movs	r2, #8
 8005eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 faea 	bl	80064d8 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fadc 	bl	80064c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 faed 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00c      	beq.n	8005f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0201 	mvn.w	r2, #1
 8005f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb fb74 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00c      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d007      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f001 faeb 	bl	8007540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00c      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fae3 	bl	8007554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00c      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 faa7 	bl	8006500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f06f 0220 	mvn.w	r2, #32
 8005fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 faab 	bl	800752c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00c      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 fab7 	bl	8007568 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00c      	beq.n	800601e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 faaf 	bl	800757c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00c      	beq.n	8006042 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800603a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 faa7 	bl	8007590 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00c      	beq.n	8006066 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800605e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 fa9f 	bl	80075a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800608a:	2302      	movs	r3, #2
 800608c:	e0ff      	b.n	800628e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b14      	cmp	r3, #20
 800609a:	f200 80f0 	bhi.w	800627e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	0800627f 	.word	0x0800627f
 80060ac:	0800627f 	.word	0x0800627f
 80060b0:	0800627f 	.word	0x0800627f
 80060b4:	08006139 	.word	0x08006139
 80060b8:	0800627f 	.word	0x0800627f
 80060bc:	0800627f 	.word	0x0800627f
 80060c0:	0800627f 	.word	0x0800627f
 80060c4:	0800617b 	.word	0x0800617b
 80060c8:	0800627f 	.word	0x0800627f
 80060cc:	0800627f 	.word	0x0800627f
 80060d0:	0800627f 	.word	0x0800627f
 80060d4:	080061bb 	.word	0x080061bb
 80060d8:	0800627f 	.word	0x0800627f
 80060dc:	0800627f 	.word	0x0800627f
 80060e0:	0800627f 	.word	0x0800627f
 80060e4:	080061fd 	.word	0x080061fd
 80060e8:	0800627f 	.word	0x0800627f
 80060ec:	0800627f 	.word	0x0800627f
 80060f0:	0800627f 	.word	0x0800627f
 80060f4:	0800623d 	.word	0x0800623d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fabc 	bl	800667c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0208 	orr.w	r2, r2, #8
 8006112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0204 	bic.w	r2, r2, #4
 8006122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6999      	ldr	r1, [r3, #24]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	619a      	str	r2, [r3, #24]
      break;
 8006136:	e0a5      	b.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb36 	bl	80067b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6999      	ldr	r1, [r3, #24]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	021a      	lsls	r2, r3, #8
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	619a      	str	r2, [r3, #24]
      break;
 8006178:	e084      	b.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fba9 	bl	80068d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0208 	orr.w	r2, r2, #8
 8006194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0204 	bic.w	r2, r2, #4
 80061a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69d9      	ldr	r1, [r3, #28]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	61da      	str	r2, [r3, #28]
      break;
 80061b8:	e064      	b.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fc1b 	bl	80069fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69d9      	ldr	r1, [r3, #28]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	021a      	lsls	r2, r3, #8
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	61da      	str	r2, [r3, #28]
      break;
 80061fa:	e043      	b.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fc8e 	bl	8006b24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0208 	orr.w	r2, r2, #8
 8006216:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0204 	bic.w	r2, r2, #4
 8006226:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800623a:	e023      	b.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fcd8 	bl	8006bf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006256:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006266:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	021a      	lsls	r2, r3, #8
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800627c:	e002      	b.n	8006284 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
      break;
 8006282:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800628c:	7dfb      	ldrb	r3, [r7, #23]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop

08006298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIM_ConfigClockSource+0x1c>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e0f6      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x20a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80062d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a6f      	ldr	r2, [pc, #444]	@ (80064ac <HAL_TIM_ConfigClockSource+0x214>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	f000 80c1 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 80062f4:	4a6d      	ldr	r2, [pc, #436]	@ (80064ac <HAL_TIM_ConfigClockSource+0x214>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	f200 80c6 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 80062fc:	4a6c      	ldr	r2, [pc, #432]	@ (80064b0 <HAL_TIM_ConfigClockSource+0x218>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	f000 80b9 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 8006304:	4a6a      	ldr	r2, [pc, #424]	@ (80064b0 <HAL_TIM_ConfigClockSource+0x218>)
 8006306:	4293      	cmp	r3, r2
 8006308:	f200 80be 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800630c:	4a69      	ldr	r2, [pc, #420]	@ (80064b4 <HAL_TIM_ConfigClockSource+0x21c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	f000 80b1 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 8006314:	4a67      	ldr	r2, [pc, #412]	@ (80064b4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	f200 80b6 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800631c:	4a66      	ldr	r2, [pc, #408]	@ (80064b8 <HAL_TIM_ConfigClockSource+0x220>)
 800631e:	4293      	cmp	r3, r2
 8006320:	f000 80a9 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 8006324:	4a64      	ldr	r2, [pc, #400]	@ (80064b8 <HAL_TIM_ConfigClockSource+0x220>)
 8006326:	4293      	cmp	r3, r2
 8006328:	f200 80ae 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800632c:	4a63      	ldr	r2, [pc, #396]	@ (80064bc <HAL_TIM_ConfigClockSource+0x224>)
 800632e:	4293      	cmp	r3, r2
 8006330:	f000 80a1 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 8006334:	4a61      	ldr	r2, [pc, #388]	@ (80064bc <HAL_TIM_ConfigClockSource+0x224>)
 8006336:	4293      	cmp	r3, r2
 8006338:	f200 80a6 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800633c:	4a60      	ldr	r2, [pc, #384]	@ (80064c0 <HAL_TIM_ConfigClockSource+0x228>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f000 8099 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 8006344:	4a5e      	ldr	r2, [pc, #376]	@ (80064c0 <HAL_TIM_ConfigClockSource+0x228>)
 8006346:	4293      	cmp	r3, r2
 8006348:	f200 809e 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800634c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006350:	f000 8091 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 8006354:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006358:	f200 8096 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800635c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006360:	f000 8089 	beq.w	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 8006364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006368:	f200 808e 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800636c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006370:	d03e      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
 8006372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006376:	f200 8087 	bhi.w	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637e:	f000 8086 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x1f6>
 8006382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006386:	d87f      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 8006388:	2b70      	cmp	r3, #112	@ 0x70
 800638a:	d01a      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0x12a>
 800638c:	2b70      	cmp	r3, #112	@ 0x70
 800638e:	d87b      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 8006390:	2b60      	cmp	r3, #96	@ 0x60
 8006392:	d050      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x19e>
 8006394:	2b60      	cmp	r3, #96	@ 0x60
 8006396:	d877      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 8006398:	2b50      	cmp	r3, #80	@ 0x50
 800639a:	d03c      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0x17e>
 800639c:	2b50      	cmp	r3, #80	@ 0x50
 800639e:	d873      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 80063a0:	2b40      	cmp	r3, #64	@ 0x40
 80063a2:	d058      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x1be>
 80063a4:	2b40      	cmp	r3, #64	@ 0x40
 80063a6:	d86f      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 80063a8:	2b30      	cmp	r3, #48	@ 0x30
 80063aa:	d064      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 80063ac:	2b30      	cmp	r3, #48	@ 0x30
 80063ae:	d86b      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d060      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d867      	bhi.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d05c      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d05a      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x1de>
 80063c0:	e062      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063d2:	f000 fd6d 	bl	8006eb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	609a      	str	r2, [r3, #8]
      break;
 80063ee:	e04f      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006400:	f000 fd56 	bl	8006eb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006412:	609a      	str	r2, [r3, #8]
      break;
 8006414:	e03c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	461a      	mov	r2, r3
 8006424:	f000 fcc8 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2150      	movs	r1, #80	@ 0x50
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fd21 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006434:	e02c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006442:	461a      	mov	r2, r3
 8006444:	f000 fce7 	bl	8006e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2160      	movs	r1, #96	@ 0x60
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fd11 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006454:	e01c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006462:	461a      	mov	r2, r3
 8006464:	f000 fca8 	bl	8006db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2140      	movs	r1, #64	@ 0x40
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fd01 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006474:	e00c      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f000 fcf8 	bl	8006e76 <TIM_ITRx_SetConfig>
      break;
 8006486:	e003      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	e000      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800648e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	00100070 	.word	0x00100070
 80064b0:	00100060 	.word	0x00100060
 80064b4:	00100050 	.word	0x00100050
 80064b8:	00100040 	.word	0x00100040
 80064bc:	00100030 	.word	0x00100030
 80064c0:	00100020 	.word	0x00100020

080064c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a4c      	ldr	r2, [pc, #304]	@ (8006658 <TIM_Base_SetConfig+0x144>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d017      	beq.n	800655c <TIM_Base_SetConfig+0x48>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006532:	d013      	beq.n	800655c <TIM_Base_SetConfig+0x48>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a49      	ldr	r2, [pc, #292]	@ (800665c <TIM_Base_SetConfig+0x148>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00f      	beq.n	800655c <TIM_Base_SetConfig+0x48>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a48      	ldr	r2, [pc, #288]	@ (8006660 <TIM_Base_SetConfig+0x14c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_Base_SetConfig+0x48>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a47      	ldr	r2, [pc, #284]	@ (8006664 <TIM_Base_SetConfig+0x150>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_Base_SetConfig+0x48>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a46      	ldr	r2, [pc, #280]	@ (8006668 <TIM_Base_SetConfig+0x154>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0x48>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a45      	ldr	r2, [pc, #276]	@ (800666c <TIM_Base_SetConfig+0x158>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d108      	bne.n	800656e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a39      	ldr	r2, [pc, #228]	@ (8006658 <TIM_Base_SetConfig+0x144>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d023      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657c:	d01f      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a36      	ldr	r2, [pc, #216]	@ (800665c <TIM_Base_SetConfig+0x148>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01b      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a35      	ldr	r2, [pc, #212]	@ (8006660 <TIM_Base_SetConfig+0x14c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d017      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a34      	ldr	r2, [pc, #208]	@ (8006664 <TIM_Base_SetConfig+0x150>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a33      	ldr	r2, [pc, #204]	@ (8006668 <TIM_Base_SetConfig+0x154>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00f      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a33      	ldr	r2, [pc, #204]	@ (8006670 <TIM_Base_SetConfig+0x15c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00b      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a32      	ldr	r2, [pc, #200]	@ (8006674 <TIM_Base_SetConfig+0x160>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d007      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a31      	ldr	r2, [pc, #196]	@ (8006678 <TIM_Base_SetConfig+0x164>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_Base_SetConfig+0xaa>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2c      	ldr	r2, [pc, #176]	@ (800666c <TIM_Base_SetConfig+0x158>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d108      	bne.n	80065d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a18      	ldr	r2, [pc, #96]	@ (8006658 <TIM_Base_SetConfig+0x144>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <TIM_Base_SetConfig+0x110>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006668 <TIM_Base_SetConfig+0x154>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00f      	beq.n	8006624 <TIM_Base_SetConfig+0x110>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a1a      	ldr	r2, [pc, #104]	@ (8006670 <TIM_Base_SetConfig+0x15c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00b      	beq.n	8006624 <TIM_Base_SetConfig+0x110>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a19      	ldr	r2, [pc, #100]	@ (8006674 <TIM_Base_SetConfig+0x160>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d007      	beq.n	8006624 <TIM_Base_SetConfig+0x110>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a18      	ldr	r2, [pc, #96]	@ (8006678 <TIM_Base_SetConfig+0x164>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_Base_SetConfig+0x110>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a13      	ldr	r2, [pc, #76]	@ (800666c <TIM_Base_SetConfig+0x158>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d103      	bne.n	800662c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d105      	bne.n	800664a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f023 0201 	bic.w	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	611a      	str	r2, [r3, #16]
  }
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40012c00 	.word	0x40012c00
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800
 8006664:	40000c00 	.word	0x40000c00
 8006668:	40013400 	.word	0x40013400
 800666c:	40015000 	.word	0x40015000
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800

0800667c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f023 0201 	bic.w	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 0302 	bic.w	r3, r3, #2
 80066c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a30      	ldr	r2, [pc, #192]	@ (8006798 <TIM_OC1_SetConfig+0x11c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <TIM_OC1_SetConfig+0x88>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a2f      	ldr	r2, [pc, #188]	@ (800679c <TIM_OC1_SetConfig+0x120>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_OC1_SetConfig+0x88>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a2e      	ldr	r2, [pc, #184]	@ (80067a0 <TIM_OC1_SetConfig+0x124>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_OC1_SetConfig+0x88>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a2d      	ldr	r2, [pc, #180]	@ (80067a4 <TIM_OC1_SetConfig+0x128>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_OC1_SetConfig+0x88>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a2c      	ldr	r2, [pc, #176]	@ (80067a8 <TIM_OC1_SetConfig+0x12c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC1_SetConfig+0x88>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a2b      	ldr	r2, [pc, #172]	@ (80067ac <TIM_OC1_SetConfig+0x130>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10c      	bne.n	800671e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0308 	bic.w	r3, r3, #8
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0304 	bic.w	r3, r3, #4
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a1d      	ldr	r2, [pc, #116]	@ (8006798 <TIM_OC1_SetConfig+0x11c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <TIM_OC1_SetConfig+0xd2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a1c      	ldr	r2, [pc, #112]	@ (800679c <TIM_OC1_SetConfig+0x120>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00f      	beq.n	800674e <TIM_OC1_SetConfig+0xd2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a1b      	ldr	r2, [pc, #108]	@ (80067a0 <TIM_OC1_SetConfig+0x124>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00b      	beq.n	800674e <TIM_OC1_SetConfig+0xd2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a1a      	ldr	r2, [pc, #104]	@ (80067a4 <TIM_OC1_SetConfig+0x128>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d007      	beq.n	800674e <TIM_OC1_SetConfig+0xd2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a19      	ldr	r2, [pc, #100]	@ (80067a8 <TIM_OC1_SetConfig+0x12c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <TIM_OC1_SetConfig+0xd2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a18      	ldr	r2, [pc, #96]	@ (80067ac <TIM_OC1_SetConfig+0x130>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d111      	bne.n	8006772 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800675c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40013400 	.word	0x40013400
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40014400 	.word	0x40014400
 80067a8:	40014800 	.word	0x40014800
 80067ac:	40015000 	.word	0x40015000

080067b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f023 0210 	bic.w	r2, r3, #16
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0320 	bic.w	r3, r3, #32
 80067fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a2c      	ldr	r2, [pc, #176]	@ (80068c0 <TIM_OC2_SetConfig+0x110>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <TIM_OC2_SetConfig+0x74>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a2b      	ldr	r2, [pc, #172]	@ (80068c4 <TIM_OC2_SetConfig+0x114>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC2_SetConfig+0x74>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a2a      	ldr	r2, [pc, #168]	@ (80068c8 <TIM_OC2_SetConfig+0x118>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10d      	bne.n	8006840 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800682a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800683e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1f      	ldr	r2, [pc, #124]	@ (80068c0 <TIM_OC2_SetConfig+0x110>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <TIM_OC2_SetConfig+0xc0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1e      	ldr	r2, [pc, #120]	@ (80068c4 <TIM_OC2_SetConfig+0x114>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00f      	beq.n	8006870 <TIM_OC2_SetConfig+0xc0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1e      	ldr	r2, [pc, #120]	@ (80068cc <TIM_OC2_SetConfig+0x11c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00b      	beq.n	8006870 <TIM_OC2_SetConfig+0xc0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <TIM_OC2_SetConfig+0x120>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d007      	beq.n	8006870 <TIM_OC2_SetConfig+0xc0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1c      	ldr	r2, [pc, #112]	@ (80068d4 <TIM_OC2_SetConfig+0x124>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC2_SetConfig+0xc0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <TIM_OC2_SetConfig+0x118>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d113      	bne.n	8006898 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800687e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40013400 	.word	0x40013400
 80068c8:	40015000 	.word	0x40015000
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2b      	ldr	r2, [pc, #172]	@ (80069e4 <TIM_OC3_SetConfig+0x10c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_OC3_SetConfig+0x72>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2a      	ldr	r2, [pc, #168]	@ (80069e8 <TIM_OC3_SetConfig+0x110>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_OC3_SetConfig+0x72>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a29      	ldr	r2, [pc, #164]	@ (80069ec <TIM_OC3_SetConfig+0x114>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d10d      	bne.n	8006966 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a1e      	ldr	r2, [pc, #120]	@ (80069e4 <TIM_OC3_SetConfig+0x10c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <TIM_OC3_SetConfig+0xbe>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1d      	ldr	r2, [pc, #116]	@ (80069e8 <TIM_OC3_SetConfig+0x110>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00f      	beq.n	8006996 <TIM_OC3_SetConfig+0xbe>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1d      	ldr	r2, [pc, #116]	@ (80069f0 <TIM_OC3_SetConfig+0x118>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00b      	beq.n	8006996 <TIM_OC3_SetConfig+0xbe>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1c      	ldr	r2, [pc, #112]	@ (80069f4 <TIM_OC3_SetConfig+0x11c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d007      	beq.n	8006996 <TIM_OC3_SetConfig+0xbe>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1b      	ldr	r2, [pc, #108]	@ (80069f8 <TIM_OC3_SetConfig+0x120>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_OC3_SetConfig+0xbe>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a16      	ldr	r2, [pc, #88]	@ (80069ec <TIM_OC3_SetConfig+0x114>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d113      	bne.n	80069be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800699c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	621a      	str	r2, [r3, #32]
}
 80069d8:	bf00      	nop
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40013400 	.word	0x40013400
 80069ec:	40015000 	.word	0x40015000
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800

080069fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	031b      	lsls	r3, r3, #12
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b0c <TIM_OC4_SetConfig+0x110>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_OC4_SetConfig+0x74>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2b      	ldr	r2, [pc, #172]	@ (8006b10 <TIM_OC4_SetConfig+0x114>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC4_SetConfig+0x74>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b14 <TIM_OC4_SetConfig+0x118>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10d      	bne.n	8006a8c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8006b0c <TIM_OC4_SetConfig+0x110>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <TIM_OC4_SetConfig+0xc0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1e      	ldr	r2, [pc, #120]	@ (8006b10 <TIM_OC4_SetConfig+0x114>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00f      	beq.n	8006abc <TIM_OC4_SetConfig+0xc0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b18 <TIM_OC4_SetConfig+0x11c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_OC4_SetConfig+0xc0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8006b1c <TIM_OC4_SetConfig+0x120>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_OC4_SetConfig+0xc0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1c      	ldr	r2, [pc, #112]	@ (8006b20 <TIM_OC4_SetConfig+0x124>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_OC4_SetConfig+0xc0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <TIM_OC4_SetConfig+0x118>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d113      	bne.n	8006ae4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006aca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	019b      	lsls	r3, r3, #6
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	019b      	lsls	r3, r3, #6
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40015000 	.word	0x40015000
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40014400 	.word	0x40014400
 8006b20:	40014800 	.word	0x40014800

08006b24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a19      	ldr	r2, [pc, #100]	@ (8006be0 <TIM_OC5_SetConfig+0xbc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <TIM_OC5_SetConfig+0x82>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a18      	ldr	r2, [pc, #96]	@ (8006be4 <TIM_OC5_SetConfig+0xc0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00f      	beq.n	8006ba6 <TIM_OC5_SetConfig+0x82>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a17      	ldr	r2, [pc, #92]	@ (8006be8 <TIM_OC5_SetConfig+0xc4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00b      	beq.n	8006ba6 <TIM_OC5_SetConfig+0x82>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a16      	ldr	r2, [pc, #88]	@ (8006bec <TIM_OC5_SetConfig+0xc8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <TIM_OC5_SetConfig+0x82>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a15      	ldr	r2, [pc, #84]	@ (8006bf0 <TIM_OC5_SetConfig+0xcc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d003      	beq.n	8006ba6 <TIM_OC5_SetConfig+0x82>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a14      	ldr	r2, [pc, #80]	@ (8006bf4 <TIM_OC5_SetConfig+0xd0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d109      	bne.n	8006bba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	621a      	str	r2, [r3, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40013400 	.word	0x40013400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800
 8006bf4:	40015000 	.word	0x40015000

08006bf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	051b      	lsls	r3, r3, #20
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <TIM_OC6_SetConfig+0xc0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <TIM_OC6_SetConfig+0x84>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a19      	ldr	r2, [pc, #100]	@ (8006cbc <TIM_OC6_SetConfig+0xc4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00f      	beq.n	8006c7c <TIM_OC6_SetConfig+0x84>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a18      	ldr	r2, [pc, #96]	@ (8006cc0 <TIM_OC6_SetConfig+0xc8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <TIM_OC6_SetConfig+0x84>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a17      	ldr	r2, [pc, #92]	@ (8006cc4 <TIM_OC6_SetConfig+0xcc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d007      	beq.n	8006c7c <TIM_OC6_SetConfig+0x84>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a16      	ldr	r2, [pc, #88]	@ (8006cc8 <TIM_OC6_SetConfig+0xd0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC6_SetConfig+0x84>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a15      	ldr	r2, [pc, #84]	@ (8006ccc <TIM_OC6_SetConfig+0xd4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d109      	bne.n	8006c90 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	40013400 	.word	0x40013400
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	40014400 	.word	0x40014400
 8006cc8:	40014800 	.word	0x40014800
 8006ccc:	40015000 	.word	0x40015000

08006cd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f023 0201 	bic.w	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a28      	ldr	r2, [pc, #160]	@ (8006d9c <TIM_TI1_SetConfig+0xcc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01b      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d04:	d017      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a25      	ldr	r2, [pc, #148]	@ (8006da0 <TIM_TI1_SetConfig+0xd0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d013      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a24      	ldr	r2, [pc, #144]	@ (8006da4 <TIM_TI1_SetConfig+0xd4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00f      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a23      	ldr	r2, [pc, #140]	@ (8006da8 <TIM_TI1_SetConfig+0xd8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00b      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4a22      	ldr	r2, [pc, #136]	@ (8006dac <TIM_TI1_SetConfig+0xdc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d007      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <TIM_TI1_SetConfig+0xe0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <TIM_TI1_SetConfig+0xe4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <TIM_TI1_SetConfig+0x6a>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <TIM_TI1_SetConfig+0x6c>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e003      	b.n	8006d5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f003 030a 	and.w	r3, r3, #10
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40015000 	.word	0x40015000

08006db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f023 030a 	bic.w	r3, r3, #10
 8006df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f023 0210 	bic.w	r2, r3, #16
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	031b      	lsls	r3, r3, #12
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f043 0307 	orr.w	r3, r3, #7
 8006e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	609a      	str	r2, [r3, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2201      	movs	r2, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	43db      	mvns	r3, r3
 8006f12:	401a      	ands	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1a      	ldr	r2, [r3, #32]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b08a      	sub	sp, #40	@ 0x28
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e0a0      	b.n	8007090 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fa fe6e 	bl	8001c44 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f7ff faca 	bl	8006514 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6819      	ldr	r1, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	f7ff fe9f 	bl	8006cd0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 020c 	bic.w	r2, r2, #12
 8006fa0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6999      	ldr	r1, [r3, #24]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fc2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fe6:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ff6:	f023 0307 	bic.w	r3, r3, #7
 8006ffa:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0204 	orr.w	r2, r2, #4
 800700a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007010:	2300      	movs	r3, #0
 8007012:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007014:	2370      	movs	r3, #112	@ 0x70
 8007016:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007018:	2300      	movs	r3, #0
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f107 020c 	add.w	r2, r7, #12
 8007032:	4611      	mov	r1, r2
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff fbbb 	bl	80067b0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800705c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3728      	adds	r7, #40	@ 0x28
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_TIMEx_PWMN_Start+0x24>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	e022      	b.n	8007102 <HAL_TIMEx_PWMN_Start+0x6a>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d109      	bne.n	80070d6 <HAL_TIMEx_PWMN_Start+0x3e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	bf14      	ite	ne
 80070ce:	2301      	movne	r3, #1
 80070d0:	2300      	moveq	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	e015      	b.n	8007102 <HAL_TIMEx_PWMN_Start+0x6a>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d109      	bne.n	80070f0 <HAL_TIMEx_PWMN_Start+0x58>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	bf14      	ite	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	2300      	moveq	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	e008      	b.n	8007102 <HAL_TIMEx_PWMN_Start+0x6a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e073      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_TIMEx_PWMN_Start+0x82>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007118:	e013      	b.n	8007142 <HAL_TIMEx_PWMN_Start+0xaa>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b04      	cmp	r3, #4
 800711e:	d104      	bne.n	800712a <HAL_TIMEx_PWMN_Start+0x92>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007128:	e00b      	b.n	8007142 <HAL_TIMEx_PWMN_Start+0xaa>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b08      	cmp	r3, #8
 800712e:	d104      	bne.n	800713a <HAL_TIMEx_PWMN_Start+0xa2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007138:	e003      	b.n	8007142 <HAL_TIMEx_PWMN_Start+0xaa>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2204      	movs	r2, #4
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fa34 	bl	80075b8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800715e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a25      	ldr	r2, [pc, #148]	@ (80071fc <HAL_TIMEx_PWMN_Start+0x164>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d022      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x118>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007172:	d01d      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x118>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a21      	ldr	r2, [pc, #132]	@ (8007200 <HAL_TIMEx_PWMN_Start+0x168>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d018      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x118>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a20      	ldr	r2, [pc, #128]	@ (8007204 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d013      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x118>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1e      	ldr	r2, [pc, #120]	@ (8007208 <HAL_TIMEx_PWMN_Start+0x170>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00e      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x118>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1d      	ldr	r2, [pc, #116]	@ (800720c <HAL_TIMEx_PWMN_Start+0x174>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d009      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x118>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007210 <HAL_TIMEx_PWMN_Start+0x178>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_TIMEx_PWMN_Start+0x118>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007214 <HAL_TIMEx_PWMN_Start+0x17c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d115      	bne.n	80071dc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	4b18      	ldr	r3, [pc, #96]	@ (8007218 <HAL_TIMEx_PWMN_Start+0x180>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b06      	cmp	r3, #6
 80071c0:	d015      	beq.n	80071ee <HAL_TIMEx_PWMN_Start+0x156>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071c8:	d011      	beq.n	80071ee <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0201 	orr.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071da:	e008      	b.n	80071ee <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e000      	b.n	80071f0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	40000400 	.word	0x40000400
 8007204:	40000800 	.word	0x40000800
 8007208:	40000c00 	.word	0x40000c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40014000 	.word	0x40014000
 8007214:	40015000 	.word	0x40015000
 8007218:	00010007 	.word	0x00010007

0800721c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 f9c2 	bl	80075b8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10f      	bne.n	8007264 <HAL_TIMEx_PWMN_Stop+0x48>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6a1a      	ldr	r2, [r3, #32]
 800724a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800724e:	4013      	ands	r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d107      	bne.n	8007264 <HAL_TIMEx_PWMN_Stop+0x48>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007262:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6a1a      	ldr	r2, [r3, #32]
 800726a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800726e:	4013      	ands	r3, r2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10f      	bne.n	8007294 <HAL_TIMEx_PWMN_Stop+0x78>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6a1a      	ldr	r2, [r3, #32]
 800727a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d107      	bne.n	8007294 <HAL_TIMEx_PWMN_Stop+0x78>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <HAL_TIMEx_PWMN_Stop+0x88>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072a2:	e013      	b.n	80072cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d104      	bne.n	80072b4 <HAL_TIMEx_PWMN_Stop+0x98>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072b2:	e00b      	b.n	80072cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d104      	bne.n	80072c4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072c2:	e003      	b.n	80072cc <HAL_TIMEx_PWMN_Stop+0xb0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d101      	bne.n	80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e074      	b.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a34      	ldr	r2, [pc, #208]	@ (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d009      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a33      	ldr	r2, [pc, #204]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a31      	ldr	r2, [pc, #196]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d108      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007334:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a21      	ldr	r2, [pc, #132]	@ (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d022      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007370:	d01d      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1f      	ldr	r2, [pc, #124]	@ (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d018      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1d      	ldr	r2, [pc, #116]	@ (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1c      	ldr	r2, [pc, #112]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00e      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a15      	ldr	r2, [pc, #84]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d009      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a18      	ldr	r2, [pc, #96]	@ (8007400 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a11      	ldr	r2, [pc, #68]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d10c      	bne.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40012c00 	.word	0x40012c00
 80073ec:	40013400 	.word	0x40013400
 80073f0:	40015000 	.word	0x40015000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40014000 	.word	0x40014000

08007404 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800741c:	2302      	movs	r3, #2
 800741e:	e078      	b.n	8007512 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007520 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d009      	beq.n	80074c6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007524 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d004      	beq.n	80074c6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a19      	ldr	r2, [pc, #100]	@ (8007528 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d11c      	bne.n	8007500 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	051b      	lsls	r3, r3, #20
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40013400 	.word	0x40013400
 8007528:	40015000 	.word	0x40015000

0800752c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	2204      	movs	r2, #4
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1a      	ldr	r2, [r3, #32]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	43db      	mvns	r3, r3
 80075da:	401a      	ands	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	fa01 f303 	lsl.w	r3, r1, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e042      	b.n	800769a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fa fc6e 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2224      	movs	r2, #36	@ 0x24
 8007630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 ff61 	bl	8008514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fc62 	bl	8007f1c <UART_SetConfig>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e01b      	b.n	800769a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007670:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007680:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 ffe0 	bl	8008658 <UART_CheckIdleState>
 8007698:	4603      	mov	r3, r0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b08a      	sub	sp, #40	@ 0x28
 80076a6:	af02      	add	r7, sp, #8
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d17b      	bne.n	80077b4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_UART_Transmit+0x26>
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e074      	b.n	80077b6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2221      	movs	r2, #33	@ 0x21
 80076d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076dc:	f7fa ffb2 	bl	8002644 <HAL_GetTick>
 80076e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fa:	d108      	bne.n	800770e <HAL_UART_Transmit+0x6c>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	e003      	b.n	8007716 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007716:	e030      	b.n	800777a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2200      	movs	r2, #0
 8007720:	2180      	movs	r1, #128	@ 0x80
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f001 f842 	bl	80087ac <UART_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e03d      	b.n	80077b6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800774e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	3302      	adds	r3, #2
 8007754:	61bb      	str	r3, [r7, #24]
 8007756:	e007      	b.n	8007768 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3301      	adds	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1c8      	bne.n	8007718 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2200      	movs	r2, #0
 800778e:	2140      	movs	r1, #64	@ 0x40
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f001 f80b 	bl	80087ac <UART_WaitOnFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e006      	b.n	80077b6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e000      	b.n	80077b6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	@ 0x28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d137      	bne.n	8007848 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_UART_Receive_IT+0x24>
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e030      	b.n	800784a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a18      	ldr	r2, [pc, #96]	@ (8007854 <HAL_UART_Receive_IT+0x94>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d01f      	beq.n	8007838 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d018      	beq.n	8007838 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800781a:	627b      	str	r3, [r7, #36]	@ 0x24
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	623b      	str	r3, [r7, #32]
 8007826:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	69f9      	ldr	r1, [r7, #28]
 800782a:	6a3a      	ldr	r2, [r7, #32]
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	61bb      	str	r3, [r7, #24]
   return(result);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e6      	bne.n	8007806 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007838:	88fb      	ldrh	r3, [r7, #6]
 800783a:	461a      	mov	r2, r3
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 f822 	bl	8008888 <UART_Start_Receive_IT>
 8007844:	4603      	mov	r3, r0
 8007846:	e000      	b.n	800784a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007848:	2302      	movs	r3, #2
  }
}
 800784a:	4618      	mov	r0, r3
 800784c:	3728      	adds	r7, #40	@ 0x28
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40008000 	.word	0x40008000

08007858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b0ba      	sub	sp, #232	@ 0xe8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800787e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007882:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007886:	4013      	ands	r3, r2
 8007888:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800788c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11b      	bne.n	80078cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d015      	beq.n	80078cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d105      	bne.n	80078b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d009      	beq.n	80078cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8300 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
      }
      return;
 80078ca:	e2fa      	b.n	8007ec2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8123 	beq.w	8007b1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078da:	4b8d      	ldr	r3, [pc, #564]	@ (8007b10 <HAL_UART_IRQHandler+0x2b8>)
 80078dc:	4013      	ands	r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007b14 <HAL_UART_IRQHandler+0x2bc>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8116 	beq.w	8007b1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d011      	beq.n	8007920 <HAL_UART_IRQHandler+0xc8>
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d011      	beq.n	8007950 <HAL_UART_IRQHandler+0xf8>
 800792c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2202      	movs	r2, #2
 800793e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007946:	f043 0204 	orr.w	r2, r3, #4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_UART_IRQHandler+0x128>
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2204      	movs	r2, #4
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007976:	f043 0202 	orr.w	r2, r3, #2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d017      	beq.n	80079bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007998:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800799c:	4b5c      	ldr	r3, [pc, #368]	@ (8007b10 <HAL_UART_IRQHandler+0x2b8>)
 800799e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2208      	movs	r2, #8
 80079aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b2:	f043 0208 	orr.w	r2, r3, #8
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <HAL_UART_IRQHandler+0x196>
 80079c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e4:	f043 0220 	orr.w	r2, r3, #32
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8266 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a42:	2b40      	cmp	r3, #64	@ 0x40
 8007a44:	d005      	beq.n	8007a52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d054      	beq.n	8007afc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 f83a 	bl	8008acc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a62:	2b40      	cmp	r3, #64	@ 0x40
 8007a64:	d146      	bne.n	8007af4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1d9      	bne.n	8007a66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d017      	beq.n	8007aec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac2:	4a15      	ldr	r2, [pc, #84]	@ (8007b18 <HAL_UART_IRQHandler+0x2c0>)
 8007ac4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fc fc18 	bl	8004302 <HAL_DMA_Abort_IT>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d019      	beq.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aea:	e00f      	b.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f9ff 	bl	8007ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af2:	e00b      	b.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f9fb 	bl	8007ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afa:	e007      	b.n	8007b0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f9f7 	bl	8007ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b0a:	e1dc      	b.n	8007ec6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	bf00      	nop
    return;
 8007b0e:	e1da      	b.n	8007ec6 <HAL_UART_IRQHandler+0x66e>
 8007b10:	10000001 	.word	0x10000001
 8007b14:	04000120 	.word	0x04000120
 8007b18:	08008b99 	.word	0x08008b99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	f040 8170 	bne.w	8007e06 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2a:	f003 0310 	and.w	r3, r3, #16
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8169 	beq.w	8007e06 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8162 	beq.w	8007e06 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2210      	movs	r2, #16
 8007b48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b40      	cmp	r3, #64	@ 0x40
 8007b56:	f040 80d8 	bne.w	8007d0a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 80af 	beq.w	8007cd0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	f080 80a7 	bcs.w	8007cd0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 8087 	bne.w	8007cae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1da      	bne.n	8007ba0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3308      	adds	r3, #8
 8007c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e1      	bne.n	8007bea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e3      	bne.n	8007c26 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7c:	f023 0310 	bic.w	r3, r3, #16
 8007c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e4      	bne.n	8007c6c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fc fad1 	bl	8004250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f91b 	bl	8007f04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007cce:	e0fc      	b.n	8007eca <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	f040 80f5 	bne.w	8007eca <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	f040 80eb 	bne.w	8007eca <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f8fe 	bl	8007f04 <HAL_UARTEx_RxEventCallback>
      return;
 8007d08:	e0df      	b.n	8007eca <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 80d1 	beq.w	8007ece <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 80cc 	beq.w	8007ece <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e4      	bne.n	8007d36 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3308      	adds	r3, #8
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d82:	f023 0301 	bic.w	r3, r3, #1
 8007d86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d94:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e1      	bne.n	8007d6c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 0310 	bic.w	r3, r3, #16
 8007dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	69b9      	ldr	r1, [r7, #24]
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	617b      	str	r3, [r7, #20]
   return(result);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e4      	bne.n	8007dbc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f880 	bl	8007f04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e04:	e063      	b.n	8007ece <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00e      	beq.n	8007e30 <HAL_UART_IRQHandler+0x5d8>
 8007e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d008      	beq.n	8007e30 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 fc13 	bl	8009654 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e2e:	e051      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d014      	beq.n	8007e66 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d03a      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
    }
    return;
 8007e64:	e035      	b.n	8007ed2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d009      	beq.n	8007e86 <HAL_UART_IRQHandler+0x62e>
 8007e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fe9c 	bl	8008bbc <UART_EndTransmit_IT>
    return;
 8007e84:	e026      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x64e>
 8007e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fbec 	bl	800967c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ea4:	e016      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d010      	beq.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
 8007eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da0c      	bge.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 fbd4 	bl	8009668 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ec0:	e008      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
      return;
 8007ec2:	bf00      	nop
 8007ec4:	e006      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
    return;
 8007ec6:	bf00      	nop
 8007ec8:	e004      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
      return;
 8007eca:	bf00      	nop
 8007ecc:	e002      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
      return;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_UART_IRQHandler+0x67c>
    return;
 8007ed2:	bf00      	nop
  }
}
 8007ed4:	37e8      	adds	r7, #232	@ 0xe8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop

08007edc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f20:	b08c      	sub	sp, #48	@ 0x30
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	431a      	orrs	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	4baa      	ldr	r3, [pc, #680]	@ (80081f4 <UART_SetConfig+0x2d8>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a9f      	ldr	r2, [pc, #636]	@ (80081f8 <UART_SetConfig+0x2dc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d004      	beq.n	8007f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f84:	4313      	orrs	r3, r2
 8007f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	f023 010f 	bic.w	r1, r3, #15
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a90      	ldr	r2, [pc, #576]	@ (80081fc <UART_SetConfig+0x2e0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d125      	bne.n	800800c <UART_SetConfig+0xf0>
 8007fc0:	4b8f      	ldr	r3, [pc, #572]	@ (8008200 <UART_SetConfig+0x2e4>)
 8007fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d81a      	bhi.n	8008004 <UART_SetConfig+0xe8>
 8007fce:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd4 <UART_SetConfig+0xb8>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007fe5 	.word	0x08007fe5
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	08007fed 	.word	0x08007fed
 8007fe0:	08007ffd 	.word	0x08007ffd
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fea:	e116      	b.n	800821a <UART_SetConfig+0x2fe>
 8007fec:	2302      	movs	r3, #2
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff2:	e112      	b.n	800821a <UART_SetConfig+0x2fe>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffa:	e10e      	b.n	800821a <UART_SetConfig+0x2fe>
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008002:	e10a      	b.n	800821a <UART_SetConfig+0x2fe>
 8008004:	2310      	movs	r3, #16
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800a:	e106      	b.n	800821a <UART_SetConfig+0x2fe>
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a7c      	ldr	r2, [pc, #496]	@ (8008204 <UART_SetConfig+0x2e8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d138      	bne.n	8008088 <UART_SetConfig+0x16c>
 8008016:	4b7a      	ldr	r3, [pc, #488]	@ (8008200 <UART_SetConfig+0x2e4>)
 8008018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800801c:	f003 030c 	and.w	r3, r3, #12
 8008020:	2b0c      	cmp	r3, #12
 8008022:	d82d      	bhi.n	8008080 <UART_SetConfig+0x164>
 8008024:	a201      	add	r2, pc, #4	@ (adr r2, 800802c <UART_SetConfig+0x110>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008061 	.word	0x08008061
 8008030:	08008081 	.word	0x08008081
 8008034:	08008081 	.word	0x08008081
 8008038:	08008081 	.word	0x08008081
 800803c:	08008071 	.word	0x08008071
 8008040:	08008081 	.word	0x08008081
 8008044:	08008081 	.word	0x08008081
 8008048:	08008081 	.word	0x08008081
 800804c:	08008069 	.word	0x08008069
 8008050:	08008081 	.word	0x08008081
 8008054:	08008081 	.word	0x08008081
 8008058:	08008081 	.word	0x08008081
 800805c:	08008079 	.word	0x08008079
 8008060:	2300      	movs	r3, #0
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e0d8      	b.n	800821a <UART_SetConfig+0x2fe>
 8008068:	2302      	movs	r3, #2
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806e:	e0d4      	b.n	800821a <UART_SetConfig+0x2fe>
 8008070:	2304      	movs	r3, #4
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008076:	e0d0      	b.n	800821a <UART_SetConfig+0x2fe>
 8008078:	2308      	movs	r3, #8
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807e:	e0cc      	b.n	800821a <UART_SetConfig+0x2fe>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008086:	e0c8      	b.n	800821a <UART_SetConfig+0x2fe>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a5e      	ldr	r2, [pc, #376]	@ (8008208 <UART_SetConfig+0x2ec>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d125      	bne.n	80080de <UART_SetConfig+0x1c2>
 8008092:	4b5b      	ldr	r3, [pc, #364]	@ (8008200 <UART_SetConfig+0x2e4>)
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008098:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800809c:	2b30      	cmp	r3, #48	@ 0x30
 800809e:	d016      	beq.n	80080ce <UART_SetConfig+0x1b2>
 80080a0:	2b30      	cmp	r3, #48	@ 0x30
 80080a2:	d818      	bhi.n	80080d6 <UART_SetConfig+0x1ba>
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d00a      	beq.n	80080be <UART_SetConfig+0x1a2>
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d814      	bhi.n	80080d6 <UART_SetConfig+0x1ba>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <UART_SetConfig+0x19a>
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d008      	beq.n	80080c6 <UART_SetConfig+0x1aa>
 80080b4:	e00f      	b.n	80080d6 <UART_SetConfig+0x1ba>
 80080b6:	2300      	movs	r3, #0
 80080b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080bc:	e0ad      	b.n	800821a <UART_SetConfig+0x2fe>
 80080be:	2302      	movs	r3, #2
 80080c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c4:	e0a9      	b.n	800821a <UART_SetConfig+0x2fe>
 80080c6:	2304      	movs	r3, #4
 80080c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080cc:	e0a5      	b.n	800821a <UART_SetConfig+0x2fe>
 80080ce:	2308      	movs	r3, #8
 80080d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d4:	e0a1      	b.n	800821a <UART_SetConfig+0x2fe>
 80080d6:	2310      	movs	r3, #16
 80080d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080dc:	e09d      	b.n	800821a <UART_SetConfig+0x2fe>
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a4a      	ldr	r2, [pc, #296]	@ (800820c <UART_SetConfig+0x2f0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d125      	bne.n	8008134 <UART_SetConfig+0x218>
 80080e8:	4b45      	ldr	r3, [pc, #276]	@ (8008200 <UART_SetConfig+0x2e4>)
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080f4:	d016      	beq.n	8008124 <UART_SetConfig+0x208>
 80080f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80080f8:	d818      	bhi.n	800812c <UART_SetConfig+0x210>
 80080fa:	2b80      	cmp	r3, #128	@ 0x80
 80080fc:	d00a      	beq.n	8008114 <UART_SetConfig+0x1f8>
 80080fe:	2b80      	cmp	r3, #128	@ 0x80
 8008100:	d814      	bhi.n	800812c <UART_SetConfig+0x210>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <UART_SetConfig+0x1f0>
 8008106:	2b40      	cmp	r3, #64	@ 0x40
 8008108:	d008      	beq.n	800811c <UART_SetConfig+0x200>
 800810a:	e00f      	b.n	800812c <UART_SetConfig+0x210>
 800810c:	2300      	movs	r3, #0
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e082      	b.n	800821a <UART_SetConfig+0x2fe>
 8008114:	2302      	movs	r3, #2
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e07e      	b.n	800821a <UART_SetConfig+0x2fe>
 800811c:	2304      	movs	r3, #4
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e07a      	b.n	800821a <UART_SetConfig+0x2fe>
 8008124:	2308      	movs	r3, #8
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e076      	b.n	800821a <UART_SetConfig+0x2fe>
 800812c:	2310      	movs	r3, #16
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e072      	b.n	800821a <UART_SetConfig+0x2fe>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a35      	ldr	r2, [pc, #212]	@ (8008210 <UART_SetConfig+0x2f4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d12a      	bne.n	8008194 <UART_SetConfig+0x278>
 800813e:	4b30      	ldr	r3, [pc, #192]	@ (8008200 <UART_SetConfig+0x2e4>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800814c:	d01a      	beq.n	8008184 <UART_SetConfig+0x268>
 800814e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008152:	d81b      	bhi.n	800818c <UART_SetConfig+0x270>
 8008154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008158:	d00c      	beq.n	8008174 <UART_SetConfig+0x258>
 800815a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800815e:	d815      	bhi.n	800818c <UART_SetConfig+0x270>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <UART_SetConfig+0x250>
 8008164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008168:	d008      	beq.n	800817c <UART_SetConfig+0x260>
 800816a:	e00f      	b.n	800818c <UART_SetConfig+0x270>
 800816c:	2300      	movs	r3, #0
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008172:	e052      	b.n	800821a <UART_SetConfig+0x2fe>
 8008174:	2302      	movs	r3, #2
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817a:	e04e      	b.n	800821a <UART_SetConfig+0x2fe>
 800817c:	2304      	movs	r3, #4
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008182:	e04a      	b.n	800821a <UART_SetConfig+0x2fe>
 8008184:	2308      	movs	r3, #8
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818a:	e046      	b.n	800821a <UART_SetConfig+0x2fe>
 800818c:	2310      	movs	r3, #16
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008192:	e042      	b.n	800821a <UART_SetConfig+0x2fe>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a17      	ldr	r2, [pc, #92]	@ (80081f8 <UART_SetConfig+0x2dc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d13a      	bne.n	8008214 <UART_SetConfig+0x2f8>
 800819e:	4b18      	ldr	r3, [pc, #96]	@ (8008200 <UART_SetConfig+0x2e4>)
 80081a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081ac:	d01a      	beq.n	80081e4 <UART_SetConfig+0x2c8>
 80081ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081b2:	d81b      	bhi.n	80081ec <UART_SetConfig+0x2d0>
 80081b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081b8:	d00c      	beq.n	80081d4 <UART_SetConfig+0x2b8>
 80081ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081be:	d815      	bhi.n	80081ec <UART_SetConfig+0x2d0>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <UART_SetConfig+0x2b0>
 80081c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081c8:	d008      	beq.n	80081dc <UART_SetConfig+0x2c0>
 80081ca:	e00f      	b.n	80081ec <UART_SetConfig+0x2d0>
 80081cc:	2300      	movs	r3, #0
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081d2:	e022      	b.n	800821a <UART_SetConfig+0x2fe>
 80081d4:	2302      	movs	r3, #2
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081da:	e01e      	b.n	800821a <UART_SetConfig+0x2fe>
 80081dc:	2304      	movs	r3, #4
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e2:	e01a      	b.n	800821a <UART_SetConfig+0x2fe>
 80081e4:	2308      	movs	r3, #8
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ea:	e016      	b.n	800821a <UART_SetConfig+0x2fe>
 80081ec:	2310      	movs	r3, #16
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f2:	e012      	b.n	800821a <UART_SetConfig+0x2fe>
 80081f4:	cfff69f3 	.word	0xcfff69f3
 80081f8:	40008000 	.word	0x40008000
 80081fc:	40013800 	.word	0x40013800
 8008200:	40021000 	.word	0x40021000
 8008204:	40004400 	.word	0x40004400
 8008208:	40004800 	.word	0x40004800
 800820c:	40004c00 	.word	0x40004c00
 8008210:	40005000 	.word	0x40005000
 8008214:	2310      	movs	r3, #16
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4aae      	ldr	r2, [pc, #696]	@ (80084d8 <UART_SetConfig+0x5bc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	f040 8097 	bne.w	8008354 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800822a:	2b08      	cmp	r3, #8
 800822c:	d823      	bhi.n	8008276 <UART_SetConfig+0x35a>
 800822e:	a201      	add	r2, pc, #4	@ (adr r2, 8008234 <UART_SetConfig+0x318>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008259 	.word	0x08008259
 8008238:	08008277 	.word	0x08008277
 800823c:	08008261 	.word	0x08008261
 8008240:	08008277 	.word	0x08008277
 8008244:	08008267 	.word	0x08008267
 8008248:	08008277 	.word	0x08008277
 800824c:	08008277 	.word	0x08008277
 8008250:	08008277 	.word	0x08008277
 8008254:	0800826f 	.word	0x0800826f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008258:	f7fc ffe8 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 800825c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800825e:	e010      	b.n	8008282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008260:	4b9e      	ldr	r3, [pc, #632]	@ (80084dc <UART_SetConfig+0x5c0>)
 8008262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008264:	e00d      	b.n	8008282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008266:	f7fc ff73 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 800826a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800826c:	e009      	b.n	8008282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800826e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008274:	e005      	b.n	8008282 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8130 	beq.w	80084ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828e:	4a94      	ldr	r2, [pc, #592]	@ (80084e0 <UART_SetConfig+0x5c4>)
 8008290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008294:	461a      	mov	r2, r3
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	fbb3 f3f2 	udiv	r3, r3, r2
 800829c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	4413      	add	r3, r2
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d305      	bcc.n	80082ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d903      	bls.n	80082c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082c0:	e113      	b.n	80084ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	2200      	movs	r2, #0
 80082c6:	60bb      	str	r3, [r7, #8]
 80082c8:	60fa      	str	r2, [r7, #12]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ce:	4a84      	ldr	r2, [pc, #528]	@ (80084e0 <UART_SetConfig+0x5c4>)
 80082d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2200      	movs	r2, #0
 80082d8:	603b      	str	r3, [r7, #0]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082e4:	f7f8 fd08 	bl	8000cf8 <__aeabi_uldivmod>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4610      	mov	r0, r2
 80082ee:	4619      	mov	r1, r3
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	020b      	lsls	r3, r1, #8
 80082fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082fe:	0202      	lsls	r2, r0, #8
 8008300:	6979      	ldr	r1, [r7, #20]
 8008302:	6849      	ldr	r1, [r1, #4]
 8008304:	0849      	lsrs	r1, r1, #1
 8008306:	2000      	movs	r0, #0
 8008308:	460c      	mov	r4, r1
 800830a:	4605      	mov	r5, r0
 800830c:	eb12 0804 	adds.w	r8, r2, r4
 8008310:	eb43 0905 	adc.w	r9, r3, r5
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	469a      	mov	sl, r3
 800831c:	4693      	mov	fp, r2
 800831e:	4652      	mov	r2, sl
 8008320:	465b      	mov	r3, fp
 8008322:	4640      	mov	r0, r8
 8008324:	4649      	mov	r1, r9
 8008326:	f7f8 fce7 	bl	8000cf8 <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4613      	mov	r3, r2
 8008330:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008338:	d308      	bcc.n	800834c <UART_SetConfig+0x430>
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008340:	d204      	bcs.n	800834c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6a3a      	ldr	r2, [r7, #32]
 8008348:	60da      	str	r2, [r3, #12]
 800834a:	e0ce      	b.n	80084ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008352:	e0ca      	b.n	80084ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800835c:	d166      	bne.n	800842c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800835e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008362:	2b08      	cmp	r3, #8
 8008364:	d827      	bhi.n	80083b6 <UART_SetConfig+0x49a>
 8008366:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <UART_SetConfig+0x450>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	08008391 	.word	0x08008391
 8008370:	08008399 	.word	0x08008399
 8008374:	080083a1 	.word	0x080083a1
 8008378:	080083b7 	.word	0x080083b7
 800837c:	080083a7 	.word	0x080083a7
 8008380:	080083b7 	.word	0x080083b7
 8008384:	080083b7 	.word	0x080083b7
 8008388:	080083b7 	.word	0x080083b7
 800838c:	080083af 	.word	0x080083af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008390:	f7fc ff4c 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8008394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008396:	e014      	b.n	80083c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008398:	f7fc ff5e 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 800839c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800839e:	e010      	b.n	80083c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a0:	4b4e      	ldr	r3, [pc, #312]	@ (80084dc <UART_SetConfig+0x5c0>)
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083a4:	e00d      	b.n	80083c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083a6:	f7fc fed3 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 80083aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ac:	e009      	b.n	80083c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083b4:	e005      	b.n	80083c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8090 	beq.w	80084ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	4a44      	ldr	r2, [pc, #272]	@ (80084e0 <UART_SetConfig+0x5c4>)
 80083d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083dc:	005a      	lsls	r2, r3, #1
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d916      	bls.n	8008424 <UART_SetConfig+0x508>
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083fc:	d212      	bcs.n	8008424 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f023 030f 	bic.w	r3, r3, #15
 8008406:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	b29b      	uxth	r3, r3
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	b29a      	uxth	r2, r3
 8008414:	8bfb      	ldrh	r3, [r7, #30]
 8008416:	4313      	orrs	r3, r2
 8008418:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	8bfa      	ldrh	r2, [r7, #30]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	e062      	b.n	80084ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800842a:	e05e      	b.n	80084ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800842c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008430:	2b08      	cmp	r3, #8
 8008432:	d828      	bhi.n	8008486 <UART_SetConfig+0x56a>
 8008434:	a201      	add	r2, pc, #4	@ (adr r2, 800843c <UART_SetConfig+0x520>)
 8008436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843a:	bf00      	nop
 800843c:	08008461 	.word	0x08008461
 8008440:	08008469 	.word	0x08008469
 8008444:	08008471 	.word	0x08008471
 8008448:	08008487 	.word	0x08008487
 800844c:	08008477 	.word	0x08008477
 8008450:	08008487 	.word	0x08008487
 8008454:	08008487 	.word	0x08008487
 8008458:	08008487 	.word	0x08008487
 800845c:	0800847f 	.word	0x0800847f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008460:	f7fc fee4 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8008464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008466:	e014      	b.n	8008492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008468:	f7fc fef6 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 800846c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800846e:	e010      	b.n	8008492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008470:	4b1a      	ldr	r3, [pc, #104]	@ (80084dc <UART_SetConfig+0x5c0>)
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008474:	e00d      	b.n	8008492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008476:	f7fc fe6b 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 800847a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800847c:	e009      	b.n	8008492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008484:	e005      	b.n	8008492 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008490:	bf00      	nop
    }

    if (pclk != 0U)
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	2b00      	cmp	r3, #0
 8008496:	d028      	beq.n	80084ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849c:	4a10      	ldr	r2, [pc, #64]	@ (80084e0 <UART_SetConfig+0x5c4>)
 800849e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a2:	461a      	mov	r2, r3
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	085b      	lsrs	r3, r3, #1
 80084b0:	441a      	add	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	2b0f      	cmp	r3, #15
 80084c0:	d910      	bls.n	80084e4 <UART_SetConfig+0x5c8>
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084c8:	d20c      	bcs.n	80084e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60da      	str	r2, [r3, #12]
 80084d4:	e009      	b.n	80084ea <UART_SetConfig+0x5ce>
 80084d6:	bf00      	nop
 80084d8:	40008000 	.word	0x40008000
 80084dc:	00f42400 	.word	0x00f42400
 80084e0:	0800e160 	.word	0x0800e160
      }
      else
      {
        ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2200      	movs	r2, #0
 80084fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2200      	movs	r2, #0
 8008504:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008506:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800850a:	4618      	mov	r0, r3
 800850c:	3730      	adds	r7, #48	@ 0x30
 800850e:	46bd      	mov	sp, r7
 8008510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008520:	f003 0308 	and.w	r3, r3, #8
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01a      	beq.n	800862a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008612:	d10a      	bne.n	800862a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	605a      	str	r2, [r3, #4]
  }
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b098      	sub	sp, #96	@ 0x60
 800865c:	af02      	add	r7, sp, #8
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008668:	f7f9 ffec 	bl	8002644 <HAL_GetTick>
 800866c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0308 	and.w	r3, r3, #8
 8008678:	2b08      	cmp	r3, #8
 800867a:	d12f      	bne.n	80086dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800867c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008684:	2200      	movs	r2, #0
 8008686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f88e 	bl	80087ac <UART_WaitOnFlagUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d022      	beq.n	80086dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e6      	bne.n	8008696 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e063      	b.n	80087a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0304 	and.w	r3, r3, #4
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d149      	bne.n	800877e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086f2:	2200      	movs	r2, #0
 80086f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f857 	bl	80087ac <UART_WaitOnFlagUntilTimeout>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d03c      	beq.n	800877e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	623b      	str	r3, [r7, #32]
   return(result);
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008722:	633b      	str	r3, [r7, #48]	@ 0x30
 8008724:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e6      	bne.n	8008704 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	60fb      	str	r3, [r7, #12]
   return(result);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008756:	61fa      	str	r2, [r7, #28]
 8008758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	69b9      	ldr	r1, [r7, #24]
 800875c:	69fa      	ldr	r2, [r7, #28]
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	617b      	str	r3, [r7, #20]
   return(result);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e5      	bne.n	8008736 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e012      	b.n	80087a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3758      	adds	r7, #88	@ 0x58
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	4613      	mov	r3, r2
 80087ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087bc:	e04f      	b.n	800885e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c4:	d04b      	beq.n	800885e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c6:	f7f9 ff3d 	bl	8002644 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d302      	bcc.n	80087dc <UART_WaitOnFlagUntilTimeout+0x30>
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e04e      	b.n	800887e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d037      	beq.n	800885e <UART_WaitOnFlagUntilTimeout+0xb2>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b80      	cmp	r3, #128	@ 0x80
 80087f2:	d034      	beq.n	800885e <UART_WaitOnFlagUntilTimeout+0xb2>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b40      	cmp	r3, #64	@ 0x40
 80087f8:	d031      	beq.n	800885e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b08      	cmp	r3, #8
 8008806:	d110      	bne.n	800882a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2208      	movs	r2, #8
 800880e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f95b 	bl	8008acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2208      	movs	r2, #8
 800881a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e029      	b.n	800887e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008838:	d111      	bne.n	800885e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 f941 	bl	8008acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e00f      	b.n	800887e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69da      	ldr	r2, [r3, #28]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4013      	ands	r3, r2
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	429a      	cmp	r2, r3
 800886c:	bf0c      	ite	eq
 800886e:	2301      	moveq	r3, #1
 8008870:	2300      	movne	r3, #0
 8008872:	b2db      	uxtb	r3, r3
 8008874:	461a      	mov	r2, r3
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	429a      	cmp	r2, r3
 800887a:	d0a0      	beq.n	80087be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008888:	b480      	push	{r7}
 800888a:	b0a3      	sub	sp, #140	@ 0x8c
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	88fa      	ldrh	r2, [r7, #6]
 80088a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ba:	d10e      	bne.n	80088da <UART_Start_Receive_IT+0x52>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <UART_Start_Receive_IT+0x48>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088ce:	e02d      	b.n	800892c <UART_Start_Receive_IT+0xa4>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	22ff      	movs	r2, #255	@ 0xff
 80088d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088d8:	e028      	b.n	800892c <UART_Start_Receive_IT+0xa4>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10d      	bne.n	80088fe <UART_Start_Receive_IT+0x76>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <UART_Start_Receive_IT+0x6c>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	22ff      	movs	r2, #255	@ 0xff
 80088ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088f2:	e01b      	b.n	800892c <UART_Start_Receive_IT+0xa4>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	227f      	movs	r2, #127	@ 0x7f
 80088f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088fc:	e016      	b.n	800892c <UART_Start_Receive_IT+0xa4>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008906:	d10d      	bne.n	8008924 <UART_Start_Receive_IT+0x9c>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d104      	bne.n	800891a <UART_Start_Receive_IT+0x92>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	227f      	movs	r2, #127	@ 0x7f
 8008914:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008918:	e008      	b.n	800892c <UART_Start_Receive_IT+0xa4>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	223f      	movs	r2, #63	@ 0x3f
 800891e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008922:	e003      	b.n	800892c <UART_Start_Receive_IT+0xa4>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2222      	movs	r2, #34	@ 0x22
 8008938:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3308      	adds	r3, #8
 8008942:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008946:	e853 3f00 	ldrex	r3, [r3]
 800894a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800894c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008960:	673a      	str	r2, [r7, #112]	@ 0x70
 8008962:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008966:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800896e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e3      	bne.n	800893c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800897c:	d14f      	bne.n	8008a1e <UART_Start_Receive_IT+0x196>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008984:	88fa      	ldrh	r2, [r7, #6]
 8008986:	429a      	cmp	r2, r3
 8008988:	d349      	bcc.n	8008a1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008992:	d107      	bne.n	80089a4 <UART_Start_Receive_IT+0x11c>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d103      	bne.n	80089a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4a47      	ldr	r2, [pc, #284]	@ (8008abc <UART_Start_Receive_IT+0x234>)
 80089a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80089a2:	e002      	b.n	80089aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a46      	ldr	r2, [pc, #280]	@ (8008ac0 <UART_Start_Receive_IT+0x238>)
 80089a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d01a      	beq.n	80089e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089d6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80089da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80089e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e4      	bne.n	80089b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3308      	adds	r3, #8
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3308      	adds	r3, #8
 8008a06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e5      	bne.n	80089e8 <UART_Start_Receive_IT+0x160>
 8008a1c:	e046      	b.n	8008aac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a26:	d107      	bne.n	8008a38 <UART_Start_Receive_IT+0x1b0>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4a24      	ldr	r2, [pc, #144]	@ (8008ac4 <UART_Start_Receive_IT+0x23c>)
 8008a34:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a36:	e002      	b.n	8008a3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4a23      	ldr	r2, [pc, #140]	@ (8008ac8 <UART_Start_Receive_IT+0x240>)
 8008a3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d019      	beq.n	8008a7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a66:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e6      	bne.n	8008a46 <UART_Start_Receive_IT+0x1be>
 8008a78:	e018      	b.n	8008aac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	613b      	str	r3, [r7, #16]
   return(result);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f043 0320 	orr.w	r3, r3, #32
 8008a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a98:	623b      	str	r3, [r7, #32]
 8008a9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	69f9      	ldr	r1, [r7, #28]
 8008a9e:	6a3a      	ldr	r2, [r7, #32]
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e6      	bne.n	8008a7a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	378c      	adds	r7, #140	@ 0x8c
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	080092e9 	.word	0x080092e9
 8008ac0:	08008f85 	.word	0x08008f85
 8008ac4:	08008dcd 	.word	0x08008dcd
 8008ac8:	08008c15 	.word	0x08008c15

08008acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b095      	sub	sp, #84	@ 0x54
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008af4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008af8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e6      	bne.n	8008ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b1c:	f023 0301 	bic.w	r3, r3, #1
 8008b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e3      	bne.n	8008b06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d118      	bne.n	8008b78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f023 0310 	bic.w	r3, r3, #16
 8008b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b64:	61bb      	str	r3, [r7, #24]
 8008b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6979      	ldr	r1, [r7, #20]
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	613b      	str	r3, [r7, #16]
   return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e6      	bne.n	8008b46 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b8c:	bf00      	nop
 8008b8e:	3754      	adds	r7, #84	@ 0x54
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff f99e 	bl	8007ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bb4:	bf00      	nop
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6979      	ldr	r1, [r7, #20]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e6      	bne.n	8008bc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff f969 	bl	8007edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c0a:	bf00      	nop
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b09c      	sub	sp, #112	@ 0x70
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c2c:	2b22      	cmp	r3, #34	@ 0x22
 8008c2e:	f040 80be 	bne.w	8008dae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c40:	b2d9      	uxtb	r1, r3
 8008c42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c4c:	400a      	ands	r2, r1
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f040 80a1 	bne.w	8008dbe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e6      	bne.n	8008c7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc0:	f023 0301 	bic.w	r3, r3, #1
 8008cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cce:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a33      	ldr	r2, [pc, #204]	@ (8008dc8 <UART_RxISR_8BIT+0x1b4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d01f      	beq.n	8008d40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d018      	beq.n	8008d40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d22:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e6      	bne.n	8008d0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d12e      	bne.n	8008da6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0310 	bic.w	r3, r3, #16
 8008d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	69b9      	ldr	r1, [r7, #24]
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	617b      	str	r3, [r7, #20]
   return(result);
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e6      	bne.n	8008d4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f003 0310 	and.w	r3, r3, #16
 8008d8a:	2b10      	cmp	r3, #16
 8008d8c:	d103      	bne.n	8008d96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2210      	movs	r2, #16
 8008d94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff f8b0 	bl	8007f04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008da4:	e00b      	b.n	8008dbe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7f9 fbe2 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 8008dac:	e007      	b.n	8008dbe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	699a      	ldr	r2, [r3, #24]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0208 	orr.w	r2, r2, #8
 8008dbc:	619a      	str	r2, [r3, #24]
}
 8008dbe:	bf00      	nop
 8008dc0:	3770      	adds	r7, #112	@ 0x70
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40008000 	.word	0x40008000

08008dcc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b09c      	sub	sp, #112	@ 0x70
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008de4:	2b22      	cmp	r3, #34	@ 0x22
 8008de6:	f040 80be 	bne.w	8008f66 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008dfa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008dfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e02:	4013      	ands	r3, r2
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e0e:	1c9a      	adds	r2, r3, #2
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f040 80a1 	bne.w	8008f76 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e48:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e6      	bne.n	8008e34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e78:	f023 0301 	bic.w	r3, r3, #1
 8008e7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e86:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e5      	bne.n	8008e66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a33      	ldr	r2, [pc, #204]	@ (8008f80 <UART_RxISR_16BIT+0x1b4>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d01f      	beq.n	8008ef8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d018      	beq.n	8008ef8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ee6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e6      	bne.n	8008ec6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d12e      	bne.n	8008f5e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f023 0310 	bic.w	r3, r3, #16
 8008f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	6979      	ldr	r1, [r7, #20]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	613b      	str	r3, [r7, #16]
   return(result);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e6      	bne.n	8008f06 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	2b10      	cmp	r3, #16
 8008f44:	d103      	bne.n	8008f4e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2210      	movs	r2, #16
 8008f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fe ffd4 	bl	8007f04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f5c:	e00b      	b.n	8008f76 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7f9 fb06 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 8008f64:	e007      	b.n	8008f76 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0208 	orr.w	r2, r2, #8
 8008f74:	619a      	str	r2, [r3, #24]
}
 8008f76:	bf00      	nop
 8008f78:	3770      	adds	r7, #112	@ 0x70
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	40008000 	.word	0x40008000

08008f84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b0ac      	sub	sp, #176	@ 0xb0
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f92:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fba:	2b22      	cmp	r3, #34	@ 0x22
 8008fbc:	f040 8183 	bne.w	80092c6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fc6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fca:	e126      	b.n	800921a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fd6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008fda:	b2d9      	uxtb	r1, r3
 8008fdc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe6:	400a      	ands	r2, r1
 8008fe8:	b2d2      	uxtb	r2, r2
 8008fea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	3b01      	subs	r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d053      	beq.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800901e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <UART_RxISR_8BIT_FIFOEN+0xca>
 800902a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800902e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2201      	movs	r2, #1
 800903c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009044:	f043 0201 	orr.w	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800904e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d011      	beq.n	800907e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800905a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00b      	beq.n	800907e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2202      	movs	r2, #2
 800906c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009074:	f043 0204 	orr.w	r2, r3, #4
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800907e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d011      	beq.n	80090ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800908a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2204      	movs	r2, #4
 800909c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a4:	f043 0202 	orr.w	r2, r3, #2
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d006      	beq.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7fe ff19 	bl	8007ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f040 80a3 	bne.w	800921a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80090e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090f8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80090fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e4      	bne.n	80090d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3308      	adds	r3, #8
 8009110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800911a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800911c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3308      	adds	r3, #8
 800912e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009132:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009134:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009138:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e1      	bne.n	800910a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2220      	movs	r2, #32
 800914a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a60      	ldr	r2, [pc, #384]	@ (80092e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d021      	beq.n	80091a8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d01a      	beq.n	80091a8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009194:	657b      	str	r3, [r7, #84]	@ 0x54
 8009196:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800919a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e4      	bne.n	8009172 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d130      	bne.n	8009212 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091be:	e853 3f00 	ldrex	r3, [r3]
 80091c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	f023 0310 	bic.w	r3, r3, #16
 80091ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80091da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091e0:	e841 2300 	strex	r3, r2, [r1]
 80091e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e4      	bne.n	80091b6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b10      	cmp	r3, #16
 80091f8:	d103      	bne.n	8009202 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2210      	movs	r2, #16
 8009200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fe fe7a 	bl	8007f04 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009210:	e00e      	b.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7f9 f9ac 	bl	8002570 <HAL_UART_RxCpltCallback>
        break;
 8009218:	e00a      	b.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800921a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800921e:	2b00      	cmp	r3, #0
 8009220:	d006      	beq.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	f47f aece 	bne.w	8008fcc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009236:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800923a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800923e:	2b00      	cmp	r3, #0
 8009240:	d049      	beq.n	80092d6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009248:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800924c:	429a      	cmp	r2, r3
 800924e:	d242      	bcs.n	80092d6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3308      	adds	r3, #8
 8009256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3308      	adds	r3, #8
 8009270:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009276:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800927a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e3      	bne.n	8009250 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a16      	ldr	r2, [pc, #88]	@ (80092e4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800928c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	60bb      	str	r3, [r7, #8]
   return(result);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f043 0320 	orr.w	r3, r3, #32
 80092a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6979      	ldr	r1, [r7, #20]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	613b      	str	r3, [r7, #16]
   return(result);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e4      	bne.n	800928e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092c4:	e007      	b.n	80092d6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0208 	orr.w	r2, r2, #8
 80092d4:	619a      	str	r2, [r3, #24]
}
 80092d6:	bf00      	nop
 80092d8:	37b0      	adds	r7, #176	@ 0xb0
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40008000 	.word	0x40008000
 80092e4:	08008c15 	.word	0x08008c15

080092e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b0ae      	sub	sp, #184	@ 0xb8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800931e:	2b22      	cmp	r3, #34	@ 0x22
 8009320:	f040 8187 	bne.w	8009632 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800932a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800932e:	e12a      	b.n	8009586 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009336:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009342:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009346:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800934a:	4013      	ands	r3, r2
 800934c:	b29a      	uxth	r2, r3
 800934e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009352:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009358:	1c9a      	adds	r2, r3, #2
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009364:	b29b      	uxth	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800937a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	2b00      	cmp	r3, #0
 8009384:	d053      	beq.n	800942e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d011      	beq.n	80093b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00b      	beq.n	80093b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2201      	movs	r2, #1
 80093a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ac:	f043 0201 	orr.w	r2, r3, #1
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d011      	beq.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2202      	movs	r2, #2
 80093d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093dc:	f043 0204 	orr.w	r2, r3, #4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d011      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2204      	movs	r2, #4
 8009404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800940c:	f043 0202 	orr.w	r2, r3, #2
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800941c:	2b00      	cmp	r3, #0
 800941e:	d006      	beq.n	800942e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7fe fd65 	bl	8007ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	f040 80a5 	bne.w	8009586 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800944a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800944c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800945e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009462:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009466:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009470:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e2      	bne.n	800943c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3308      	adds	r3, #8
 800947c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800948c:	f023 0301 	bic.w	r3, r3, #1
 8009490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	3308      	adds	r3, #8
 800949a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800949e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e1      	bne.n	8009476 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a60      	ldr	r2, [pc, #384]	@ (800964c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d021      	beq.n	8009514 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d01a      	beq.n	8009514 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009500:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009502:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009504:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009506:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009508:	e841 2300 	strex	r3, r2, [r1]
 800950c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800950e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1e4      	bne.n	80094de <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d130      	bne.n	800957e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009532:	f023 0310 	bic.w	r3, r3, #16
 8009536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009544:	647b      	str	r3, [r7, #68]	@ 0x44
 8009546:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800954a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e4      	bne.n	8009522 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	f003 0310 	and.w	r3, r3, #16
 8009562:	2b10      	cmp	r3, #16
 8009564:	d103      	bne.n	800956e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2210      	movs	r2, #16
 800956c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7fe fcc4 	bl	8007f04 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800957c:	e00e      	b.n	800959c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7f8 fff6 	bl	8002570 <HAL_UART_RxCpltCallback>
        break;
 8009584:	e00a      	b.n	800959c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009586:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800958a:	2b00      	cmp	r3, #0
 800958c:	d006      	beq.n	800959c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800958e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	f47f aeca 	bne.w	8009330 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095a2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d049      	beq.n	8009642 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095b4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d242      	bcs.n	8009642 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3308      	adds	r3, #8
 80095c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c6:	e853 3f00 	ldrex	r3, [r3]
 80095ca:	623b      	str	r3, [r7, #32]
   return(result);
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80095e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80095e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e3      	bne.n	80095bc <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a16      	ldr	r2, [pc, #88]	@ (8009650 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80095f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	e853 3f00 	ldrex	r3, [r3]
 8009606:	60fb      	str	r3, [r7, #12]
   return(result);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f043 0320 	orr.w	r3, r3, #32
 800960e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009620:	69b9      	ldr	r1, [r7, #24]
 8009622:	69fa      	ldr	r2, [r7, #28]
 8009624:	e841 2300 	strex	r3, r2, [r1]
 8009628:	617b      	str	r3, [r7, #20]
   return(result);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e4      	bne.n	80095fa <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009630:	e007      	b.n	8009642 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	699a      	ldr	r2, [r3, #24]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f042 0208 	orr.w	r2, r2, #8
 8009640:	619a      	str	r2, [r3, #24]
}
 8009642:	bf00      	nop
 8009644:	37b8      	adds	r7, #184	@ 0xb8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	40008000 	.word	0x40008000
 8009650:	08008dcd 	.word	0x08008dcd

08009654 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e027      	b.n	80096f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2224      	movs	r2, #36	@ 0x24
 80096b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80096d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009716:	2302      	movs	r3, #2
 8009718:	e02d      	b.n	8009776 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2224      	movs	r2, #36	@ 0x24
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0201 	bic.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f850 	bl	80097fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800978e:	2b01      	cmp	r3, #1
 8009790:	d101      	bne.n	8009796 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009792:	2302      	movs	r3, #2
 8009794:	e02d      	b.n	80097f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2224      	movs	r2, #36	@ 0x24
 80097a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0201 	bic.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f812 	bl	80097fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009808:	2b00      	cmp	r3, #0
 800980a:	d108      	bne.n	800981e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800981c:	e031      	b.n	8009882 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800981e:	2308      	movs	r3, #8
 8009820:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009822:	2308      	movs	r3, #8
 8009824:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	0e5b      	lsrs	r3, r3, #25
 800982e:	b2db      	uxtb	r3, r3
 8009830:	f003 0307 	and.w	r3, r3, #7
 8009834:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	0f5b      	lsrs	r3, r3, #29
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f003 0307 	and.w	r3, r3, #7
 8009844:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009846:	7bbb      	ldrb	r3, [r7, #14]
 8009848:	7b3a      	ldrb	r2, [r7, #12]
 800984a:	4911      	ldr	r1, [pc, #68]	@ (8009890 <UARTEx_SetNbDataToProcess+0x94>)
 800984c:	5c8a      	ldrb	r2, [r1, r2]
 800984e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009852:	7b3a      	ldrb	r2, [r7, #12]
 8009854:	490f      	ldr	r1, [pc, #60]	@ (8009894 <UARTEx_SetNbDataToProcess+0x98>)
 8009856:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009858:	fb93 f3f2 	sdiv	r3, r3, r2
 800985c:	b29a      	uxth	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	7b7a      	ldrb	r2, [r7, #13]
 8009868:	4909      	ldr	r1, [pc, #36]	@ (8009890 <UARTEx_SetNbDataToProcess+0x94>)
 800986a:	5c8a      	ldrb	r2, [r1, r2]
 800986c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009870:	7b7a      	ldrb	r2, [r7, #13]
 8009872:	4908      	ldr	r1, [pc, #32]	@ (8009894 <UARTEx_SetNbDataToProcess+0x98>)
 8009874:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009876:	fb93 f3f2 	sdiv	r3, r3, r2
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	0800e178 	.word	0x0800e178
 8009894:	0800e180 	.word	0x0800e180

08009898 <atoi>:
 8009898:	220a      	movs	r2, #10
 800989a:	2100      	movs	r1, #0
 800989c:	f000 b87c 	b.w	8009998 <strtol>

080098a0 <_strtol_l.constprop.0>:
 80098a0:	2b24      	cmp	r3, #36	@ 0x24
 80098a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a6:	4686      	mov	lr, r0
 80098a8:	4690      	mov	r8, r2
 80098aa:	d801      	bhi.n	80098b0 <_strtol_l.constprop.0+0x10>
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d106      	bne.n	80098be <_strtol_l.constprop.0+0x1e>
 80098b0:	f001 f902 	bl	800aab8 <__errno>
 80098b4:	2316      	movs	r3, #22
 80098b6:	6003      	str	r3, [r0, #0]
 80098b8:	2000      	movs	r0, #0
 80098ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098be:	4834      	ldr	r0, [pc, #208]	@ (8009990 <_strtol_l.constprop.0+0xf0>)
 80098c0:	460d      	mov	r5, r1
 80098c2:	462a      	mov	r2, r5
 80098c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098c8:	5d06      	ldrb	r6, [r0, r4]
 80098ca:	f016 0608 	ands.w	r6, r6, #8
 80098ce:	d1f8      	bne.n	80098c2 <_strtol_l.constprop.0+0x22>
 80098d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80098d2:	d12d      	bne.n	8009930 <_strtol_l.constprop.0+0x90>
 80098d4:	782c      	ldrb	r4, [r5, #0]
 80098d6:	2601      	movs	r6, #1
 80098d8:	1c95      	adds	r5, r2, #2
 80098da:	f033 0210 	bics.w	r2, r3, #16
 80098de:	d109      	bne.n	80098f4 <_strtol_l.constprop.0+0x54>
 80098e0:	2c30      	cmp	r4, #48	@ 0x30
 80098e2:	d12a      	bne.n	800993a <_strtol_l.constprop.0+0x9a>
 80098e4:	782a      	ldrb	r2, [r5, #0]
 80098e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80098ea:	2a58      	cmp	r2, #88	@ 0x58
 80098ec:	d125      	bne.n	800993a <_strtol_l.constprop.0+0x9a>
 80098ee:	786c      	ldrb	r4, [r5, #1]
 80098f0:	2310      	movs	r3, #16
 80098f2:	3502      	adds	r5, #2
 80098f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80098f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80098fc:	2200      	movs	r2, #0
 80098fe:	fbbc f9f3 	udiv	r9, ip, r3
 8009902:	4610      	mov	r0, r2
 8009904:	fb03 ca19 	mls	sl, r3, r9, ip
 8009908:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800990c:	2f09      	cmp	r7, #9
 800990e:	d81b      	bhi.n	8009948 <_strtol_l.constprop.0+0xa8>
 8009910:	463c      	mov	r4, r7
 8009912:	42a3      	cmp	r3, r4
 8009914:	dd27      	ble.n	8009966 <_strtol_l.constprop.0+0xc6>
 8009916:	1c57      	adds	r7, r2, #1
 8009918:	d007      	beq.n	800992a <_strtol_l.constprop.0+0x8a>
 800991a:	4581      	cmp	r9, r0
 800991c:	d320      	bcc.n	8009960 <_strtol_l.constprop.0+0xc0>
 800991e:	d101      	bne.n	8009924 <_strtol_l.constprop.0+0x84>
 8009920:	45a2      	cmp	sl, r4
 8009922:	db1d      	blt.n	8009960 <_strtol_l.constprop.0+0xc0>
 8009924:	fb00 4003 	mla	r0, r0, r3, r4
 8009928:	2201      	movs	r2, #1
 800992a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800992e:	e7eb      	b.n	8009908 <_strtol_l.constprop.0+0x68>
 8009930:	2c2b      	cmp	r4, #43	@ 0x2b
 8009932:	bf04      	itt	eq
 8009934:	782c      	ldrbeq	r4, [r5, #0]
 8009936:	1c95      	addeq	r5, r2, #2
 8009938:	e7cf      	b.n	80098da <_strtol_l.constprop.0+0x3a>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1da      	bne.n	80098f4 <_strtol_l.constprop.0+0x54>
 800993e:	2c30      	cmp	r4, #48	@ 0x30
 8009940:	bf0c      	ite	eq
 8009942:	2308      	moveq	r3, #8
 8009944:	230a      	movne	r3, #10
 8009946:	e7d5      	b.n	80098f4 <_strtol_l.constprop.0+0x54>
 8009948:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800994c:	2f19      	cmp	r7, #25
 800994e:	d801      	bhi.n	8009954 <_strtol_l.constprop.0+0xb4>
 8009950:	3c37      	subs	r4, #55	@ 0x37
 8009952:	e7de      	b.n	8009912 <_strtol_l.constprop.0+0x72>
 8009954:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009958:	2f19      	cmp	r7, #25
 800995a:	d804      	bhi.n	8009966 <_strtol_l.constprop.0+0xc6>
 800995c:	3c57      	subs	r4, #87	@ 0x57
 800995e:	e7d8      	b.n	8009912 <_strtol_l.constprop.0+0x72>
 8009960:	f04f 32ff 	mov.w	r2, #4294967295
 8009964:	e7e1      	b.n	800992a <_strtol_l.constprop.0+0x8a>
 8009966:	1c53      	adds	r3, r2, #1
 8009968:	d108      	bne.n	800997c <_strtol_l.constprop.0+0xdc>
 800996a:	2322      	movs	r3, #34	@ 0x22
 800996c:	f8ce 3000 	str.w	r3, [lr]
 8009970:	4660      	mov	r0, ip
 8009972:	f1b8 0f00 	cmp.w	r8, #0
 8009976:	d0a0      	beq.n	80098ba <_strtol_l.constprop.0+0x1a>
 8009978:	1e69      	subs	r1, r5, #1
 800997a:	e006      	b.n	800998a <_strtol_l.constprop.0+0xea>
 800997c:	b106      	cbz	r6, 8009980 <_strtol_l.constprop.0+0xe0>
 800997e:	4240      	negs	r0, r0
 8009980:	f1b8 0f00 	cmp.w	r8, #0
 8009984:	d099      	beq.n	80098ba <_strtol_l.constprop.0+0x1a>
 8009986:	2a00      	cmp	r2, #0
 8009988:	d1f6      	bne.n	8009978 <_strtol_l.constprop.0+0xd8>
 800998a:	f8c8 1000 	str.w	r1, [r8]
 800998e:	e794      	b.n	80098ba <_strtol_l.constprop.0+0x1a>
 8009990:	0800e189 	.word	0x0800e189

08009994 <_strtol_r>:
 8009994:	f7ff bf84 	b.w	80098a0 <_strtol_l.constprop.0>

08009998 <strtol>:
 8009998:	4613      	mov	r3, r2
 800999a:	460a      	mov	r2, r1
 800999c:	4601      	mov	r1, r0
 800999e:	4802      	ldr	r0, [pc, #8]	@ (80099a8 <strtol+0x10>)
 80099a0:	6800      	ldr	r0, [r0, #0]
 80099a2:	f7ff bf7d 	b.w	80098a0 <_strtol_l.constprop.0>
 80099a6:	bf00      	nop
 80099a8:	200000d4 	.word	0x200000d4

080099ac <__cvt>:
 80099ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	ec57 6b10 	vmov	r6, r7, d0
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	460c      	mov	r4, r1
 80099b8:	4619      	mov	r1, r3
 80099ba:	463b      	mov	r3, r7
 80099bc:	bfbb      	ittet	lt
 80099be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099c2:	461f      	movlt	r7, r3
 80099c4:	2300      	movge	r3, #0
 80099c6:	232d      	movlt	r3, #45	@ 0x2d
 80099c8:	700b      	strb	r3, [r1, #0]
 80099ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099d0:	4691      	mov	r9, r2
 80099d2:	f023 0820 	bic.w	r8, r3, #32
 80099d6:	bfbc      	itt	lt
 80099d8:	4632      	movlt	r2, r6
 80099da:	4616      	movlt	r6, r2
 80099dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099e0:	d005      	beq.n	80099ee <__cvt+0x42>
 80099e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099e6:	d100      	bne.n	80099ea <__cvt+0x3e>
 80099e8:	3401      	adds	r4, #1
 80099ea:	2102      	movs	r1, #2
 80099ec:	e000      	b.n	80099f0 <__cvt+0x44>
 80099ee:	2103      	movs	r1, #3
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	ab02      	add	r3, sp, #8
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	ec47 6b10 	vmov	d0, r6, r7
 80099fc:	4653      	mov	r3, sl
 80099fe:	4622      	mov	r2, r4
 8009a00:	f001 f936 	bl	800ac70 <_dtoa_r>
 8009a04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a08:	4605      	mov	r5, r0
 8009a0a:	d119      	bne.n	8009a40 <__cvt+0x94>
 8009a0c:	f019 0f01 	tst.w	r9, #1
 8009a10:	d00e      	beq.n	8009a30 <__cvt+0x84>
 8009a12:	eb00 0904 	add.w	r9, r0, r4
 8009a16:	2200      	movs	r2, #0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	f7f7 f88b 	bl	8000b38 <__aeabi_dcmpeq>
 8009a22:	b108      	cbz	r0, 8009a28 <__cvt+0x7c>
 8009a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a28:	2230      	movs	r2, #48	@ 0x30
 8009a2a:	9b03      	ldr	r3, [sp, #12]
 8009a2c:	454b      	cmp	r3, r9
 8009a2e:	d31e      	bcc.n	8009a6e <__cvt+0xc2>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a34:	1b5b      	subs	r3, r3, r5
 8009a36:	4628      	mov	r0, r5
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	b004      	add	sp, #16
 8009a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a44:	eb00 0904 	add.w	r9, r0, r4
 8009a48:	d1e5      	bne.n	8009a16 <__cvt+0x6a>
 8009a4a:	7803      	ldrb	r3, [r0, #0]
 8009a4c:	2b30      	cmp	r3, #48	@ 0x30
 8009a4e:	d10a      	bne.n	8009a66 <__cvt+0xba>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f7 f86e 	bl	8000b38 <__aeabi_dcmpeq>
 8009a5c:	b918      	cbnz	r0, 8009a66 <__cvt+0xba>
 8009a5e:	f1c4 0401 	rsb	r4, r4, #1
 8009a62:	f8ca 4000 	str.w	r4, [sl]
 8009a66:	f8da 3000 	ldr.w	r3, [sl]
 8009a6a:	4499      	add	r9, r3
 8009a6c:	e7d3      	b.n	8009a16 <__cvt+0x6a>
 8009a6e:	1c59      	adds	r1, r3, #1
 8009a70:	9103      	str	r1, [sp, #12]
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e7d9      	b.n	8009a2a <__cvt+0x7e>

08009a76 <__exponent>:
 8009a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	bfba      	itte	lt
 8009a7c:	4249      	neglt	r1, r1
 8009a7e:	232d      	movlt	r3, #45	@ 0x2d
 8009a80:	232b      	movge	r3, #43	@ 0x2b
 8009a82:	2909      	cmp	r1, #9
 8009a84:	7002      	strb	r2, [r0, #0]
 8009a86:	7043      	strb	r3, [r0, #1]
 8009a88:	dd29      	ble.n	8009ade <__exponent+0x68>
 8009a8a:	f10d 0307 	add.w	r3, sp, #7
 8009a8e:	461d      	mov	r5, r3
 8009a90:	270a      	movs	r7, #10
 8009a92:	461a      	mov	r2, r3
 8009a94:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a98:	fb07 1416 	mls	r4, r7, r6, r1
 8009a9c:	3430      	adds	r4, #48	@ 0x30
 8009a9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	2c63      	cmp	r4, #99	@ 0x63
 8009aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009aaa:	4631      	mov	r1, r6
 8009aac:	dcf1      	bgt.n	8009a92 <__exponent+0x1c>
 8009aae:	3130      	adds	r1, #48	@ 0x30
 8009ab0:	1e94      	subs	r4, r2, #2
 8009ab2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ab6:	1c41      	adds	r1, r0, #1
 8009ab8:	4623      	mov	r3, r4
 8009aba:	42ab      	cmp	r3, r5
 8009abc:	d30a      	bcc.n	8009ad4 <__exponent+0x5e>
 8009abe:	f10d 0309 	add.w	r3, sp, #9
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	42ac      	cmp	r4, r5
 8009ac6:	bf88      	it	hi
 8009ac8:	2300      	movhi	r3, #0
 8009aca:	3302      	adds	r3, #2
 8009acc:	4403      	add	r3, r0
 8009ace:	1a18      	subs	r0, r3, r0
 8009ad0:	b003      	add	sp, #12
 8009ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ad8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009adc:	e7ed      	b.n	8009aba <__exponent+0x44>
 8009ade:	2330      	movs	r3, #48	@ 0x30
 8009ae0:	3130      	adds	r1, #48	@ 0x30
 8009ae2:	7083      	strb	r3, [r0, #2]
 8009ae4:	70c1      	strb	r1, [r0, #3]
 8009ae6:	1d03      	adds	r3, r0, #4
 8009ae8:	e7f1      	b.n	8009ace <__exponent+0x58>
	...

08009aec <_printf_float>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	b08d      	sub	sp, #52	@ 0x34
 8009af2:	460c      	mov	r4, r1
 8009af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009af8:	4616      	mov	r6, r2
 8009afa:	461f      	mov	r7, r3
 8009afc:	4605      	mov	r5, r0
 8009afe:	f000 ff91 	bl	800aa24 <_localeconv_r>
 8009b02:	6803      	ldr	r3, [r0, #0]
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7f6 fbea 	bl	80002e0 <strlen>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b10:	f8d8 3000 	ldr.w	r3, [r8]
 8009b14:	9005      	str	r0, [sp, #20]
 8009b16:	3307      	adds	r3, #7
 8009b18:	f023 0307 	bic.w	r3, r3, #7
 8009b1c:	f103 0208 	add.w	r2, r3, #8
 8009b20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b24:	f8d4 b000 	ldr.w	fp, [r4]
 8009b28:	f8c8 2000 	str.w	r2, [r8]
 8009b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b34:	9307      	str	r3, [sp, #28]
 8009b36:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b42:	4b9c      	ldr	r3, [pc, #624]	@ (8009db4 <_printf_float+0x2c8>)
 8009b44:	f04f 32ff 	mov.w	r2, #4294967295
 8009b48:	f7f7 f828 	bl	8000b9c <__aeabi_dcmpun>
 8009b4c:	bb70      	cbnz	r0, 8009bac <_printf_float+0xc0>
 8009b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b52:	4b98      	ldr	r3, [pc, #608]	@ (8009db4 <_printf_float+0x2c8>)
 8009b54:	f04f 32ff 	mov.w	r2, #4294967295
 8009b58:	f7f7 f802 	bl	8000b60 <__aeabi_dcmple>
 8009b5c:	bb30      	cbnz	r0, 8009bac <_printf_float+0xc0>
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2300      	movs	r3, #0
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f6 fff1 	bl	8000b4c <__aeabi_dcmplt>
 8009b6a:	b110      	cbz	r0, 8009b72 <_printf_float+0x86>
 8009b6c:	232d      	movs	r3, #45	@ 0x2d
 8009b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b72:	4a91      	ldr	r2, [pc, #580]	@ (8009db8 <_printf_float+0x2cc>)
 8009b74:	4b91      	ldr	r3, [pc, #580]	@ (8009dbc <_printf_float+0x2d0>)
 8009b76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b7a:	bf94      	ite	ls
 8009b7c:	4690      	movls	r8, r2
 8009b7e:	4698      	movhi	r8, r3
 8009b80:	2303      	movs	r3, #3
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	f02b 0304 	bic.w	r3, fp, #4
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	f04f 0900 	mov.w	r9, #0
 8009b8e:	9700      	str	r7, [sp, #0]
 8009b90:	4633      	mov	r3, r6
 8009b92:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b94:	4621      	mov	r1, r4
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f9d2 	bl	8009f40 <_printf_common>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	f040 808d 	bne.w	8009cbc <_printf_float+0x1d0>
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba6:	b00d      	add	sp, #52	@ 0x34
 8009ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	f7f6 fff2 	bl	8000b9c <__aeabi_dcmpun>
 8009bb8:	b140      	cbz	r0, 8009bcc <_printf_float+0xe0>
 8009bba:	464b      	mov	r3, r9
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bfbc      	itt	lt
 8009bc0:	232d      	movlt	r3, #45	@ 0x2d
 8009bc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8009dc0 <_printf_float+0x2d4>)
 8009bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8009dc4 <_printf_float+0x2d8>)
 8009bca:	e7d4      	b.n	8009b76 <_printf_float+0x8a>
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009bd2:	9206      	str	r2, [sp, #24]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	d13b      	bne.n	8009c50 <_printf_float+0x164>
 8009bd8:	2306      	movs	r3, #6
 8009bda:	6063      	str	r3, [r4, #4]
 8009bdc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009be0:	2300      	movs	r3, #0
 8009be2:	6022      	str	r2, [r4, #0]
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009be8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009bec:	ab09      	add	r3, sp, #36	@ 0x24
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	6861      	ldr	r1, [r4, #4]
 8009bf2:	ec49 8b10 	vmov	d0, r8, r9
 8009bf6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f7ff fed6 	bl	80099ac <__cvt>
 8009c00:	9b06      	ldr	r3, [sp, #24]
 8009c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c04:	2b47      	cmp	r3, #71	@ 0x47
 8009c06:	4680      	mov	r8, r0
 8009c08:	d129      	bne.n	8009c5e <_printf_float+0x172>
 8009c0a:	1cc8      	adds	r0, r1, #3
 8009c0c:	db02      	blt.n	8009c14 <_printf_float+0x128>
 8009c0e:	6863      	ldr	r3, [r4, #4]
 8009c10:	4299      	cmp	r1, r3
 8009c12:	dd41      	ble.n	8009c98 <_printf_float+0x1ac>
 8009c14:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c18:	fa5f fa8a 	uxtb.w	sl, sl
 8009c1c:	3901      	subs	r1, #1
 8009c1e:	4652      	mov	r2, sl
 8009c20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c24:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c26:	f7ff ff26 	bl	8009a76 <__exponent>
 8009c2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c2c:	1813      	adds	r3, r2, r0
 8009c2e:	2a01      	cmp	r2, #1
 8009c30:	4681      	mov	r9, r0
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	dc02      	bgt.n	8009c3c <_printf_float+0x150>
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	07d2      	lsls	r2, r2, #31
 8009c3a:	d501      	bpl.n	8009c40 <_printf_float+0x154>
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0a2      	beq.n	8009b8e <_printf_float+0xa2>
 8009c48:	232d      	movs	r3, #45	@ 0x2d
 8009c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c4e:	e79e      	b.n	8009b8e <_printf_float+0xa2>
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	2a47      	cmp	r2, #71	@ 0x47
 8009c54:	d1c2      	bne.n	8009bdc <_printf_float+0xf0>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1c0      	bne.n	8009bdc <_printf_float+0xf0>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7bd      	b.n	8009bda <_printf_float+0xee>
 8009c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c62:	d9db      	bls.n	8009c1c <_printf_float+0x130>
 8009c64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c68:	d118      	bne.n	8009c9c <_printf_float+0x1b0>
 8009c6a:	2900      	cmp	r1, #0
 8009c6c:	6863      	ldr	r3, [r4, #4]
 8009c6e:	dd0b      	ble.n	8009c88 <_printf_float+0x19c>
 8009c70:	6121      	str	r1, [r4, #16]
 8009c72:	b913      	cbnz	r3, 8009c7a <_printf_float+0x18e>
 8009c74:	6822      	ldr	r2, [r4, #0]
 8009c76:	07d0      	lsls	r0, r2, #31
 8009c78:	d502      	bpl.n	8009c80 <_printf_float+0x194>
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	440b      	add	r3, r1
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c82:	f04f 0900 	mov.w	r9, #0
 8009c86:	e7db      	b.n	8009c40 <_printf_float+0x154>
 8009c88:	b913      	cbnz	r3, 8009c90 <_printf_float+0x1a4>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	07d2      	lsls	r2, r2, #31
 8009c8e:	d501      	bpl.n	8009c94 <_printf_float+0x1a8>
 8009c90:	3302      	adds	r3, #2
 8009c92:	e7f4      	b.n	8009c7e <_printf_float+0x192>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7f2      	b.n	8009c7e <_printf_float+0x192>
 8009c98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c9e:	4299      	cmp	r1, r3
 8009ca0:	db05      	blt.n	8009cae <_printf_float+0x1c2>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	6121      	str	r1, [r4, #16]
 8009ca6:	07d8      	lsls	r0, r3, #31
 8009ca8:	d5ea      	bpl.n	8009c80 <_printf_float+0x194>
 8009caa:	1c4b      	adds	r3, r1, #1
 8009cac:	e7e7      	b.n	8009c7e <_printf_float+0x192>
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	bfd4      	ite	le
 8009cb2:	f1c1 0202 	rsble	r2, r1, #2
 8009cb6:	2201      	movgt	r2, #1
 8009cb8:	4413      	add	r3, r2
 8009cba:	e7e0      	b.n	8009c7e <_printf_float+0x192>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	055a      	lsls	r2, r3, #21
 8009cc0:	d407      	bmi.n	8009cd2 <_printf_float+0x1e6>
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	4642      	mov	r2, r8
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b8      	blx	r7
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d12b      	bne.n	8009d28 <_printf_float+0x23c>
 8009cd0:	e767      	b.n	8009ba2 <_printf_float+0xb6>
 8009cd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cd6:	f240 80dd 	bls.w	8009e94 <_printf_float+0x3a8>
 8009cda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cde:	2200      	movs	r2, #0
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f7f6 ff29 	bl	8000b38 <__aeabi_dcmpeq>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d033      	beq.n	8009d52 <_printf_float+0x266>
 8009cea:	4a37      	ldr	r2, [pc, #220]	@ (8009dc8 <_printf_float+0x2dc>)
 8009cec:	2301      	movs	r3, #1
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f af54 	beq.w	8009ba2 <_printf_float+0xb6>
 8009cfa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cfe:	4543      	cmp	r3, r8
 8009d00:	db02      	blt.n	8009d08 <_printf_float+0x21c>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	07d8      	lsls	r0, r3, #31
 8009d06:	d50f      	bpl.n	8009d28 <_printf_float+0x23c>
 8009d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f af45 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d20:	f104 0a1a 	add.w	sl, r4, #26
 8009d24:	45c8      	cmp	r8, r9
 8009d26:	dc09      	bgt.n	8009d3c <_printf_float+0x250>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	079b      	lsls	r3, r3, #30
 8009d2c:	f100 8103 	bmi.w	8009f36 <_printf_float+0x44a>
 8009d30:	68e0      	ldr	r0, [r4, #12]
 8009d32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d34:	4298      	cmp	r0, r3
 8009d36:	bfb8      	it	lt
 8009d38:	4618      	movlt	r0, r3
 8009d3a:	e734      	b.n	8009ba6 <_printf_float+0xba>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4652      	mov	r2, sl
 8009d40:	4631      	mov	r1, r6
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b8      	blx	r7
 8009d46:	3001      	adds	r0, #1
 8009d48:	f43f af2b 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d4c:	f109 0901 	add.w	r9, r9, #1
 8009d50:	e7e8      	b.n	8009d24 <_printf_float+0x238>
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dc39      	bgt.n	8009dcc <_printf_float+0x2e0>
 8009d58:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc8 <_printf_float+0x2dc>)
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b8      	blx	r7
 8009d62:	3001      	adds	r0, #1
 8009d64:	f43f af1d 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d6c:	ea59 0303 	orrs.w	r3, r9, r3
 8009d70:	d102      	bne.n	8009d78 <_printf_float+0x28c>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	07d9      	lsls	r1, r3, #31
 8009d76:	d5d7      	bpl.n	8009d28 <_printf_float+0x23c>
 8009d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	47b8      	blx	r7
 8009d82:	3001      	adds	r0, #1
 8009d84:	f43f af0d 	beq.w	8009ba2 <_printf_float+0xb6>
 8009d88:	f04f 0a00 	mov.w	sl, #0
 8009d8c:	f104 0b1a 	add.w	fp, r4, #26
 8009d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d92:	425b      	negs	r3, r3
 8009d94:	4553      	cmp	r3, sl
 8009d96:	dc01      	bgt.n	8009d9c <_printf_float+0x2b0>
 8009d98:	464b      	mov	r3, r9
 8009d9a:	e793      	b.n	8009cc4 <_printf_float+0x1d8>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	465a      	mov	r2, fp
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f aefb 	beq.w	8009ba2 <_printf_float+0xb6>
 8009dac:	f10a 0a01 	add.w	sl, sl, #1
 8009db0:	e7ee      	b.n	8009d90 <_printf_float+0x2a4>
 8009db2:	bf00      	nop
 8009db4:	7fefffff 	.word	0x7fefffff
 8009db8:	0800e289 	.word	0x0800e289
 8009dbc:	0800e28d 	.word	0x0800e28d
 8009dc0:	0800e291 	.word	0x0800e291
 8009dc4:	0800e295 	.word	0x0800e295
 8009dc8:	0800e299 	.word	0x0800e299
 8009dcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009dd2:	4553      	cmp	r3, sl
 8009dd4:	bfa8      	it	ge
 8009dd6:	4653      	movge	r3, sl
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	4699      	mov	r9, r3
 8009ddc:	dc36      	bgt.n	8009e4c <_printf_float+0x360>
 8009dde:	f04f 0b00 	mov.w	fp, #0
 8009de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009de6:	f104 021a 	add.w	r2, r4, #26
 8009dea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dec:	9306      	str	r3, [sp, #24]
 8009dee:	eba3 0309 	sub.w	r3, r3, r9
 8009df2:	455b      	cmp	r3, fp
 8009df4:	dc31      	bgt.n	8009e5a <_printf_float+0x36e>
 8009df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df8:	459a      	cmp	sl, r3
 8009dfa:	dc3a      	bgt.n	8009e72 <_printf_float+0x386>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	07da      	lsls	r2, r3, #31
 8009e00:	d437      	bmi.n	8009e72 <_printf_float+0x386>
 8009e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e04:	ebaa 0903 	sub.w	r9, sl, r3
 8009e08:	9b06      	ldr	r3, [sp, #24]
 8009e0a:	ebaa 0303 	sub.w	r3, sl, r3
 8009e0e:	4599      	cmp	r9, r3
 8009e10:	bfa8      	it	ge
 8009e12:	4699      	movge	r9, r3
 8009e14:	f1b9 0f00 	cmp.w	r9, #0
 8009e18:	dc33      	bgt.n	8009e82 <_printf_float+0x396>
 8009e1a:	f04f 0800 	mov.w	r8, #0
 8009e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e22:	f104 0b1a 	add.w	fp, r4, #26
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	ebaa 0303 	sub.w	r3, sl, r3
 8009e2c:	eba3 0309 	sub.w	r3, r3, r9
 8009e30:	4543      	cmp	r3, r8
 8009e32:	f77f af79 	ble.w	8009d28 <_printf_float+0x23c>
 8009e36:	2301      	movs	r3, #1
 8009e38:	465a      	mov	r2, fp
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f aeae 	beq.w	8009ba2 <_printf_float+0xb6>
 8009e46:	f108 0801 	add.w	r8, r8, #1
 8009e4a:	e7ec      	b.n	8009e26 <_printf_float+0x33a>
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4628      	mov	r0, r5
 8009e52:	47b8      	blx	r7
 8009e54:	3001      	adds	r0, #1
 8009e56:	d1c2      	bne.n	8009dde <_printf_float+0x2f2>
 8009e58:	e6a3      	b.n	8009ba2 <_printf_float+0xb6>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4628      	mov	r0, r5
 8009e60:	9206      	str	r2, [sp, #24]
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	f43f ae9c 	beq.w	8009ba2 <_printf_float+0xb6>
 8009e6a:	9a06      	ldr	r2, [sp, #24]
 8009e6c:	f10b 0b01 	add.w	fp, fp, #1
 8009e70:	e7bb      	b.n	8009dea <_printf_float+0x2fe>
 8009e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b8      	blx	r7
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	d1c0      	bne.n	8009e02 <_printf_float+0x316>
 8009e80:	e68f      	b.n	8009ba2 <_printf_float+0xb6>
 8009e82:	9a06      	ldr	r2, [sp, #24]
 8009e84:	464b      	mov	r3, r9
 8009e86:	4442      	add	r2, r8
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d1c3      	bne.n	8009e1a <_printf_float+0x32e>
 8009e92:	e686      	b.n	8009ba2 <_printf_float+0xb6>
 8009e94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e98:	f1ba 0f01 	cmp.w	sl, #1
 8009e9c:	dc01      	bgt.n	8009ea2 <_printf_float+0x3b6>
 8009e9e:	07db      	lsls	r3, r3, #31
 8009ea0:	d536      	bpl.n	8009f10 <_printf_float+0x424>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	f43f ae78 	beq.w	8009ba2 <_printf_float+0xb6>
 8009eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f43f ae70 	beq.w	8009ba2 <_printf_float+0xb6>
 8009ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ece:	f7f6 fe33 	bl	8000b38 <__aeabi_dcmpeq>
 8009ed2:	b9c0      	cbnz	r0, 8009f06 <_printf_float+0x41a>
 8009ed4:	4653      	mov	r3, sl
 8009ed6:	f108 0201 	add.w	r2, r8, #1
 8009eda:	4631      	mov	r1, r6
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b8      	blx	r7
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d10c      	bne.n	8009efe <_printf_float+0x412>
 8009ee4:	e65d      	b.n	8009ba2 <_printf_float+0xb6>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	465a      	mov	r2, fp
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f43f ae56 	beq.w	8009ba2 <_printf_float+0xb6>
 8009ef6:	f108 0801 	add.w	r8, r8, #1
 8009efa:	45d0      	cmp	r8, sl
 8009efc:	dbf3      	blt.n	8009ee6 <_printf_float+0x3fa>
 8009efe:	464b      	mov	r3, r9
 8009f00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f04:	e6df      	b.n	8009cc6 <_printf_float+0x1da>
 8009f06:	f04f 0800 	mov.w	r8, #0
 8009f0a:	f104 0b1a 	add.w	fp, r4, #26
 8009f0e:	e7f4      	b.n	8009efa <_printf_float+0x40e>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4642      	mov	r2, r8
 8009f14:	e7e1      	b.n	8009eda <_printf_float+0x3ee>
 8009f16:	2301      	movs	r3, #1
 8009f18:	464a      	mov	r2, r9
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	f43f ae3e 	beq.w	8009ba2 <_printf_float+0xb6>
 8009f26:	f108 0801 	add.w	r8, r8, #1
 8009f2a:	68e3      	ldr	r3, [r4, #12]
 8009f2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f2e:	1a5b      	subs	r3, r3, r1
 8009f30:	4543      	cmp	r3, r8
 8009f32:	dcf0      	bgt.n	8009f16 <_printf_float+0x42a>
 8009f34:	e6fc      	b.n	8009d30 <_printf_float+0x244>
 8009f36:	f04f 0800 	mov.w	r8, #0
 8009f3a:	f104 0919 	add.w	r9, r4, #25
 8009f3e:	e7f4      	b.n	8009f2a <_printf_float+0x43e>

08009f40 <_printf_common>:
 8009f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f44:	4616      	mov	r6, r2
 8009f46:	4698      	mov	r8, r3
 8009f48:	688a      	ldr	r2, [r1, #8]
 8009f4a:	690b      	ldr	r3, [r1, #16]
 8009f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	bfb8      	it	lt
 8009f54:	4613      	movlt	r3, r2
 8009f56:	6033      	str	r3, [r6, #0]
 8009f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	b10a      	cbz	r2, 8009f66 <_printf_common+0x26>
 8009f62:	3301      	adds	r3, #1
 8009f64:	6033      	str	r3, [r6, #0]
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	0699      	lsls	r1, r3, #26
 8009f6a:	bf42      	ittt	mi
 8009f6c:	6833      	ldrmi	r3, [r6, #0]
 8009f6e:	3302      	addmi	r3, #2
 8009f70:	6033      	strmi	r3, [r6, #0]
 8009f72:	6825      	ldr	r5, [r4, #0]
 8009f74:	f015 0506 	ands.w	r5, r5, #6
 8009f78:	d106      	bne.n	8009f88 <_printf_common+0x48>
 8009f7a:	f104 0a19 	add.w	sl, r4, #25
 8009f7e:	68e3      	ldr	r3, [r4, #12]
 8009f80:	6832      	ldr	r2, [r6, #0]
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	42ab      	cmp	r3, r5
 8009f86:	dc26      	bgt.n	8009fd6 <_printf_common+0x96>
 8009f88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f8c:	6822      	ldr	r2, [r4, #0]
 8009f8e:	3b00      	subs	r3, #0
 8009f90:	bf18      	it	ne
 8009f92:	2301      	movne	r3, #1
 8009f94:	0692      	lsls	r2, r2, #26
 8009f96:	d42b      	bmi.n	8009ff0 <_printf_common+0xb0>
 8009f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f9c:	4641      	mov	r1, r8
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	47c8      	blx	r9
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d01e      	beq.n	8009fe4 <_printf_common+0xa4>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	6922      	ldr	r2, [r4, #16]
 8009faa:	f003 0306 	and.w	r3, r3, #6
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	bf02      	ittt	eq
 8009fb2:	68e5      	ldreq	r5, [r4, #12]
 8009fb4:	6833      	ldreq	r3, [r6, #0]
 8009fb6:	1aed      	subeq	r5, r5, r3
 8009fb8:	68a3      	ldr	r3, [r4, #8]
 8009fba:	bf0c      	ite	eq
 8009fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc0:	2500      	movne	r5, #0
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	bfc4      	itt	gt
 8009fc6:	1a9b      	subgt	r3, r3, r2
 8009fc8:	18ed      	addgt	r5, r5, r3
 8009fca:	2600      	movs	r6, #0
 8009fcc:	341a      	adds	r4, #26
 8009fce:	42b5      	cmp	r5, r6
 8009fd0:	d11a      	bne.n	800a008 <_printf_common+0xc8>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e008      	b.n	8009fe8 <_printf_common+0xa8>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4652      	mov	r2, sl
 8009fda:	4641      	mov	r1, r8
 8009fdc:	4638      	mov	r0, r7
 8009fde:	47c8      	blx	r9
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d103      	bne.n	8009fec <_printf_common+0xac>
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fec:	3501      	adds	r5, #1
 8009fee:	e7c6      	b.n	8009f7e <_printf_common+0x3e>
 8009ff0:	18e1      	adds	r1, r4, r3
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	2030      	movs	r0, #48	@ 0x30
 8009ff6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ffa:	4422      	add	r2, r4
 8009ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a004:	3302      	adds	r3, #2
 800a006:	e7c7      	b.n	8009f98 <_printf_common+0x58>
 800a008:	2301      	movs	r3, #1
 800a00a:	4622      	mov	r2, r4
 800a00c:	4641      	mov	r1, r8
 800a00e:	4638      	mov	r0, r7
 800a010:	47c8      	blx	r9
 800a012:	3001      	adds	r0, #1
 800a014:	d0e6      	beq.n	8009fe4 <_printf_common+0xa4>
 800a016:	3601      	adds	r6, #1
 800a018:	e7d9      	b.n	8009fce <_printf_common+0x8e>
	...

0800a01c <_printf_i>:
 800a01c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a020:	7e0f      	ldrb	r7, [r1, #24]
 800a022:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a024:	2f78      	cmp	r7, #120	@ 0x78
 800a026:	4691      	mov	r9, r2
 800a028:	4680      	mov	r8, r0
 800a02a:	460c      	mov	r4, r1
 800a02c:	469a      	mov	sl, r3
 800a02e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a032:	d807      	bhi.n	800a044 <_printf_i+0x28>
 800a034:	2f62      	cmp	r7, #98	@ 0x62
 800a036:	d80a      	bhi.n	800a04e <_printf_i+0x32>
 800a038:	2f00      	cmp	r7, #0
 800a03a:	f000 80d2 	beq.w	800a1e2 <_printf_i+0x1c6>
 800a03e:	2f58      	cmp	r7, #88	@ 0x58
 800a040:	f000 80b9 	beq.w	800a1b6 <_printf_i+0x19a>
 800a044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a04c:	e03a      	b.n	800a0c4 <_printf_i+0xa8>
 800a04e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a052:	2b15      	cmp	r3, #21
 800a054:	d8f6      	bhi.n	800a044 <_printf_i+0x28>
 800a056:	a101      	add	r1, pc, #4	@ (adr r1, 800a05c <_printf_i+0x40>)
 800a058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a05c:	0800a0b5 	.word	0x0800a0b5
 800a060:	0800a0c9 	.word	0x0800a0c9
 800a064:	0800a045 	.word	0x0800a045
 800a068:	0800a045 	.word	0x0800a045
 800a06c:	0800a045 	.word	0x0800a045
 800a070:	0800a045 	.word	0x0800a045
 800a074:	0800a0c9 	.word	0x0800a0c9
 800a078:	0800a045 	.word	0x0800a045
 800a07c:	0800a045 	.word	0x0800a045
 800a080:	0800a045 	.word	0x0800a045
 800a084:	0800a045 	.word	0x0800a045
 800a088:	0800a1c9 	.word	0x0800a1c9
 800a08c:	0800a0f3 	.word	0x0800a0f3
 800a090:	0800a183 	.word	0x0800a183
 800a094:	0800a045 	.word	0x0800a045
 800a098:	0800a045 	.word	0x0800a045
 800a09c:	0800a1eb 	.word	0x0800a1eb
 800a0a0:	0800a045 	.word	0x0800a045
 800a0a4:	0800a0f3 	.word	0x0800a0f3
 800a0a8:	0800a045 	.word	0x0800a045
 800a0ac:	0800a045 	.word	0x0800a045
 800a0b0:	0800a18b 	.word	0x0800a18b
 800a0b4:	6833      	ldr	r3, [r6, #0]
 800a0b6:	1d1a      	adds	r2, r3, #4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6032      	str	r2, [r6, #0]
 800a0bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e09d      	b.n	800a204 <_printf_i+0x1e8>
 800a0c8:	6833      	ldr	r3, [r6, #0]
 800a0ca:	6820      	ldr	r0, [r4, #0]
 800a0cc:	1d19      	adds	r1, r3, #4
 800a0ce:	6031      	str	r1, [r6, #0]
 800a0d0:	0606      	lsls	r6, r0, #24
 800a0d2:	d501      	bpl.n	800a0d8 <_printf_i+0xbc>
 800a0d4:	681d      	ldr	r5, [r3, #0]
 800a0d6:	e003      	b.n	800a0e0 <_printf_i+0xc4>
 800a0d8:	0645      	lsls	r5, r0, #25
 800a0da:	d5fb      	bpl.n	800a0d4 <_printf_i+0xb8>
 800a0dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	da03      	bge.n	800a0ec <_printf_i+0xd0>
 800a0e4:	232d      	movs	r3, #45	@ 0x2d
 800a0e6:	426d      	negs	r5, r5
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ec:	4859      	ldr	r0, [pc, #356]	@ (800a254 <_printf_i+0x238>)
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	e011      	b.n	800a116 <_printf_i+0xfa>
 800a0f2:	6821      	ldr	r1, [r4, #0]
 800a0f4:	6833      	ldr	r3, [r6, #0]
 800a0f6:	0608      	lsls	r0, r1, #24
 800a0f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0fc:	d402      	bmi.n	800a104 <_printf_i+0xe8>
 800a0fe:	0649      	lsls	r1, r1, #25
 800a100:	bf48      	it	mi
 800a102:	b2ad      	uxthmi	r5, r5
 800a104:	2f6f      	cmp	r7, #111	@ 0x6f
 800a106:	4853      	ldr	r0, [pc, #332]	@ (800a254 <_printf_i+0x238>)
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	bf14      	ite	ne
 800a10c:	230a      	movne	r3, #10
 800a10e:	2308      	moveq	r3, #8
 800a110:	2100      	movs	r1, #0
 800a112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a116:	6866      	ldr	r6, [r4, #4]
 800a118:	60a6      	str	r6, [r4, #8]
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	bfa2      	ittt	ge
 800a11e:	6821      	ldrge	r1, [r4, #0]
 800a120:	f021 0104 	bicge.w	r1, r1, #4
 800a124:	6021      	strge	r1, [r4, #0]
 800a126:	b90d      	cbnz	r5, 800a12c <_printf_i+0x110>
 800a128:	2e00      	cmp	r6, #0
 800a12a:	d04b      	beq.n	800a1c4 <_printf_i+0x1a8>
 800a12c:	4616      	mov	r6, r2
 800a12e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a132:	fb03 5711 	mls	r7, r3, r1, r5
 800a136:	5dc7      	ldrb	r7, [r0, r7]
 800a138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a13c:	462f      	mov	r7, r5
 800a13e:	42bb      	cmp	r3, r7
 800a140:	460d      	mov	r5, r1
 800a142:	d9f4      	bls.n	800a12e <_printf_i+0x112>
 800a144:	2b08      	cmp	r3, #8
 800a146:	d10b      	bne.n	800a160 <_printf_i+0x144>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	07df      	lsls	r7, r3, #31
 800a14c:	d508      	bpl.n	800a160 <_printf_i+0x144>
 800a14e:	6923      	ldr	r3, [r4, #16]
 800a150:	6861      	ldr	r1, [r4, #4]
 800a152:	4299      	cmp	r1, r3
 800a154:	bfde      	ittt	le
 800a156:	2330      	movle	r3, #48	@ 0x30
 800a158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a15c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a160:	1b92      	subs	r2, r2, r6
 800a162:	6122      	str	r2, [r4, #16]
 800a164:	f8cd a000 	str.w	sl, [sp]
 800a168:	464b      	mov	r3, r9
 800a16a:	aa03      	add	r2, sp, #12
 800a16c:	4621      	mov	r1, r4
 800a16e:	4640      	mov	r0, r8
 800a170:	f7ff fee6 	bl	8009f40 <_printf_common>
 800a174:	3001      	adds	r0, #1
 800a176:	d14a      	bne.n	800a20e <_printf_i+0x1f2>
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	b004      	add	sp, #16
 800a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	f043 0320 	orr.w	r3, r3, #32
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	4833      	ldr	r0, [pc, #204]	@ (800a258 <_printf_i+0x23c>)
 800a18c:	2778      	movs	r7, #120	@ 0x78
 800a18e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	6831      	ldr	r1, [r6, #0]
 800a196:	061f      	lsls	r7, r3, #24
 800a198:	f851 5b04 	ldr.w	r5, [r1], #4
 800a19c:	d402      	bmi.n	800a1a4 <_printf_i+0x188>
 800a19e:	065f      	lsls	r7, r3, #25
 800a1a0:	bf48      	it	mi
 800a1a2:	b2ad      	uxthmi	r5, r5
 800a1a4:	6031      	str	r1, [r6, #0]
 800a1a6:	07d9      	lsls	r1, r3, #31
 800a1a8:	bf44      	itt	mi
 800a1aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ae:	6023      	strmi	r3, [r4, #0]
 800a1b0:	b11d      	cbz	r5, 800a1ba <_printf_i+0x19e>
 800a1b2:	2310      	movs	r3, #16
 800a1b4:	e7ac      	b.n	800a110 <_printf_i+0xf4>
 800a1b6:	4827      	ldr	r0, [pc, #156]	@ (800a254 <_printf_i+0x238>)
 800a1b8:	e7e9      	b.n	800a18e <_printf_i+0x172>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f023 0320 	bic.w	r3, r3, #32
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	e7f6      	b.n	800a1b2 <_printf_i+0x196>
 800a1c4:	4616      	mov	r6, r2
 800a1c6:	e7bd      	b.n	800a144 <_printf_i+0x128>
 800a1c8:	6833      	ldr	r3, [r6, #0]
 800a1ca:	6825      	ldr	r5, [r4, #0]
 800a1cc:	6961      	ldr	r1, [r4, #20]
 800a1ce:	1d18      	adds	r0, r3, #4
 800a1d0:	6030      	str	r0, [r6, #0]
 800a1d2:	062e      	lsls	r6, r5, #24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	d501      	bpl.n	800a1dc <_printf_i+0x1c0>
 800a1d8:	6019      	str	r1, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <_printf_i+0x1c6>
 800a1dc:	0668      	lsls	r0, r5, #25
 800a1de:	d5fb      	bpl.n	800a1d8 <_printf_i+0x1bc>
 800a1e0:	8019      	strh	r1, [r3, #0]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	6123      	str	r3, [r4, #16]
 800a1e6:	4616      	mov	r6, r2
 800a1e8:	e7bc      	b.n	800a164 <_printf_i+0x148>
 800a1ea:	6833      	ldr	r3, [r6, #0]
 800a1ec:	1d1a      	adds	r2, r3, #4
 800a1ee:	6032      	str	r2, [r6, #0]
 800a1f0:	681e      	ldr	r6, [r3, #0]
 800a1f2:	6862      	ldr	r2, [r4, #4]
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7f6 f822 	bl	8000240 <memchr>
 800a1fc:	b108      	cbz	r0, 800a202 <_printf_i+0x1e6>
 800a1fe:	1b80      	subs	r0, r0, r6
 800a200:	6060      	str	r0, [r4, #4]
 800a202:	6863      	ldr	r3, [r4, #4]
 800a204:	6123      	str	r3, [r4, #16]
 800a206:	2300      	movs	r3, #0
 800a208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a20c:	e7aa      	b.n	800a164 <_printf_i+0x148>
 800a20e:	6923      	ldr	r3, [r4, #16]
 800a210:	4632      	mov	r2, r6
 800a212:	4649      	mov	r1, r9
 800a214:	4640      	mov	r0, r8
 800a216:	47d0      	blx	sl
 800a218:	3001      	adds	r0, #1
 800a21a:	d0ad      	beq.n	800a178 <_printf_i+0x15c>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	079b      	lsls	r3, r3, #30
 800a220:	d413      	bmi.n	800a24a <_printf_i+0x22e>
 800a222:	68e0      	ldr	r0, [r4, #12]
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	4298      	cmp	r0, r3
 800a228:	bfb8      	it	lt
 800a22a:	4618      	movlt	r0, r3
 800a22c:	e7a6      	b.n	800a17c <_printf_i+0x160>
 800a22e:	2301      	movs	r3, #1
 800a230:	4632      	mov	r2, r6
 800a232:	4649      	mov	r1, r9
 800a234:	4640      	mov	r0, r8
 800a236:	47d0      	blx	sl
 800a238:	3001      	adds	r0, #1
 800a23a:	d09d      	beq.n	800a178 <_printf_i+0x15c>
 800a23c:	3501      	adds	r5, #1
 800a23e:	68e3      	ldr	r3, [r4, #12]
 800a240:	9903      	ldr	r1, [sp, #12]
 800a242:	1a5b      	subs	r3, r3, r1
 800a244:	42ab      	cmp	r3, r5
 800a246:	dcf2      	bgt.n	800a22e <_printf_i+0x212>
 800a248:	e7eb      	b.n	800a222 <_printf_i+0x206>
 800a24a:	2500      	movs	r5, #0
 800a24c:	f104 0619 	add.w	r6, r4, #25
 800a250:	e7f5      	b.n	800a23e <_printf_i+0x222>
 800a252:	bf00      	nop
 800a254:	0800e29b 	.word	0x0800e29b
 800a258:	0800e2ac 	.word	0x0800e2ac

0800a25c <_scanf_float>:
 800a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	b087      	sub	sp, #28
 800a262:	4617      	mov	r7, r2
 800a264:	9303      	str	r3, [sp, #12]
 800a266:	688b      	ldr	r3, [r1, #8]
 800a268:	1e5a      	subs	r2, r3, #1
 800a26a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a26e:	bf81      	itttt	hi
 800a270:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a274:	eb03 0b05 	addhi.w	fp, r3, r5
 800a278:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a27c:	608b      	strhi	r3, [r1, #8]
 800a27e:	680b      	ldr	r3, [r1, #0]
 800a280:	460a      	mov	r2, r1
 800a282:	f04f 0500 	mov.w	r5, #0
 800a286:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a28a:	f842 3b1c 	str.w	r3, [r2], #28
 800a28e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a292:	4680      	mov	r8, r0
 800a294:	460c      	mov	r4, r1
 800a296:	bf98      	it	ls
 800a298:	f04f 0b00 	movls.w	fp, #0
 800a29c:	9201      	str	r2, [sp, #4]
 800a29e:	4616      	mov	r6, r2
 800a2a0:	46aa      	mov	sl, r5
 800a2a2:	46a9      	mov	r9, r5
 800a2a4:	9502      	str	r5, [sp, #8]
 800a2a6:	68a2      	ldr	r2, [r4, #8]
 800a2a8:	b152      	cbz	r2, 800a2c0 <_scanf_float+0x64>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b4e      	cmp	r3, #78	@ 0x4e
 800a2b0:	d864      	bhi.n	800a37c <_scanf_float+0x120>
 800a2b2:	2b40      	cmp	r3, #64	@ 0x40
 800a2b4:	d83c      	bhi.n	800a330 <_scanf_float+0xd4>
 800a2b6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a2ba:	b2c8      	uxtb	r0, r1
 800a2bc:	280e      	cmp	r0, #14
 800a2be:	d93a      	bls.n	800a336 <_scanf_float+0xda>
 800a2c0:	f1b9 0f00 	cmp.w	r9, #0
 800a2c4:	d003      	beq.n	800a2ce <_scanf_float+0x72>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2d2:	f1ba 0f01 	cmp.w	sl, #1
 800a2d6:	f200 8117 	bhi.w	800a508 <_scanf_float+0x2ac>
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	429e      	cmp	r6, r3
 800a2de:	f200 8108 	bhi.w	800a4f2 <_scanf_float+0x296>
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	b007      	add	sp, #28
 800a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a2ee:	2a0d      	cmp	r2, #13
 800a2f0:	d8e6      	bhi.n	800a2c0 <_scanf_float+0x64>
 800a2f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a2f8 <_scanf_float+0x9c>)
 800a2f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2f8:	0800a43f 	.word	0x0800a43f
 800a2fc:	0800a2c1 	.word	0x0800a2c1
 800a300:	0800a2c1 	.word	0x0800a2c1
 800a304:	0800a2c1 	.word	0x0800a2c1
 800a308:	0800a49f 	.word	0x0800a49f
 800a30c:	0800a477 	.word	0x0800a477
 800a310:	0800a2c1 	.word	0x0800a2c1
 800a314:	0800a2c1 	.word	0x0800a2c1
 800a318:	0800a44d 	.word	0x0800a44d
 800a31c:	0800a2c1 	.word	0x0800a2c1
 800a320:	0800a2c1 	.word	0x0800a2c1
 800a324:	0800a2c1 	.word	0x0800a2c1
 800a328:	0800a2c1 	.word	0x0800a2c1
 800a32c:	0800a405 	.word	0x0800a405
 800a330:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a334:	e7db      	b.n	800a2ee <_scanf_float+0x92>
 800a336:	290e      	cmp	r1, #14
 800a338:	d8c2      	bhi.n	800a2c0 <_scanf_float+0x64>
 800a33a:	a001      	add	r0, pc, #4	@ (adr r0, 800a340 <_scanf_float+0xe4>)
 800a33c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a340:	0800a3f5 	.word	0x0800a3f5
 800a344:	0800a2c1 	.word	0x0800a2c1
 800a348:	0800a3f5 	.word	0x0800a3f5
 800a34c:	0800a48b 	.word	0x0800a48b
 800a350:	0800a2c1 	.word	0x0800a2c1
 800a354:	0800a39d 	.word	0x0800a39d
 800a358:	0800a3db 	.word	0x0800a3db
 800a35c:	0800a3db 	.word	0x0800a3db
 800a360:	0800a3db 	.word	0x0800a3db
 800a364:	0800a3db 	.word	0x0800a3db
 800a368:	0800a3db 	.word	0x0800a3db
 800a36c:	0800a3db 	.word	0x0800a3db
 800a370:	0800a3db 	.word	0x0800a3db
 800a374:	0800a3db 	.word	0x0800a3db
 800a378:	0800a3db 	.word	0x0800a3db
 800a37c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a37e:	d809      	bhi.n	800a394 <_scanf_float+0x138>
 800a380:	2b60      	cmp	r3, #96	@ 0x60
 800a382:	d8b2      	bhi.n	800a2ea <_scanf_float+0x8e>
 800a384:	2b54      	cmp	r3, #84	@ 0x54
 800a386:	d07b      	beq.n	800a480 <_scanf_float+0x224>
 800a388:	2b59      	cmp	r3, #89	@ 0x59
 800a38a:	d199      	bne.n	800a2c0 <_scanf_float+0x64>
 800a38c:	2d07      	cmp	r5, #7
 800a38e:	d197      	bne.n	800a2c0 <_scanf_float+0x64>
 800a390:	2508      	movs	r5, #8
 800a392:	e02c      	b.n	800a3ee <_scanf_float+0x192>
 800a394:	2b74      	cmp	r3, #116	@ 0x74
 800a396:	d073      	beq.n	800a480 <_scanf_float+0x224>
 800a398:	2b79      	cmp	r3, #121	@ 0x79
 800a39a:	e7f6      	b.n	800a38a <_scanf_float+0x12e>
 800a39c:	6821      	ldr	r1, [r4, #0]
 800a39e:	05c8      	lsls	r0, r1, #23
 800a3a0:	d51b      	bpl.n	800a3da <_scanf_float+0x17e>
 800a3a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a3a6:	6021      	str	r1, [r4, #0]
 800a3a8:	f109 0901 	add.w	r9, r9, #1
 800a3ac:	f1bb 0f00 	cmp.w	fp, #0
 800a3b0:	d003      	beq.n	800a3ba <_scanf_float+0x15e>
 800a3b2:	3201      	adds	r2, #1
 800a3b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a3b8:	60a2      	str	r2, [r4, #8]
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	60a3      	str	r3, [r4, #8]
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	f340 8087 	ble.w	800a4e0 <_scanf_float+0x284>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	e765      	b.n	800a2a6 <_scanf_float+0x4a>
 800a3da:	eb1a 0105 	adds.w	r1, sl, r5
 800a3de:	f47f af6f 	bne.w	800a2c0 <_scanf_float+0x64>
 800a3e2:	6822      	ldr	r2, [r4, #0]
 800a3e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a3e8:	6022      	str	r2, [r4, #0]
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	468a      	mov	sl, r1
 800a3ee:	f806 3b01 	strb.w	r3, [r6], #1
 800a3f2:	e7e2      	b.n	800a3ba <_scanf_float+0x15e>
 800a3f4:	6822      	ldr	r2, [r4, #0]
 800a3f6:	0610      	lsls	r0, r2, #24
 800a3f8:	f57f af62 	bpl.w	800a2c0 <_scanf_float+0x64>
 800a3fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	e7f4      	b.n	800a3ee <_scanf_float+0x192>
 800a404:	f1ba 0f00 	cmp.w	sl, #0
 800a408:	d10e      	bne.n	800a428 <_scanf_float+0x1cc>
 800a40a:	f1b9 0f00 	cmp.w	r9, #0
 800a40e:	d10e      	bne.n	800a42e <_scanf_float+0x1d2>
 800a410:	6822      	ldr	r2, [r4, #0]
 800a412:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a416:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a41a:	d108      	bne.n	800a42e <_scanf_float+0x1d2>
 800a41c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a420:	6022      	str	r2, [r4, #0]
 800a422:	f04f 0a01 	mov.w	sl, #1
 800a426:	e7e2      	b.n	800a3ee <_scanf_float+0x192>
 800a428:	f1ba 0f02 	cmp.w	sl, #2
 800a42c:	d055      	beq.n	800a4da <_scanf_float+0x27e>
 800a42e:	2d01      	cmp	r5, #1
 800a430:	d002      	beq.n	800a438 <_scanf_float+0x1dc>
 800a432:	2d04      	cmp	r5, #4
 800a434:	f47f af44 	bne.w	800a2c0 <_scanf_float+0x64>
 800a438:	3501      	adds	r5, #1
 800a43a:	b2ed      	uxtb	r5, r5
 800a43c:	e7d7      	b.n	800a3ee <_scanf_float+0x192>
 800a43e:	f1ba 0f01 	cmp.w	sl, #1
 800a442:	f47f af3d 	bne.w	800a2c0 <_scanf_float+0x64>
 800a446:	f04f 0a02 	mov.w	sl, #2
 800a44a:	e7d0      	b.n	800a3ee <_scanf_float+0x192>
 800a44c:	b97d      	cbnz	r5, 800a46e <_scanf_float+0x212>
 800a44e:	f1b9 0f00 	cmp.w	r9, #0
 800a452:	f47f af38 	bne.w	800a2c6 <_scanf_float+0x6a>
 800a456:	6822      	ldr	r2, [r4, #0]
 800a458:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a45c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a460:	f040 8108 	bne.w	800a674 <_scanf_float+0x418>
 800a464:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a468:	6022      	str	r2, [r4, #0]
 800a46a:	2501      	movs	r5, #1
 800a46c:	e7bf      	b.n	800a3ee <_scanf_float+0x192>
 800a46e:	2d03      	cmp	r5, #3
 800a470:	d0e2      	beq.n	800a438 <_scanf_float+0x1dc>
 800a472:	2d05      	cmp	r5, #5
 800a474:	e7de      	b.n	800a434 <_scanf_float+0x1d8>
 800a476:	2d02      	cmp	r5, #2
 800a478:	f47f af22 	bne.w	800a2c0 <_scanf_float+0x64>
 800a47c:	2503      	movs	r5, #3
 800a47e:	e7b6      	b.n	800a3ee <_scanf_float+0x192>
 800a480:	2d06      	cmp	r5, #6
 800a482:	f47f af1d 	bne.w	800a2c0 <_scanf_float+0x64>
 800a486:	2507      	movs	r5, #7
 800a488:	e7b1      	b.n	800a3ee <_scanf_float+0x192>
 800a48a:	6822      	ldr	r2, [r4, #0]
 800a48c:	0591      	lsls	r1, r2, #22
 800a48e:	f57f af17 	bpl.w	800a2c0 <_scanf_float+0x64>
 800a492:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a496:	6022      	str	r2, [r4, #0]
 800a498:	f8cd 9008 	str.w	r9, [sp, #8]
 800a49c:	e7a7      	b.n	800a3ee <_scanf_float+0x192>
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a4a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a4a8:	d006      	beq.n	800a4b8 <_scanf_float+0x25c>
 800a4aa:	0550      	lsls	r0, r2, #21
 800a4ac:	f57f af08 	bpl.w	800a2c0 <_scanf_float+0x64>
 800a4b0:	f1b9 0f00 	cmp.w	r9, #0
 800a4b4:	f000 80de 	beq.w	800a674 <_scanf_float+0x418>
 800a4b8:	0591      	lsls	r1, r2, #22
 800a4ba:	bf58      	it	pl
 800a4bc:	9902      	ldrpl	r1, [sp, #8]
 800a4be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a4c2:	bf58      	it	pl
 800a4c4:	eba9 0101 	subpl.w	r1, r9, r1
 800a4c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a4cc:	bf58      	it	pl
 800a4ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	f04f 0900 	mov.w	r9, #0
 800a4d8:	e789      	b.n	800a3ee <_scanf_float+0x192>
 800a4da:	f04f 0a03 	mov.w	sl, #3
 800a4de:	e786      	b.n	800a3ee <_scanf_float+0x192>
 800a4e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	4798      	blx	r3
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	f43f aedb 	beq.w	800a2a6 <_scanf_float+0x4a>
 800a4f0:	e6e6      	b.n	800a2c0 <_scanf_float+0x64>
 800a4f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4fa:	463a      	mov	r2, r7
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	4798      	blx	r3
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	3b01      	subs	r3, #1
 800a504:	6123      	str	r3, [r4, #16]
 800a506:	e6e8      	b.n	800a2da <_scanf_float+0x7e>
 800a508:	1e6b      	subs	r3, r5, #1
 800a50a:	2b06      	cmp	r3, #6
 800a50c:	d824      	bhi.n	800a558 <_scanf_float+0x2fc>
 800a50e:	2d02      	cmp	r5, #2
 800a510:	d836      	bhi.n	800a580 <_scanf_float+0x324>
 800a512:	9b01      	ldr	r3, [sp, #4]
 800a514:	429e      	cmp	r6, r3
 800a516:	f67f aee4 	bls.w	800a2e2 <_scanf_float+0x86>
 800a51a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a51e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a522:	463a      	mov	r2, r7
 800a524:	4640      	mov	r0, r8
 800a526:	4798      	blx	r3
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	6123      	str	r3, [r4, #16]
 800a52e:	e7f0      	b.n	800a512 <_scanf_float+0x2b6>
 800a530:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a534:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a538:	463a      	mov	r2, r7
 800a53a:	4640      	mov	r0, r8
 800a53c:	4798      	blx	r3
 800a53e:	6923      	ldr	r3, [r4, #16]
 800a540:	3b01      	subs	r3, #1
 800a542:	6123      	str	r3, [r4, #16]
 800a544:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a548:	fa5f fa8a 	uxtb.w	sl, sl
 800a54c:	f1ba 0f02 	cmp.w	sl, #2
 800a550:	d1ee      	bne.n	800a530 <_scanf_float+0x2d4>
 800a552:	3d03      	subs	r5, #3
 800a554:	b2ed      	uxtb	r5, r5
 800a556:	1b76      	subs	r6, r6, r5
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	05da      	lsls	r2, r3, #23
 800a55c:	d530      	bpl.n	800a5c0 <_scanf_float+0x364>
 800a55e:	055b      	lsls	r3, r3, #21
 800a560:	d511      	bpl.n	800a586 <_scanf_float+0x32a>
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	429e      	cmp	r6, r3
 800a566:	f67f aebc 	bls.w	800a2e2 <_scanf_float+0x86>
 800a56a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a56e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a572:	463a      	mov	r2, r7
 800a574:	4640      	mov	r0, r8
 800a576:	4798      	blx	r3
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	6123      	str	r3, [r4, #16]
 800a57e:	e7f0      	b.n	800a562 <_scanf_float+0x306>
 800a580:	46aa      	mov	sl, r5
 800a582:	46b3      	mov	fp, r6
 800a584:	e7de      	b.n	800a544 <_scanf_float+0x2e8>
 800a586:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a58a:	6923      	ldr	r3, [r4, #16]
 800a58c:	2965      	cmp	r1, #101	@ 0x65
 800a58e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a592:	f106 35ff 	add.w	r5, r6, #4294967295
 800a596:	6123      	str	r3, [r4, #16]
 800a598:	d00c      	beq.n	800a5b4 <_scanf_float+0x358>
 800a59a:	2945      	cmp	r1, #69	@ 0x45
 800a59c:	d00a      	beq.n	800a5b4 <_scanf_float+0x358>
 800a59e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5a2:	463a      	mov	r2, r7
 800a5a4:	4640      	mov	r0, r8
 800a5a6:	4798      	blx	r3
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	1eb5      	subs	r5, r6, #2
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5b8:	463a      	mov	r2, r7
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4798      	blx	r3
 800a5be:	462e      	mov	r6, r5
 800a5c0:	6822      	ldr	r2, [r4, #0]
 800a5c2:	f012 0210 	ands.w	r2, r2, #16
 800a5c6:	d001      	beq.n	800a5cc <_scanf_float+0x370>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e68b      	b.n	800a2e4 <_scanf_float+0x88>
 800a5cc:	7032      	strb	r2, [r6, #0]
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a5d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5d8:	d11c      	bne.n	800a614 <_scanf_float+0x3b8>
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	454b      	cmp	r3, r9
 800a5de:	eba3 0209 	sub.w	r2, r3, r9
 800a5e2:	d123      	bne.n	800a62c <_scanf_float+0x3d0>
 800a5e4:	9901      	ldr	r1, [sp, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	f002 fcb9 	bl	800cf60 <_strtod_r>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	6821      	ldr	r1, [r4, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f011 0f02 	tst.w	r1, #2
 800a5f8:	ec57 6b10 	vmov	r6, r7, d0
 800a5fc:	f103 0204 	add.w	r2, r3, #4
 800a600:	d01f      	beq.n	800a642 <_scanf_float+0x3e6>
 800a602:	9903      	ldr	r1, [sp, #12]
 800a604:	600a      	str	r2, [r1, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	e9c3 6700 	strd	r6, r7, [r3]
 800a60c:	68e3      	ldr	r3, [r4, #12]
 800a60e:	3301      	adds	r3, #1
 800a610:	60e3      	str	r3, [r4, #12]
 800a612:	e7d9      	b.n	800a5c8 <_scanf_float+0x36c>
 800a614:	9b04      	ldr	r3, [sp, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0e4      	beq.n	800a5e4 <_scanf_float+0x388>
 800a61a:	9905      	ldr	r1, [sp, #20]
 800a61c:	230a      	movs	r3, #10
 800a61e:	3101      	adds	r1, #1
 800a620:	4640      	mov	r0, r8
 800a622:	f7ff f9b7 	bl	8009994 <_strtol_r>
 800a626:	9b04      	ldr	r3, [sp, #16]
 800a628:	9e05      	ldr	r6, [sp, #20]
 800a62a:	1ac2      	subs	r2, r0, r3
 800a62c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a630:	429e      	cmp	r6, r3
 800a632:	bf28      	it	cs
 800a634:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a638:	4910      	ldr	r1, [pc, #64]	@ (800a67c <_scanf_float+0x420>)
 800a63a:	4630      	mov	r0, r6
 800a63c:	f000 f92a 	bl	800a894 <siprintf>
 800a640:	e7d0      	b.n	800a5e4 <_scanf_float+0x388>
 800a642:	f011 0f04 	tst.w	r1, #4
 800a646:	9903      	ldr	r1, [sp, #12]
 800a648:	600a      	str	r2, [r1, #0]
 800a64a:	d1dc      	bne.n	800a606 <_scanf_float+0x3aa>
 800a64c:	681d      	ldr	r5, [r3, #0]
 800a64e:	4632      	mov	r2, r6
 800a650:	463b      	mov	r3, r7
 800a652:	4630      	mov	r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	f7f6 faa1 	bl	8000b9c <__aeabi_dcmpun>
 800a65a:	b128      	cbz	r0, 800a668 <_scanf_float+0x40c>
 800a65c:	4808      	ldr	r0, [pc, #32]	@ (800a680 <_scanf_float+0x424>)
 800a65e:	f000 fa59 	bl	800ab14 <nanf>
 800a662:	ed85 0a00 	vstr	s0, [r5]
 800a666:	e7d1      	b.n	800a60c <_scanf_float+0x3b0>
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7f6 faf4 	bl	8000c58 <__aeabi_d2f>
 800a670:	6028      	str	r0, [r5, #0]
 800a672:	e7cb      	b.n	800a60c <_scanf_float+0x3b0>
 800a674:	f04f 0900 	mov.w	r9, #0
 800a678:	e629      	b.n	800a2ce <_scanf_float+0x72>
 800a67a:	bf00      	nop
 800a67c:	0800e2bd 	.word	0x0800e2bd
 800a680:	0800e36e 	.word	0x0800e36e

0800a684 <std>:
 800a684:	2300      	movs	r3, #0
 800a686:	b510      	push	{r4, lr}
 800a688:	4604      	mov	r4, r0
 800a68a:	e9c0 3300 	strd	r3, r3, [r0]
 800a68e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a692:	6083      	str	r3, [r0, #8]
 800a694:	8181      	strh	r1, [r0, #12]
 800a696:	6643      	str	r3, [r0, #100]	@ 0x64
 800a698:	81c2      	strh	r2, [r0, #14]
 800a69a:	6183      	str	r3, [r0, #24]
 800a69c:	4619      	mov	r1, r3
 800a69e:	2208      	movs	r2, #8
 800a6a0:	305c      	adds	r0, #92	@ 0x5c
 800a6a2:	f000 f95a 	bl	800a95a <memset>
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6dc <std+0x58>)
 800a6a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e0 <std+0x5c>)
 800a6ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <std+0x60>)
 800a6b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e8 <std+0x64>)
 800a6b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ec <std+0x68>)
 800a6b8:	6224      	str	r4, [r4, #32]
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d006      	beq.n	800a6cc <std+0x48>
 800a6be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6c2:	4294      	cmp	r4, r2
 800a6c4:	d002      	beq.n	800a6cc <std+0x48>
 800a6c6:	33d0      	adds	r3, #208	@ 0xd0
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d105      	bne.n	800a6d8 <std+0x54>
 800a6cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d4:	f000 ba1a 	b.w	800ab0c <__retarget_lock_init_recursive>
 800a6d8:	bd10      	pop	{r4, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800a8d5 	.word	0x0800a8d5
 800a6e0:	0800a8f7 	.word	0x0800a8f7
 800a6e4:	0800a92f 	.word	0x0800a92f
 800a6e8:	0800a953 	.word	0x0800a953
 800a6ec:	20000658 	.word	0x20000658

0800a6f0 <stdio_exit_handler>:
 800a6f0:	4a02      	ldr	r2, [pc, #8]	@ (800a6fc <stdio_exit_handler+0xc>)
 800a6f2:	4903      	ldr	r1, [pc, #12]	@ (800a700 <stdio_exit_handler+0x10>)
 800a6f4:	4803      	ldr	r0, [pc, #12]	@ (800a704 <stdio_exit_handler+0x14>)
 800a6f6:	f000 b869 	b.w	800a7cc <_fwalk_sglue>
 800a6fa:	bf00      	nop
 800a6fc:	200000c8 	.word	0x200000c8
 800a700:	0800d5a9 	.word	0x0800d5a9
 800a704:	200000d8 	.word	0x200000d8

0800a708 <cleanup_stdio>:
 800a708:	6841      	ldr	r1, [r0, #4]
 800a70a:	4b0c      	ldr	r3, [pc, #48]	@ (800a73c <cleanup_stdio+0x34>)
 800a70c:	4299      	cmp	r1, r3
 800a70e:	b510      	push	{r4, lr}
 800a710:	4604      	mov	r4, r0
 800a712:	d001      	beq.n	800a718 <cleanup_stdio+0x10>
 800a714:	f002 ff48 	bl	800d5a8 <_fflush_r>
 800a718:	68a1      	ldr	r1, [r4, #8]
 800a71a:	4b09      	ldr	r3, [pc, #36]	@ (800a740 <cleanup_stdio+0x38>)
 800a71c:	4299      	cmp	r1, r3
 800a71e:	d002      	beq.n	800a726 <cleanup_stdio+0x1e>
 800a720:	4620      	mov	r0, r4
 800a722:	f002 ff41 	bl	800d5a8 <_fflush_r>
 800a726:	68e1      	ldr	r1, [r4, #12]
 800a728:	4b06      	ldr	r3, [pc, #24]	@ (800a744 <cleanup_stdio+0x3c>)
 800a72a:	4299      	cmp	r1, r3
 800a72c:	d004      	beq.n	800a738 <cleanup_stdio+0x30>
 800a72e:	4620      	mov	r0, r4
 800a730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a734:	f002 bf38 	b.w	800d5a8 <_fflush_r>
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	bf00      	nop
 800a73c:	20000658 	.word	0x20000658
 800a740:	200006c0 	.word	0x200006c0
 800a744:	20000728 	.word	0x20000728

0800a748 <global_stdio_init.part.0>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	4b0b      	ldr	r3, [pc, #44]	@ (800a778 <global_stdio_init.part.0+0x30>)
 800a74c:	4c0b      	ldr	r4, [pc, #44]	@ (800a77c <global_stdio_init.part.0+0x34>)
 800a74e:	4a0c      	ldr	r2, [pc, #48]	@ (800a780 <global_stdio_init.part.0+0x38>)
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	4620      	mov	r0, r4
 800a754:	2200      	movs	r2, #0
 800a756:	2104      	movs	r1, #4
 800a758:	f7ff ff94 	bl	800a684 <std>
 800a75c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a760:	2201      	movs	r2, #1
 800a762:	2109      	movs	r1, #9
 800a764:	f7ff ff8e 	bl	800a684 <std>
 800a768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a76c:	2202      	movs	r2, #2
 800a76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a772:	2112      	movs	r1, #18
 800a774:	f7ff bf86 	b.w	800a684 <std>
 800a778:	20000790 	.word	0x20000790
 800a77c:	20000658 	.word	0x20000658
 800a780:	0800a6f1 	.word	0x0800a6f1

0800a784 <__sfp_lock_acquire>:
 800a784:	4801      	ldr	r0, [pc, #4]	@ (800a78c <__sfp_lock_acquire+0x8>)
 800a786:	f000 b9c2 	b.w	800ab0e <__retarget_lock_acquire_recursive>
 800a78a:	bf00      	nop
 800a78c:	20000799 	.word	0x20000799

0800a790 <__sfp_lock_release>:
 800a790:	4801      	ldr	r0, [pc, #4]	@ (800a798 <__sfp_lock_release+0x8>)
 800a792:	f000 b9bd 	b.w	800ab10 <__retarget_lock_release_recursive>
 800a796:	bf00      	nop
 800a798:	20000799 	.word	0x20000799

0800a79c <__sinit>:
 800a79c:	b510      	push	{r4, lr}
 800a79e:	4604      	mov	r4, r0
 800a7a0:	f7ff fff0 	bl	800a784 <__sfp_lock_acquire>
 800a7a4:	6a23      	ldr	r3, [r4, #32]
 800a7a6:	b11b      	cbz	r3, 800a7b0 <__sinit+0x14>
 800a7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7ac:	f7ff bff0 	b.w	800a790 <__sfp_lock_release>
 800a7b0:	4b04      	ldr	r3, [pc, #16]	@ (800a7c4 <__sinit+0x28>)
 800a7b2:	6223      	str	r3, [r4, #32]
 800a7b4:	4b04      	ldr	r3, [pc, #16]	@ (800a7c8 <__sinit+0x2c>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1f5      	bne.n	800a7a8 <__sinit+0xc>
 800a7bc:	f7ff ffc4 	bl	800a748 <global_stdio_init.part.0>
 800a7c0:	e7f2      	b.n	800a7a8 <__sinit+0xc>
 800a7c2:	bf00      	nop
 800a7c4:	0800a709 	.word	0x0800a709
 800a7c8:	20000790 	.word	0x20000790

0800a7cc <_fwalk_sglue>:
 800a7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	4688      	mov	r8, r1
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	2600      	movs	r6, #0
 800a7d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7dc:	f1b9 0901 	subs.w	r9, r9, #1
 800a7e0:	d505      	bpl.n	800a7ee <_fwalk_sglue+0x22>
 800a7e2:	6824      	ldr	r4, [r4, #0]
 800a7e4:	2c00      	cmp	r4, #0
 800a7e6:	d1f7      	bne.n	800a7d8 <_fwalk_sglue+0xc>
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d907      	bls.n	800a804 <_fwalk_sglue+0x38>
 800a7f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	d003      	beq.n	800a804 <_fwalk_sglue+0x38>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4638      	mov	r0, r7
 800a800:	47c0      	blx	r8
 800a802:	4306      	orrs	r6, r0
 800a804:	3568      	adds	r5, #104	@ 0x68
 800a806:	e7e9      	b.n	800a7dc <_fwalk_sglue+0x10>

0800a808 <iprintf>:
 800a808:	b40f      	push	{r0, r1, r2, r3}
 800a80a:	b507      	push	{r0, r1, r2, lr}
 800a80c:	4906      	ldr	r1, [pc, #24]	@ (800a828 <iprintf+0x20>)
 800a80e:	ab04      	add	r3, sp, #16
 800a810:	6808      	ldr	r0, [r1, #0]
 800a812:	f853 2b04 	ldr.w	r2, [r3], #4
 800a816:	6881      	ldr	r1, [r0, #8]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f002 fd29 	bl	800d270 <_vfiprintf_r>
 800a81e:	b003      	add	sp, #12
 800a820:	f85d eb04 	ldr.w	lr, [sp], #4
 800a824:	b004      	add	sp, #16
 800a826:	4770      	bx	lr
 800a828:	200000d4 	.word	0x200000d4

0800a82c <sniprintf>:
 800a82c:	b40c      	push	{r2, r3}
 800a82e:	b530      	push	{r4, r5, lr}
 800a830:	4b17      	ldr	r3, [pc, #92]	@ (800a890 <sniprintf+0x64>)
 800a832:	1e0c      	subs	r4, r1, #0
 800a834:	681d      	ldr	r5, [r3, #0]
 800a836:	b09d      	sub	sp, #116	@ 0x74
 800a838:	da08      	bge.n	800a84c <sniprintf+0x20>
 800a83a:	238b      	movs	r3, #139	@ 0x8b
 800a83c:	602b      	str	r3, [r5, #0]
 800a83e:	f04f 30ff 	mov.w	r0, #4294967295
 800a842:	b01d      	add	sp, #116	@ 0x74
 800a844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a848:	b002      	add	sp, #8
 800a84a:	4770      	bx	lr
 800a84c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a850:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a854:	bf14      	ite	ne
 800a856:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a85a:	4623      	moveq	r3, r4
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	9307      	str	r3, [sp, #28]
 800a860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a864:	9002      	str	r0, [sp, #8]
 800a866:	9006      	str	r0, [sp, #24]
 800a868:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a86c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a86e:	ab21      	add	r3, sp, #132	@ 0x84
 800a870:	a902      	add	r1, sp, #8
 800a872:	4628      	mov	r0, r5
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	f002 fbd5 	bl	800d024 <_svfiprintf_r>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	bfbc      	itt	lt
 800a87e:	238b      	movlt	r3, #139	@ 0x8b
 800a880:	602b      	strlt	r3, [r5, #0]
 800a882:	2c00      	cmp	r4, #0
 800a884:	d0dd      	beq.n	800a842 <sniprintf+0x16>
 800a886:	9b02      	ldr	r3, [sp, #8]
 800a888:	2200      	movs	r2, #0
 800a88a:	701a      	strb	r2, [r3, #0]
 800a88c:	e7d9      	b.n	800a842 <sniprintf+0x16>
 800a88e:	bf00      	nop
 800a890:	200000d4 	.word	0x200000d4

0800a894 <siprintf>:
 800a894:	b40e      	push	{r1, r2, r3}
 800a896:	b500      	push	{lr}
 800a898:	b09c      	sub	sp, #112	@ 0x70
 800a89a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a89c:	9002      	str	r0, [sp, #8]
 800a89e:	9006      	str	r0, [sp, #24]
 800a8a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a8a4:	4809      	ldr	r0, [pc, #36]	@ (800a8cc <siprintf+0x38>)
 800a8a6:	9107      	str	r1, [sp, #28]
 800a8a8:	9104      	str	r1, [sp, #16]
 800a8aa:	4909      	ldr	r1, [pc, #36]	@ (800a8d0 <siprintf+0x3c>)
 800a8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b0:	9105      	str	r1, [sp, #20]
 800a8b2:	6800      	ldr	r0, [r0, #0]
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	a902      	add	r1, sp, #8
 800a8b8:	f002 fbb4 	bl	800d024 <_svfiprintf_r>
 800a8bc:	9b02      	ldr	r3, [sp, #8]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	b01c      	add	sp, #112	@ 0x70
 800a8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c8:	b003      	add	sp, #12
 800a8ca:	4770      	bx	lr
 800a8cc:	200000d4 	.word	0x200000d4
 800a8d0:	ffff0208 	.word	0xffff0208

0800a8d4 <__sread>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8dc:	f000 f8c8 	bl	800aa70 <_read_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	bfab      	itete	ge
 800a8e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e8:	181b      	addge	r3, r3, r0
 800a8ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8ee:	bfac      	ite	ge
 800a8f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8f2:	81a3      	strhlt	r3, [r4, #12]
 800a8f4:	bd10      	pop	{r4, pc}

0800a8f6 <__swrite>:
 800a8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fa:	461f      	mov	r7, r3
 800a8fc:	898b      	ldrh	r3, [r1, #12]
 800a8fe:	05db      	lsls	r3, r3, #23
 800a900:	4605      	mov	r5, r0
 800a902:	460c      	mov	r4, r1
 800a904:	4616      	mov	r6, r2
 800a906:	d505      	bpl.n	800a914 <__swrite+0x1e>
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	2302      	movs	r3, #2
 800a90e:	2200      	movs	r2, #0
 800a910:	f000 f89c 	bl	800aa4c <_lseek_r>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a91a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	4632      	mov	r2, r6
 800a922:	463b      	mov	r3, r7
 800a924:	4628      	mov	r0, r5
 800a926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a92a:	f000 b8b3 	b.w	800aa94 <_write_r>

0800a92e <__sseek>:
 800a92e:	b510      	push	{r4, lr}
 800a930:	460c      	mov	r4, r1
 800a932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a936:	f000 f889 	bl	800aa4c <_lseek_r>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	bf15      	itete	ne
 800a940:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a94a:	81a3      	strheq	r3, [r4, #12]
 800a94c:	bf18      	it	ne
 800a94e:	81a3      	strhne	r3, [r4, #12]
 800a950:	bd10      	pop	{r4, pc}

0800a952 <__sclose>:
 800a952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a956:	f000 b869 	b.w	800aa2c <_close_r>

0800a95a <memset>:
 800a95a:	4402      	add	r2, r0
 800a95c:	4603      	mov	r3, r0
 800a95e:	4293      	cmp	r3, r2
 800a960:	d100      	bne.n	800a964 <memset+0xa>
 800a962:	4770      	bx	lr
 800a964:	f803 1b01 	strb.w	r1, [r3], #1
 800a968:	e7f9      	b.n	800a95e <memset+0x4>
	...

0800a96c <strtok>:
 800a96c:	4b16      	ldr	r3, [pc, #88]	@ (800a9c8 <strtok+0x5c>)
 800a96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a972:	681f      	ldr	r7, [r3, #0]
 800a974:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a976:	4605      	mov	r5, r0
 800a978:	460e      	mov	r6, r1
 800a97a:	b9ec      	cbnz	r4, 800a9b8 <strtok+0x4c>
 800a97c:	2050      	movs	r0, #80	@ 0x50
 800a97e:	f000 ff85 	bl	800b88c <malloc>
 800a982:	4602      	mov	r2, r0
 800a984:	6478      	str	r0, [r7, #68]	@ 0x44
 800a986:	b920      	cbnz	r0, 800a992 <strtok+0x26>
 800a988:	4b10      	ldr	r3, [pc, #64]	@ (800a9cc <strtok+0x60>)
 800a98a:	4811      	ldr	r0, [pc, #68]	@ (800a9d0 <strtok+0x64>)
 800a98c:	215b      	movs	r1, #91	@ 0x5b
 800a98e:	f000 f8c7 	bl	800ab20 <__assert_func>
 800a992:	e9c0 4400 	strd	r4, r4, [r0]
 800a996:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a99a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a99e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a9a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a9a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a9aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a9ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a9b2:	6184      	str	r4, [r0, #24]
 800a9b4:	7704      	strb	r4, [r0, #28]
 800a9b6:	6244      	str	r4, [r0, #36]	@ 0x24
 800a9b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4628      	mov	r0, r5
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c4:	f000 b806 	b.w	800a9d4 <__strtok_r>
 800a9c8:	200000d4 	.word	0x200000d4
 800a9cc:	0800e2c2 	.word	0x0800e2c2
 800a9d0:	0800e2d9 	.word	0x0800e2d9

0800a9d4 <__strtok_r>:
 800a9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	b908      	cbnz	r0, 800a9de <__strtok_r+0xa>
 800a9da:	6814      	ldr	r4, [r2, #0]
 800a9dc:	b144      	cbz	r4, 800a9f0 <__strtok_r+0x1c>
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a9e4:	460f      	mov	r7, r1
 800a9e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a9ea:	b91e      	cbnz	r6, 800a9f4 <__strtok_r+0x20>
 800a9ec:	b965      	cbnz	r5, 800aa08 <__strtok_r+0x34>
 800a9ee:	6015      	str	r5, [r2, #0]
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	e005      	b.n	800aa00 <__strtok_r+0x2c>
 800a9f4:	42b5      	cmp	r5, r6
 800a9f6:	d1f6      	bne.n	800a9e6 <__strtok_r+0x12>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1f0      	bne.n	800a9de <__strtok_r+0xa>
 800a9fc:	6014      	str	r4, [r2, #0]
 800a9fe:	7003      	strb	r3, [r0, #0]
 800aa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa02:	461c      	mov	r4, r3
 800aa04:	e00c      	b.n	800aa20 <__strtok_r+0x4c>
 800aa06:	b915      	cbnz	r5, 800aa0e <__strtok_r+0x3a>
 800aa08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aa12:	42ab      	cmp	r3, r5
 800aa14:	d1f7      	bne.n	800aa06 <__strtok_r+0x32>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0f3      	beq.n	800aa02 <__strtok_r+0x2e>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aa20:	6014      	str	r4, [r2, #0]
 800aa22:	e7ed      	b.n	800aa00 <__strtok_r+0x2c>

0800aa24 <_localeconv_r>:
 800aa24:	4800      	ldr	r0, [pc, #0]	@ (800aa28 <_localeconv_r+0x4>)
 800aa26:	4770      	bx	lr
 800aa28:	20000214 	.word	0x20000214

0800aa2c <_close_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d06      	ldr	r5, [pc, #24]	@ (800aa48 <_close_r+0x1c>)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7f6 ff4e 	bl	80018d8 <_close>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_close_r+0x1a>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_close_r+0x1a>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	20000794 	.word	0x20000794

0800aa4c <_lseek_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d07      	ldr	r5, [pc, #28]	@ (800aa6c <_lseek_r+0x20>)
 800aa50:	4604      	mov	r4, r0
 800aa52:	4608      	mov	r0, r1
 800aa54:	4611      	mov	r1, r2
 800aa56:	2200      	movs	r2, #0
 800aa58:	602a      	str	r2, [r5, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f7f6 ff63 	bl	8001926 <_lseek>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_lseek_r+0x1e>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_lseek_r+0x1e>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20000794 	.word	0x20000794

0800aa70 <_read_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	@ (800aa90 <_read_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f6 fef1 	bl	8001866 <_read>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_read_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_read_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000794 	.word	0x20000794

0800aa94 <_write_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	@ (800aab4 <_write_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f6 fefc 	bl	80018a0 <_write>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_write_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_write_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20000794 	.word	0x20000794

0800aab8 <__errno>:
 800aab8:	4b01      	ldr	r3, [pc, #4]	@ (800aac0 <__errno+0x8>)
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	200000d4 	.word	0x200000d4

0800aac4 <__libc_init_array>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	4d0d      	ldr	r5, [pc, #52]	@ (800aafc <__libc_init_array+0x38>)
 800aac8:	4c0d      	ldr	r4, [pc, #52]	@ (800ab00 <__libc_init_array+0x3c>)
 800aaca:	1b64      	subs	r4, r4, r5
 800aacc:	10a4      	asrs	r4, r4, #2
 800aace:	2600      	movs	r6, #0
 800aad0:	42a6      	cmp	r6, r4
 800aad2:	d109      	bne.n	800aae8 <__libc_init_array+0x24>
 800aad4:	4d0b      	ldr	r5, [pc, #44]	@ (800ab04 <__libc_init_array+0x40>)
 800aad6:	4c0c      	ldr	r4, [pc, #48]	@ (800ab08 <__libc_init_array+0x44>)
 800aad8:	f003 faf6 	bl	800e0c8 <_init>
 800aadc:	1b64      	subs	r4, r4, r5
 800aade:	10a4      	asrs	r4, r4, #2
 800aae0:	2600      	movs	r6, #0
 800aae2:	42a6      	cmp	r6, r4
 800aae4:	d105      	bne.n	800aaf2 <__libc_init_array+0x2e>
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaec:	4798      	blx	r3
 800aaee:	3601      	adds	r6, #1
 800aaf0:	e7ee      	b.n	800aad0 <__libc_init_array+0xc>
 800aaf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf6:	4798      	blx	r3
 800aaf8:	3601      	adds	r6, #1
 800aafa:	e7f2      	b.n	800aae2 <__libc_init_array+0x1e>
 800aafc:	0800e61c 	.word	0x0800e61c
 800ab00:	0800e61c 	.word	0x0800e61c
 800ab04:	0800e61c 	.word	0x0800e61c
 800ab08:	0800e620 	.word	0x0800e620

0800ab0c <__retarget_lock_init_recursive>:
 800ab0c:	4770      	bx	lr

0800ab0e <__retarget_lock_acquire_recursive>:
 800ab0e:	4770      	bx	lr

0800ab10 <__retarget_lock_release_recursive>:
 800ab10:	4770      	bx	lr
	...

0800ab14 <nanf>:
 800ab14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab1c <nanf+0x8>
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	7fc00000 	.word	0x7fc00000

0800ab20 <__assert_func>:
 800ab20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab22:	4614      	mov	r4, r2
 800ab24:	461a      	mov	r2, r3
 800ab26:	4b09      	ldr	r3, [pc, #36]	@ (800ab4c <__assert_func+0x2c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	68d8      	ldr	r0, [r3, #12]
 800ab2e:	b954      	cbnz	r4, 800ab46 <__assert_func+0x26>
 800ab30:	4b07      	ldr	r3, [pc, #28]	@ (800ab50 <__assert_func+0x30>)
 800ab32:	461c      	mov	r4, r3
 800ab34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab38:	9100      	str	r1, [sp, #0]
 800ab3a:	462b      	mov	r3, r5
 800ab3c:	4905      	ldr	r1, [pc, #20]	@ (800ab54 <__assert_func+0x34>)
 800ab3e:	f002 fd5b 	bl	800d5f8 <fiprintf>
 800ab42:	f002 fe51 	bl	800d7e8 <abort>
 800ab46:	4b04      	ldr	r3, [pc, #16]	@ (800ab58 <__assert_func+0x38>)
 800ab48:	e7f4      	b.n	800ab34 <__assert_func+0x14>
 800ab4a:	bf00      	nop
 800ab4c:	200000d4 	.word	0x200000d4
 800ab50:	0800e36e 	.word	0x0800e36e
 800ab54:	0800e340 	.word	0x0800e340
 800ab58:	0800e333 	.word	0x0800e333

0800ab5c <quorem>:
 800ab5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	6903      	ldr	r3, [r0, #16]
 800ab62:	690c      	ldr	r4, [r1, #16]
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	4607      	mov	r7, r0
 800ab68:	db7e      	blt.n	800ac68 <quorem+0x10c>
 800ab6a:	3c01      	subs	r4, #1
 800ab6c:	f101 0814 	add.w	r8, r1, #20
 800ab70:	00a3      	lsls	r3, r4, #2
 800ab72:	f100 0514 	add.w	r5, r0, #20
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab86:	3301      	adds	r3, #1
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab8e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab92:	d32e      	bcc.n	800abf2 <quorem+0x96>
 800ab94:	f04f 0a00 	mov.w	sl, #0
 800ab98:	46c4      	mov	ip, r8
 800ab9a:	46ae      	mov	lr, r5
 800ab9c:	46d3      	mov	fp, sl
 800ab9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aba2:	b298      	uxth	r0, r3
 800aba4:	fb06 a000 	mla	r0, r6, r0, sl
 800aba8:	0c02      	lsrs	r2, r0, #16
 800abaa:	0c1b      	lsrs	r3, r3, #16
 800abac:	fb06 2303 	mla	r3, r6, r3, r2
 800abb0:	f8de 2000 	ldr.w	r2, [lr]
 800abb4:	b280      	uxth	r0, r0
 800abb6:	b292      	uxth	r2, r2
 800abb8:	1a12      	subs	r2, r2, r0
 800abba:	445a      	add	r2, fp
 800abbc:	f8de 0000 	ldr.w	r0, [lr]
 800abc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abce:	b292      	uxth	r2, r2
 800abd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800abd4:	45e1      	cmp	r9, ip
 800abd6:	f84e 2b04 	str.w	r2, [lr], #4
 800abda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800abde:	d2de      	bcs.n	800ab9e <quorem+0x42>
 800abe0:	9b00      	ldr	r3, [sp, #0]
 800abe2:	58eb      	ldr	r3, [r5, r3]
 800abe4:	b92b      	cbnz	r3, 800abf2 <quorem+0x96>
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	3b04      	subs	r3, #4
 800abea:	429d      	cmp	r5, r3
 800abec:	461a      	mov	r2, r3
 800abee:	d32f      	bcc.n	800ac50 <quorem+0xf4>
 800abf0:	613c      	str	r4, [r7, #16]
 800abf2:	4638      	mov	r0, r7
 800abf4:	f001 f9c4 	bl	800bf80 <__mcmp>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	db25      	blt.n	800ac48 <quorem+0xec>
 800abfc:	4629      	mov	r1, r5
 800abfe:	2000      	movs	r0, #0
 800ac00:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac04:	f8d1 c000 	ldr.w	ip, [r1]
 800ac08:	fa1f fe82 	uxth.w	lr, r2
 800ac0c:	fa1f f38c 	uxth.w	r3, ip
 800ac10:	eba3 030e 	sub.w	r3, r3, lr
 800ac14:	4403      	add	r3, r0
 800ac16:	0c12      	lsrs	r2, r2, #16
 800ac18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac26:	45c1      	cmp	r9, r8
 800ac28:	f841 3b04 	str.w	r3, [r1], #4
 800ac2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac30:	d2e6      	bcs.n	800ac00 <quorem+0xa4>
 800ac32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac3a:	b922      	cbnz	r2, 800ac46 <quorem+0xea>
 800ac3c:	3b04      	subs	r3, #4
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	d30b      	bcc.n	800ac5c <quorem+0x100>
 800ac44:	613c      	str	r4, [r7, #16]
 800ac46:	3601      	adds	r6, #1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	b003      	add	sp, #12
 800ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac50:	6812      	ldr	r2, [r2, #0]
 800ac52:	3b04      	subs	r3, #4
 800ac54:	2a00      	cmp	r2, #0
 800ac56:	d1cb      	bne.n	800abf0 <quorem+0x94>
 800ac58:	3c01      	subs	r4, #1
 800ac5a:	e7c6      	b.n	800abea <quorem+0x8e>
 800ac5c:	6812      	ldr	r2, [r2, #0]
 800ac5e:	3b04      	subs	r3, #4
 800ac60:	2a00      	cmp	r2, #0
 800ac62:	d1ef      	bne.n	800ac44 <quorem+0xe8>
 800ac64:	3c01      	subs	r4, #1
 800ac66:	e7ea      	b.n	800ac3e <quorem+0xe2>
 800ac68:	2000      	movs	r0, #0
 800ac6a:	e7ee      	b.n	800ac4a <quorem+0xee>
 800ac6c:	0000      	movs	r0, r0
	...

0800ac70 <_dtoa_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	69c7      	ldr	r7, [r0, #28]
 800ac76:	b099      	sub	sp, #100	@ 0x64
 800ac78:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac7c:	ec55 4b10 	vmov	r4, r5, d0
 800ac80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ac82:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac84:	4683      	mov	fp, r0
 800ac86:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac8a:	b97f      	cbnz	r7, 800acac <_dtoa_r+0x3c>
 800ac8c:	2010      	movs	r0, #16
 800ac8e:	f000 fdfd 	bl	800b88c <malloc>
 800ac92:	4602      	mov	r2, r0
 800ac94:	f8cb 001c 	str.w	r0, [fp, #28]
 800ac98:	b920      	cbnz	r0, 800aca4 <_dtoa_r+0x34>
 800ac9a:	4ba7      	ldr	r3, [pc, #668]	@ (800af38 <_dtoa_r+0x2c8>)
 800ac9c:	21ef      	movs	r1, #239	@ 0xef
 800ac9e:	48a7      	ldr	r0, [pc, #668]	@ (800af3c <_dtoa_r+0x2cc>)
 800aca0:	f7ff ff3e 	bl	800ab20 <__assert_func>
 800aca4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aca8:	6007      	str	r7, [r0, #0]
 800acaa:	60c7      	str	r7, [r0, #12]
 800acac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	b159      	cbz	r1, 800accc <_dtoa_r+0x5c>
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	604a      	str	r2, [r1, #4]
 800acb8:	2301      	movs	r3, #1
 800acba:	4093      	lsls	r3, r2
 800acbc:	608b      	str	r3, [r1, #8]
 800acbe:	4658      	mov	r0, fp
 800acc0:	f000 feda 	bl	800ba78 <_Bfree>
 800acc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	1e2b      	subs	r3, r5, #0
 800acce:	bfb9      	ittee	lt
 800acd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800acd4:	9303      	strlt	r3, [sp, #12]
 800acd6:	2300      	movge	r3, #0
 800acd8:	6033      	strge	r3, [r6, #0]
 800acda:	9f03      	ldr	r7, [sp, #12]
 800acdc:	4b98      	ldr	r3, [pc, #608]	@ (800af40 <_dtoa_r+0x2d0>)
 800acde:	bfbc      	itt	lt
 800ace0:	2201      	movlt	r2, #1
 800ace2:	6032      	strlt	r2, [r6, #0]
 800ace4:	43bb      	bics	r3, r7
 800ace6:	d112      	bne.n	800ad0e <_dtoa_r+0x9e>
 800ace8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800acea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acf4:	4323      	orrs	r3, r4
 800acf6:	f000 854d 	beq.w	800b794 <_dtoa_r+0xb24>
 800acfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800af54 <_dtoa_r+0x2e4>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 854f 	beq.w	800b7a4 <_dtoa_r+0xb34>
 800ad06:	f10a 0303 	add.w	r3, sl, #3
 800ad0a:	f000 bd49 	b.w	800b7a0 <_dtoa_r+0xb30>
 800ad0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad12:	2200      	movs	r2, #0
 800ad14:	ec51 0b17 	vmov	r0, r1, d7
 800ad18:	2300      	movs	r3, #0
 800ad1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad1e:	f7f5 ff0b 	bl	8000b38 <__aeabi_dcmpeq>
 800ad22:	4680      	mov	r8, r0
 800ad24:	b158      	cbz	r0, 800ad3e <_dtoa_r+0xce>
 800ad26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad28:	2301      	movs	r3, #1
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad2e:	b113      	cbz	r3, 800ad36 <_dtoa_r+0xc6>
 800ad30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad32:	4b84      	ldr	r3, [pc, #528]	@ (800af44 <_dtoa_r+0x2d4>)
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800af58 <_dtoa_r+0x2e8>
 800ad3a:	f000 bd33 	b.w	800b7a4 <_dtoa_r+0xb34>
 800ad3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad42:	aa16      	add	r2, sp, #88	@ 0x58
 800ad44:	a917      	add	r1, sp, #92	@ 0x5c
 800ad46:	4658      	mov	r0, fp
 800ad48:	f001 fa3a 	bl	800c1c0 <__d2b>
 800ad4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad50:	4681      	mov	r9, r0
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	d077      	beq.n	800ae46 <_dtoa_r+0x1d6>
 800ad56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ad5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ad70:	4619      	mov	r1, r3
 800ad72:	2200      	movs	r2, #0
 800ad74:	4b74      	ldr	r3, [pc, #464]	@ (800af48 <_dtoa_r+0x2d8>)
 800ad76:	f7f5 fabf 	bl	80002f8 <__aeabi_dsub>
 800ad7a:	a369      	add	r3, pc, #420	@ (adr r3, 800af20 <_dtoa_r+0x2b0>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f7f5 fc72 	bl	8000668 <__aeabi_dmul>
 800ad84:	a368      	add	r3, pc, #416	@ (adr r3, 800af28 <_dtoa_r+0x2b8>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 fab7 	bl	80002fc <__adddf3>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4630      	mov	r0, r6
 800ad92:	460d      	mov	r5, r1
 800ad94:	f7f5 fbfe 	bl	8000594 <__aeabi_i2d>
 800ad98:	a365      	add	r3, pc, #404	@ (adr r3, 800af30 <_dtoa_r+0x2c0>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fc63 	bl	8000668 <__aeabi_dmul>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 faa7 	bl	80002fc <__adddf3>
 800adae:	4604      	mov	r4, r0
 800adb0:	460d      	mov	r5, r1
 800adb2:	f7f5 ff09 	bl	8000bc8 <__aeabi_d2iz>
 800adb6:	2200      	movs	r2, #0
 800adb8:	4607      	mov	r7, r0
 800adba:	2300      	movs	r3, #0
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 fec4 	bl	8000b4c <__aeabi_dcmplt>
 800adc4:	b140      	cbz	r0, 800add8 <_dtoa_r+0x168>
 800adc6:	4638      	mov	r0, r7
 800adc8:	f7f5 fbe4 	bl	8000594 <__aeabi_i2d>
 800adcc:	4622      	mov	r2, r4
 800adce:	462b      	mov	r3, r5
 800add0:	f7f5 feb2 	bl	8000b38 <__aeabi_dcmpeq>
 800add4:	b900      	cbnz	r0, 800add8 <_dtoa_r+0x168>
 800add6:	3f01      	subs	r7, #1
 800add8:	2f16      	cmp	r7, #22
 800adda:	d851      	bhi.n	800ae80 <_dtoa_r+0x210>
 800addc:	4b5b      	ldr	r3, [pc, #364]	@ (800af4c <_dtoa_r+0x2dc>)
 800adde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adea:	f7f5 feaf 	bl	8000b4c <__aeabi_dcmplt>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d048      	beq.n	800ae84 <_dtoa_r+0x214>
 800adf2:	3f01      	subs	r7, #1
 800adf4:	2300      	movs	r3, #0
 800adf6:	9312      	str	r3, [sp, #72]	@ 0x48
 800adf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800adfa:	1b9b      	subs	r3, r3, r6
 800adfc:	1e5a      	subs	r2, r3, #1
 800adfe:	bf44      	itt	mi
 800ae00:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae04:	2300      	movmi	r3, #0
 800ae06:	9208      	str	r2, [sp, #32]
 800ae08:	bf54      	ite	pl
 800ae0a:	f04f 0800 	movpl.w	r8, #0
 800ae0e:	9308      	strmi	r3, [sp, #32]
 800ae10:	2f00      	cmp	r7, #0
 800ae12:	db39      	blt.n	800ae88 <_dtoa_r+0x218>
 800ae14:	9b08      	ldr	r3, [sp, #32]
 800ae16:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae18:	443b      	add	r3, r7
 800ae1a:	9308      	str	r3, [sp, #32]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae22:	2b09      	cmp	r3, #9
 800ae24:	d864      	bhi.n	800aef0 <_dtoa_r+0x280>
 800ae26:	2b05      	cmp	r3, #5
 800ae28:	bfc4      	itt	gt
 800ae2a:	3b04      	subgt	r3, #4
 800ae2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae30:	f1a3 0302 	sub.w	r3, r3, #2
 800ae34:	bfcc      	ite	gt
 800ae36:	2400      	movgt	r4, #0
 800ae38:	2401      	movle	r4, #1
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d863      	bhi.n	800af06 <_dtoa_r+0x296>
 800ae3e:	e8df f003 	tbb	[pc, r3]
 800ae42:	372a      	.short	0x372a
 800ae44:	5535      	.short	0x5535
 800ae46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ae4a:	441e      	add	r6, r3
 800ae4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae50:	2b20      	cmp	r3, #32
 800ae52:	bfc1      	itttt	gt
 800ae54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae58:	409f      	lslgt	r7, r3
 800ae5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae62:	bfd6      	itet	le
 800ae64:	f1c3 0320 	rsble	r3, r3, #32
 800ae68:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae6c:	fa04 f003 	lslle.w	r0, r4, r3
 800ae70:	f7f5 fb80 	bl	8000574 <__aeabi_ui2d>
 800ae74:	2201      	movs	r2, #1
 800ae76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ae7a:	3e01      	subs	r6, #1
 800ae7c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ae7e:	e777      	b.n	800ad70 <_dtoa_r+0x100>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e7b8      	b.n	800adf6 <_dtoa_r+0x186>
 800ae84:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae86:	e7b7      	b.n	800adf8 <_dtoa_r+0x188>
 800ae88:	427b      	negs	r3, r7
 800ae8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	eba8 0807 	sub.w	r8, r8, r7
 800ae92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae94:	e7c4      	b.n	800ae20 <_dtoa_r+0x1b0>
 800ae96:	2300      	movs	r3, #0
 800ae98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dc35      	bgt.n	800af0c <_dtoa_r+0x29c>
 800aea0:	2301      	movs	r3, #1
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	9307      	str	r3, [sp, #28]
 800aea6:	461a      	mov	r2, r3
 800aea8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aeaa:	e00b      	b.n	800aec4 <_dtoa_r+0x254>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e7f3      	b.n	800ae98 <_dtoa_r+0x228>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeb6:	18fb      	adds	r3, r7, r3
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	3301      	adds	r3, #1
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	9307      	str	r3, [sp, #28]
 800aec0:	bfb8      	it	lt
 800aec2:	2301      	movlt	r3, #1
 800aec4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aec8:	2100      	movs	r1, #0
 800aeca:	2204      	movs	r2, #4
 800aecc:	f102 0514 	add.w	r5, r2, #20
 800aed0:	429d      	cmp	r5, r3
 800aed2:	d91f      	bls.n	800af14 <_dtoa_r+0x2a4>
 800aed4:	6041      	str	r1, [r0, #4]
 800aed6:	4658      	mov	r0, fp
 800aed8:	f000 fd8e 	bl	800b9f8 <_Balloc>
 800aedc:	4682      	mov	sl, r0
 800aede:	2800      	cmp	r0, #0
 800aee0:	d13c      	bne.n	800af5c <_dtoa_r+0x2ec>
 800aee2:	4b1b      	ldr	r3, [pc, #108]	@ (800af50 <_dtoa_r+0x2e0>)
 800aee4:	4602      	mov	r2, r0
 800aee6:	f240 11af 	movw	r1, #431	@ 0x1af
 800aeea:	e6d8      	b.n	800ac9e <_dtoa_r+0x2e>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e7e0      	b.n	800aeb2 <_dtoa_r+0x242>
 800aef0:	2401      	movs	r4, #1
 800aef2:	2300      	movs	r3, #0
 800aef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	9307      	str	r3, [sp, #28]
 800af00:	2200      	movs	r2, #0
 800af02:	2312      	movs	r3, #18
 800af04:	e7d0      	b.n	800aea8 <_dtoa_r+0x238>
 800af06:	2301      	movs	r3, #1
 800af08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af0a:	e7f5      	b.n	800aef8 <_dtoa_r+0x288>
 800af0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	9307      	str	r3, [sp, #28]
 800af12:	e7d7      	b.n	800aec4 <_dtoa_r+0x254>
 800af14:	3101      	adds	r1, #1
 800af16:	0052      	lsls	r2, r2, #1
 800af18:	e7d8      	b.n	800aecc <_dtoa_r+0x25c>
 800af1a:	bf00      	nop
 800af1c:	f3af 8000 	nop.w
 800af20:	636f4361 	.word	0x636f4361
 800af24:	3fd287a7 	.word	0x3fd287a7
 800af28:	8b60c8b3 	.word	0x8b60c8b3
 800af2c:	3fc68a28 	.word	0x3fc68a28
 800af30:	509f79fb 	.word	0x509f79fb
 800af34:	3fd34413 	.word	0x3fd34413
 800af38:	0800e2c2 	.word	0x0800e2c2
 800af3c:	0800e37c 	.word	0x0800e37c
 800af40:	7ff00000 	.word	0x7ff00000
 800af44:	0800e29a 	.word	0x0800e29a
 800af48:	3ff80000 	.word	0x3ff80000
 800af4c:	0800e478 	.word	0x0800e478
 800af50:	0800e3d4 	.word	0x0800e3d4
 800af54:	0800e378 	.word	0x0800e378
 800af58:	0800e299 	.word	0x0800e299
 800af5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af60:	6018      	str	r0, [r3, #0]
 800af62:	9b07      	ldr	r3, [sp, #28]
 800af64:	2b0e      	cmp	r3, #14
 800af66:	f200 80a4 	bhi.w	800b0b2 <_dtoa_r+0x442>
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	f000 80a1 	beq.w	800b0b2 <_dtoa_r+0x442>
 800af70:	2f00      	cmp	r7, #0
 800af72:	dd33      	ble.n	800afdc <_dtoa_r+0x36c>
 800af74:	4bad      	ldr	r3, [pc, #692]	@ (800b22c <_dtoa_r+0x5bc>)
 800af76:	f007 020f 	and.w	r2, r7, #15
 800af7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af7e:	ed93 7b00 	vldr	d7, [r3]
 800af82:	05f8      	lsls	r0, r7, #23
 800af84:	ed8d 7b04 	vstr	d7, [sp, #16]
 800af88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800af8c:	d516      	bpl.n	800afbc <_dtoa_r+0x34c>
 800af8e:	4ba8      	ldr	r3, [pc, #672]	@ (800b230 <_dtoa_r+0x5c0>)
 800af90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af98:	f7f5 fc90 	bl	80008bc <__aeabi_ddiv>
 800af9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afa0:	f004 040f 	and.w	r4, r4, #15
 800afa4:	2603      	movs	r6, #3
 800afa6:	4da2      	ldr	r5, [pc, #648]	@ (800b230 <_dtoa_r+0x5c0>)
 800afa8:	b954      	cbnz	r4, 800afc0 <_dtoa_r+0x350>
 800afaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb2:	f7f5 fc83 	bl	80008bc <__aeabi_ddiv>
 800afb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afba:	e028      	b.n	800b00e <_dtoa_r+0x39e>
 800afbc:	2602      	movs	r6, #2
 800afbe:	e7f2      	b.n	800afa6 <_dtoa_r+0x336>
 800afc0:	07e1      	lsls	r1, r4, #31
 800afc2:	d508      	bpl.n	800afd6 <_dtoa_r+0x366>
 800afc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afcc:	f7f5 fb4c 	bl	8000668 <__aeabi_dmul>
 800afd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afd4:	3601      	adds	r6, #1
 800afd6:	1064      	asrs	r4, r4, #1
 800afd8:	3508      	adds	r5, #8
 800afda:	e7e5      	b.n	800afa8 <_dtoa_r+0x338>
 800afdc:	f000 80d2 	beq.w	800b184 <_dtoa_r+0x514>
 800afe0:	427c      	negs	r4, r7
 800afe2:	4b92      	ldr	r3, [pc, #584]	@ (800b22c <_dtoa_r+0x5bc>)
 800afe4:	4d92      	ldr	r5, [pc, #584]	@ (800b230 <_dtoa_r+0x5c0>)
 800afe6:	f004 020f 	and.w	r2, r4, #15
 800afea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aff6:	f7f5 fb37 	bl	8000668 <__aeabi_dmul>
 800affa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800affe:	1124      	asrs	r4, r4, #4
 800b000:	2300      	movs	r3, #0
 800b002:	2602      	movs	r6, #2
 800b004:	2c00      	cmp	r4, #0
 800b006:	f040 80b2 	bne.w	800b16e <_dtoa_r+0x4fe>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1d3      	bne.n	800afb6 <_dtoa_r+0x346>
 800b00e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b010:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 80b7 	beq.w	800b188 <_dtoa_r+0x518>
 800b01a:	4b86      	ldr	r3, [pc, #536]	@ (800b234 <_dtoa_r+0x5c4>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 fd93 	bl	8000b4c <__aeabi_dcmplt>
 800b026:	2800      	cmp	r0, #0
 800b028:	f000 80ae 	beq.w	800b188 <_dtoa_r+0x518>
 800b02c:	9b07      	ldr	r3, [sp, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f000 80aa 	beq.w	800b188 <_dtoa_r+0x518>
 800b034:	9b00      	ldr	r3, [sp, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	dd37      	ble.n	800b0aa <_dtoa_r+0x43a>
 800b03a:	1e7b      	subs	r3, r7, #1
 800b03c:	9304      	str	r3, [sp, #16]
 800b03e:	4620      	mov	r0, r4
 800b040:	4b7d      	ldr	r3, [pc, #500]	@ (800b238 <_dtoa_r+0x5c8>)
 800b042:	2200      	movs	r2, #0
 800b044:	4629      	mov	r1, r5
 800b046:	f7f5 fb0f 	bl	8000668 <__aeabi_dmul>
 800b04a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b04e:	9c00      	ldr	r4, [sp, #0]
 800b050:	3601      	adds	r6, #1
 800b052:	4630      	mov	r0, r6
 800b054:	f7f5 fa9e 	bl	8000594 <__aeabi_i2d>
 800b058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b05c:	f7f5 fb04 	bl	8000668 <__aeabi_dmul>
 800b060:	4b76      	ldr	r3, [pc, #472]	@ (800b23c <_dtoa_r+0x5cc>)
 800b062:	2200      	movs	r2, #0
 800b064:	f7f5 f94a 	bl	80002fc <__adddf3>
 800b068:	4605      	mov	r5, r0
 800b06a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b06e:	2c00      	cmp	r4, #0
 800b070:	f040 808d 	bne.w	800b18e <_dtoa_r+0x51e>
 800b074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b078:	4b71      	ldr	r3, [pc, #452]	@ (800b240 <_dtoa_r+0x5d0>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	f7f5 f93c 	bl	80002f8 <__aeabi_dsub>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b088:	462a      	mov	r2, r5
 800b08a:	4633      	mov	r3, r6
 800b08c:	f7f5 fd7c 	bl	8000b88 <__aeabi_dcmpgt>
 800b090:	2800      	cmp	r0, #0
 800b092:	f040 828b 	bne.w	800b5ac <_dtoa_r+0x93c>
 800b096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b09a:	462a      	mov	r2, r5
 800b09c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0a0:	f7f5 fd54 	bl	8000b4c <__aeabi_dcmplt>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f040 8128 	bne.w	800b2fa <_dtoa_r+0x68a>
 800b0aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b0ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b0b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f2c0 815a 	blt.w	800b36e <_dtoa_r+0x6fe>
 800b0ba:	2f0e      	cmp	r7, #14
 800b0bc:	f300 8157 	bgt.w	800b36e <_dtoa_r+0x6fe>
 800b0c0:	4b5a      	ldr	r3, [pc, #360]	@ (800b22c <_dtoa_r+0x5bc>)
 800b0c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0c6:	ed93 7b00 	vldr	d7, [r3]
 800b0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	ed8d 7b00 	vstr	d7, [sp]
 800b0d2:	da03      	bge.n	800b0dc <_dtoa_r+0x46c>
 800b0d4:	9b07      	ldr	r3, [sp, #28]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f340 8101 	ble.w	800b2de <_dtoa_r+0x66e>
 800b0dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0e0:	4656      	mov	r6, sl
 800b0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 fbe7 	bl	80008bc <__aeabi_ddiv>
 800b0ee:	f7f5 fd6b 	bl	8000bc8 <__aeabi_d2iz>
 800b0f2:	4680      	mov	r8, r0
 800b0f4:	f7f5 fa4e 	bl	8000594 <__aeabi_i2d>
 800b0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0fc:	f7f5 fab4 	bl	8000668 <__aeabi_dmul>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4620      	mov	r0, r4
 800b106:	4629      	mov	r1, r5
 800b108:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b10c:	f7f5 f8f4 	bl	80002f8 <__aeabi_dsub>
 800b110:	f806 4b01 	strb.w	r4, [r6], #1
 800b114:	9d07      	ldr	r5, [sp, #28]
 800b116:	eba6 040a 	sub.w	r4, r6, sl
 800b11a:	42a5      	cmp	r5, r4
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	f040 8117 	bne.w	800b352 <_dtoa_r+0x6e2>
 800b124:	f7f5 f8ea 	bl	80002fc <__adddf3>
 800b128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b12c:	4604      	mov	r4, r0
 800b12e:	460d      	mov	r5, r1
 800b130:	f7f5 fd2a 	bl	8000b88 <__aeabi_dcmpgt>
 800b134:	2800      	cmp	r0, #0
 800b136:	f040 80f9 	bne.w	800b32c <_dtoa_r+0x6bc>
 800b13a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13e:	4620      	mov	r0, r4
 800b140:	4629      	mov	r1, r5
 800b142:	f7f5 fcf9 	bl	8000b38 <__aeabi_dcmpeq>
 800b146:	b118      	cbz	r0, 800b150 <_dtoa_r+0x4e0>
 800b148:	f018 0f01 	tst.w	r8, #1
 800b14c:	f040 80ee 	bne.w	800b32c <_dtoa_r+0x6bc>
 800b150:	4649      	mov	r1, r9
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fc90 	bl	800ba78 <_Bfree>
 800b158:	2300      	movs	r3, #0
 800b15a:	7033      	strb	r3, [r6, #0]
 800b15c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b15e:	3701      	adds	r7, #1
 800b160:	601f      	str	r7, [r3, #0]
 800b162:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 831d 	beq.w	800b7a4 <_dtoa_r+0xb34>
 800b16a:	601e      	str	r6, [r3, #0]
 800b16c:	e31a      	b.n	800b7a4 <_dtoa_r+0xb34>
 800b16e:	07e2      	lsls	r2, r4, #31
 800b170:	d505      	bpl.n	800b17e <_dtoa_r+0x50e>
 800b172:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b176:	f7f5 fa77 	bl	8000668 <__aeabi_dmul>
 800b17a:	3601      	adds	r6, #1
 800b17c:	2301      	movs	r3, #1
 800b17e:	1064      	asrs	r4, r4, #1
 800b180:	3508      	adds	r5, #8
 800b182:	e73f      	b.n	800b004 <_dtoa_r+0x394>
 800b184:	2602      	movs	r6, #2
 800b186:	e742      	b.n	800b00e <_dtoa_r+0x39e>
 800b188:	9c07      	ldr	r4, [sp, #28]
 800b18a:	9704      	str	r7, [sp, #16]
 800b18c:	e761      	b.n	800b052 <_dtoa_r+0x3e2>
 800b18e:	4b27      	ldr	r3, [pc, #156]	@ (800b22c <_dtoa_r+0x5bc>)
 800b190:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b196:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b19a:	4454      	add	r4, sl
 800b19c:	2900      	cmp	r1, #0
 800b19e:	d053      	beq.n	800b248 <_dtoa_r+0x5d8>
 800b1a0:	4928      	ldr	r1, [pc, #160]	@ (800b244 <_dtoa_r+0x5d4>)
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	f7f5 fb8a 	bl	80008bc <__aeabi_ddiv>
 800b1a8:	4633      	mov	r3, r6
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	f7f5 f8a4 	bl	80002f8 <__aeabi_dsub>
 800b1b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1b4:	4656      	mov	r6, sl
 800b1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ba:	f7f5 fd05 	bl	8000bc8 <__aeabi_d2iz>
 800b1be:	4605      	mov	r5, r0
 800b1c0:	f7f5 f9e8 	bl	8000594 <__aeabi_i2d>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1cc:	f7f5 f894 	bl	80002f8 <__aeabi_dsub>
 800b1d0:	3530      	adds	r5, #48	@ 0x30
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1da:	f806 5b01 	strb.w	r5, [r6], #1
 800b1de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1e2:	f7f5 fcb3 	bl	8000b4c <__aeabi_dcmplt>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d171      	bne.n	800b2ce <_dtoa_r+0x65e>
 800b1ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1ee:	4911      	ldr	r1, [pc, #68]	@ (800b234 <_dtoa_r+0x5c4>)
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f7f5 f881 	bl	80002f8 <__aeabi_dsub>
 800b1f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1fa:	f7f5 fca7 	bl	8000b4c <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	f040 8095 	bne.w	800b32e <_dtoa_r+0x6be>
 800b204:	42a6      	cmp	r6, r4
 800b206:	f43f af50 	beq.w	800b0aa <_dtoa_r+0x43a>
 800b20a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b20e:	4b0a      	ldr	r3, [pc, #40]	@ (800b238 <_dtoa_r+0x5c8>)
 800b210:	2200      	movs	r2, #0
 800b212:	f7f5 fa29 	bl	8000668 <__aeabi_dmul>
 800b216:	4b08      	ldr	r3, [pc, #32]	@ (800b238 <_dtoa_r+0x5c8>)
 800b218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b21c:	2200      	movs	r2, #0
 800b21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b222:	f7f5 fa21 	bl	8000668 <__aeabi_dmul>
 800b226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b22a:	e7c4      	b.n	800b1b6 <_dtoa_r+0x546>
 800b22c:	0800e478 	.word	0x0800e478
 800b230:	0800e450 	.word	0x0800e450
 800b234:	3ff00000 	.word	0x3ff00000
 800b238:	40240000 	.word	0x40240000
 800b23c:	401c0000 	.word	0x401c0000
 800b240:	40140000 	.word	0x40140000
 800b244:	3fe00000 	.word	0x3fe00000
 800b248:	4631      	mov	r1, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	f7f5 fa0c 	bl	8000668 <__aeabi_dmul>
 800b250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b254:	9415      	str	r4, [sp, #84]	@ 0x54
 800b256:	4656      	mov	r6, sl
 800b258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b25c:	f7f5 fcb4 	bl	8000bc8 <__aeabi_d2iz>
 800b260:	4605      	mov	r5, r0
 800b262:	f7f5 f997 	bl	8000594 <__aeabi_i2d>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b26e:	f7f5 f843 	bl	80002f8 <__aeabi_dsub>
 800b272:	3530      	adds	r5, #48	@ 0x30
 800b274:	f806 5b01 	strb.w	r5, [r6], #1
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b282:	f04f 0200 	mov.w	r2, #0
 800b286:	d124      	bne.n	800b2d2 <_dtoa_r+0x662>
 800b288:	4bac      	ldr	r3, [pc, #688]	@ (800b53c <_dtoa_r+0x8cc>)
 800b28a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b28e:	f7f5 f835 	bl	80002fc <__adddf3>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29a:	f7f5 fc75 	bl	8000b88 <__aeabi_dcmpgt>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d145      	bne.n	800b32e <_dtoa_r+0x6be>
 800b2a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2a6:	49a5      	ldr	r1, [pc, #660]	@ (800b53c <_dtoa_r+0x8cc>)
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f7f5 f825 	bl	80002f8 <__aeabi_dsub>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2b6:	f7f5 fc49 	bl	8000b4c <__aeabi_dcmplt>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	f43f aef5 	beq.w	800b0aa <_dtoa_r+0x43a>
 800b2c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b2c2:	1e73      	subs	r3, r6, #1
 800b2c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2ca:	2b30      	cmp	r3, #48	@ 0x30
 800b2cc:	d0f8      	beq.n	800b2c0 <_dtoa_r+0x650>
 800b2ce:	9f04      	ldr	r7, [sp, #16]
 800b2d0:	e73e      	b.n	800b150 <_dtoa_r+0x4e0>
 800b2d2:	4b9b      	ldr	r3, [pc, #620]	@ (800b540 <_dtoa_r+0x8d0>)
 800b2d4:	f7f5 f9c8 	bl	8000668 <__aeabi_dmul>
 800b2d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2dc:	e7bc      	b.n	800b258 <_dtoa_r+0x5e8>
 800b2de:	d10c      	bne.n	800b2fa <_dtoa_r+0x68a>
 800b2e0:	4b98      	ldr	r3, [pc, #608]	@ (800b544 <_dtoa_r+0x8d4>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2e8:	f7f5 f9be 	bl	8000668 <__aeabi_dmul>
 800b2ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2f0:	f7f5 fc40 	bl	8000b74 <__aeabi_dcmpge>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	f000 8157 	beq.w	800b5a8 <_dtoa_r+0x938>
 800b2fa:	2400      	movs	r4, #0
 800b2fc:	4625      	mov	r5, r4
 800b2fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b300:	43db      	mvns	r3, r3
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	4656      	mov	r6, sl
 800b306:	2700      	movs	r7, #0
 800b308:	4621      	mov	r1, r4
 800b30a:	4658      	mov	r0, fp
 800b30c:	f000 fbb4 	bl	800ba78 <_Bfree>
 800b310:	2d00      	cmp	r5, #0
 800b312:	d0dc      	beq.n	800b2ce <_dtoa_r+0x65e>
 800b314:	b12f      	cbz	r7, 800b322 <_dtoa_r+0x6b2>
 800b316:	42af      	cmp	r7, r5
 800b318:	d003      	beq.n	800b322 <_dtoa_r+0x6b2>
 800b31a:	4639      	mov	r1, r7
 800b31c:	4658      	mov	r0, fp
 800b31e:	f000 fbab 	bl	800ba78 <_Bfree>
 800b322:	4629      	mov	r1, r5
 800b324:	4658      	mov	r0, fp
 800b326:	f000 fba7 	bl	800ba78 <_Bfree>
 800b32a:	e7d0      	b.n	800b2ce <_dtoa_r+0x65e>
 800b32c:	9704      	str	r7, [sp, #16]
 800b32e:	4633      	mov	r3, r6
 800b330:	461e      	mov	r6, r3
 800b332:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b336:	2a39      	cmp	r2, #57	@ 0x39
 800b338:	d107      	bne.n	800b34a <_dtoa_r+0x6da>
 800b33a:	459a      	cmp	sl, r3
 800b33c:	d1f8      	bne.n	800b330 <_dtoa_r+0x6c0>
 800b33e:	9a04      	ldr	r2, [sp, #16]
 800b340:	3201      	adds	r2, #1
 800b342:	9204      	str	r2, [sp, #16]
 800b344:	2230      	movs	r2, #48	@ 0x30
 800b346:	f88a 2000 	strb.w	r2, [sl]
 800b34a:	781a      	ldrb	r2, [r3, #0]
 800b34c:	3201      	adds	r2, #1
 800b34e:	701a      	strb	r2, [r3, #0]
 800b350:	e7bd      	b.n	800b2ce <_dtoa_r+0x65e>
 800b352:	4b7b      	ldr	r3, [pc, #492]	@ (800b540 <_dtoa_r+0x8d0>)
 800b354:	2200      	movs	r2, #0
 800b356:	f7f5 f987 	bl	8000668 <__aeabi_dmul>
 800b35a:	2200      	movs	r2, #0
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	460d      	mov	r5, r1
 800b362:	f7f5 fbe9 	bl	8000b38 <__aeabi_dcmpeq>
 800b366:	2800      	cmp	r0, #0
 800b368:	f43f aebb 	beq.w	800b0e2 <_dtoa_r+0x472>
 800b36c:	e6f0      	b.n	800b150 <_dtoa_r+0x4e0>
 800b36e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b370:	2a00      	cmp	r2, #0
 800b372:	f000 80db 	beq.w	800b52c <_dtoa_r+0x8bc>
 800b376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b378:	2a01      	cmp	r2, #1
 800b37a:	f300 80bf 	bgt.w	800b4fc <_dtoa_r+0x88c>
 800b37e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b380:	2a00      	cmp	r2, #0
 800b382:	f000 80b7 	beq.w	800b4f4 <_dtoa_r+0x884>
 800b386:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b38a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b38c:	4646      	mov	r6, r8
 800b38e:	9a08      	ldr	r2, [sp, #32]
 800b390:	2101      	movs	r1, #1
 800b392:	441a      	add	r2, r3
 800b394:	4658      	mov	r0, fp
 800b396:	4498      	add	r8, r3
 800b398:	9208      	str	r2, [sp, #32]
 800b39a:	f000 fc6b 	bl	800bc74 <__i2b>
 800b39e:	4605      	mov	r5, r0
 800b3a0:	b15e      	cbz	r6, 800b3ba <_dtoa_r+0x74a>
 800b3a2:	9b08      	ldr	r3, [sp, #32]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd08      	ble.n	800b3ba <_dtoa_r+0x74a>
 800b3a8:	42b3      	cmp	r3, r6
 800b3aa:	9a08      	ldr	r2, [sp, #32]
 800b3ac:	bfa8      	it	ge
 800b3ae:	4633      	movge	r3, r6
 800b3b0:	eba8 0803 	sub.w	r8, r8, r3
 800b3b4:	1af6      	subs	r6, r6, r3
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	9308      	str	r3, [sp, #32]
 800b3ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3bc:	b1f3      	cbz	r3, 800b3fc <_dtoa_r+0x78c>
 800b3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 80b7 	beq.w	800b534 <_dtoa_r+0x8c4>
 800b3c6:	b18c      	cbz	r4, 800b3ec <_dtoa_r+0x77c>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	4658      	mov	r0, fp
 800b3ce:	f000 fd11 	bl	800bdf4 <__pow5mult>
 800b3d2:	464a      	mov	r2, r9
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	4658      	mov	r0, fp
 800b3da:	f000 fc61 	bl	800bca0 <__multiply>
 800b3de:	4649      	mov	r1, r9
 800b3e0:	9004      	str	r0, [sp, #16]
 800b3e2:	4658      	mov	r0, fp
 800b3e4:	f000 fb48 	bl	800ba78 <_Bfree>
 800b3e8:	9b04      	ldr	r3, [sp, #16]
 800b3ea:	4699      	mov	r9, r3
 800b3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ee:	1b1a      	subs	r2, r3, r4
 800b3f0:	d004      	beq.n	800b3fc <_dtoa_r+0x78c>
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	4658      	mov	r0, fp
 800b3f6:	f000 fcfd 	bl	800bdf4 <__pow5mult>
 800b3fa:	4681      	mov	r9, r0
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	4658      	mov	r0, fp
 800b400:	f000 fc38 	bl	800bc74 <__i2b>
 800b404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b406:	4604      	mov	r4, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 81cf 	beq.w	800b7ac <_dtoa_r+0xb3c>
 800b40e:	461a      	mov	r2, r3
 800b410:	4601      	mov	r1, r0
 800b412:	4658      	mov	r0, fp
 800b414:	f000 fcee 	bl	800bdf4 <__pow5mult>
 800b418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	4604      	mov	r4, r0
 800b41e:	f300 8095 	bgt.w	800b54c <_dtoa_r+0x8dc>
 800b422:	9b02      	ldr	r3, [sp, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f040 8087 	bne.w	800b538 <_dtoa_r+0x8c8>
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b430:	2b00      	cmp	r3, #0
 800b432:	f040 8089 	bne.w	800b548 <_dtoa_r+0x8d8>
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b43c:	0d1b      	lsrs	r3, r3, #20
 800b43e:	051b      	lsls	r3, r3, #20
 800b440:	b12b      	cbz	r3, 800b44e <_dtoa_r+0x7de>
 800b442:	9b08      	ldr	r3, [sp, #32]
 800b444:	3301      	adds	r3, #1
 800b446:	9308      	str	r3, [sp, #32]
 800b448:	f108 0801 	add.w	r8, r8, #1
 800b44c:	2301      	movs	r3, #1
 800b44e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 81b0 	beq.w	800b7b8 <_dtoa_r+0xb48>
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b45e:	6918      	ldr	r0, [r3, #16]
 800b460:	f000 fbbc 	bl	800bbdc <__hi0bits>
 800b464:	f1c0 0020 	rsb	r0, r0, #32
 800b468:	9b08      	ldr	r3, [sp, #32]
 800b46a:	4418      	add	r0, r3
 800b46c:	f010 001f 	ands.w	r0, r0, #31
 800b470:	d077      	beq.n	800b562 <_dtoa_r+0x8f2>
 800b472:	f1c0 0320 	rsb	r3, r0, #32
 800b476:	2b04      	cmp	r3, #4
 800b478:	dd6b      	ble.n	800b552 <_dtoa_r+0x8e2>
 800b47a:	9b08      	ldr	r3, [sp, #32]
 800b47c:	f1c0 001c 	rsb	r0, r0, #28
 800b480:	4403      	add	r3, r0
 800b482:	4480      	add	r8, r0
 800b484:	4406      	add	r6, r0
 800b486:	9308      	str	r3, [sp, #32]
 800b488:	f1b8 0f00 	cmp.w	r8, #0
 800b48c:	dd05      	ble.n	800b49a <_dtoa_r+0x82a>
 800b48e:	4649      	mov	r1, r9
 800b490:	4642      	mov	r2, r8
 800b492:	4658      	mov	r0, fp
 800b494:	f000 fd08 	bl	800bea8 <__lshift>
 800b498:	4681      	mov	r9, r0
 800b49a:	9b08      	ldr	r3, [sp, #32]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	dd05      	ble.n	800b4ac <_dtoa_r+0x83c>
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	4658      	mov	r0, fp
 800b4a6:	f000 fcff 	bl	800bea8 <__lshift>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d059      	beq.n	800b566 <_dtoa_r+0x8f6>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4648      	mov	r0, r9
 800b4b6:	f000 fd63 	bl	800bf80 <__mcmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	da53      	bge.n	800b566 <_dtoa_r+0x8f6>
 800b4be:	1e7b      	subs	r3, r7, #1
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	220a      	movs	r2, #10
 800b4c8:	4658      	mov	r0, fp
 800b4ca:	f000 faf7 	bl	800babc <__multadd>
 800b4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 8172 	beq.w	800b7bc <_dtoa_r+0xb4c>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4629      	mov	r1, r5
 800b4dc:	220a      	movs	r2, #10
 800b4de:	4658      	mov	r0, fp
 800b4e0:	f000 faec 	bl	800babc <__multadd>
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	dc67      	bgt.n	800b5bc <_dtoa_r+0x94c>
 800b4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	dc41      	bgt.n	800b576 <_dtoa_r+0x906>
 800b4f2:	e063      	b.n	800b5bc <_dtoa_r+0x94c>
 800b4f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b4f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b4fa:	e746      	b.n	800b38a <_dtoa_r+0x71a>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	1e5c      	subs	r4, r3, #1
 800b500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b502:	42a3      	cmp	r3, r4
 800b504:	bfbf      	itttt	lt
 800b506:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b508:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b50a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b50c:	1ae3      	sublt	r3, r4, r3
 800b50e:	bfb4      	ite	lt
 800b510:	18d2      	addlt	r2, r2, r3
 800b512:	1b1c      	subge	r4, r3, r4
 800b514:	9b07      	ldr	r3, [sp, #28]
 800b516:	bfbc      	itt	lt
 800b518:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b51a:	2400      	movlt	r4, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfb5      	itete	lt
 800b520:	eba8 0603 	sublt.w	r6, r8, r3
 800b524:	9b07      	ldrge	r3, [sp, #28]
 800b526:	2300      	movlt	r3, #0
 800b528:	4646      	movge	r6, r8
 800b52a:	e730      	b.n	800b38e <_dtoa_r+0x71e>
 800b52c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b52e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b530:	4646      	mov	r6, r8
 800b532:	e735      	b.n	800b3a0 <_dtoa_r+0x730>
 800b534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b536:	e75c      	b.n	800b3f2 <_dtoa_r+0x782>
 800b538:	2300      	movs	r3, #0
 800b53a:	e788      	b.n	800b44e <_dtoa_r+0x7de>
 800b53c:	3fe00000 	.word	0x3fe00000
 800b540:	40240000 	.word	0x40240000
 800b544:	40140000 	.word	0x40140000
 800b548:	9b02      	ldr	r3, [sp, #8]
 800b54a:	e780      	b.n	800b44e <_dtoa_r+0x7de>
 800b54c:	2300      	movs	r3, #0
 800b54e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b550:	e782      	b.n	800b458 <_dtoa_r+0x7e8>
 800b552:	d099      	beq.n	800b488 <_dtoa_r+0x818>
 800b554:	9a08      	ldr	r2, [sp, #32]
 800b556:	331c      	adds	r3, #28
 800b558:	441a      	add	r2, r3
 800b55a:	4498      	add	r8, r3
 800b55c:	441e      	add	r6, r3
 800b55e:	9208      	str	r2, [sp, #32]
 800b560:	e792      	b.n	800b488 <_dtoa_r+0x818>
 800b562:	4603      	mov	r3, r0
 800b564:	e7f6      	b.n	800b554 <_dtoa_r+0x8e4>
 800b566:	9b07      	ldr	r3, [sp, #28]
 800b568:	9704      	str	r7, [sp, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dc20      	bgt.n	800b5b0 <_dtoa_r+0x940>
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b572:	2b02      	cmp	r3, #2
 800b574:	dd1e      	ble.n	800b5b4 <_dtoa_r+0x944>
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f47f aec0 	bne.w	800b2fe <_dtoa_r+0x68e>
 800b57e:	4621      	mov	r1, r4
 800b580:	2205      	movs	r2, #5
 800b582:	4658      	mov	r0, fp
 800b584:	f000 fa9a 	bl	800babc <__multadd>
 800b588:	4601      	mov	r1, r0
 800b58a:	4604      	mov	r4, r0
 800b58c:	4648      	mov	r0, r9
 800b58e:	f000 fcf7 	bl	800bf80 <__mcmp>
 800b592:	2800      	cmp	r0, #0
 800b594:	f77f aeb3 	ble.w	800b2fe <_dtoa_r+0x68e>
 800b598:	4656      	mov	r6, sl
 800b59a:	2331      	movs	r3, #49	@ 0x31
 800b59c:	f806 3b01 	strb.w	r3, [r6], #1
 800b5a0:	9b04      	ldr	r3, [sp, #16]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	e6ae      	b.n	800b306 <_dtoa_r+0x696>
 800b5a8:	9c07      	ldr	r4, [sp, #28]
 800b5aa:	9704      	str	r7, [sp, #16]
 800b5ac:	4625      	mov	r5, r4
 800b5ae:	e7f3      	b.n	800b598 <_dtoa_r+0x928>
 800b5b0:	9b07      	ldr	r3, [sp, #28]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 8104 	beq.w	800b7c4 <_dtoa_r+0xb54>
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	dd05      	ble.n	800b5cc <_dtoa_r+0x95c>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	4658      	mov	r0, fp
 800b5c6:	f000 fc6f 	bl	800bea8 <__lshift>
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d05a      	beq.n	800b688 <_dtoa_r+0xa18>
 800b5d2:	6869      	ldr	r1, [r5, #4]
 800b5d4:	4658      	mov	r0, fp
 800b5d6:	f000 fa0f 	bl	800b9f8 <_Balloc>
 800b5da:	4606      	mov	r6, r0
 800b5dc:	b928      	cbnz	r0, 800b5ea <_dtoa_r+0x97a>
 800b5de:	4b84      	ldr	r3, [pc, #528]	@ (800b7f0 <_dtoa_r+0xb80>)
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5e6:	f7ff bb5a 	b.w	800ac9e <_dtoa_r+0x2e>
 800b5ea:	692a      	ldr	r2, [r5, #16]
 800b5ec:	3202      	adds	r2, #2
 800b5ee:	0092      	lsls	r2, r2, #2
 800b5f0:	f105 010c 	add.w	r1, r5, #12
 800b5f4:	300c      	adds	r0, #12
 800b5f6:	f002 f8e1 	bl	800d7bc <memcpy>
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4658      	mov	r0, fp
 800b600:	f000 fc52 	bl	800bea8 <__lshift>
 800b604:	f10a 0301 	add.w	r3, sl, #1
 800b608:	9307      	str	r3, [sp, #28]
 800b60a:	9b00      	ldr	r3, [sp, #0]
 800b60c:	4453      	add	r3, sl
 800b60e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	462f      	mov	r7, r5
 800b618:	930a      	str	r3, [sp, #40]	@ 0x28
 800b61a:	4605      	mov	r5, r0
 800b61c:	9b07      	ldr	r3, [sp, #28]
 800b61e:	4621      	mov	r1, r4
 800b620:	3b01      	subs	r3, #1
 800b622:	4648      	mov	r0, r9
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	f7ff fa99 	bl	800ab5c <quorem>
 800b62a:	4639      	mov	r1, r7
 800b62c:	9002      	str	r0, [sp, #8]
 800b62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b632:	4648      	mov	r0, r9
 800b634:	f000 fca4 	bl	800bf80 <__mcmp>
 800b638:	462a      	mov	r2, r5
 800b63a:	9008      	str	r0, [sp, #32]
 800b63c:	4621      	mov	r1, r4
 800b63e:	4658      	mov	r0, fp
 800b640:	f000 fcba 	bl	800bfb8 <__mdiff>
 800b644:	68c2      	ldr	r2, [r0, #12]
 800b646:	4606      	mov	r6, r0
 800b648:	bb02      	cbnz	r2, 800b68c <_dtoa_r+0xa1c>
 800b64a:	4601      	mov	r1, r0
 800b64c:	4648      	mov	r0, r9
 800b64e:	f000 fc97 	bl	800bf80 <__mcmp>
 800b652:	4602      	mov	r2, r0
 800b654:	4631      	mov	r1, r6
 800b656:	4658      	mov	r0, fp
 800b658:	920e      	str	r2, [sp, #56]	@ 0x38
 800b65a:	f000 fa0d 	bl	800ba78 <_Bfree>
 800b65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b660:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b662:	9e07      	ldr	r6, [sp, #28]
 800b664:	ea43 0102 	orr.w	r1, r3, r2
 800b668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b66a:	4319      	orrs	r1, r3
 800b66c:	d110      	bne.n	800b690 <_dtoa_r+0xa20>
 800b66e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b672:	d029      	beq.n	800b6c8 <_dtoa_r+0xa58>
 800b674:	9b08      	ldr	r3, [sp, #32]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dd02      	ble.n	800b680 <_dtoa_r+0xa10>
 800b67a:	9b02      	ldr	r3, [sp, #8]
 800b67c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b680:	9b00      	ldr	r3, [sp, #0]
 800b682:	f883 8000 	strb.w	r8, [r3]
 800b686:	e63f      	b.n	800b308 <_dtoa_r+0x698>
 800b688:	4628      	mov	r0, r5
 800b68a:	e7bb      	b.n	800b604 <_dtoa_r+0x994>
 800b68c:	2201      	movs	r2, #1
 800b68e:	e7e1      	b.n	800b654 <_dtoa_r+0x9e4>
 800b690:	9b08      	ldr	r3, [sp, #32]
 800b692:	2b00      	cmp	r3, #0
 800b694:	db04      	blt.n	800b6a0 <_dtoa_r+0xa30>
 800b696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b698:	430b      	orrs	r3, r1
 800b69a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b69c:	430b      	orrs	r3, r1
 800b69e:	d120      	bne.n	800b6e2 <_dtoa_r+0xa72>
 800b6a0:	2a00      	cmp	r2, #0
 800b6a2:	dded      	ble.n	800b680 <_dtoa_r+0xa10>
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4658      	mov	r0, fp
 800b6aa:	f000 fbfd 	bl	800bea8 <__lshift>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4681      	mov	r9, r0
 800b6b2:	f000 fc65 	bl	800bf80 <__mcmp>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	dc03      	bgt.n	800b6c2 <_dtoa_r+0xa52>
 800b6ba:	d1e1      	bne.n	800b680 <_dtoa_r+0xa10>
 800b6bc:	f018 0f01 	tst.w	r8, #1
 800b6c0:	d0de      	beq.n	800b680 <_dtoa_r+0xa10>
 800b6c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6c6:	d1d8      	bne.n	800b67a <_dtoa_r+0xa0a>
 800b6c8:	9a00      	ldr	r2, [sp, #0]
 800b6ca:	2339      	movs	r3, #57	@ 0x39
 800b6cc:	7013      	strb	r3, [r2, #0]
 800b6ce:	4633      	mov	r3, r6
 800b6d0:	461e      	mov	r6, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6d8:	2a39      	cmp	r2, #57	@ 0x39
 800b6da:	d052      	beq.n	800b782 <_dtoa_r+0xb12>
 800b6dc:	3201      	adds	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
 800b6e0:	e612      	b.n	800b308 <_dtoa_r+0x698>
 800b6e2:	2a00      	cmp	r2, #0
 800b6e4:	dd07      	ble.n	800b6f6 <_dtoa_r+0xa86>
 800b6e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6ea:	d0ed      	beq.n	800b6c8 <_dtoa_r+0xa58>
 800b6ec:	9a00      	ldr	r2, [sp, #0]
 800b6ee:	f108 0301 	add.w	r3, r8, #1
 800b6f2:	7013      	strb	r3, [r2, #0]
 800b6f4:	e608      	b.n	800b308 <_dtoa_r+0x698>
 800b6f6:	9b07      	ldr	r3, [sp, #28]
 800b6f8:	9a07      	ldr	r2, [sp, #28]
 800b6fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b700:	4293      	cmp	r3, r2
 800b702:	d028      	beq.n	800b756 <_dtoa_r+0xae6>
 800b704:	4649      	mov	r1, r9
 800b706:	2300      	movs	r3, #0
 800b708:	220a      	movs	r2, #10
 800b70a:	4658      	mov	r0, fp
 800b70c:	f000 f9d6 	bl	800babc <__multadd>
 800b710:	42af      	cmp	r7, r5
 800b712:	4681      	mov	r9, r0
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	f04f 020a 	mov.w	r2, #10
 800b71c:	4639      	mov	r1, r7
 800b71e:	4658      	mov	r0, fp
 800b720:	d107      	bne.n	800b732 <_dtoa_r+0xac2>
 800b722:	f000 f9cb 	bl	800babc <__multadd>
 800b726:	4607      	mov	r7, r0
 800b728:	4605      	mov	r5, r0
 800b72a:	9b07      	ldr	r3, [sp, #28]
 800b72c:	3301      	adds	r3, #1
 800b72e:	9307      	str	r3, [sp, #28]
 800b730:	e774      	b.n	800b61c <_dtoa_r+0x9ac>
 800b732:	f000 f9c3 	bl	800babc <__multadd>
 800b736:	4629      	mov	r1, r5
 800b738:	4607      	mov	r7, r0
 800b73a:	2300      	movs	r3, #0
 800b73c:	220a      	movs	r2, #10
 800b73e:	4658      	mov	r0, fp
 800b740:	f000 f9bc 	bl	800babc <__multadd>
 800b744:	4605      	mov	r5, r0
 800b746:	e7f0      	b.n	800b72a <_dtoa_r+0xaba>
 800b748:	9b00      	ldr	r3, [sp, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bfcc      	ite	gt
 800b74e:	461e      	movgt	r6, r3
 800b750:	2601      	movle	r6, #1
 800b752:	4456      	add	r6, sl
 800b754:	2700      	movs	r7, #0
 800b756:	4649      	mov	r1, r9
 800b758:	2201      	movs	r2, #1
 800b75a:	4658      	mov	r0, fp
 800b75c:	f000 fba4 	bl	800bea8 <__lshift>
 800b760:	4621      	mov	r1, r4
 800b762:	4681      	mov	r9, r0
 800b764:	f000 fc0c 	bl	800bf80 <__mcmp>
 800b768:	2800      	cmp	r0, #0
 800b76a:	dcb0      	bgt.n	800b6ce <_dtoa_r+0xa5e>
 800b76c:	d102      	bne.n	800b774 <_dtoa_r+0xb04>
 800b76e:	f018 0f01 	tst.w	r8, #1
 800b772:	d1ac      	bne.n	800b6ce <_dtoa_r+0xa5e>
 800b774:	4633      	mov	r3, r6
 800b776:	461e      	mov	r6, r3
 800b778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b77c:	2a30      	cmp	r2, #48	@ 0x30
 800b77e:	d0fa      	beq.n	800b776 <_dtoa_r+0xb06>
 800b780:	e5c2      	b.n	800b308 <_dtoa_r+0x698>
 800b782:	459a      	cmp	sl, r3
 800b784:	d1a4      	bne.n	800b6d0 <_dtoa_r+0xa60>
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	3301      	adds	r3, #1
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	2331      	movs	r3, #49	@ 0x31
 800b78e:	f88a 3000 	strb.w	r3, [sl]
 800b792:	e5b9      	b.n	800b308 <_dtoa_r+0x698>
 800b794:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b796:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b7f4 <_dtoa_r+0xb84>
 800b79a:	b11b      	cbz	r3, 800b7a4 <_dtoa_r+0xb34>
 800b79c:	f10a 0308 	add.w	r3, sl, #8
 800b7a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7a2:	6013      	str	r3, [r2, #0]
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	b019      	add	sp, #100	@ 0x64
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	f77f ae37 	ble.w	800b422 <_dtoa_r+0x7b2>
 800b7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	e655      	b.n	800b468 <_dtoa_r+0x7f8>
 800b7bc:	9b00      	ldr	r3, [sp, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f77f aed6 	ble.w	800b570 <_dtoa_r+0x900>
 800b7c4:	4656      	mov	r6, sl
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4648      	mov	r0, r9
 800b7ca:	f7ff f9c7 	bl	800ab5c <quorem>
 800b7ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7d2:	f806 8b01 	strb.w	r8, [r6], #1
 800b7d6:	9b00      	ldr	r3, [sp, #0]
 800b7d8:	eba6 020a 	sub.w	r2, r6, sl
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	ddb3      	ble.n	800b748 <_dtoa_r+0xad8>
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	220a      	movs	r2, #10
 800b7e6:	4658      	mov	r0, fp
 800b7e8:	f000 f968 	bl	800babc <__multadd>
 800b7ec:	4681      	mov	r9, r0
 800b7ee:	e7ea      	b.n	800b7c6 <_dtoa_r+0xb56>
 800b7f0:	0800e3d4 	.word	0x0800e3d4
 800b7f4:	0800e36f 	.word	0x0800e36f

0800b7f8 <_free_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	d041      	beq.n	800b884 <_free_r+0x8c>
 800b800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b804:	1f0c      	subs	r4, r1, #4
 800b806:	2b00      	cmp	r3, #0
 800b808:	bfb8      	it	lt
 800b80a:	18e4      	addlt	r4, r4, r3
 800b80c:	f000 f8e8 	bl	800b9e0 <__malloc_lock>
 800b810:	4a1d      	ldr	r2, [pc, #116]	@ (800b888 <_free_r+0x90>)
 800b812:	6813      	ldr	r3, [r2, #0]
 800b814:	b933      	cbnz	r3, 800b824 <_free_r+0x2c>
 800b816:	6063      	str	r3, [r4, #4]
 800b818:	6014      	str	r4, [r2, #0]
 800b81a:	4628      	mov	r0, r5
 800b81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b820:	f000 b8e4 	b.w	800b9ec <__malloc_unlock>
 800b824:	42a3      	cmp	r3, r4
 800b826:	d908      	bls.n	800b83a <_free_r+0x42>
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	1821      	adds	r1, r4, r0
 800b82c:	428b      	cmp	r3, r1
 800b82e:	bf01      	itttt	eq
 800b830:	6819      	ldreq	r1, [r3, #0]
 800b832:	685b      	ldreq	r3, [r3, #4]
 800b834:	1809      	addeq	r1, r1, r0
 800b836:	6021      	streq	r1, [r4, #0]
 800b838:	e7ed      	b.n	800b816 <_free_r+0x1e>
 800b83a:	461a      	mov	r2, r3
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	b10b      	cbz	r3, 800b844 <_free_r+0x4c>
 800b840:	42a3      	cmp	r3, r4
 800b842:	d9fa      	bls.n	800b83a <_free_r+0x42>
 800b844:	6811      	ldr	r1, [r2, #0]
 800b846:	1850      	adds	r0, r2, r1
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d10b      	bne.n	800b864 <_free_r+0x6c>
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	4401      	add	r1, r0
 800b850:	1850      	adds	r0, r2, r1
 800b852:	4283      	cmp	r3, r0
 800b854:	6011      	str	r1, [r2, #0]
 800b856:	d1e0      	bne.n	800b81a <_free_r+0x22>
 800b858:	6818      	ldr	r0, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	6053      	str	r3, [r2, #4]
 800b85e:	4408      	add	r0, r1
 800b860:	6010      	str	r0, [r2, #0]
 800b862:	e7da      	b.n	800b81a <_free_r+0x22>
 800b864:	d902      	bls.n	800b86c <_free_r+0x74>
 800b866:	230c      	movs	r3, #12
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	e7d6      	b.n	800b81a <_free_r+0x22>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	1821      	adds	r1, r4, r0
 800b870:	428b      	cmp	r3, r1
 800b872:	bf04      	itt	eq
 800b874:	6819      	ldreq	r1, [r3, #0]
 800b876:	685b      	ldreq	r3, [r3, #4]
 800b878:	6063      	str	r3, [r4, #4]
 800b87a:	bf04      	itt	eq
 800b87c:	1809      	addeq	r1, r1, r0
 800b87e:	6021      	streq	r1, [r4, #0]
 800b880:	6054      	str	r4, [r2, #4]
 800b882:	e7ca      	b.n	800b81a <_free_r+0x22>
 800b884:	bd38      	pop	{r3, r4, r5, pc}
 800b886:	bf00      	nop
 800b888:	200007a0 	.word	0x200007a0

0800b88c <malloc>:
 800b88c:	4b02      	ldr	r3, [pc, #8]	@ (800b898 <malloc+0xc>)
 800b88e:	4601      	mov	r1, r0
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	f000 b825 	b.w	800b8e0 <_malloc_r>
 800b896:	bf00      	nop
 800b898:	200000d4 	.word	0x200000d4

0800b89c <sbrk_aligned>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	4e0f      	ldr	r6, [pc, #60]	@ (800b8dc <sbrk_aligned+0x40>)
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	6831      	ldr	r1, [r6, #0]
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	b911      	cbnz	r1, 800b8ae <sbrk_aligned+0x12>
 800b8a8:	f001 ff78 	bl	800d79c <_sbrk_r>
 800b8ac:	6030      	str	r0, [r6, #0]
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f001 ff73 	bl	800d79c <_sbrk_r>
 800b8b6:	1c43      	adds	r3, r0, #1
 800b8b8:	d103      	bne.n	800b8c2 <sbrk_aligned+0x26>
 800b8ba:	f04f 34ff 	mov.w	r4, #4294967295
 800b8be:	4620      	mov	r0, r4
 800b8c0:	bd70      	pop	{r4, r5, r6, pc}
 800b8c2:	1cc4      	adds	r4, r0, #3
 800b8c4:	f024 0403 	bic.w	r4, r4, #3
 800b8c8:	42a0      	cmp	r0, r4
 800b8ca:	d0f8      	beq.n	800b8be <sbrk_aligned+0x22>
 800b8cc:	1a21      	subs	r1, r4, r0
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f001 ff64 	bl	800d79c <_sbrk_r>
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d1f2      	bne.n	800b8be <sbrk_aligned+0x22>
 800b8d8:	e7ef      	b.n	800b8ba <sbrk_aligned+0x1e>
 800b8da:	bf00      	nop
 800b8dc:	2000079c 	.word	0x2000079c

0800b8e0 <_malloc_r>:
 800b8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	1ccd      	adds	r5, r1, #3
 800b8e6:	f025 0503 	bic.w	r5, r5, #3
 800b8ea:	3508      	adds	r5, #8
 800b8ec:	2d0c      	cmp	r5, #12
 800b8ee:	bf38      	it	cc
 800b8f0:	250c      	movcc	r5, #12
 800b8f2:	2d00      	cmp	r5, #0
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	db01      	blt.n	800b8fc <_malloc_r+0x1c>
 800b8f8:	42a9      	cmp	r1, r5
 800b8fa:	d904      	bls.n	800b906 <_malloc_r+0x26>
 800b8fc:	230c      	movs	r3, #12
 800b8fe:	6033      	str	r3, [r6, #0]
 800b900:	2000      	movs	r0, #0
 800b902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b906:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9dc <_malloc_r+0xfc>
 800b90a:	f000 f869 	bl	800b9e0 <__malloc_lock>
 800b90e:	f8d8 3000 	ldr.w	r3, [r8]
 800b912:	461c      	mov	r4, r3
 800b914:	bb44      	cbnz	r4, 800b968 <_malloc_r+0x88>
 800b916:	4629      	mov	r1, r5
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff ffbf 	bl	800b89c <sbrk_aligned>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	4604      	mov	r4, r0
 800b922:	d158      	bne.n	800b9d6 <_malloc_r+0xf6>
 800b924:	f8d8 4000 	ldr.w	r4, [r8]
 800b928:	4627      	mov	r7, r4
 800b92a:	2f00      	cmp	r7, #0
 800b92c:	d143      	bne.n	800b9b6 <_malloc_r+0xd6>
 800b92e:	2c00      	cmp	r4, #0
 800b930:	d04b      	beq.n	800b9ca <_malloc_r+0xea>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	4639      	mov	r1, r7
 800b936:	4630      	mov	r0, r6
 800b938:	eb04 0903 	add.w	r9, r4, r3
 800b93c:	f001 ff2e 	bl	800d79c <_sbrk_r>
 800b940:	4581      	cmp	r9, r0
 800b942:	d142      	bne.n	800b9ca <_malloc_r+0xea>
 800b944:	6821      	ldr	r1, [r4, #0]
 800b946:	1a6d      	subs	r5, r5, r1
 800b948:	4629      	mov	r1, r5
 800b94a:	4630      	mov	r0, r6
 800b94c:	f7ff ffa6 	bl	800b89c <sbrk_aligned>
 800b950:	3001      	adds	r0, #1
 800b952:	d03a      	beq.n	800b9ca <_malloc_r+0xea>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	442b      	add	r3, r5
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	f8d8 3000 	ldr.w	r3, [r8]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	bb62      	cbnz	r2, 800b9bc <_malloc_r+0xdc>
 800b962:	f8c8 7000 	str.w	r7, [r8]
 800b966:	e00f      	b.n	800b988 <_malloc_r+0xa8>
 800b968:	6822      	ldr	r2, [r4, #0]
 800b96a:	1b52      	subs	r2, r2, r5
 800b96c:	d420      	bmi.n	800b9b0 <_malloc_r+0xd0>
 800b96e:	2a0b      	cmp	r2, #11
 800b970:	d917      	bls.n	800b9a2 <_malloc_r+0xc2>
 800b972:	1961      	adds	r1, r4, r5
 800b974:	42a3      	cmp	r3, r4
 800b976:	6025      	str	r5, [r4, #0]
 800b978:	bf18      	it	ne
 800b97a:	6059      	strne	r1, [r3, #4]
 800b97c:	6863      	ldr	r3, [r4, #4]
 800b97e:	bf08      	it	eq
 800b980:	f8c8 1000 	streq.w	r1, [r8]
 800b984:	5162      	str	r2, [r4, r5]
 800b986:	604b      	str	r3, [r1, #4]
 800b988:	4630      	mov	r0, r6
 800b98a:	f000 f82f 	bl	800b9ec <__malloc_unlock>
 800b98e:	f104 000b 	add.w	r0, r4, #11
 800b992:	1d23      	adds	r3, r4, #4
 800b994:	f020 0007 	bic.w	r0, r0, #7
 800b998:	1ac2      	subs	r2, r0, r3
 800b99a:	bf1c      	itt	ne
 800b99c:	1a1b      	subne	r3, r3, r0
 800b99e:	50a3      	strne	r3, [r4, r2]
 800b9a0:	e7af      	b.n	800b902 <_malloc_r+0x22>
 800b9a2:	6862      	ldr	r2, [r4, #4]
 800b9a4:	42a3      	cmp	r3, r4
 800b9a6:	bf0c      	ite	eq
 800b9a8:	f8c8 2000 	streq.w	r2, [r8]
 800b9ac:	605a      	strne	r2, [r3, #4]
 800b9ae:	e7eb      	b.n	800b988 <_malloc_r+0xa8>
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	6864      	ldr	r4, [r4, #4]
 800b9b4:	e7ae      	b.n	800b914 <_malloc_r+0x34>
 800b9b6:	463c      	mov	r4, r7
 800b9b8:	687f      	ldr	r7, [r7, #4]
 800b9ba:	e7b6      	b.n	800b92a <_malloc_r+0x4a>
 800b9bc:	461a      	mov	r2, r3
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	42a3      	cmp	r3, r4
 800b9c2:	d1fb      	bne.n	800b9bc <_malloc_r+0xdc>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	6053      	str	r3, [r2, #4]
 800b9c8:	e7de      	b.n	800b988 <_malloc_r+0xa8>
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	6033      	str	r3, [r6, #0]
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f000 f80c 	bl	800b9ec <__malloc_unlock>
 800b9d4:	e794      	b.n	800b900 <_malloc_r+0x20>
 800b9d6:	6005      	str	r5, [r0, #0]
 800b9d8:	e7d6      	b.n	800b988 <_malloc_r+0xa8>
 800b9da:	bf00      	nop
 800b9dc:	200007a0 	.word	0x200007a0

0800b9e0 <__malloc_lock>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	@ (800b9e8 <__malloc_lock+0x8>)
 800b9e2:	f7ff b894 	b.w	800ab0e <__retarget_lock_acquire_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	20000798 	.word	0x20000798

0800b9ec <__malloc_unlock>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	@ (800b9f4 <__malloc_unlock+0x8>)
 800b9ee:	f7ff b88f 	b.w	800ab10 <__retarget_lock_release_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	20000798 	.word	0x20000798

0800b9f8 <_Balloc>:
 800b9f8:	b570      	push	{r4, r5, r6, lr}
 800b9fa:	69c6      	ldr	r6, [r0, #28]
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	460d      	mov	r5, r1
 800ba00:	b976      	cbnz	r6, 800ba20 <_Balloc+0x28>
 800ba02:	2010      	movs	r0, #16
 800ba04:	f7ff ff42 	bl	800b88c <malloc>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	61e0      	str	r0, [r4, #28]
 800ba0c:	b920      	cbnz	r0, 800ba18 <_Balloc+0x20>
 800ba0e:	4b18      	ldr	r3, [pc, #96]	@ (800ba70 <_Balloc+0x78>)
 800ba10:	4818      	ldr	r0, [pc, #96]	@ (800ba74 <_Balloc+0x7c>)
 800ba12:	216b      	movs	r1, #107	@ 0x6b
 800ba14:	f7ff f884 	bl	800ab20 <__assert_func>
 800ba18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba1c:	6006      	str	r6, [r0, #0]
 800ba1e:	60c6      	str	r6, [r0, #12]
 800ba20:	69e6      	ldr	r6, [r4, #28]
 800ba22:	68f3      	ldr	r3, [r6, #12]
 800ba24:	b183      	cbz	r3, 800ba48 <_Balloc+0x50>
 800ba26:	69e3      	ldr	r3, [r4, #28]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba2e:	b9b8      	cbnz	r0, 800ba60 <_Balloc+0x68>
 800ba30:	2101      	movs	r1, #1
 800ba32:	fa01 f605 	lsl.w	r6, r1, r5
 800ba36:	1d72      	adds	r2, r6, #5
 800ba38:	0092      	lsls	r2, r2, #2
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f001 fedb 	bl	800d7f6 <_calloc_r>
 800ba40:	b160      	cbz	r0, 800ba5c <_Balloc+0x64>
 800ba42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba46:	e00e      	b.n	800ba66 <_Balloc+0x6e>
 800ba48:	2221      	movs	r2, #33	@ 0x21
 800ba4a:	2104      	movs	r1, #4
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f001 fed2 	bl	800d7f6 <_calloc_r>
 800ba52:	69e3      	ldr	r3, [r4, #28]
 800ba54:	60f0      	str	r0, [r6, #12]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e4      	bne.n	800ba26 <_Balloc+0x2e>
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
 800ba60:	6802      	ldr	r2, [r0, #0]
 800ba62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba66:	2300      	movs	r3, #0
 800ba68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba6c:	e7f7      	b.n	800ba5e <_Balloc+0x66>
 800ba6e:	bf00      	nop
 800ba70:	0800e2c2 	.word	0x0800e2c2
 800ba74:	0800e3e5 	.word	0x0800e3e5

0800ba78 <_Bfree>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	69c6      	ldr	r6, [r0, #28]
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	460c      	mov	r4, r1
 800ba80:	b976      	cbnz	r6, 800baa0 <_Bfree+0x28>
 800ba82:	2010      	movs	r0, #16
 800ba84:	f7ff ff02 	bl	800b88c <malloc>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	61e8      	str	r0, [r5, #28]
 800ba8c:	b920      	cbnz	r0, 800ba98 <_Bfree+0x20>
 800ba8e:	4b09      	ldr	r3, [pc, #36]	@ (800bab4 <_Bfree+0x3c>)
 800ba90:	4809      	ldr	r0, [pc, #36]	@ (800bab8 <_Bfree+0x40>)
 800ba92:	218f      	movs	r1, #143	@ 0x8f
 800ba94:	f7ff f844 	bl	800ab20 <__assert_func>
 800ba98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba9c:	6006      	str	r6, [r0, #0]
 800ba9e:	60c6      	str	r6, [r0, #12]
 800baa0:	b13c      	cbz	r4, 800bab2 <_Bfree+0x3a>
 800baa2:	69eb      	ldr	r3, [r5, #28]
 800baa4:	6862      	ldr	r2, [r4, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baac:	6021      	str	r1, [r4, #0]
 800baae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bab2:	bd70      	pop	{r4, r5, r6, pc}
 800bab4:	0800e2c2 	.word	0x0800e2c2
 800bab8:	0800e3e5 	.word	0x0800e3e5

0800babc <__multadd>:
 800babc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac0:	690d      	ldr	r5, [r1, #16]
 800bac2:	4607      	mov	r7, r0
 800bac4:	460c      	mov	r4, r1
 800bac6:	461e      	mov	r6, r3
 800bac8:	f101 0c14 	add.w	ip, r1, #20
 800bacc:	2000      	movs	r0, #0
 800bace:	f8dc 3000 	ldr.w	r3, [ip]
 800bad2:	b299      	uxth	r1, r3
 800bad4:	fb02 6101 	mla	r1, r2, r1, r6
 800bad8:	0c1e      	lsrs	r6, r3, #16
 800bada:	0c0b      	lsrs	r3, r1, #16
 800badc:	fb02 3306 	mla	r3, r2, r6, r3
 800bae0:	b289      	uxth	r1, r1
 800bae2:	3001      	adds	r0, #1
 800bae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bae8:	4285      	cmp	r5, r0
 800baea:	f84c 1b04 	str.w	r1, [ip], #4
 800baee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800baf2:	dcec      	bgt.n	800bace <__multadd+0x12>
 800baf4:	b30e      	cbz	r6, 800bb3a <__multadd+0x7e>
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	42ab      	cmp	r3, r5
 800bafa:	dc19      	bgt.n	800bb30 <__multadd+0x74>
 800bafc:	6861      	ldr	r1, [r4, #4]
 800bafe:	4638      	mov	r0, r7
 800bb00:	3101      	adds	r1, #1
 800bb02:	f7ff ff79 	bl	800b9f8 <_Balloc>
 800bb06:	4680      	mov	r8, r0
 800bb08:	b928      	cbnz	r0, 800bb16 <__multadd+0x5a>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb40 <__multadd+0x84>)
 800bb0e:	480d      	ldr	r0, [pc, #52]	@ (800bb44 <__multadd+0x88>)
 800bb10:	21ba      	movs	r1, #186	@ 0xba
 800bb12:	f7ff f805 	bl	800ab20 <__assert_func>
 800bb16:	6922      	ldr	r2, [r4, #16]
 800bb18:	3202      	adds	r2, #2
 800bb1a:	f104 010c 	add.w	r1, r4, #12
 800bb1e:	0092      	lsls	r2, r2, #2
 800bb20:	300c      	adds	r0, #12
 800bb22:	f001 fe4b 	bl	800d7bc <memcpy>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f7ff ffa5 	bl	800ba78 <_Bfree>
 800bb2e:	4644      	mov	r4, r8
 800bb30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb34:	3501      	adds	r5, #1
 800bb36:	615e      	str	r6, [r3, #20]
 800bb38:	6125      	str	r5, [r4, #16]
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb40:	0800e3d4 	.word	0x0800e3d4
 800bb44:	0800e3e5 	.word	0x0800e3e5

0800bb48 <__s2b>:
 800bb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	4615      	mov	r5, r2
 800bb50:	461f      	mov	r7, r3
 800bb52:	2209      	movs	r2, #9
 800bb54:	3308      	adds	r3, #8
 800bb56:	4606      	mov	r6, r0
 800bb58:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	2201      	movs	r2, #1
 800bb60:	429a      	cmp	r2, r3
 800bb62:	db09      	blt.n	800bb78 <__s2b+0x30>
 800bb64:	4630      	mov	r0, r6
 800bb66:	f7ff ff47 	bl	800b9f8 <_Balloc>
 800bb6a:	b940      	cbnz	r0, 800bb7e <__s2b+0x36>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	4b19      	ldr	r3, [pc, #100]	@ (800bbd4 <__s2b+0x8c>)
 800bb70:	4819      	ldr	r0, [pc, #100]	@ (800bbd8 <__s2b+0x90>)
 800bb72:	21d3      	movs	r1, #211	@ 0xd3
 800bb74:	f7fe ffd4 	bl	800ab20 <__assert_func>
 800bb78:	0052      	lsls	r2, r2, #1
 800bb7a:	3101      	adds	r1, #1
 800bb7c:	e7f0      	b.n	800bb60 <__s2b+0x18>
 800bb7e:	9b08      	ldr	r3, [sp, #32]
 800bb80:	6143      	str	r3, [r0, #20]
 800bb82:	2d09      	cmp	r5, #9
 800bb84:	f04f 0301 	mov.w	r3, #1
 800bb88:	6103      	str	r3, [r0, #16]
 800bb8a:	dd16      	ble.n	800bbba <__s2b+0x72>
 800bb8c:	f104 0909 	add.w	r9, r4, #9
 800bb90:	46c8      	mov	r8, r9
 800bb92:	442c      	add	r4, r5
 800bb94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb98:	4601      	mov	r1, r0
 800bb9a:	3b30      	subs	r3, #48	@ 0x30
 800bb9c:	220a      	movs	r2, #10
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f7ff ff8c 	bl	800babc <__multadd>
 800bba4:	45a0      	cmp	r8, r4
 800bba6:	d1f5      	bne.n	800bb94 <__s2b+0x4c>
 800bba8:	f1a5 0408 	sub.w	r4, r5, #8
 800bbac:	444c      	add	r4, r9
 800bbae:	1b2d      	subs	r5, r5, r4
 800bbb0:	1963      	adds	r3, r4, r5
 800bbb2:	42bb      	cmp	r3, r7
 800bbb4:	db04      	blt.n	800bbc0 <__s2b+0x78>
 800bbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbba:	340a      	adds	r4, #10
 800bbbc:	2509      	movs	r5, #9
 800bbbe:	e7f6      	b.n	800bbae <__s2b+0x66>
 800bbc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbc4:	4601      	mov	r1, r0
 800bbc6:	3b30      	subs	r3, #48	@ 0x30
 800bbc8:	220a      	movs	r2, #10
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f7ff ff76 	bl	800babc <__multadd>
 800bbd0:	e7ee      	b.n	800bbb0 <__s2b+0x68>
 800bbd2:	bf00      	nop
 800bbd4:	0800e3d4 	.word	0x0800e3d4
 800bbd8:	0800e3e5 	.word	0x0800e3e5

0800bbdc <__hi0bits>:
 800bbdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	bf36      	itet	cc
 800bbe4:	0403      	lslcc	r3, r0, #16
 800bbe6:	2000      	movcs	r0, #0
 800bbe8:	2010      	movcc	r0, #16
 800bbea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbee:	bf3c      	itt	cc
 800bbf0:	021b      	lslcc	r3, r3, #8
 800bbf2:	3008      	addcc	r0, #8
 800bbf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbf8:	bf3c      	itt	cc
 800bbfa:	011b      	lslcc	r3, r3, #4
 800bbfc:	3004      	addcc	r0, #4
 800bbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc02:	bf3c      	itt	cc
 800bc04:	009b      	lslcc	r3, r3, #2
 800bc06:	3002      	addcc	r0, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	db05      	blt.n	800bc18 <__hi0bits+0x3c>
 800bc0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc10:	f100 0001 	add.w	r0, r0, #1
 800bc14:	bf08      	it	eq
 800bc16:	2020      	moveq	r0, #32
 800bc18:	4770      	bx	lr

0800bc1a <__lo0bits>:
 800bc1a:	6803      	ldr	r3, [r0, #0]
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	f013 0007 	ands.w	r0, r3, #7
 800bc22:	d00b      	beq.n	800bc3c <__lo0bits+0x22>
 800bc24:	07d9      	lsls	r1, r3, #31
 800bc26:	d421      	bmi.n	800bc6c <__lo0bits+0x52>
 800bc28:	0798      	lsls	r0, r3, #30
 800bc2a:	bf49      	itett	mi
 800bc2c:	085b      	lsrmi	r3, r3, #1
 800bc2e:	089b      	lsrpl	r3, r3, #2
 800bc30:	2001      	movmi	r0, #1
 800bc32:	6013      	strmi	r3, [r2, #0]
 800bc34:	bf5c      	itt	pl
 800bc36:	6013      	strpl	r3, [r2, #0]
 800bc38:	2002      	movpl	r0, #2
 800bc3a:	4770      	bx	lr
 800bc3c:	b299      	uxth	r1, r3
 800bc3e:	b909      	cbnz	r1, 800bc44 <__lo0bits+0x2a>
 800bc40:	0c1b      	lsrs	r3, r3, #16
 800bc42:	2010      	movs	r0, #16
 800bc44:	b2d9      	uxtb	r1, r3
 800bc46:	b909      	cbnz	r1, 800bc4c <__lo0bits+0x32>
 800bc48:	3008      	adds	r0, #8
 800bc4a:	0a1b      	lsrs	r3, r3, #8
 800bc4c:	0719      	lsls	r1, r3, #28
 800bc4e:	bf04      	itt	eq
 800bc50:	091b      	lsreq	r3, r3, #4
 800bc52:	3004      	addeq	r0, #4
 800bc54:	0799      	lsls	r1, r3, #30
 800bc56:	bf04      	itt	eq
 800bc58:	089b      	lsreq	r3, r3, #2
 800bc5a:	3002      	addeq	r0, #2
 800bc5c:	07d9      	lsls	r1, r3, #31
 800bc5e:	d403      	bmi.n	800bc68 <__lo0bits+0x4e>
 800bc60:	085b      	lsrs	r3, r3, #1
 800bc62:	f100 0001 	add.w	r0, r0, #1
 800bc66:	d003      	beq.n	800bc70 <__lo0bits+0x56>
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	4770      	bx	lr
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	4770      	bx	lr
 800bc70:	2020      	movs	r0, #32
 800bc72:	4770      	bx	lr

0800bc74 <__i2b>:
 800bc74:	b510      	push	{r4, lr}
 800bc76:	460c      	mov	r4, r1
 800bc78:	2101      	movs	r1, #1
 800bc7a:	f7ff febd 	bl	800b9f8 <_Balloc>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	b928      	cbnz	r0, 800bc8e <__i2b+0x1a>
 800bc82:	4b05      	ldr	r3, [pc, #20]	@ (800bc98 <__i2b+0x24>)
 800bc84:	4805      	ldr	r0, [pc, #20]	@ (800bc9c <__i2b+0x28>)
 800bc86:	f240 1145 	movw	r1, #325	@ 0x145
 800bc8a:	f7fe ff49 	bl	800ab20 <__assert_func>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	6144      	str	r4, [r0, #20]
 800bc92:	6103      	str	r3, [r0, #16]
 800bc94:	bd10      	pop	{r4, pc}
 800bc96:	bf00      	nop
 800bc98:	0800e3d4 	.word	0x0800e3d4
 800bc9c:	0800e3e5 	.word	0x0800e3e5

0800bca0 <__multiply>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	4614      	mov	r4, r2
 800bca6:	690a      	ldr	r2, [r1, #16]
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	bfa8      	it	ge
 800bcae:	4623      	movge	r3, r4
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	bfa4      	itt	ge
 800bcb4:	460c      	movge	r4, r1
 800bcb6:	461f      	movge	r7, r3
 800bcb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bcbc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bcc0:	68a3      	ldr	r3, [r4, #8]
 800bcc2:	6861      	ldr	r1, [r4, #4]
 800bcc4:	eb0a 0609 	add.w	r6, sl, r9
 800bcc8:	42b3      	cmp	r3, r6
 800bcca:	b085      	sub	sp, #20
 800bccc:	bfb8      	it	lt
 800bcce:	3101      	addlt	r1, #1
 800bcd0:	f7ff fe92 	bl	800b9f8 <_Balloc>
 800bcd4:	b930      	cbnz	r0, 800bce4 <__multiply+0x44>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	4b44      	ldr	r3, [pc, #272]	@ (800bdec <__multiply+0x14c>)
 800bcda:	4845      	ldr	r0, [pc, #276]	@ (800bdf0 <__multiply+0x150>)
 800bcdc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bce0:	f7fe ff1e 	bl	800ab20 <__assert_func>
 800bce4:	f100 0514 	add.w	r5, r0, #20
 800bce8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcec:	462b      	mov	r3, r5
 800bcee:	2200      	movs	r2, #0
 800bcf0:	4543      	cmp	r3, r8
 800bcf2:	d321      	bcc.n	800bd38 <__multiply+0x98>
 800bcf4:	f107 0114 	add.w	r1, r7, #20
 800bcf8:	f104 0214 	add.w	r2, r4, #20
 800bcfc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bd00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bd04:	9302      	str	r3, [sp, #8]
 800bd06:	1b13      	subs	r3, r2, r4
 800bd08:	3b15      	subs	r3, #21
 800bd0a:	f023 0303 	bic.w	r3, r3, #3
 800bd0e:	3304      	adds	r3, #4
 800bd10:	f104 0715 	add.w	r7, r4, #21
 800bd14:	42ba      	cmp	r2, r7
 800bd16:	bf38      	it	cc
 800bd18:	2304      	movcc	r3, #4
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	9b02      	ldr	r3, [sp, #8]
 800bd1e:	9103      	str	r1, [sp, #12]
 800bd20:	428b      	cmp	r3, r1
 800bd22:	d80c      	bhi.n	800bd3e <__multiply+0x9e>
 800bd24:	2e00      	cmp	r6, #0
 800bd26:	dd03      	ble.n	800bd30 <__multiply+0x90>
 800bd28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d05b      	beq.n	800bde8 <__multiply+0x148>
 800bd30:	6106      	str	r6, [r0, #16]
 800bd32:	b005      	add	sp, #20
 800bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd38:	f843 2b04 	str.w	r2, [r3], #4
 800bd3c:	e7d8      	b.n	800bcf0 <__multiply+0x50>
 800bd3e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bd42:	f1ba 0f00 	cmp.w	sl, #0
 800bd46:	d024      	beq.n	800bd92 <__multiply+0xf2>
 800bd48:	f104 0e14 	add.w	lr, r4, #20
 800bd4c:	46a9      	mov	r9, r5
 800bd4e:	f04f 0c00 	mov.w	ip, #0
 800bd52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd56:	f8d9 3000 	ldr.w	r3, [r9]
 800bd5a:	fa1f fb87 	uxth.w	fp, r7
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	fb0a 330b 	mla	r3, sl, fp, r3
 800bd64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bd68:	f8d9 7000 	ldr.w	r7, [r9]
 800bd6c:	4463      	add	r3, ip
 800bd6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd72:	fb0a c70b 	mla	r7, sl, fp, ip
 800bd76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd80:	4572      	cmp	r2, lr
 800bd82:	f849 3b04 	str.w	r3, [r9], #4
 800bd86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd8a:	d8e2      	bhi.n	800bd52 <__multiply+0xb2>
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	f845 c003 	str.w	ip, [r5, r3]
 800bd92:	9b03      	ldr	r3, [sp, #12]
 800bd94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd98:	3104      	adds	r1, #4
 800bd9a:	f1b9 0f00 	cmp.w	r9, #0
 800bd9e:	d021      	beq.n	800bde4 <__multiply+0x144>
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	f104 0c14 	add.w	ip, r4, #20
 800bda6:	46ae      	mov	lr, r5
 800bda8:	f04f 0a00 	mov.w	sl, #0
 800bdac:	f8bc b000 	ldrh.w	fp, [ip]
 800bdb0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bdb4:	fb09 770b 	mla	r7, r9, fp, r7
 800bdb8:	4457      	add	r7, sl
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bdc0:	f84e 3b04 	str.w	r3, [lr], #4
 800bdc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdcc:	f8be 3000 	ldrh.w	r3, [lr]
 800bdd0:	fb09 330a 	mla	r3, r9, sl, r3
 800bdd4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bdd8:	4562      	cmp	r2, ip
 800bdda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdde:	d8e5      	bhi.n	800bdac <__multiply+0x10c>
 800bde0:	9f01      	ldr	r7, [sp, #4]
 800bde2:	51eb      	str	r3, [r5, r7]
 800bde4:	3504      	adds	r5, #4
 800bde6:	e799      	b.n	800bd1c <__multiply+0x7c>
 800bde8:	3e01      	subs	r6, #1
 800bdea:	e79b      	b.n	800bd24 <__multiply+0x84>
 800bdec:	0800e3d4 	.word	0x0800e3d4
 800bdf0:	0800e3e5 	.word	0x0800e3e5

0800bdf4 <__pow5mult>:
 800bdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf8:	4615      	mov	r5, r2
 800bdfa:	f012 0203 	ands.w	r2, r2, #3
 800bdfe:	4607      	mov	r7, r0
 800be00:	460e      	mov	r6, r1
 800be02:	d007      	beq.n	800be14 <__pow5mult+0x20>
 800be04:	4c25      	ldr	r4, [pc, #148]	@ (800be9c <__pow5mult+0xa8>)
 800be06:	3a01      	subs	r2, #1
 800be08:	2300      	movs	r3, #0
 800be0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be0e:	f7ff fe55 	bl	800babc <__multadd>
 800be12:	4606      	mov	r6, r0
 800be14:	10ad      	asrs	r5, r5, #2
 800be16:	d03d      	beq.n	800be94 <__pow5mult+0xa0>
 800be18:	69fc      	ldr	r4, [r7, #28]
 800be1a:	b97c      	cbnz	r4, 800be3c <__pow5mult+0x48>
 800be1c:	2010      	movs	r0, #16
 800be1e:	f7ff fd35 	bl	800b88c <malloc>
 800be22:	4602      	mov	r2, r0
 800be24:	61f8      	str	r0, [r7, #28]
 800be26:	b928      	cbnz	r0, 800be34 <__pow5mult+0x40>
 800be28:	4b1d      	ldr	r3, [pc, #116]	@ (800bea0 <__pow5mult+0xac>)
 800be2a:	481e      	ldr	r0, [pc, #120]	@ (800bea4 <__pow5mult+0xb0>)
 800be2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800be30:	f7fe fe76 	bl	800ab20 <__assert_func>
 800be34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be38:	6004      	str	r4, [r0, #0]
 800be3a:	60c4      	str	r4, [r0, #12]
 800be3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be44:	b94c      	cbnz	r4, 800be5a <__pow5mult+0x66>
 800be46:	f240 2171 	movw	r1, #625	@ 0x271
 800be4a:	4638      	mov	r0, r7
 800be4c:	f7ff ff12 	bl	800bc74 <__i2b>
 800be50:	2300      	movs	r3, #0
 800be52:	f8c8 0008 	str.w	r0, [r8, #8]
 800be56:	4604      	mov	r4, r0
 800be58:	6003      	str	r3, [r0, #0]
 800be5a:	f04f 0900 	mov.w	r9, #0
 800be5e:	07eb      	lsls	r3, r5, #31
 800be60:	d50a      	bpl.n	800be78 <__pow5mult+0x84>
 800be62:	4631      	mov	r1, r6
 800be64:	4622      	mov	r2, r4
 800be66:	4638      	mov	r0, r7
 800be68:	f7ff ff1a 	bl	800bca0 <__multiply>
 800be6c:	4631      	mov	r1, r6
 800be6e:	4680      	mov	r8, r0
 800be70:	4638      	mov	r0, r7
 800be72:	f7ff fe01 	bl	800ba78 <_Bfree>
 800be76:	4646      	mov	r6, r8
 800be78:	106d      	asrs	r5, r5, #1
 800be7a:	d00b      	beq.n	800be94 <__pow5mult+0xa0>
 800be7c:	6820      	ldr	r0, [r4, #0]
 800be7e:	b938      	cbnz	r0, 800be90 <__pow5mult+0x9c>
 800be80:	4622      	mov	r2, r4
 800be82:	4621      	mov	r1, r4
 800be84:	4638      	mov	r0, r7
 800be86:	f7ff ff0b 	bl	800bca0 <__multiply>
 800be8a:	6020      	str	r0, [r4, #0]
 800be8c:	f8c0 9000 	str.w	r9, [r0]
 800be90:	4604      	mov	r4, r0
 800be92:	e7e4      	b.n	800be5e <__pow5mult+0x6a>
 800be94:	4630      	mov	r0, r6
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	bf00      	nop
 800be9c:	0800e440 	.word	0x0800e440
 800bea0:	0800e2c2 	.word	0x0800e2c2
 800bea4:	0800e3e5 	.word	0x0800e3e5

0800bea8 <__lshift>:
 800bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	460c      	mov	r4, r1
 800beae:	6849      	ldr	r1, [r1, #4]
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beb6:	68a3      	ldr	r3, [r4, #8]
 800beb8:	4607      	mov	r7, r0
 800beba:	4691      	mov	r9, r2
 800bebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bec0:	f108 0601 	add.w	r6, r8, #1
 800bec4:	42b3      	cmp	r3, r6
 800bec6:	db0b      	blt.n	800bee0 <__lshift+0x38>
 800bec8:	4638      	mov	r0, r7
 800beca:	f7ff fd95 	bl	800b9f8 <_Balloc>
 800bece:	4605      	mov	r5, r0
 800bed0:	b948      	cbnz	r0, 800bee6 <__lshift+0x3e>
 800bed2:	4602      	mov	r2, r0
 800bed4:	4b28      	ldr	r3, [pc, #160]	@ (800bf78 <__lshift+0xd0>)
 800bed6:	4829      	ldr	r0, [pc, #164]	@ (800bf7c <__lshift+0xd4>)
 800bed8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bedc:	f7fe fe20 	bl	800ab20 <__assert_func>
 800bee0:	3101      	adds	r1, #1
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	e7ee      	b.n	800bec4 <__lshift+0x1c>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f100 0114 	add.w	r1, r0, #20
 800beec:	f100 0210 	add.w	r2, r0, #16
 800bef0:	4618      	mov	r0, r3
 800bef2:	4553      	cmp	r3, sl
 800bef4:	db33      	blt.n	800bf5e <__lshift+0xb6>
 800bef6:	6920      	ldr	r0, [r4, #16]
 800bef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800befc:	f104 0314 	add.w	r3, r4, #20
 800bf00:	f019 091f 	ands.w	r9, r9, #31
 800bf04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf0c:	d02b      	beq.n	800bf66 <__lshift+0xbe>
 800bf0e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf12:	468a      	mov	sl, r1
 800bf14:	2200      	movs	r2, #0
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	fa00 f009 	lsl.w	r0, r0, r9
 800bf1c:	4310      	orrs	r0, r2
 800bf1e:	f84a 0b04 	str.w	r0, [sl], #4
 800bf22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf26:	459c      	cmp	ip, r3
 800bf28:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf2c:	d8f3      	bhi.n	800bf16 <__lshift+0x6e>
 800bf2e:	ebac 0304 	sub.w	r3, ip, r4
 800bf32:	3b15      	subs	r3, #21
 800bf34:	f023 0303 	bic.w	r3, r3, #3
 800bf38:	3304      	adds	r3, #4
 800bf3a:	f104 0015 	add.w	r0, r4, #21
 800bf3e:	4584      	cmp	ip, r0
 800bf40:	bf38      	it	cc
 800bf42:	2304      	movcc	r3, #4
 800bf44:	50ca      	str	r2, [r1, r3]
 800bf46:	b10a      	cbz	r2, 800bf4c <__lshift+0xa4>
 800bf48:	f108 0602 	add.w	r6, r8, #2
 800bf4c:	3e01      	subs	r6, #1
 800bf4e:	4638      	mov	r0, r7
 800bf50:	612e      	str	r6, [r5, #16]
 800bf52:	4621      	mov	r1, r4
 800bf54:	f7ff fd90 	bl	800ba78 <_Bfree>
 800bf58:	4628      	mov	r0, r5
 800bf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf62:	3301      	adds	r3, #1
 800bf64:	e7c5      	b.n	800bef2 <__lshift+0x4a>
 800bf66:	3904      	subs	r1, #4
 800bf68:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf70:	459c      	cmp	ip, r3
 800bf72:	d8f9      	bhi.n	800bf68 <__lshift+0xc0>
 800bf74:	e7ea      	b.n	800bf4c <__lshift+0xa4>
 800bf76:	bf00      	nop
 800bf78:	0800e3d4 	.word	0x0800e3d4
 800bf7c:	0800e3e5 	.word	0x0800e3e5

0800bf80 <__mcmp>:
 800bf80:	690a      	ldr	r2, [r1, #16]
 800bf82:	4603      	mov	r3, r0
 800bf84:	6900      	ldr	r0, [r0, #16]
 800bf86:	1a80      	subs	r0, r0, r2
 800bf88:	b530      	push	{r4, r5, lr}
 800bf8a:	d10e      	bne.n	800bfaa <__mcmp+0x2a>
 800bf8c:	3314      	adds	r3, #20
 800bf8e:	3114      	adds	r1, #20
 800bf90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfa0:	4295      	cmp	r5, r2
 800bfa2:	d003      	beq.n	800bfac <__mcmp+0x2c>
 800bfa4:	d205      	bcs.n	800bfb2 <__mcmp+0x32>
 800bfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfaa:	bd30      	pop	{r4, r5, pc}
 800bfac:	42a3      	cmp	r3, r4
 800bfae:	d3f3      	bcc.n	800bf98 <__mcmp+0x18>
 800bfb0:	e7fb      	b.n	800bfaa <__mcmp+0x2a>
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	e7f9      	b.n	800bfaa <__mcmp+0x2a>
	...

0800bfb8 <__mdiff>:
 800bfb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	4689      	mov	r9, r1
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	4648      	mov	r0, r9
 800bfc4:	4614      	mov	r4, r2
 800bfc6:	f7ff ffdb 	bl	800bf80 <__mcmp>
 800bfca:	1e05      	subs	r5, r0, #0
 800bfcc:	d112      	bne.n	800bff4 <__mdiff+0x3c>
 800bfce:	4629      	mov	r1, r5
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f7ff fd11 	bl	800b9f8 <_Balloc>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	b928      	cbnz	r0, 800bfe6 <__mdiff+0x2e>
 800bfda:	4b3f      	ldr	r3, [pc, #252]	@ (800c0d8 <__mdiff+0x120>)
 800bfdc:	f240 2137 	movw	r1, #567	@ 0x237
 800bfe0:	483e      	ldr	r0, [pc, #248]	@ (800c0dc <__mdiff+0x124>)
 800bfe2:	f7fe fd9d 	bl	800ab20 <__assert_func>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfec:	4610      	mov	r0, r2
 800bfee:	b003      	add	sp, #12
 800bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff4:	bfbc      	itt	lt
 800bff6:	464b      	movlt	r3, r9
 800bff8:	46a1      	movlt	r9, r4
 800bffa:	4630      	mov	r0, r6
 800bffc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c000:	bfba      	itte	lt
 800c002:	461c      	movlt	r4, r3
 800c004:	2501      	movlt	r5, #1
 800c006:	2500      	movge	r5, #0
 800c008:	f7ff fcf6 	bl	800b9f8 <_Balloc>
 800c00c:	4602      	mov	r2, r0
 800c00e:	b918      	cbnz	r0, 800c018 <__mdiff+0x60>
 800c010:	4b31      	ldr	r3, [pc, #196]	@ (800c0d8 <__mdiff+0x120>)
 800c012:	f240 2145 	movw	r1, #581	@ 0x245
 800c016:	e7e3      	b.n	800bfe0 <__mdiff+0x28>
 800c018:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c01c:	6926      	ldr	r6, [r4, #16]
 800c01e:	60c5      	str	r5, [r0, #12]
 800c020:	f109 0310 	add.w	r3, r9, #16
 800c024:	f109 0514 	add.w	r5, r9, #20
 800c028:	f104 0e14 	add.w	lr, r4, #20
 800c02c:	f100 0b14 	add.w	fp, r0, #20
 800c030:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c034:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	46d9      	mov	r9, fp
 800c03c:	f04f 0c00 	mov.w	ip, #0
 800c040:	9b01      	ldr	r3, [sp, #4]
 800c042:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c046:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	fa1f f38a 	uxth.w	r3, sl
 800c050:	4619      	mov	r1, r3
 800c052:	b283      	uxth	r3, r0
 800c054:	1acb      	subs	r3, r1, r3
 800c056:	0c00      	lsrs	r0, r0, #16
 800c058:	4463      	add	r3, ip
 800c05a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c05e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c062:	b29b      	uxth	r3, r3
 800c064:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c068:	4576      	cmp	r6, lr
 800c06a:	f849 3b04 	str.w	r3, [r9], #4
 800c06e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c072:	d8e5      	bhi.n	800c040 <__mdiff+0x88>
 800c074:	1b33      	subs	r3, r6, r4
 800c076:	3b15      	subs	r3, #21
 800c078:	f023 0303 	bic.w	r3, r3, #3
 800c07c:	3415      	adds	r4, #21
 800c07e:	3304      	adds	r3, #4
 800c080:	42a6      	cmp	r6, r4
 800c082:	bf38      	it	cc
 800c084:	2304      	movcc	r3, #4
 800c086:	441d      	add	r5, r3
 800c088:	445b      	add	r3, fp
 800c08a:	461e      	mov	r6, r3
 800c08c:	462c      	mov	r4, r5
 800c08e:	4544      	cmp	r4, r8
 800c090:	d30e      	bcc.n	800c0b0 <__mdiff+0xf8>
 800c092:	f108 0103 	add.w	r1, r8, #3
 800c096:	1b49      	subs	r1, r1, r5
 800c098:	f021 0103 	bic.w	r1, r1, #3
 800c09c:	3d03      	subs	r5, #3
 800c09e:	45a8      	cmp	r8, r5
 800c0a0:	bf38      	it	cc
 800c0a2:	2100      	movcc	r1, #0
 800c0a4:	440b      	add	r3, r1
 800c0a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0aa:	b191      	cbz	r1, 800c0d2 <__mdiff+0x11a>
 800c0ac:	6117      	str	r7, [r2, #16]
 800c0ae:	e79d      	b.n	800bfec <__mdiff+0x34>
 800c0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b4:	46e6      	mov	lr, ip
 800c0b6:	0c08      	lsrs	r0, r1, #16
 800c0b8:	fa1c fc81 	uxtah	ip, ip, r1
 800c0bc:	4471      	add	r1, lr
 800c0be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c0c2:	b289      	uxth	r1, r1
 800c0c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c0c8:	f846 1b04 	str.w	r1, [r6], #4
 800c0cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0d0:	e7dd      	b.n	800c08e <__mdiff+0xd6>
 800c0d2:	3f01      	subs	r7, #1
 800c0d4:	e7e7      	b.n	800c0a6 <__mdiff+0xee>
 800c0d6:	bf00      	nop
 800c0d8:	0800e3d4 	.word	0x0800e3d4
 800c0dc:	0800e3e5 	.word	0x0800e3e5

0800c0e0 <__ulp>:
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	ed8d 0b00 	vstr	d0, [sp]
 800c0e6:	9a01      	ldr	r2, [sp, #4]
 800c0e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c128 <__ulp+0x48>)
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	dc08      	bgt.n	800c106 <__ulp+0x26>
 800c0f4:	425b      	negs	r3, r3
 800c0f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c0fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0fe:	da04      	bge.n	800c10a <__ulp+0x2a>
 800c100:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c104:	4113      	asrs	r3, r2
 800c106:	2200      	movs	r2, #0
 800c108:	e008      	b.n	800c11c <__ulp+0x3c>
 800c10a:	f1a2 0314 	sub.w	r3, r2, #20
 800c10e:	2b1e      	cmp	r3, #30
 800c110:	bfda      	itte	le
 800c112:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c116:	40da      	lsrle	r2, r3
 800c118:	2201      	movgt	r2, #1
 800c11a:	2300      	movs	r3, #0
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	ec41 0b10 	vmov	d0, r0, r1
 800c124:	b002      	add	sp, #8
 800c126:	4770      	bx	lr
 800c128:	7ff00000 	.word	0x7ff00000

0800c12c <__b2d>:
 800c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	6906      	ldr	r6, [r0, #16]
 800c132:	f100 0814 	add.w	r8, r0, #20
 800c136:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c13a:	1f37      	subs	r7, r6, #4
 800c13c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c140:	4610      	mov	r0, r2
 800c142:	f7ff fd4b 	bl	800bbdc <__hi0bits>
 800c146:	f1c0 0320 	rsb	r3, r0, #32
 800c14a:	280a      	cmp	r0, #10
 800c14c:	600b      	str	r3, [r1, #0]
 800c14e:	491b      	ldr	r1, [pc, #108]	@ (800c1bc <__b2d+0x90>)
 800c150:	dc15      	bgt.n	800c17e <__b2d+0x52>
 800c152:	f1c0 0c0b 	rsb	ip, r0, #11
 800c156:	fa22 f30c 	lsr.w	r3, r2, ip
 800c15a:	45b8      	cmp	r8, r7
 800c15c:	ea43 0501 	orr.w	r5, r3, r1
 800c160:	bf34      	ite	cc
 800c162:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c166:	2300      	movcs	r3, #0
 800c168:	3015      	adds	r0, #21
 800c16a:	fa02 f000 	lsl.w	r0, r2, r0
 800c16e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c172:	4303      	orrs	r3, r0
 800c174:	461c      	mov	r4, r3
 800c176:	ec45 4b10 	vmov	d0, r4, r5
 800c17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17e:	45b8      	cmp	r8, r7
 800c180:	bf3a      	itte	cc
 800c182:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c186:	f1a6 0708 	subcc.w	r7, r6, #8
 800c18a:	2300      	movcs	r3, #0
 800c18c:	380b      	subs	r0, #11
 800c18e:	d012      	beq.n	800c1b6 <__b2d+0x8a>
 800c190:	f1c0 0120 	rsb	r1, r0, #32
 800c194:	fa23 f401 	lsr.w	r4, r3, r1
 800c198:	4082      	lsls	r2, r0
 800c19a:	4322      	orrs	r2, r4
 800c19c:	4547      	cmp	r7, r8
 800c19e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c1a2:	bf8c      	ite	hi
 800c1a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c1a8:	2200      	movls	r2, #0
 800c1aa:	4083      	lsls	r3, r0
 800c1ac:	40ca      	lsrs	r2, r1
 800c1ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	e7de      	b.n	800c174 <__b2d+0x48>
 800c1b6:	ea42 0501 	orr.w	r5, r2, r1
 800c1ba:	e7db      	b.n	800c174 <__b2d+0x48>
 800c1bc:	3ff00000 	.word	0x3ff00000

0800c1c0 <__d2b>:
 800c1c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	ec59 8b10 	vmov	r8, r9, d0
 800c1cc:	4616      	mov	r6, r2
 800c1ce:	f7ff fc13 	bl	800b9f8 <_Balloc>
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	b930      	cbnz	r0, 800c1e4 <__d2b+0x24>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	4b23      	ldr	r3, [pc, #140]	@ (800c268 <__d2b+0xa8>)
 800c1da:	4824      	ldr	r0, [pc, #144]	@ (800c26c <__d2b+0xac>)
 800c1dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c1e0:	f7fe fc9e 	bl	800ab20 <__assert_func>
 800c1e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1ec:	b10d      	cbz	r5, 800c1f2 <__d2b+0x32>
 800c1ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	f1b8 0300 	subs.w	r3, r8, #0
 800c1f8:	d023      	beq.n	800c242 <__d2b+0x82>
 800c1fa:	4668      	mov	r0, sp
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	f7ff fd0c 	bl	800bc1a <__lo0bits>
 800c202:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c206:	b1d0      	cbz	r0, 800c23e <__d2b+0x7e>
 800c208:	f1c0 0320 	rsb	r3, r0, #32
 800c20c:	fa02 f303 	lsl.w	r3, r2, r3
 800c210:	430b      	orrs	r3, r1
 800c212:	40c2      	lsrs	r2, r0
 800c214:	6163      	str	r3, [r4, #20]
 800c216:	9201      	str	r2, [sp, #4]
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	61a3      	str	r3, [r4, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	bf0c      	ite	eq
 800c220:	2201      	moveq	r2, #1
 800c222:	2202      	movne	r2, #2
 800c224:	6122      	str	r2, [r4, #16]
 800c226:	b1a5      	cbz	r5, 800c252 <__d2b+0x92>
 800c228:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c22c:	4405      	add	r5, r0
 800c22e:	603d      	str	r5, [r7, #0]
 800c230:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c234:	6030      	str	r0, [r6, #0]
 800c236:	4620      	mov	r0, r4
 800c238:	b003      	add	sp, #12
 800c23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c23e:	6161      	str	r1, [r4, #20]
 800c240:	e7ea      	b.n	800c218 <__d2b+0x58>
 800c242:	a801      	add	r0, sp, #4
 800c244:	f7ff fce9 	bl	800bc1a <__lo0bits>
 800c248:	9b01      	ldr	r3, [sp, #4]
 800c24a:	6163      	str	r3, [r4, #20]
 800c24c:	3020      	adds	r0, #32
 800c24e:	2201      	movs	r2, #1
 800c250:	e7e8      	b.n	800c224 <__d2b+0x64>
 800c252:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c256:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c25a:	6038      	str	r0, [r7, #0]
 800c25c:	6918      	ldr	r0, [r3, #16]
 800c25e:	f7ff fcbd 	bl	800bbdc <__hi0bits>
 800c262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c266:	e7e5      	b.n	800c234 <__d2b+0x74>
 800c268:	0800e3d4 	.word	0x0800e3d4
 800c26c:	0800e3e5 	.word	0x0800e3e5

0800c270 <__ratio>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	b085      	sub	sp, #20
 800c276:	e9cd 1000 	strd	r1, r0, [sp]
 800c27a:	a902      	add	r1, sp, #8
 800c27c:	f7ff ff56 	bl	800c12c <__b2d>
 800c280:	9800      	ldr	r0, [sp, #0]
 800c282:	a903      	add	r1, sp, #12
 800c284:	ec55 4b10 	vmov	r4, r5, d0
 800c288:	f7ff ff50 	bl	800c12c <__b2d>
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	6919      	ldr	r1, [r3, #16]
 800c290:	9b00      	ldr	r3, [sp, #0]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	1ac9      	subs	r1, r1, r3
 800c296:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	ec5b ab10 	vmov	sl, fp, d0
 800c2a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bfce      	itee	gt
 800c2a8:	462a      	movgt	r2, r5
 800c2aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2ae:	465a      	movle	r2, fp
 800c2b0:	462f      	mov	r7, r5
 800c2b2:	46d9      	mov	r9, fp
 800c2b4:	bfcc      	ite	gt
 800c2b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c2be:	464b      	mov	r3, r9
 800c2c0:	4652      	mov	r2, sl
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	4639      	mov	r1, r7
 800c2c6:	f7f4 faf9 	bl	80008bc <__aeabi_ddiv>
 800c2ca:	ec41 0b10 	vmov	d0, r0, r1
 800c2ce:	b005      	add	sp, #20
 800c2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2d4 <__copybits>:
 800c2d4:	3901      	subs	r1, #1
 800c2d6:	b570      	push	{r4, r5, r6, lr}
 800c2d8:	1149      	asrs	r1, r1, #5
 800c2da:	6914      	ldr	r4, [r2, #16]
 800c2dc:	3101      	adds	r1, #1
 800c2de:	f102 0314 	add.w	r3, r2, #20
 800c2e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2ea:	1f05      	subs	r5, r0, #4
 800c2ec:	42a3      	cmp	r3, r4
 800c2ee:	d30c      	bcc.n	800c30a <__copybits+0x36>
 800c2f0:	1aa3      	subs	r3, r4, r2
 800c2f2:	3b11      	subs	r3, #17
 800c2f4:	f023 0303 	bic.w	r3, r3, #3
 800c2f8:	3211      	adds	r2, #17
 800c2fa:	42a2      	cmp	r2, r4
 800c2fc:	bf88      	it	hi
 800c2fe:	2300      	movhi	r3, #0
 800c300:	4418      	add	r0, r3
 800c302:	2300      	movs	r3, #0
 800c304:	4288      	cmp	r0, r1
 800c306:	d305      	bcc.n	800c314 <__copybits+0x40>
 800c308:	bd70      	pop	{r4, r5, r6, pc}
 800c30a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c30e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c312:	e7eb      	b.n	800c2ec <__copybits+0x18>
 800c314:	f840 3b04 	str.w	r3, [r0], #4
 800c318:	e7f4      	b.n	800c304 <__copybits+0x30>

0800c31a <__any_on>:
 800c31a:	f100 0214 	add.w	r2, r0, #20
 800c31e:	6900      	ldr	r0, [r0, #16]
 800c320:	114b      	asrs	r3, r1, #5
 800c322:	4298      	cmp	r0, r3
 800c324:	b510      	push	{r4, lr}
 800c326:	db11      	blt.n	800c34c <__any_on+0x32>
 800c328:	dd0a      	ble.n	800c340 <__any_on+0x26>
 800c32a:	f011 011f 	ands.w	r1, r1, #31
 800c32e:	d007      	beq.n	800c340 <__any_on+0x26>
 800c330:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c334:	fa24 f001 	lsr.w	r0, r4, r1
 800c338:	fa00 f101 	lsl.w	r1, r0, r1
 800c33c:	428c      	cmp	r4, r1
 800c33e:	d10b      	bne.n	800c358 <__any_on+0x3e>
 800c340:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c344:	4293      	cmp	r3, r2
 800c346:	d803      	bhi.n	800c350 <__any_on+0x36>
 800c348:	2000      	movs	r0, #0
 800c34a:	bd10      	pop	{r4, pc}
 800c34c:	4603      	mov	r3, r0
 800c34e:	e7f7      	b.n	800c340 <__any_on+0x26>
 800c350:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c354:	2900      	cmp	r1, #0
 800c356:	d0f5      	beq.n	800c344 <__any_on+0x2a>
 800c358:	2001      	movs	r0, #1
 800c35a:	e7f6      	b.n	800c34a <__any_on+0x30>

0800c35c <sulp>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4604      	mov	r4, r0
 800c360:	460d      	mov	r5, r1
 800c362:	ec45 4b10 	vmov	d0, r4, r5
 800c366:	4616      	mov	r6, r2
 800c368:	f7ff feba 	bl	800c0e0 <__ulp>
 800c36c:	ec51 0b10 	vmov	r0, r1, d0
 800c370:	b17e      	cbz	r6, 800c392 <sulp+0x36>
 800c372:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c376:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dd09      	ble.n	800c392 <sulp+0x36>
 800c37e:	051b      	lsls	r3, r3, #20
 800c380:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c384:	2400      	movs	r4, #0
 800c386:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c38a:	4622      	mov	r2, r4
 800c38c:	462b      	mov	r3, r5
 800c38e:	f7f4 f96b 	bl	8000668 <__aeabi_dmul>
 800c392:	ec41 0b10 	vmov	d0, r0, r1
 800c396:	bd70      	pop	{r4, r5, r6, pc}

0800c398 <_strtod_l>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	b09f      	sub	sp, #124	@ 0x7c
 800c39e:	460c      	mov	r4, r1
 800c3a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c3a6:	9005      	str	r0, [sp, #20]
 800c3a8:	f04f 0a00 	mov.w	sl, #0
 800c3ac:	f04f 0b00 	mov.w	fp, #0
 800c3b0:	460a      	mov	r2, r1
 800c3b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3b4:	7811      	ldrb	r1, [r2, #0]
 800c3b6:	292b      	cmp	r1, #43	@ 0x2b
 800c3b8:	d04a      	beq.n	800c450 <_strtod_l+0xb8>
 800c3ba:	d838      	bhi.n	800c42e <_strtod_l+0x96>
 800c3bc:	290d      	cmp	r1, #13
 800c3be:	d832      	bhi.n	800c426 <_strtod_l+0x8e>
 800c3c0:	2908      	cmp	r1, #8
 800c3c2:	d832      	bhi.n	800c42a <_strtod_l+0x92>
 800c3c4:	2900      	cmp	r1, #0
 800c3c6:	d03b      	beq.n	800c440 <_strtod_l+0xa8>
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c3cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c3ce:	782a      	ldrb	r2, [r5, #0]
 800c3d0:	2a30      	cmp	r2, #48	@ 0x30
 800c3d2:	f040 80b3 	bne.w	800c53c <_strtod_l+0x1a4>
 800c3d6:	786a      	ldrb	r2, [r5, #1]
 800c3d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c3dc:	2a58      	cmp	r2, #88	@ 0x58
 800c3de:	d16e      	bne.n	800c4be <_strtod_l+0x126>
 800c3e0:	9302      	str	r3, [sp, #8]
 800c3e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	4a8e      	ldr	r2, [pc, #568]	@ (800c624 <_strtod_l+0x28c>)
 800c3ec:	9805      	ldr	r0, [sp, #20]
 800c3ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c3f0:	a919      	add	r1, sp, #100	@ 0x64
 800c3f2:	f001 fa7b 	bl	800d8ec <__gethex>
 800c3f6:	f010 060f 	ands.w	r6, r0, #15
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	d005      	beq.n	800c40a <_strtod_l+0x72>
 800c3fe:	2e06      	cmp	r6, #6
 800c400:	d128      	bne.n	800c454 <_strtod_l+0xbc>
 800c402:	3501      	adds	r5, #1
 800c404:	2300      	movs	r3, #0
 800c406:	9519      	str	r5, [sp, #100]	@ 0x64
 800c408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c40a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f040 858e 	bne.w	800cf2e <_strtod_l+0xb96>
 800c412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c414:	b1cb      	cbz	r3, 800c44a <_strtod_l+0xb2>
 800c416:	4652      	mov	r2, sl
 800c418:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c41c:	ec43 2b10 	vmov	d0, r2, r3
 800c420:	b01f      	add	sp, #124	@ 0x7c
 800c422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c426:	2920      	cmp	r1, #32
 800c428:	d1ce      	bne.n	800c3c8 <_strtod_l+0x30>
 800c42a:	3201      	adds	r2, #1
 800c42c:	e7c1      	b.n	800c3b2 <_strtod_l+0x1a>
 800c42e:	292d      	cmp	r1, #45	@ 0x2d
 800c430:	d1ca      	bne.n	800c3c8 <_strtod_l+0x30>
 800c432:	2101      	movs	r1, #1
 800c434:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c436:	1c51      	adds	r1, r2, #1
 800c438:	9119      	str	r1, [sp, #100]	@ 0x64
 800c43a:	7852      	ldrb	r2, [r2, #1]
 800c43c:	2a00      	cmp	r2, #0
 800c43e:	d1c5      	bne.n	800c3cc <_strtod_l+0x34>
 800c440:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c442:	9419      	str	r4, [sp, #100]	@ 0x64
 800c444:	2b00      	cmp	r3, #0
 800c446:	f040 8570 	bne.w	800cf2a <_strtod_l+0xb92>
 800c44a:	4652      	mov	r2, sl
 800c44c:	465b      	mov	r3, fp
 800c44e:	e7e5      	b.n	800c41c <_strtod_l+0x84>
 800c450:	2100      	movs	r1, #0
 800c452:	e7ef      	b.n	800c434 <_strtod_l+0x9c>
 800c454:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c456:	b13a      	cbz	r2, 800c468 <_strtod_l+0xd0>
 800c458:	2135      	movs	r1, #53	@ 0x35
 800c45a:	a81c      	add	r0, sp, #112	@ 0x70
 800c45c:	f7ff ff3a 	bl	800c2d4 <__copybits>
 800c460:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c462:	9805      	ldr	r0, [sp, #20]
 800c464:	f7ff fb08 	bl	800ba78 <_Bfree>
 800c468:	3e01      	subs	r6, #1
 800c46a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c46c:	2e04      	cmp	r6, #4
 800c46e:	d806      	bhi.n	800c47e <_strtod_l+0xe6>
 800c470:	e8df f006 	tbb	[pc, r6]
 800c474:	201d0314 	.word	0x201d0314
 800c478:	14          	.byte	0x14
 800c479:	00          	.byte	0x00
 800c47a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c47e:	05e1      	lsls	r1, r4, #23
 800c480:	bf48      	it	mi
 800c482:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c48a:	0d1b      	lsrs	r3, r3, #20
 800c48c:	051b      	lsls	r3, r3, #20
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1bb      	bne.n	800c40a <_strtod_l+0x72>
 800c492:	f7fe fb11 	bl	800aab8 <__errno>
 800c496:	2322      	movs	r3, #34	@ 0x22
 800c498:	6003      	str	r3, [r0, #0]
 800c49a:	e7b6      	b.n	800c40a <_strtod_l+0x72>
 800c49c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c4a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c4a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c4a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c4ac:	e7e7      	b.n	800c47e <_strtod_l+0xe6>
 800c4ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c62c <_strtod_l+0x294>
 800c4b2:	e7e4      	b.n	800c47e <_strtod_l+0xe6>
 800c4b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c4b8:	f04f 3aff 	mov.w	sl, #4294967295
 800c4bc:	e7df      	b.n	800c47e <_strtod_l+0xe6>
 800c4be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4c4:	785b      	ldrb	r3, [r3, #1]
 800c4c6:	2b30      	cmp	r3, #48	@ 0x30
 800c4c8:	d0f9      	beq.n	800c4be <_strtod_l+0x126>
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d09d      	beq.n	800c40a <_strtod_l+0x72>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9308      	str	r3, [sp, #32]
 800c4da:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4dc:	461f      	mov	r7, r3
 800c4de:	220a      	movs	r2, #10
 800c4e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c4e2:	7805      	ldrb	r5, [r0, #0]
 800c4e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c4e8:	b2d9      	uxtb	r1, r3
 800c4ea:	2909      	cmp	r1, #9
 800c4ec:	d928      	bls.n	800c540 <_strtod_l+0x1a8>
 800c4ee:	494e      	ldr	r1, [pc, #312]	@ (800c628 <_strtod_l+0x290>)
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f001 f941 	bl	800d778 <strncmp>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d032      	beq.n	800c560 <_strtod_l+0x1c8>
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	462a      	mov	r2, r5
 800c4fe:	4681      	mov	r9, r0
 800c500:	463d      	mov	r5, r7
 800c502:	4603      	mov	r3, r0
 800c504:	2a65      	cmp	r2, #101	@ 0x65
 800c506:	d001      	beq.n	800c50c <_strtod_l+0x174>
 800c508:	2a45      	cmp	r2, #69	@ 0x45
 800c50a:	d114      	bne.n	800c536 <_strtod_l+0x19e>
 800c50c:	b91d      	cbnz	r5, 800c516 <_strtod_l+0x17e>
 800c50e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c510:	4302      	orrs	r2, r0
 800c512:	d095      	beq.n	800c440 <_strtod_l+0xa8>
 800c514:	2500      	movs	r5, #0
 800c516:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c518:	1c62      	adds	r2, r4, #1
 800c51a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c51c:	7862      	ldrb	r2, [r4, #1]
 800c51e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c520:	d077      	beq.n	800c612 <_strtod_l+0x27a>
 800c522:	2a2d      	cmp	r2, #45	@ 0x2d
 800c524:	d07b      	beq.n	800c61e <_strtod_l+0x286>
 800c526:	f04f 0c00 	mov.w	ip, #0
 800c52a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c52e:	2909      	cmp	r1, #9
 800c530:	f240 8082 	bls.w	800c638 <_strtod_l+0x2a0>
 800c534:	9419      	str	r4, [sp, #100]	@ 0x64
 800c536:	f04f 0800 	mov.w	r8, #0
 800c53a:	e0a2      	b.n	800c682 <_strtod_l+0x2ea>
 800c53c:	2300      	movs	r3, #0
 800c53e:	e7c7      	b.n	800c4d0 <_strtod_l+0x138>
 800c540:	2f08      	cmp	r7, #8
 800c542:	bfd5      	itete	le
 800c544:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c546:	9908      	ldrgt	r1, [sp, #32]
 800c548:	fb02 3301 	mlale	r3, r2, r1, r3
 800c54c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c550:	f100 0001 	add.w	r0, r0, #1
 800c554:	bfd4      	ite	le
 800c556:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c558:	9308      	strgt	r3, [sp, #32]
 800c55a:	3701      	adds	r7, #1
 800c55c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c55e:	e7bf      	b.n	800c4e0 <_strtod_l+0x148>
 800c560:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	9219      	str	r2, [sp, #100]	@ 0x64
 800c566:	785a      	ldrb	r2, [r3, #1]
 800c568:	b37f      	cbz	r7, 800c5ca <_strtod_l+0x232>
 800c56a:	4681      	mov	r9, r0
 800c56c:	463d      	mov	r5, r7
 800c56e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c572:	2b09      	cmp	r3, #9
 800c574:	d912      	bls.n	800c59c <_strtod_l+0x204>
 800c576:	2301      	movs	r3, #1
 800c578:	e7c4      	b.n	800c504 <_strtod_l+0x16c>
 800c57a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c580:	785a      	ldrb	r2, [r3, #1]
 800c582:	3001      	adds	r0, #1
 800c584:	2a30      	cmp	r2, #48	@ 0x30
 800c586:	d0f8      	beq.n	800c57a <_strtod_l+0x1e2>
 800c588:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c58c:	2b08      	cmp	r3, #8
 800c58e:	f200 84d3 	bhi.w	800cf38 <_strtod_l+0xba0>
 800c592:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c594:	930c      	str	r3, [sp, #48]	@ 0x30
 800c596:	4681      	mov	r9, r0
 800c598:	2000      	movs	r0, #0
 800c59a:	4605      	mov	r5, r0
 800c59c:	3a30      	subs	r2, #48	@ 0x30
 800c59e:	f100 0301 	add.w	r3, r0, #1
 800c5a2:	d02a      	beq.n	800c5fa <_strtod_l+0x262>
 800c5a4:	4499      	add	r9, r3
 800c5a6:	eb00 0c05 	add.w	ip, r0, r5
 800c5aa:	462b      	mov	r3, r5
 800c5ac:	210a      	movs	r1, #10
 800c5ae:	4563      	cmp	r3, ip
 800c5b0:	d10d      	bne.n	800c5ce <_strtod_l+0x236>
 800c5b2:	1c69      	adds	r1, r5, #1
 800c5b4:	4401      	add	r1, r0
 800c5b6:	4428      	add	r0, r5
 800c5b8:	2808      	cmp	r0, #8
 800c5ba:	dc16      	bgt.n	800c5ea <_strtod_l+0x252>
 800c5bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5be:	230a      	movs	r3, #10
 800c5c0:	fb03 2300 	mla	r3, r3, r0, r2
 800c5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e018      	b.n	800c5fc <_strtod_l+0x264>
 800c5ca:	4638      	mov	r0, r7
 800c5cc:	e7da      	b.n	800c584 <_strtod_l+0x1ec>
 800c5ce:	2b08      	cmp	r3, #8
 800c5d0:	f103 0301 	add.w	r3, r3, #1
 800c5d4:	dc03      	bgt.n	800c5de <_strtod_l+0x246>
 800c5d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c5d8:	434e      	muls	r6, r1
 800c5da:	960a      	str	r6, [sp, #40]	@ 0x28
 800c5dc:	e7e7      	b.n	800c5ae <_strtod_l+0x216>
 800c5de:	2b10      	cmp	r3, #16
 800c5e0:	bfde      	ittt	le
 800c5e2:	9e08      	ldrle	r6, [sp, #32]
 800c5e4:	434e      	mulle	r6, r1
 800c5e6:	9608      	strle	r6, [sp, #32]
 800c5e8:	e7e1      	b.n	800c5ae <_strtod_l+0x216>
 800c5ea:	280f      	cmp	r0, #15
 800c5ec:	dceb      	bgt.n	800c5c6 <_strtod_l+0x22e>
 800c5ee:	9808      	ldr	r0, [sp, #32]
 800c5f0:	230a      	movs	r3, #10
 800c5f2:	fb03 2300 	mla	r3, r3, r0, r2
 800c5f6:	9308      	str	r3, [sp, #32]
 800c5f8:	e7e5      	b.n	800c5c6 <_strtod_l+0x22e>
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c5fe:	1c50      	adds	r0, r2, #1
 800c600:	9019      	str	r0, [sp, #100]	@ 0x64
 800c602:	7852      	ldrb	r2, [r2, #1]
 800c604:	4618      	mov	r0, r3
 800c606:	460d      	mov	r5, r1
 800c608:	e7b1      	b.n	800c56e <_strtod_l+0x1d6>
 800c60a:	f04f 0900 	mov.w	r9, #0
 800c60e:	2301      	movs	r3, #1
 800c610:	e77d      	b.n	800c50e <_strtod_l+0x176>
 800c612:	f04f 0c00 	mov.w	ip, #0
 800c616:	1ca2      	adds	r2, r4, #2
 800c618:	9219      	str	r2, [sp, #100]	@ 0x64
 800c61a:	78a2      	ldrb	r2, [r4, #2]
 800c61c:	e785      	b.n	800c52a <_strtod_l+0x192>
 800c61e:	f04f 0c01 	mov.w	ip, #1
 800c622:	e7f8      	b.n	800c616 <_strtod_l+0x27e>
 800c624:	0800e558 	.word	0x0800e558
 800c628:	0800e540 	.word	0x0800e540
 800c62c:	7ff00000 	.word	0x7ff00000
 800c630:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c632:	1c51      	adds	r1, r2, #1
 800c634:	9119      	str	r1, [sp, #100]	@ 0x64
 800c636:	7852      	ldrb	r2, [r2, #1]
 800c638:	2a30      	cmp	r2, #48	@ 0x30
 800c63a:	d0f9      	beq.n	800c630 <_strtod_l+0x298>
 800c63c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c640:	2908      	cmp	r1, #8
 800c642:	f63f af78 	bhi.w	800c536 <_strtod_l+0x19e>
 800c646:	3a30      	subs	r2, #48	@ 0x30
 800c648:	920e      	str	r2, [sp, #56]	@ 0x38
 800c64a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c64c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c64e:	f04f 080a 	mov.w	r8, #10
 800c652:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c654:	1c56      	adds	r6, r2, #1
 800c656:	9619      	str	r6, [sp, #100]	@ 0x64
 800c658:	7852      	ldrb	r2, [r2, #1]
 800c65a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c65e:	f1be 0f09 	cmp.w	lr, #9
 800c662:	d939      	bls.n	800c6d8 <_strtod_l+0x340>
 800c664:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c666:	1a76      	subs	r6, r6, r1
 800c668:	2e08      	cmp	r6, #8
 800c66a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c66e:	dc03      	bgt.n	800c678 <_strtod_l+0x2e0>
 800c670:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c672:	4588      	cmp	r8, r1
 800c674:	bfa8      	it	ge
 800c676:	4688      	movge	r8, r1
 800c678:	f1bc 0f00 	cmp.w	ip, #0
 800c67c:	d001      	beq.n	800c682 <_strtod_l+0x2ea>
 800c67e:	f1c8 0800 	rsb	r8, r8, #0
 800c682:	2d00      	cmp	r5, #0
 800c684:	d14e      	bne.n	800c724 <_strtod_l+0x38c>
 800c686:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c688:	4308      	orrs	r0, r1
 800c68a:	f47f aebe 	bne.w	800c40a <_strtod_l+0x72>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f47f aed6 	bne.w	800c440 <_strtod_l+0xa8>
 800c694:	2a69      	cmp	r2, #105	@ 0x69
 800c696:	d028      	beq.n	800c6ea <_strtod_l+0x352>
 800c698:	dc25      	bgt.n	800c6e6 <_strtod_l+0x34e>
 800c69a:	2a49      	cmp	r2, #73	@ 0x49
 800c69c:	d025      	beq.n	800c6ea <_strtod_l+0x352>
 800c69e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c6a0:	f47f aece 	bne.w	800c440 <_strtod_l+0xa8>
 800c6a4:	499b      	ldr	r1, [pc, #620]	@ (800c914 <_strtod_l+0x57c>)
 800c6a6:	a819      	add	r0, sp, #100	@ 0x64
 800c6a8:	f001 fb42 	bl	800dd30 <__match>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f43f aec7 	beq.w	800c440 <_strtod_l+0xa8>
 800c6b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b28      	cmp	r3, #40	@ 0x28
 800c6b8:	d12e      	bne.n	800c718 <_strtod_l+0x380>
 800c6ba:	4997      	ldr	r1, [pc, #604]	@ (800c918 <_strtod_l+0x580>)
 800c6bc:	aa1c      	add	r2, sp, #112	@ 0x70
 800c6be:	a819      	add	r0, sp, #100	@ 0x64
 800c6c0:	f001 fb4a 	bl	800dd58 <__hexnan>
 800c6c4:	2805      	cmp	r0, #5
 800c6c6:	d127      	bne.n	800c718 <_strtod_l+0x380>
 800c6c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c6ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c6d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c6d6:	e698      	b.n	800c40a <_strtod_l+0x72>
 800c6d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c6da:	fb08 2101 	mla	r1, r8, r1, r2
 800c6de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c6e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6e4:	e7b5      	b.n	800c652 <_strtod_l+0x2ba>
 800c6e6:	2a6e      	cmp	r2, #110	@ 0x6e
 800c6e8:	e7da      	b.n	800c6a0 <_strtod_l+0x308>
 800c6ea:	498c      	ldr	r1, [pc, #560]	@ (800c91c <_strtod_l+0x584>)
 800c6ec:	a819      	add	r0, sp, #100	@ 0x64
 800c6ee:	f001 fb1f 	bl	800dd30 <__match>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	f43f aea4 	beq.w	800c440 <_strtod_l+0xa8>
 800c6f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6fa:	4989      	ldr	r1, [pc, #548]	@ (800c920 <_strtod_l+0x588>)
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	a819      	add	r0, sp, #100	@ 0x64
 800c700:	9319      	str	r3, [sp, #100]	@ 0x64
 800c702:	f001 fb15 	bl	800dd30 <__match>
 800c706:	b910      	cbnz	r0, 800c70e <_strtod_l+0x376>
 800c708:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c70a:	3301      	adds	r3, #1
 800c70c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c70e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c930 <_strtod_l+0x598>
 800c712:	f04f 0a00 	mov.w	sl, #0
 800c716:	e678      	b.n	800c40a <_strtod_l+0x72>
 800c718:	4882      	ldr	r0, [pc, #520]	@ (800c924 <_strtod_l+0x58c>)
 800c71a:	f001 f85d 	bl	800d7d8 <nan>
 800c71e:	ec5b ab10 	vmov	sl, fp, d0
 800c722:	e672      	b.n	800c40a <_strtod_l+0x72>
 800c724:	eba8 0309 	sub.w	r3, r8, r9
 800c728:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c72a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c72c:	2f00      	cmp	r7, #0
 800c72e:	bf08      	it	eq
 800c730:	462f      	moveq	r7, r5
 800c732:	2d10      	cmp	r5, #16
 800c734:	462c      	mov	r4, r5
 800c736:	bfa8      	it	ge
 800c738:	2410      	movge	r4, #16
 800c73a:	f7f3 ff1b 	bl	8000574 <__aeabi_ui2d>
 800c73e:	2d09      	cmp	r5, #9
 800c740:	4682      	mov	sl, r0
 800c742:	468b      	mov	fp, r1
 800c744:	dc13      	bgt.n	800c76e <_strtod_l+0x3d6>
 800c746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f43f ae5e 	beq.w	800c40a <_strtod_l+0x72>
 800c74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c750:	dd78      	ble.n	800c844 <_strtod_l+0x4ac>
 800c752:	2b16      	cmp	r3, #22
 800c754:	dc5f      	bgt.n	800c816 <_strtod_l+0x47e>
 800c756:	4974      	ldr	r1, [pc, #464]	@ (800c928 <_strtod_l+0x590>)
 800c758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c760:	4652      	mov	r2, sl
 800c762:	465b      	mov	r3, fp
 800c764:	f7f3 ff80 	bl	8000668 <__aeabi_dmul>
 800c768:	4682      	mov	sl, r0
 800c76a:	468b      	mov	fp, r1
 800c76c:	e64d      	b.n	800c40a <_strtod_l+0x72>
 800c76e:	4b6e      	ldr	r3, [pc, #440]	@ (800c928 <_strtod_l+0x590>)
 800c770:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c774:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c778:	f7f3 ff76 	bl	8000668 <__aeabi_dmul>
 800c77c:	4682      	mov	sl, r0
 800c77e:	9808      	ldr	r0, [sp, #32]
 800c780:	468b      	mov	fp, r1
 800c782:	f7f3 fef7 	bl	8000574 <__aeabi_ui2d>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4650      	mov	r0, sl
 800c78c:	4659      	mov	r1, fp
 800c78e:	f7f3 fdb5 	bl	80002fc <__adddf3>
 800c792:	2d0f      	cmp	r5, #15
 800c794:	4682      	mov	sl, r0
 800c796:	468b      	mov	fp, r1
 800c798:	ddd5      	ble.n	800c746 <_strtod_l+0x3ae>
 800c79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c79c:	1b2c      	subs	r4, r5, r4
 800c79e:	441c      	add	r4, r3
 800c7a0:	2c00      	cmp	r4, #0
 800c7a2:	f340 8096 	ble.w	800c8d2 <_strtod_l+0x53a>
 800c7a6:	f014 030f 	ands.w	r3, r4, #15
 800c7aa:	d00a      	beq.n	800c7c2 <_strtod_l+0x42a>
 800c7ac:	495e      	ldr	r1, [pc, #376]	@ (800c928 <_strtod_l+0x590>)
 800c7ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7b2:	4652      	mov	r2, sl
 800c7b4:	465b      	mov	r3, fp
 800c7b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ba:	f7f3 ff55 	bl	8000668 <__aeabi_dmul>
 800c7be:	4682      	mov	sl, r0
 800c7c0:	468b      	mov	fp, r1
 800c7c2:	f034 040f 	bics.w	r4, r4, #15
 800c7c6:	d073      	beq.n	800c8b0 <_strtod_l+0x518>
 800c7c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c7cc:	dd48      	ble.n	800c860 <_strtod_l+0x4c8>
 800c7ce:	2400      	movs	r4, #0
 800c7d0:	46a0      	mov	r8, r4
 800c7d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800c7d4:	46a1      	mov	r9, r4
 800c7d6:	9a05      	ldr	r2, [sp, #20]
 800c7d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c930 <_strtod_l+0x598>
 800c7dc:	2322      	movs	r3, #34	@ 0x22
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	f04f 0a00 	mov.w	sl, #0
 800c7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f43f ae0f 	beq.w	800c40a <_strtod_l+0x72>
 800c7ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7ee:	9805      	ldr	r0, [sp, #20]
 800c7f0:	f7ff f942 	bl	800ba78 <_Bfree>
 800c7f4:	9805      	ldr	r0, [sp, #20]
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7ff f93e 	bl	800ba78 <_Bfree>
 800c7fc:	9805      	ldr	r0, [sp, #20]
 800c7fe:	4641      	mov	r1, r8
 800c800:	f7ff f93a 	bl	800ba78 <_Bfree>
 800c804:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c806:	9805      	ldr	r0, [sp, #20]
 800c808:	f7ff f936 	bl	800ba78 <_Bfree>
 800c80c:	9805      	ldr	r0, [sp, #20]
 800c80e:	4621      	mov	r1, r4
 800c810:	f7ff f932 	bl	800ba78 <_Bfree>
 800c814:	e5f9      	b.n	800c40a <_strtod_l+0x72>
 800c816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c818:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c81c:	4293      	cmp	r3, r2
 800c81e:	dbbc      	blt.n	800c79a <_strtod_l+0x402>
 800c820:	4c41      	ldr	r4, [pc, #260]	@ (800c928 <_strtod_l+0x590>)
 800c822:	f1c5 050f 	rsb	r5, r5, #15
 800c826:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c82a:	4652      	mov	r2, sl
 800c82c:	465b      	mov	r3, fp
 800c82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c832:	f7f3 ff19 	bl	8000668 <__aeabi_dmul>
 800c836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c838:	1b5d      	subs	r5, r3, r5
 800c83a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c83e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c842:	e78f      	b.n	800c764 <_strtod_l+0x3cc>
 800c844:	3316      	adds	r3, #22
 800c846:	dba8      	blt.n	800c79a <_strtod_l+0x402>
 800c848:	4b37      	ldr	r3, [pc, #220]	@ (800c928 <_strtod_l+0x590>)
 800c84a:	eba9 0808 	sub.w	r8, r9, r8
 800c84e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c852:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c856:	4650      	mov	r0, sl
 800c858:	4659      	mov	r1, fp
 800c85a:	f7f4 f82f 	bl	80008bc <__aeabi_ddiv>
 800c85e:	e783      	b.n	800c768 <_strtod_l+0x3d0>
 800c860:	4b32      	ldr	r3, [pc, #200]	@ (800c92c <_strtod_l+0x594>)
 800c862:	9308      	str	r3, [sp, #32]
 800c864:	2300      	movs	r3, #0
 800c866:	1124      	asrs	r4, r4, #4
 800c868:	4650      	mov	r0, sl
 800c86a:	4659      	mov	r1, fp
 800c86c:	461e      	mov	r6, r3
 800c86e:	2c01      	cmp	r4, #1
 800c870:	dc21      	bgt.n	800c8b6 <_strtod_l+0x51e>
 800c872:	b10b      	cbz	r3, 800c878 <_strtod_l+0x4e0>
 800c874:	4682      	mov	sl, r0
 800c876:	468b      	mov	fp, r1
 800c878:	492c      	ldr	r1, [pc, #176]	@ (800c92c <_strtod_l+0x594>)
 800c87a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c87e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c882:	4652      	mov	r2, sl
 800c884:	465b      	mov	r3, fp
 800c886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c88a:	f7f3 feed 	bl	8000668 <__aeabi_dmul>
 800c88e:	4b28      	ldr	r3, [pc, #160]	@ (800c930 <_strtod_l+0x598>)
 800c890:	460a      	mov	r2, r1
 800c892:	400b      	ands	r3, r1
 800c894:	4927      	ldr	r1, [pc, #156]	@ (800c934 <_strtod_l+0x59c>)
 800c896:	428b      	cmp	r3, r1
 800c898:	4682      	mov	sl, r0
 800c89a:	d898      	bhi.n	800c7ce <_strtod_l+0x436>
 800c89c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c8a0:	428b      	cmp	r3, r1
 800c8a2:	bf86      	itte	hi
 800c8a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c938 <_strtod_l+0x5a0>
 800c8a8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c8ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9308      	str	r3, [sp, #32]
 800c8b4:	e07a      	b.n	800c9ac <_strtod_l+0x614>
 800c8b6:	07e2      	lsls	r2, r4, #31
 800c8b8:	d505      	bpl.n	800c8c6 <_strtod_l+0x52e>
 800c8ba:	9b08      	ldr	r3, [sp, #32]
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	f7f3 fed2 	bl	8000668 <__aeabi_dmul>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	9a08      	ldr	r2, [sp, #32]
 800c8c8:	3208      	adds	r2, #8
 800c8ca:	3601      	adds	r6, #1
 800c8cc:	1064      	asrs	r4, r4, #1
 800c8ce:	9208      	str	r2, [sp, #32]
 800c8d0:	e7cd      	b.n	800c86e <_strtod_l+0x4d6>
 800c8d2:	d0ed      	beq.n	800c8b0 <_strtod_l+0x518>
 800c8d4:	4264      	negs	r4, r4
 800c8d6:	f014 020f 	ands.w	r2, r4, #15
 800c8da:	d00a      	beq.n	800c8f2 <_strtod_l+0x55a>
 800c8dc:	4b12      	ldr	r3, [pc, #72]	@ (800c928 <_strtod_l+0x590>)
 800c8de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8e2:	4650      	mov	r0, sl
 800c8e4:	4659      	mov	r1, fp
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	f7f3 ffe7 	bl	80008bc <__aeabi_ddiv>
 800c8ee:	4682      	mov	sl, r0
 800c8f0:	468b      	mov	fp, r1
 800c8f2:	1124      	asrs	r4, r4, #4
 800c8f4:	d0dc      	beq.n	800c8b0 <_strtod_l+0x518>
 800c8f6:	2c1f      	cmp	r4, #31
 800c8f8:	dd20      	ble.n	800c93c <_strtod_l+0x5a4>
 800c8fa:	2400      	movs	r4, #0
 800c8fc:	46a0      	mov	r8, r4
 800c8fe:	940a      	str	r4, [sp, #40]	@ 0x28
 800c900:	46a1      	mov	r9, r4
 800c902:	9a05      	ldr	r2, [sp, #20]
 800c904:	2322      	movs	r3, #34	@ 0x22
 800c906:	f04f 0a00 	mov.w	sl, #0
 800c90a:	f04f 0b00 	mov.w	fp, #0
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	e768      	b.n	800c7e4 <_strtod_l+0x44c>
 800c912:	bf00      	nop
 800c914:	0800e296 	.word	0x0800e296
 800c918:	0800e544 	.word	0x0800e544
 800c91c:	0800e28e 	.word	0x0800e28e
 800c920:	0800e372 	.word	0x0800e372
 800c924:	0800e36e 	.word	0x0800e36e
 800c928:	0800e478 	.word	0x0800e478
 800c92c:	0800e450 	.word	0x0800e450
 800c930:	7ff00000 	.word	0x7ff00000
 800c934:	7ca00000 	.word	0x7ca00000
 800c938:	7fefffff 	.word	0x7fefffff
 800c93c:	f014 0310 	ands.w	r3, r4, #16
 800c940:	bf18      	it	ne
 800c942:	236a      	movne	r3, #106	@ 0x6a
 800c944:	4ea9      	ldr	r6, [pc, #676]	@ (800cbec <_strtod_l+0x854>)
 800c946:	9308      	str	r3, [sp, #32]
 800c948:	4650      	mov	r0, sl
 800c94a:	4659      	mov	r1, fp
 800c94c:	2300      	movs	r3, #0
 800c94e:	07e2      	lsls	r2, r4, #31
 800c950:	d504      	bpl.n	800c95c <_strtod_l+0x5c4>
 800c952:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c956:	f7f3 fe87 	bl	8000668 <__aeabi_dmul>
 800c95a:	2301      	movs	r3, #1
 800c95c:	1064      	asrs	r4, r4, #1
 800c95e:	f106 0608 	add.w	r6, r6, #8
 800c962:	d1f4      	bne.n	800c94e <_strtod_l+0x5b6>
 800c964:	b10b      	cbz	r3, 800c96a <_strtod_l+0x5d2>
 800c966:	4682      	mov	sl, r0
 800c968:	468b      	mov	fp, r1
 800c96a:	9b08      	ldr	r3, [sp, #32]
 800c96c:	b1b3      	cbz	r3, 800c99c <_strtod_l+0x604>
 800c96e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c972:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c976:	2b00      	cmp	r3, #0
 800c978:	4659      	mov	r1, fp
 800c97a:	dd0f      	ble.n	800c99c <_strtod_l+0x604>
 800c97c:	2b1f      	cmp	r3, #31
 800c97e:	dd55      	ble.n	800ca2c <_strtod_l+0x694>
 800c980:	2b34      	cmp	r3, #52	@ 0x34
 800c982:	bfde      	ittt	le
 800c984:	f04f 33ff 	movle.w	r3, #4294967295
 800c988:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c98c:	4093      	lslle	r3, r2
 800c98e:	f04f 0a00 	mov.w	sl, #0
 800c992:	bfcc      	ite	gt
 800c994:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c998:	ea03 0b01 	andle.w	fp, r3, r1
 800c99c:	2200      	movs	r2, #0
 800c99e:	2300      	movs	r3, #0
 800c9a0:	4650      	mov	r0, sl
 800c9a2:	4659      	mov	r1, fp
 800c9a4:	f7f4 f8c8 	bl	8000b38 <__aeabi_dcmpeq>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d1a6      	bne.n	800c8fa <_strtod_l+0x562>
 800c9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c9b2:	9805      	ldr	r0, [sp, #20]
 800c9b4:	462b      	mov	r3, r5
 800c9b6:	463a      	mov	r2, r7
 800c9b8:	f7ff f8c6 	bl	800bb48 <__s2b>
 800c9bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	f43f af05 	beq.w	800c7ce <_strtod_l+0x436>
 800c9c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9c6:	2a00      	cmp	r2, #0
 800c9c8:	eba9 0308 	sub.w	r3, r9, r8
 800c9cc:	bfa8      	it	ge
 800c9ce:	2300      	movge	r3, #0
 800c9d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800c9d2:	2400      	movs	r4, #0
 800c9d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c9d8:	9316      	str	r3, [sp, #88]	@ 0x58
 800c9da:	46a0      	mov	r8, r4
 800c9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9de:	9805      	ldr	r0, [sp, #20]
 800c9e0:	6859      	ldr	r1, [r3, #4]
 800c9e2:	f7ff f809 	bl	800b9f8 <_Balloc>
 800c9e6:	4681      	mov	r9, r0
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	f43f aef4 	beq.w	800c7d6 <_strtod_l+0x43e>
 800c9ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f0:	691a      	ldr	r2, [r3, #16]
 800c9f2:	3202      	adds	r2, #2
 800c9f4:	f103 010c 	add.w	r1, r3, #12
 800c9f8:	0092      	lsls	r2, r2, #2
 800c9fa:	300c      	adds	r0, #12
 800c9fc:	f000 fede 	bl	800d7bc <memcpy>
 800ca00:	ec4b ab10 	vmov	d0, sl, fp
 800ca04:	9805      	ldr	r0, [sp, #20]
 800ca06:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca08:	a91b      	add	r1, sp, #108	@ 0x6c
 800ca0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ca0e:	f7ff fbd7 	bl	800c1c0 <__d2b>
 800ca12:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca14:	2800      	cmp	r0, #0
 800ca16:	f43f aede 	beq.w	800c7d6 <_strtod_l+0x43e>
 800ca1a:	9805      	ldr	r0, [sp, #20]
 800ca1c:	2101      	movs	r1, #1
 800ca1e:	f7ff f929 	bl	800bc74 <__i2b>
 800ca22:	4680      	mov	r8, r0
 800ca24:	b948      	cbnz	r0, 800ca3a <_strtod_l+0x6a2>
 800ca26:	f04f 0800 	mov.w	r8, #0
 800ca2a:	e6d4      	b.n	800c7d6 <_strtod_l+0x43e>
 800ca2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca30:	fa02 f303 	lsl.w	r3, r2, r3
 800ca34:	ea03 0a0a 	and.w	sl, r3, sl
 800ca38:	e7b0      	b.n	800c99c <_strtod_l+0x604>
 800ca3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ca3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ca3e:	2d00      	cmp	r5, #0
 800ca40:	bfab      	itete	ge
 800ca42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ca44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ca46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ca48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ca4a:	bfac      	ite	ge
 800ca4c:	18ef      	addge	r7, r5, r3
 800ca4e:	1b5e      	sublt	r6, r3, r5
 800ca50:	9b08      	ldr	r3, [sp, #32]
 800ca52:	1aed      	subs	r5, r5, r3
 800ca54:	4415      	add	r5, r2
 800ca56:	4b66      	ldr	r3, [pc, #408]	@ (800cbf0 <_strtod_l+0x858>)
 800ca58:	3d01      	subs	r5, #1
 800ca5a:	429d      	cmp	r5, r3
 800ca5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ca60:	da50      	bge.n	800cb04 <_strtod_l+0x76c>
 800ca62:	1b5b      	subs	r3, r3, r5
 800ca64:	2b1f      	cmp	r3, #31
 800ca66:	eba2 0203 	sub.w	r2, r2, r3
 800ca6a:	f04f 0101 	mov.w	r1, #1
 800ca6e:	dc3d      	bgt.n	800caec <_strtod_l+0x754>
 800ca70:	fa01 f303 	lsl.w	r3, r1, r3
 800ca74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca76:	2300      	movs	r3, #0
 800ca78:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca7a:	18bd      	adds	r5, r7, r2
 800ca7c:	9b08      	ldr	r3, [sp, #32]
 800ca7e:	42af      	cmp	r7, r5
 800ca80:	4416      	add	r6, r2
 800ca82:	441e      	add	r6, r3
 800ca84:	463b      	mov	r3, r7
 800ca86:	bfa8      	it	ge
 800ca88:	462b      	movge	r3, r5
 800ca8a:	42b3      	cmp	r3, r6
 800ca8c:	bfa8      	it	ge
 800ca8e:	4633      	movge	r3, r6
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	bfc2      	ittt	gt
 800ca94:	1aed      	subgt	r5, r5, r3
 800ca96:	1af6      	subgt	r6, r6, r3
 800ca98:	1aff      	subgt	r7, r7, r3
 800ca9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	dd16      	ble.n	800cace <_strtod_l+0x736>
 800caa0:	4641      	mov	r1, r8
 800caa2:	9805      	ldr	r0, [sp, #20]
 800caa4:	461a      	mov	r2, r3
 800caa6:	f7ff f9a5 	bl	800bdf4 <__pow5mult>
 800caaa:	4680      	mov	r8, r0
 800caac:	2800      	cmp	r0, #0
 800caae:	d0ba      	beq.n	800ca26 <_strtod_l+0x68e>
 800cab0:	4601      	mov	r1, r0
 800cab2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cab4:	9805      	ldr	r0, [sp, #20]
 800cab6:	f7ff f8f3 	bl	800bca0 <__multiply>
 800caba:	900e      	str	r0, [sp, #56]	@ 0x38
 800cabc:	2800      	cmp	r0, #0
 800cabe:	f43f ae8a 	beq.w	800c7d6 <_strtod_l+0x43e>
 800cac2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cac4:	9805      	ldr	r0, [sp, #20]
 800cac6:	f7fe ffd7 	bl	800ba78 <_Bfree>
 800caca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cacc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cace:	2d00      	cmp	r5, #0
 800cad0:	dc1d      	bgt.n	800cb0e <_strtod_l+0x776>
 800cad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dd23      	ble.n	800cb20 <_strtod_l+0x788>
 800cad8:	4649      	mov	r1, r9
 800cada:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cadc:	9805      	ldr	r0, [sp, #20]
 800cade:	f7ff f989 	bl	800bdf4 <__pow5mult>
 800cae2:	4681      	mov	r9, r0
 800cae4:	b9e0      	cbnz	r0, 800cb20 <_strtod_l+0x788>
 800cae6:	f04f 0900 	mov.w	r9, #0
 800caea:	e674      	b.n	800c7d6 <_strtod_l+0x43e>
 800caec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800caf0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800caf4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800caf8:	35e2      	adds	r5, #226	@ 0xe2
 800cafa:	fa01 f305 	lsl.w	r3, r1, r5
 800cafe:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb00:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cb02:	e7ba      	b.n	800ca7a <_strtod_l+0x6e2>
 800cb04:	2300      	movs	r3, #0
 800cb06:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb08:	2301      	movs	r3, #1
 800cb0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb0c:	e7b5      	b.n	800ca7a <_strtod_l+0x6e2>
 800cb0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb10:	9805      	ldr	r0, [sp, #20]
 800cb12:	462a      	mov	r2, r5
 800cb14:	f7ff f9c8 	bl	800bea8 <__lshift>
 800cb18:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d1d9      	bne.n	800cad2 <_strtod_l+0x73a>
 800cb1e:	e65a      	b.n	800c7d6 <_strtod_l+0x43e>
 800cb20:	2e00      	cmp	r6, #0
 800cb22:	dd07      	ble.n	800cb34 <_strtod_l+0x79c>
 800cb24:	4649      	mov	r1, r9
 800cb26:	9805      	ldr	r0, [sp, #20]
 800cb28:	4632      	mov	r2, r6
 800cb2a:	f7ff f9bd 	bl	800bea8 <__lshift>
 800cb2e:	4681      	mov	r9, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d0d8      	beq.n	800cae6 <_strtod_l+0x74e>
 800cb34:	2f00      	cmp	r7, #0
 800cb36:	dd08      	ble.n	800cb4a <_strtod_l+0x7b2>
 800cb38:	4641      	mov	r1, r8
 800cb3a:	9805      	ldr	r0, [sp, #20]
 800cb3c:	463a      	mov	r2, r7
 800cb3e:	f7ff f9b3 	bl	800bea8 <__lshift>
 800cb42:	4680      	mov	r8, r0
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f43f ae46 	beq.w	800c7d6 <_strtod_l+0x43e>
 800cb4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb4c:	9805      	ldr	r0, [sp, #20]
 800cb4e:	464a      	mov	r2, r9
 800cb50:	f7ff fa32 	bl	800bfb8 <__mdiff>
 800cb54:	4604      	mov	r4, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f43f ae3d 	beq.w	800c7d6 <_strtod_l+0x43e>
 800cb5c:	68c3      	ldr	r3, [r0, #12]
 800cb5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb60:	2300      	movs	r3, #0
 800cb62:	60c3      	str	r3, [r0, #12]
 800cb64:	4641      	mov	r1, r8
 800cb66:	f7ff fa0b 	bl	800bf80 <__mcmp>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	da46      	bge.n	800cbfc <_strtod_l+0x864>
 800cb6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb70:	ea53 030a 	orrs.w	r3, r3, sl
 800cb74:	d16c      	bne.n	800cc50 <_strtod_l+0x8b8>
 800cb76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d168      	bne.n	800cc50 <_strtod_l+0x8b8>
 800cb7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb82:	0d1b      	lsrs	r3, r3, #20
 800cb84:	051b      	lsls	r3, r3, #20
 800cb86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cb8a:	d961      	bls.n	800cc50 <_strtod_l+0x8b8>
 800cb8c:	6963      	ldr	r3, [r4, #20]
 800cb8e:	b913      	cbnz	r3, 800cb96 <_strtod_l+0x7fe>
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	dd5c      	ble.n	800cc50 <_strtod_l+0x8b8>
 800cb96:	4621      	mov	r1, r4
 800cb98:	2201      	movs	r2, #1
 800cb9a:	9805      	ldr	r0, [sp, #20]
 800cb9c:	f7ff f984 	bl	800bea8 <__lshift>
 800cba0:	4641      	mov	r1, r8
 800cba2:	4604      	mov	r4, r0
 800cba4:	f7ff f9ec 	bl	800bf80 <__mcmp>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	dd51      	ble.n	800cc50 <_strtod_l+0x8b8>
 800cbac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cbb0:	9a08      	ldr	r2, [sp, #32]
 800cbb2:	0d1b      	lsrs	r3, r3, #20
 800cbb4:	051b      	lsls	r3, r3, #20
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	d06b      	beq.n	800cc92 <_strtod_l+0x8fa>
 800cbba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cbbe:	d868      	bhi.n	800cc92 <_strtod_l+0x8fa>
 800cbc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cbc4:	f67f ae9d 	bls.w	800c902 <_strtod_l+0x56a>
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf4 <_strtod_l+0x85c>)
 800cbca:	4650      	mov	r0, sl
 800cbcc:	4659      	mov	r1, fp
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f7f3 fd4a 	bl	8000668 <__aeabi_dmul>
 800cbd4:	4b08      	ldr	r3, [pc, #32]	@ (800cbf8 <_strtod_l+0x860>)
 800cbd6:	400b      	ands	r3, r1
 800cbd8:	4682      	mov	sl, r0
 800cbda:	468b      	mov	fp, r1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f47f ae05 	bne.w	800c7ec <_strtod_l+0x454>
 800cbe2:	9a05      	ldr	r2, [sp, #20]
 800cbe4:	2322      	movs	r3, #34	@ 0x22
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	e600      	b.n	800c7ec <_strtod_l+0x454>
 800cbea:	bf00      	nop
 800cbec:	0800e570 	.word	0x0800e570
 800cbf0:	fffffc02 	.word	0xfffffc02
 800cbf4:	39500000 	.word	0x39500000
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cc00:	d165      	bne.n	800ccce <_strtod_l+0x936>
 800cc02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc08:	b35a      	cbz	r2, 800cc62 <_strtod_l+0x8ca>
 800cc0a:	4a9f      	ldr	r2, [pc, #636]	@ (800ce88 <_strtod_l+0xaf0>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d12b      	bne.n	800cc68 <_strtod_l+0x8d0>
 800cc10:	9b08      	ldr	r3, [sp, #32]
 800cc12:	4651      	mov	r1, sl
 800cc14:	b303      	cbz	r3, 800cc58 <_strtod_l+0x8c0>
 800cc16:	4b9d      	ldr	r3, [pc, #628]	@ (800ce8c <_strtod_l+0xaf4>)
 800cc18:	465a      	mov	r2, fp
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cc20:	f04f 32ff 	mov.w	r2, #4294967295
 800cc24:	d81b      	bhi.n	800cc5e <_strtod_l+0x8c6>
 800cc26:	0d1b      	lsrs	r3, r3, #20
 800cc28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc30:	4299      	cmp	r1, r3
 800cc32:	d119      	bne.n	800cc68 <_strtod_l+0x8d0>
 800cc34:	4b96      	ldr	r3, [pc, #600]	@ (800ce90 <_strtod_l+0xaf8>)
 800cc36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d102      	bne.n	800cc42 <_strtod_l+0x8aa>
 800cc3c:	3101      	adds	r1, #1
 800cc3e:	f43f adca 	beq.w	800c7d6 <_strtod_l+0x43e>
 800cc42:	4b92      	ldr	r3, [pc, #584]	@ (800ce8c <_strtod_l+0xaf4>)
 800cc44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc46:	401a      	ands	r2, r3
 800cc48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cc4c:	f04f 0a00 	mov.w	sl, #0
 800cc50:	9b08      	ldr	r3, [sp, #32]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1b8      	bne.n	800cbc8 <_strtod_l+0x830>
 800cc56:	e5c9      	b.n	800c7ec <_strtod_l+0x454>
 800cc58:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5c:	e7e8      	b.n	800cc30 <_strtod_l+0x898>
 800cc5e:	4613      	mov	r3, r2
 800cc60:	e7e6      	b.n	800cc30 <_strtod_l+0x898>
 800cc62:	ea53 030a 	orrs.w	r3, r3, sl
 800cc66:	d0a1      	beq.n	800cbac <_strtod_l+0x814>
 800cc68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc6a:	b1db      	cbz	r3, 800cca4 <_strtod_l+0x90c>
 800cc6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc6e:	4213      	tst	r3, r2
 800cc70:	d0ee      	beq.n	800cc50 <_strtod_l+0x8b8>
 800cc72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc74:	9a08      	ldr	r2, [sp, #32]
 800cc76:	4650      	mov	r0, sl
 800cc78:	4659      	mov	r1, fp
 800cc7a:	b1bb      	cbz	r3, 800ccac <_strtod_l+0x914>
 800cc7c:	f7ff fb6e 	bl	800c35c <sulp>
 800cc80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc84:	ec53 2b10 	vmov	r2, r3, d0
 800cc88:	f7f3 fb38 	bl	80002fc <__adddf3>
 800cc8c:	4682      	mov	sl, r0
 800cc8e:	468b      	mov	fp, r1
 800cc90:	e7de      	b.n	800cc50 <_strtod_l+0x8b8>
 800cc92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cc96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc9e:	f04f 3aff 	mov.w	sl, #4294967295
 800cca2:	e7d5      	b.n	800cc50 <_strtod_l+0x8b8>
 800cca4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cca6:	ea13 0f0a 	tst.w	r3, sl
 800ccaa:	e7e1      	b.n	800cc70 <_strtod_l+0x8d8>
 800ccac:	f7ff fb56 	bl	800c35c <sulp>
 800ccb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccb4:	ec53 2b10 	vmov	r2, r3, d0
 800ccb8:	f7f3 fb1e 	bl	80002f8 <__aeabi_dsub>
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	4682      	mov	sl, r0
 800ccc2:	468b      	mov	fp, r1
 800ccc4:	f7f3 ff38 	bl	8000b38 <__aeabi_dcmpeq>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d0c1      	beq.n	800cc50 <_strtod_l+0x8b8>
 800cccc:	e619      	b.n	800c902 <_strtod_l+0x56a>
 800ccce:	4641      	mov	r1, r8
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f7ff facd 	bl	800c270 <__ratio>
 800ccd6:	ec57 6b10 	vmov	r6, r7, d0
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cce0:	4630      	mov	r0, r6
 800cce2:	4639      	mov	r1, r7
 800cce4:	f7f3 ff3c 	bl	8000b60 <__aeabi_dcmple>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d06f      	beq.n	800cdcc <_strtod_l+0xa34>
 800ccec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d17a      	bne.n	800cde8 <_strtod_l+0xa50>
 800ccf2:	f1ba 0f00 	cmp.w	sl, #0
 800ccf6:	d158      	bne.n	800cdaa <_strtod_l+0xa12>
 800ccf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d15a      	bne.n	800cdb8 <_strtod_l+0xa20>
 800cd02:	4b64      	ldr	r3, [pc, #400]	@ (800ce94 <_strtod_l+0xafc>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	4630      	mov	r0, r6
 800cd08:	4639      	mov	r1, r7
 800cd0a:	f7f3 ff1f 	bl	8000b4c <__aeabi_dcmplt>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d159      	bne.n	800cdc6 <_strtod_l+0xa2e>
 800cd12:	4630      	mov	r0, r6
 800cd14:	4639      	mov	r1, r7
 800cd16:	4b60      	ldr	r3, [pc, #384]	@ (800ce98 <_strtod_l+0xb00>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f7f3 fca5 	bl	8000668 <__aeabi_dmul>
 800cd1e:	4606      	mov	r6, r0
 800cd20:	460f      	mov	r7, r1
 800cd22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cd26:	9606      	str	r6, [sp, #24]
 800cd28:	9307      	str	r3, [sp, #28]
 800cd2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd2e:	4d57      	ldr	r5, [pc, #348]	@ (800ce8c <_strtod_l+0xaf4>)
 800cd30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd36:	401d      	ands	r5, r3
 800cd38:	4b58      	ldr	r3, [pc, #352]	@ (800ce9c <_strtod_l+0xb04>)
 800cd3a:	429d      	cmp	r5, r3
 800cd3c:	f040 80b2 	bne.w	800cea4 <_strtod_l+0xb0c>
 800cd40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cd46:	ec4b ab10 	vmov	d0, sl, fp
 800cd4a:	f7ff f9c9 	bl	800c0e0 <__ulp>
 800cd4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd52:	ec51 0b10 	vmov	r0, r1, d0
 800cd56:	f7f3 fc87 	bl	8000668 <__aeabi_dmul>
 800cd5a:	4652      	mov	r2, sl
 800cd5c:	465b      	mov	r3, fp
 800cd5e:	f7f3 facd 	bl	80002fc <__adddf3>
 800cd62:	460b      	mov	r3, r1
 800cd64:	4949      	ldr	r1, [pc, #292]	@ (800ce8c <_strtod_l+0xaf4>)
 800cd66:	4a4e      	ldr	r2, [pc, #312]	@ (800cea0 <_strtod_l+0xb08>)
 800cd68:	4019      	ands	r1, r3
 800cd6a:	4291      	cmp	r1, r2
 800cd6c:	4682      	mov	sl, r0
 800cd6e:	d942      	bls.n	800cdf6 <_strtod_l+0xa5e>
 800cd70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd72:	4b47      	ldr	r3, [pc, #284]	@ (800ce90 <_strtod_l+0xaf8>)
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d103      	bne.n	800cd80 <_strtod_l+0x9e8>
 800cd78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	f43f ad2b 	beq.w	800c7d6 <_strtod_l+0x43e>
 800cd80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ce90 <_strtod_l+0xaf8>
 800cd84:	f04f 3aff 	mov.w	sl, #4294967295
 800cd88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd8a:	9805      	ldr	r0, [sp, #20]
 800cd8c:	f7fe fe74 	bl	800ba78 <_Bfree>
 800cd90:	9805      	ldr	r0, [sp, #20]
 800cd92:	4649      	mov	r1, r9
 800cd94:	f7fe fe70 	bl	800ba78 <_Bfree>
 800cd98:	9805      	ldr	r0, [sp, #20]
 800cd9a:	4641      	mov	r1, r8
 800cd9c:	f7fe fe6c 	bl	800ba78 <_Bfree>
 800cda0:	9805      	ldr	r0, [sp, #20]
 800cda2:	4621      	mov	r1, r4
 800cda4:	f7fe fe68 	bl	800ba78 <_Bfree>
 800cda8:	e618      	b.n	800c9dc <_strtod_l+0x644>
 800cdaa:	f1ba 0f01 	cmp.w	sl, #1
 800cdae:	d103      	bne.n	800cdb8 <_strtod_l+0xa20>
 800cdb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f43f ada5 	beq.w	800c902 <_strtod_l+0x56a>
 800cdb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ce68 <_strtod_l+0xad0>
 800cdbc:	4f35      	ldr	r7, [pc, #212]	@ (800ce94 <_strtod_l+0xafc>)
 800cdbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	e7b1      	b.n	800cd2a <_strtod_l+0x992>
 800cdc6:	4f34      	ldr	r7, [pc, #208]	@ (800ce98 <_strtod_l+0xb00>)
 800cdc8:	2600      	movs	r6, #0
 800cdca:	e7aa      	b.n	800cd22 <_strtod_l+0x98a>
 800cdcc:	4b32      	ldr	r3, [pc, #200]	@ (800ce98 <_strtod_l+0xb00>)
 800cdce:	4630      	mov	r0, r6
 800cdd0:	4639      	mov	r1, r7
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f7f3 fc48 	bl	8000668 <__aeabi_dmul>
 800cdd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d09f      	beq.n	800cd22 <_strtod_l+0x98a>
 800cde2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cde6:	e7a0      	b.n	800cd2a <_strtod_l+0x992>
 800cde8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ce70 <_strtod_l+0xad8>
 800cdec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cdf0:	ec57 6b17 	vmov	r6, r7, d7
 800cdf4:	e799      	b.n	800cd2a <_strtod_l+0x992>
 800cdf6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cdfa:	9b08      	ldr	r3, [sp, #32]
 800cdfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1c1      	bne.n	800cd88 <_strtod_l+0x9f0>
 800ce04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce08:	0d1b      	lsrs	r3, r3, #20
 800ce0a:	051b      	lsls	r3, r3, #20
 800ce0c:	429d      	cmp	r5, r3
 800ce0e:	d1bb      	bne.n	800cd88 <_strtod_l+0x9f0>
 800ce10:	4630      	mov	r0, r6
 800ce12:	4639      	mov	r1, r7
 800ce14:	f7f3 ff88 	bl	8000d28 <__aeabi_d2lz>
 800ce18:	f7f3 fbf8 	bl	800060c <__aeabi_l2d>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 fa68 	bl	80002f8 <__aeabi_dsub>
 800ce28:	460b      	mov	r3, r1
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ce30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ce34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce36:	ea46 060a 	orr.w	r6, r6, sl
 800ce3a:	431e      	orrs	r6, r3
 800ce3c:	d06f      	beq.n	800cf1e <_strtod_l+0xb86>
 800ce3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce78 <_strtod_l+0xae0>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	f7f3 fe82 	bl	8000b4c <__aeabi_dcmplt>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	f47f accf 	bne.w	800c7ec <_strtod_l+0x454>
 800ce4e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ce80 <_strtod_l+0xae8>)
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce58:	f7f3 fe96 	bl	8000b88 <__aeabi_dcmpgt>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d093      	beq.n	800cd88 <_strtod_l+0x9f0>
 800ce60:	e4c4      	b.n	800c7ec <_strtod_l+0x454>
 800ce62:	bf00      	nop
 800ce64:	f3af 8000 	nop.w
 800ce68:	00000000 	.word	0x00000000
 800ce6c:	bff00000 	.word	0xbff00000
 800ce70:	00000000 	.word	0x00000000
 800ce74:	3ff00000 	.word	0x3ff00000
 800ce78:	94a03595 	.word	0x94a03595
 800ce7c:	3fdfffff 	.word	0x3fdfffff
 800ce80:	35afe535 	.word	0x35afe535
 800ce84:	3fe00000 	.word	0x3fe00000
 800ce88:	000fffff 	.word	0x000fffff
 800ce8c:	7ff00000 	.word	0x7ff00000
 800ce90:	7fefffff 	.word	0x7fefffff
 800ce94:	3ff00000 	.word	0x3ff00000
 800ce98:	3fe00000 	.word	0x3fe00000
 800ce9c:	7fe00000 	.word	0x7fe00000
 800cea0:	7c9fffff 	.word	0x7c9fffff
 800cea4:	9b08      	ldr	r3, [sp, #32]
 800cea6:	b323      	cbz	r3, 800cef2 <_strtod_l+0xb5a>
 800cea8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ceac:	d821      	bhi.n	800cef2 <_strtod_l+0xb5a>
 800ceae:	a328      	add	r3, pc, #160	@ (adr r3, 800cf50 <_strtod_l+0xbb8>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	f7f3 fe52 	bl	8000b60 <__aeabi_dcmple>
 800cebc:	b1a0      	cbz	r0, 800cee8 <_strtod_l+0xb50>
 800cebe:	4639      	mov	r1, r7
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7f3 fea9 	bl	8000c18 <__aeabi_d2uiz>
 800cec6:	2801      	cmp	r0, #1
 800cec8:	bf38      	it	cc
 800ceca:	2001      	movcc	r0, #1
 800cecc:	f7f3 fb52 	bl	8000574 <__aeabi_ui2d>
 800ced0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ced2:	4606      	mov	r6, r0
 800ced4:	460f      	mov	r7, r1
 800ced6:	b9fb      	cbnz	r3, 800cf18 <_strtod_l+0xb80>
 800ced8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cedc:	9014      	str	r0, [sp, #80]	@ 0x50
 800cede:	9315      	str	r3, [sp, #84]	@ 0x54
 800cee0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cee4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cee8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ceea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ceee:	1b5b      	subs	r3, r3, r5
 800cef0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cef2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cef6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cefa:	f7ff f8f1 	bl	800c0e0 <__ulp>
 800cefe:	4650      	mov	r0, sl
 800cf00:	ec53 2b10 	vmov	r2, r3, d0
 800cf04:	4659      	mov	r1, fp
 800cf06:	f7f3 fbaf 	bl	8000668 <__aeabi_dmul>
 800cf0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cf0e:	f7f3 f9f5 	bl	80002fc <__adddf3>
 800cf12:	4682      	mov	sl, r0
 800cf14:	468b      	mov	fp, r1
 800cf16:	e770      	b.n	800cdfa <_strtod_l+0xa62>
 800cf18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cf1c:	e7e0      	b.n	800cee0 <_strtod_l+0xb48>
 800cf1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf58 <_strtod_l+0xbc0>)
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	f7f3 fe12 	bl	8000b4c <__aeabi_dcmplt>
 800cf28:	e798      	b.n	800ce5c <_strtod_l+0xac4>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cf30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf32:	6013      	str	r3, [r2, #0]
 800cf34:	f7ff ba6d 	b.w	800c412 <_strtod_l+0x7a>
 800cf38:	2a65      	cmp	r2, #101	@ 0x65
 800cf3a:	f43f ab66 	beq.w	800c60a <_strtod_l+0x272>
 800cf3e:	2a45      	cmp	r2, #69	@ 0x45
 800cf40:	f43f ab63 	beq.w	800c60a <_strtod_l+0x272>
 800cf44:	2301      	movs	r3, #1
 800cf46:	f7ff bb9e 	b.w	800c686 <_strtod_l+0x2ee>
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w
 800cf50:	ffc00000 	.word	0xffc00000
 800cf54:	41dfffff 	.word	0x41dfffff
 800cf58:	94a03595 	.word	0x94a03595
 800cf5c:	3fcfffff 	.word	0x3fcfffff

0800cf60 <_strtod_r>:
 800cf60:	4b01      	ldr	r3, [pc, #4]	@ (800cf68 <_strtod_r+0x8>)
 800cf62:	f7ff ba19 	b.w	800c398 <_strtod_l>
 800cf66:	bf00      	nop
 800cf68:	20000124 	.word	0x20000124

0800cf6c <__ssputs_r>:
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	688e      	ldr	r6, [r1, #8]
 800cf72:	461f      	mov	r7, r3
 800cf74:	42be      	cmp	r6, r7
 800cf76:	680b      	ldr	r3, [r1, #0]
 800cf78:	4682      	mov	sl, r0
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	4690      	mov	r8, r2
 800cf7e:	d82d      	bhi.n	800cfdc <__ssputs_r+0x70>
 800cf80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf88:	d026      	beq.n	800cfd8 <__ssputs_r+0x6c>
 800cf8a:	6965      	ldr	r5, [r4, #20]
 800cf8c:	6909      	ldr	r1, [r1, #16]
 800cf8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf92:	eba3 0901 	sub.w	r9, r3, r1
 800cf96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf9a:	1c7b      	adds	r3, r7, #1
 800cf9c:	444b      	add	r3, r9
 800cf9e:	106d      	asrs	r5, r5, #1
 800cfa0:	429d      	cmp	r5, r3
 800cfa2:	bf38      	it	cc
 800cfa4:	461d      	movcc	r5, r3
 800cfa6:	0553      	lsls	r3, r2, #21
 800cfa8:	d527      	bpl.n	800cffa <__ssputs_r+0x8e>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	f7fe fc98 	bl	800b8e0 <_malloc_r>
 800cfb0:	4606      	mov	r6, r0
 800cfb2:	b360      	cbz	r0, 800d00e <__ssputs_r+0xa2>
 800cfb4:	6921      	ldr	r1, [r4, #16]
 800cfb6:	464a      	mov	r2, r9
 800cfb8:	f000 fc00 	bl	800d7bc <memcpy>
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cfc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfc6:	81a3      	strh	r3, [r4, #12]
 800cfc8:	6126      	str	r6, [r4, #16]
 800cfca:	6165      	str	r5, [r4, #20]
 800cfcc:	444e      	add	r6, r9
 800cfce:	eba5 0509 	sub.w	r5, r5, r9
 800cfd2:	6026      	str	r6, [r4, #0]
 800cfd4:	60a5      	str	r5, [r4, #8]
 800cfd6:	463e      	mov	r6, r7
 800cfd8:	42be      	cmp	r6, r7
 800cfda:	d900      	bls.n	800cfde <__ssputs_r+0x72>
 800cfdc:	463e      	mov	r6, r7
 800cfde:	6820      	ldr	r0, [r4, #0]
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	4641      	mov	r1, r8
 800cfe4:	f000 fbae 	bl	800d744 <memmove>
 800cfe8:	68a3      	ldr	r3, [r4, #8]
 800cfea:	1b9b      	subs	r3, r3, r6
 800cfec:	60a3      	str	r3, [r4, #8]
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	4433      	add	r3, r6
 800cff2:	6023      	str	r3, [r4, #0]
 800cff4:	2000      	movs	r0, #0
 800cff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffa:	462a      	mov	r2, r5
 800cffc:	f000 ff59 	bl	800deb2 <_realloc_r>
 800d000:	4606      	mov	r6, r0
 800d002:	2800      	cmp	r0, #0
 800d004:	d1e0      	bne.n	800cfc8 <__ssputs_r+0x5c>
 800d006:	6921      	ldr	r1, [r4, #16]
 800d008:	4650      	mov	r0, sl
 800d00a:	f7fe fbf5 	bl	800b7f8 <_free_r>
 800d00e:	230c      	movs	r3, #12
 800d010:	f8ca 3000 	str.w	r3, [sl]
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	f04f 30ff 	mov.w	r0, #4294967295
 800d020:	e7e9      	b.n	800cff6 <__ssputs_r+0x8a>
	...

0800d024 <_svfiprintf_r>:
 800d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d028:	4698      	mov	r8, r3
 800d02a:	898b      	ldrh	r3, [r1, #12]
 800d02c:	061b      	lsls	r3, r3, #24
 800d02e:	b09d      	sub	sp, #116	@ 0x74
 800d030:	4607      	mov	r7, r0
 800d032:	460d      	mov	r5, r1
 800d034:	4614      	mov	r4, r2
 800d036:	d510      	bpl.n	800d05a <_svfiprintf_r+0x36>
 800d038:	690b      	ldr	r3, [r1, #16]
 800d03a:	b973      	cbnz	r3, 800d05a <_svfiprintf_r+0x36>
 800d03c:	2140      	movs	r1, #64	@ 0x40
 800d03e:	f7fe fc4f 	bl	800b8e0 <_malloc_r>
 800d042:	6028      	str	r0, [r5, #0]
 800d044:	6128      	str	r0, [r5, #16]
 800d046:	b930      	cbnz	r0, 800d056 <_svfiprintf_r+0x32>
 800d048:	230c      	movs	r3, #12
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	f04f 30ff 	mov.w	r0, #4294967295
 800d050:	b01d      	add	sp, #116	@ 0x74
 800d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d056:	2340      	movs	r3, #64	@ 0x40
 800d058:	616b      	str	r3, [r5, #20]
 800d05a:	2300      	movs	r3, #0
 800d05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d05e:	2320      	movs	r3, #32
 800d060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d064:	f8cd 800c 	str.w	r8, [sp, #12]
 800d068:	2330      	movs	r3, #48	@ 0x30
 800d06a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d208 <_svfiprintf_r+0x1e4>
 800d06e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d072:	f04f 0901 	mov.w	r9, #1
 800d076:	4623      	mov	r3, r4
 800d078:	469a      	mov	sl, r3
 800d07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d07e:	b10a      	cbz	r2, 800d084 <_svfiprintf_r+0x60>
 800d080:	2a25      	cmp	r2, #37	@ 0x25
 800d082:	d1f9      	bne.n	800d078 <_svfiprintf_r+0x54>
 800d084:	ebba 0b04 	subs.w	fp, sl, r4
 800d088:	d00b      	beq.n	800d0a2 <_svfiprintf_r+0x7e>
 800d08a:	465b      	mov	r3, fp
 800d08c:	4622      	mov	r2, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	4638      	mov	r0, r7
 800d092:	f7ff ff6b 	bl	800cf6c <__ssputs_r>
 800d096:	3001      	adds	r0, #1
 800d098:	f000 80a7 	beq.w	800d1ea <_svfiprintf_r+0x1c6>
 800d09c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d09e:	445a      	add	r2, fp
 800d0a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 809f 	beq.w	800d1ea <_svfiprintf_r+0x1c6>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b6:	f10a 0a01 	add.w	sl, sl, #1
 800d0ba:	9304      	str	r3, [sp, #16]
 800d0bc:	9307      	str	r3, [sp, #28]
 800d0be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0c4:	4654      	mov	r4, sl
 800d0c6:	2205      	movs	r2, #5
 800d0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0cc:	484e      	ldr	r0, [pc, #312]	@ (800d208 <_svfiprintf_r+0x1e4>)
 800d0ce:	f7f3 f8b7 	bl	8000240 <memchr>
 800d0d2:	9a04      	ldr	r2, [sp, #16]
 800d0d4:	b9d8      	cbnz	r0, 800d10e <_svfiprintf_r+0xea>
 800d0d6:	06d0      	lsls	r0, r2, #27
 800d0d8:	bf44      	itt	mi
 800d0da:	2320      	movmi	r3, #32
 800d0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0e0:	0711      	lsls	r1, r2, #28
 800d0e2:	bf44      	itt	mi
 800d0e4:	232b      	movmi	r3, #43	@ 0x2b
 800d0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0f0:	d015      	beq.n	800d11e <_svfiprintf_r+0xfa>
 800d0f2:	9a07      	ldr	r2, [sp, #28]
 800d0f4:	4654      	mov	r4, sl
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	f04f 0c0a 	mov.w	ip, #10
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d102:	3b30      	subs	r3, #48	@ 0x30
 800d104:	2b09      	cmp	r3, #9
 800d106:	d94b      	bls.n	800d1a0 <_svfiprintf_r+0x17c>
 800d108:	b1b0      	cbz	r0, 800d138 <_svfiprintf_r+0x114>
 800d10a:	9207      	str	r2, [sp, #28]
 800d10c:	e014      	b.n	800d138 <_svfiprintf_r+0x114>
 800d10e:	eba0 0308 	sub.w	r3, r0, r8
 800d112:	fa09 f303 	lsl.w	r3, r9, r3
 800d116:	4313      	orrs	r3, r2
 800d118:	9304      	str	r3, [sp, #16]
 800d11a:	46a2      	mov	sl, r4
 800d11c:	e7d2      	b.n	800d0c4 <_svfiprintf_r+0xa0>
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	1d19      	adds	r1, r3, #4
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	9103      	str	r1, [sp, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	bfbb      	ittet	lt
 800d12a:	425b      	neglt	r3, r3
 800d12c:	f042 0202 	orrlt.w	r2, r2, #2
 800d130:	9307      	strge	r3, [sp, #28]
 800d132:	9307      	strlt	r3, [sp, #28]
 800d134:	bfb8      	it	lt
 800d136:	9204      	strlt	r2, [sp, #16]
 800d138:	7823      	ldrb	r3, [r4, #0]
 800d13a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d13c:	d10a      	bne.n	800d154 <_svfiprintf_r+0x130>
 800d13e:	7863      	ldrb	r3, [r4, #1]
 800d140:	2b2a      	cmp	r3, #42	@ 0x2a
 800d142:	d132      	bne.n	800d1aa <_svfiprintf_r+0x186>
 800d144:	9b03      	ldr	r3, [sp, #12]
 800d146:	1d1a      	adds	r2, r3, #4
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	9203      	str	r2, [sp, #12]
 800d14c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d150:	3402      	adds	r4, #2
 800d152:	9305      	str	r3, [sp, #20]
 800d154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d218 <_svfiprintf_r+0x1f4>
 800d158:	7821      	ldrb	r1, [r4, #0]
 800d15a:	2203      	movs	r2, #3
 800d15c:	4650      	mov	r0, sl
 800d15e:	f7f3 f86f 	bl	8000240 <memchr>
 800d162:	b138      	cbz	r0, 800d174 <_svfiprintf_r+0x150>
 800d164:	9b04      	ldr	r3, [sp, #16]
 800d166:	eba0 000a 	sub.w	r0, r0, sl
 800d16a:	2240      	movs	r2, #64	@ 0x40
 800d16c:	4082      	lsls	r2, r0
 800d16e:	4313      	orrs	r3, r2
 800d170:	3401      	adds	r4, #1
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d178:	4824      	ldr	r0, [pc, #144]	@ (800d20c <_svfiprintf_r+0x1e8>)
 800d17a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d17e:	2206      	movs	r2, #6
 800d180:	f7f3 f85e 	bl	8000240 <memchr>
 800d184:	2800      	cmp	r0, #0
 800d186:	d036      	beq.n	800d1f6 <_svfiprintf_r+0x1d2>
 800d188:	4b21      	ldr	r3, [pc, #132]	@ (800d210 <_svfiprintf_r+0x1ec>)
 800d18a:	bb1b      	cbnz	r3, 800d1d4 <_svfiprintf_r+0x1b0>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	3307      	adds	r3, #7
 800d190:	f023 0307 	bic.w	r3, r3, #7
 800d194:	3308      	adds	r3, #8
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d19a:	4433      	add	r3, r6
 800d19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d19e:	e76a      	b.n	800d076 <_svfiprintf_r+0x52>
 800d1a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	e7a8      	b.n	800d0fc <_svfiprintf_r+0xd8>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	3401      	adds	r4, #1
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	f04f 0c0a 	mov.w	ip, #10
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1bc:	3a30      	subs	r2, #48	@ 0x30
 800d1be:	2a09      	cmp	r2, #9
 800d1c0:	d903      	bls.n	800d1ca <_svfiprintf_r+0x1a6>
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0c6      	beq.n	800d154 <_svfiprintf_r+0x130>
 800d1c6:	9105      	str	r1, [sp, #20]
 800d1c8:	e7c4      	b.n	800d154 <_svfiprintf_r+0x130>
 800d1ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e7f0      	b.n	800d1b6 <_svfiprintf_r+0x192>
 800d1d4:	ab03      	add	r3, sp, #12
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4b0e      	ldr	r3, [pc, #56]	@ (800d214 <_svfiprintf_r+0x1f0>)
 800d1dc:	a904      	add	r1, sp, #16
 800d1de:	4638      	mov	r0, r7
 800d1e0:	f7fc fc84 	bl	8009aec <_printf_float>
 800d1e4:	1c42      	adds	r2, r0, #1
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	d1d6      	bne.n	800d198 <_svfiprintf_r+0x174>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	065b      	lsls	r3, r3, #25
 800d1ee:	f53f af2d 	bmi.w	800d04c <_svfiprintf_r+0x28>
 800d1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1f4:	e72c      	b.n	800d050 <_svfiprintf_r+0x2c>
 800d1f6:	ab03      	add	r3, sp, #12
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	462a      	mov	r2, r5
 800d1fc:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <_svfiprintf_r+0x1f0>)
 800d1fe:	a904      	add	r1, sp, #16
 800d200:	4638      	mov	r0, r7
 800d202:	f7fc ff0b 	bl	800a01c <_printf_i>
 800d206:	e7ed      	b.n	800d1e4 <_svfiprintf_r+0x1c0>
 800d208:	0800e598 	.word	0x0800e598
 800d20c:	0800e5a2 	.word	0x0800e5a2
 800d210:	08009aed 	.word	0x08009aed
 800d214:	0800cf6d 	.word	0x0800cf6d
 800d218:	0800e59e 	.word	0x0800e59e

0800d21c <__sfputc_r>:
 800d21c:	6893      	ldr	r3, [r2, #8]
 800d21e:	3b01      	subs	r3, #1
 800d220:	2b00      	cmp	r3, #0
 800d222:	b410      	push	{r4}
 800d224:	6093      	str	r3, [r2, #8]
 800d226:	da08      	bge.n	800d23a <__sfputc_r+0x1e>
 800d228:	6994      	ldr	r4, [r2, #24]
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	db01      	blt.n	800d232 <__sfputc_r+0x16>
 800d22e:	290a      	cmp	r1, #10
 800d230:	d103      	bne.n	800d23a <__sfputc_r+0x1e>
 800d232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d236:	f000 b9f1 	b.w	800d61c <__swbuf_r>
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	1c58      	adds	r0, r3, #1
 800d23e:	6010      	str	r0, [r2, #0]
 800d240:	7019      	strb	r1, [r3, #0]
 800d242:	4608      	mov	r0, r1
 800d244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <__sfputs_r>:
 800d24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	4614      	mov	r4, r2
 800d252:	18d5      	adds	r5, r2, r3
 800d254:	42ac      	cmp	r4, r5
 800d256:	d101      	bne.n	800d25c <__sfputs_r+0x12>
 800d258:	2000      	movs	r0, #0
 800d25a:	e007      	b.n	800d26c <__sfputs_r+0x22>
 800d25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d260:	463a      	mov	r2, r7
 800d262:	4630      	mov	r0, r6
 800d264:	f7ff ffda 	bl	800d21c <__sfputc_r>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d1f3      	bne.n	800d254 <__sfputs_r+0xa>
 800d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d270 <_vfiprintf_r>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	460d      	mov	r5, r1
 800d276:	b09d      	sub	sp, #116	@ 0x74
 800d278:	4614      	mov	r4, r2
 800d27a:	4698      	mov	r8, r3
 800d27c:	4606      	mov	r6, r0
 800d27e:	b118      	cbz	r0, 800d288 <_vfiprintf_r+0x18>
 800d280:	6a03      	ldr	r3, [r0, #32]
 800d282:	b90b      	cbnz	r3, 800d288 <_vfiprintf_r+0x18>
 800d284:	f7fd fa8a 	bl	800a79c <__sinit>
 800d288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d28a:	07d9      	lsls	r1, r3, #31
 800d28c:	d405      	bmi.n	800d29a <_vfiprintf_r+0x2a>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	059a      	lsls	r2, r3, #22
 800d292:	d402      	bmi.n	800d29a <_vfiprintf_r+0x2a>
 800d294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d296:	f7fd fc3a 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	071b      	lsls	r3, r3, #28
 800d29e:	d501      	bpl.n	800d2a4 <_vfiprintf_r+0x34>
 800d2a0:	692b      	ldr	r3, [r5, #16]
 800d2a2:	b99b      	cbnz	r3, 800d2cc <_vfiprintf_r+0x5c>
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f000 f9f6 	bl	800d698 <__swsetup_r>
 800d2ac:	b170      	cbz	r0, 800d2cc <_vfiprintf_r+0x5c>
 800d2ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2b0:	07dc      	lsls	r4, r3, #31
 800d2b2:	d504      	bpl.n	800d2be <_vfiprintf_r+0x4e>
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	b01d      	add	sp, #116	@ 0x74
 800d2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	0598      	lsls	r0, r3, #22
 800d2c2:	d4f7      	bmi.n	800d2b4 <_vfiprintf_r+0x44>
 800d2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2c6:	f7fd fc23 	bl	800ab10 <__retarget_lock_release_recursive>
 800d2ca:	e7f3      	b.n	800d2b4 <_vfiprintf_r+0x44>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2da:	2330      	movs	r3, #48	@ 0x30
 800d2dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d48c <_vfiprintf_r+0x21c>
 800d2e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2e4:	f04f 0901 	mov.w	r9, #1
 800d2e8:	4623      	mov	r3, r4
 800d2ea:	469a      	mov	sl, r3
 800d2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2f0:	b10a      	cbz	r2, 800d2f6 <_vfiprintf_r+0x86>
 800d2f2:	2a25      	cmp	r2, #37	@ 0x25
 800d2f4:	d1f9      	bne.n	800d2ea <_vfiprintf_r+0x7a>
 800d2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2fa:	d00b      	beq.n	800d314 <_vfiprintf_r+0xa4>
 800d2fc:	465b      	mov	r3, fp
 800d2fe:	4622      	mov	r2, r4
 800d300:	4629      	mov	r1, r5
 800d302:	4630      	mov	r0, r6
 800d304:	f7ff ffa1 	bl	800d24a <__sfputs_r>
 800d308:	3001      	adds	r0, #1
 800d30a:	f000 80a7 	beq.w	800d45c <_vfiprintf_r+0x1ec>
 800d30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d310:	445a      	add	r2, fp
 800d312:	9209      	str	r2, [sp, #36]	@ 0x24
 800d314:	f89a 3000 	ldrb.w	r3, [sl]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 809f 	beq.w	800d45c <_vfiprintf_r+0x1ec>
 800d31e:	2300      	movs	r3, #0
 800d320:	f04f 32ff 	mov.w	r2, #4294967295
 800d324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d328:	f10a 0a01 	add.w	sl, sl, #1
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	9307      	str	r3, [sp, #28]
 800d330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d334:	931a      	str	r3, [sp, #104]	@ 0x68
 800d336:	4654      	mov	r4, sl
 800d338:	2205      	movs	r2, #5
 800d33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33e:	4853      	ldr	r0, [pc, #332]	@ (800d48c <_vfiprintf_r+0x21c>)
 800d340:	f7f2 ff7e 	bl	8000240 <memchr>
 800d344:	9a04      	ldr	r2, [sp, #16]
 800d346:	b9d8      	cbnz	r0, 800d380 <_vfiprintf_r+0x110>
 800d348:	06d1      	lsls	r1, r2, #27
 800d34a:	bf44      	itt	mi
 800d34c:	2320      	movmi	r3, #32
 800d34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d352:	0713      	lsls	r3, r2, #28
 800d354:	bf44      	itt	mi
 800d356:	232b      	movmi	r3, #43	@ 0x2b
 800d358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d35c:	f89a 3000 	ldrb.w	r3, [sl]
 800d360:	2b2a      	cmp	r3, #42	@ 0x2a
 800d362:	d015      	beq.n	800d390 <_vfiprintf_r+0x120>
 800d364:	9a07      	ldr	r2, [sp, #28]
 800d366:	4654      	mov	r4, sl
 800d368:	2000      	movs	r0, #0
 800d36a:	f04f 0c0a 	mov.w	ip, #10
 800d36e:	4621      	mov	r1, r4
 800d370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d374:	3b30      	subs	r3, #48	@ 0x30
 800d376:	2b09      	cmp	r3, #9
 800d378:	d94b      	bls.n	800d412 <_vfiprintf_r+0x1a2>
 800d37a:	b1b0      	cbz	r0, 800d3aa <_vfiprintf_r+0x13a>
 800d37c:	9207      	str	r2, [sp, #28]
 800d37e:	e014      	b.n	800d3aa <_vfiprintf_r+0x13a>
 800d380:	eba0 0308 	sub.w	r3, r0, r8
 800d384:	fa09 f303 	lsl.w	r3, r9, r3
 800d388:	4313      	orrs	r3, r2
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	46a2      	mov	sl, r4
 800d38e:	e7d2      	b.n	800d336 <_vfiprintf_r+0xc6>
 800d390:	9b03      	ldr	r3, [sp, #12]
 800d392:	1d19      	adds	r1, r3, #4
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	9103      	str	r1, [sp, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	bfbb      	ittet	lt
 800d39c:	425b      	neglt	r3, r3
 800d39e:	f042 0202 	orrlt.w	r2, r2, #2
 800d3a2:	9307      	strge	r3, [sp, #28]
 800d3a4:	9307      	strlt	r3, [sp, #28]
 800d3a6:	bfb8      	it	lt
 800d3a8:	9204      	strlt	r2, [sp, #16]
 800d3aa:	7823      	ldrb	r3, [r4, #0]
 800d3ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3ae:	d10a      	bne.n	800d3c6 <_vfiprintf_r+0x156>
 800d3b0:	7863      	ldrb	r3, [r4, #1]
 800d3b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3b4:	d132      	bne.n	800d41c <_vfiprintf_r+0x1ac>
 800d3b6:	9b03      	ldr	r3, [sp, #12]
 800d3b8:	1d1a      	adds	r2, r3, #4
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	9203      	str	r2, [sp, #12]
 800d3be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3c2:	3402      	adds	r4, #2
 800d3c4:	9305      	str	r3, [sp, #20]
 800d3c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d49c <_vfiprintf_r+0x22c>
 800d3ca:	7821      	ldrb	r1, [r4, #0]
 800d3cc:	2203      	movs	r2, #3
 800d3ce:	4650      	mov	r0, sl
 800d3d0:	f7f2 ff36 	bl	8000240 <memchr>
 800d3d4:	b138      	cbz	r0, 800d3e6 <_vfiprintf_r+0x176>
 800d3d6:	9b04      	ldr	r3, [sp, #16]
 800d3d8:	eba0 000a 	sub.w	r0, r0, sl
 800d3dc:	2240      	movs	r2, #64	@ 0x40
 800d3de:	4082      	lsls	r2, r0
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	3401      	adds	r4, #1
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ea:	4829      	ldr	r0, [pc, #164]	@ (800d490 <_vfiprintf_r+0x220>)
 800d3ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3f0:	2206      	movs	r2, #6
 800d3f2:	f7f2 ff25 	bl	8000240 <memchr>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d03f      	beq.n	800d47a <_vfiprintf_r+0x20a>
 800d3fa:	4b26      	ldr	r3, [pc, #152]	@ (800d494 <_vfiprintf_r+0x224>)
 800d3fc:	bb1b      	cbnz	r3, 800d446 <_vfiprintf_r+0x1d6>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	3307      	adds	r3, #7
 800d402:	f023 0307 	bic.w	r3, r3, #7
 800d406:	3308      	adds	r3, #8
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d40c:	443b      	add	r3, r7
 800d40e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d410:	e76a      	b.n	800d2e8 <_vfiprintf_r+0x78>
 800d412:	fb0c 3202 	mla	r2, ip, r2, r3
 800d416:	460c      	mov	r4, r1
 800d418:	2001      	movs	r0, #1
 800d41a:	e7a8      	b.n	800d36e <_vfiprintf_r+0xfe>
 800d41c:	2300      	movs	r3, #0
 800d41e:	3401      	adds	r4, #1
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	4619      	mov	r1, r3
 800d424:	f04f 0c0a 	mov.w	ip, #10
 800d428:	4620      	mov	r0, r4
 800d42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d42e:	3a30      	subs	r2, #48	@ 0x30
 800d430:	2a09      	cmp	r2, #9
 800d432:	d903      	bls.n	800d43c <_vfiprintf_r+0x1cc>
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0c6      	beq.n	800d3c6 <_vfiprintf_r+0x156>
 800d438:	9105      	str	r1, [sp, #20]
 800d43a:	e7c4      	b.n	800d3c6 <_vfiprintf_r+0x156>
 800d43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d440:	4604      	mov	r4, r0
 800d442:	2301      	movs	r3, #1
 800d444:	e7f0      	b.n	800d428 <_vfiprintf_r+0x1b8>
 800d446:	ab03      	add	r3, sp, #12
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	462a      	mov	r2, r5
 800d44c:	4b12      	ldr	r3, [pc, #72]	@ (800d498 <_vfiprintf_r+0x228>)
 800d44e:	a904      	add	r1, sp, #16
 800d450:	4630      	mov	r0, r6
 800d452:	f7fc fb4b 	bl	8009aec <_printf_float>
 800d456:	4607      	mov	r7, r0
 800d458:	1c78      	adds	r0, r7, #1
 800d45a:	d1d6      	bne.n	800d40a <_vfiprintf_r+0x19a>
 800d45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d45e:	07d9      	lsls	r1, r3, #31
 800d460:	d405      	bmi.n	800d46e <_vfiprintf_r+0x1fe>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	059a      	lsls	r2, r3, #22
 800d466:	d402      	bmi.n	800d46e <_vfiprintf_r+0x1fe>
 800d468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d46a:	f7fd fb51 	bl	800ab10 <__retarget_lock_release_recursive>
 800d46e:	89ab      	ldrh	r3, [r5, #12]
 800d470:	065b      	lsls	r3, r3, #25
 800d472:	f53f af1f 	bmi.w	800d2b4 <_vfiprintf_r+0x44>
 800d476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d478:	e71e      	b.n	800d2b8 <_vfiprintf_r+0x48>
 800d47a:	ab03      	add	r3, sp, #12
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	462a      	mov	r2, r5
 800d480:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <_vfiprintf_r+0x228>)
 800d482:	a904      	add	r1, sp, #16
 800d484:	4630      	mov	r0, r6
 800d486:	f7fc fdc9 	bl	800a01c <_printf_i>
 800d48a:	e7e4      	b.n	800d456 <_vfiprintf_r+0x1e6>
 800d48c:	0800e598 	.word	0x0800e598
 800d490:	0800e5a2 	.word	0x0800e5a2
 800d494:	08009aed 	.word	0x08009aed
 800d498:	0800d24b 	.word	0x0800d24b
 800d49c:	0800e59e 	.word	0x0800e59e

0800d4a0 <__sflush_r>:
 800d4a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a8:	0716      	lsls	r6, r2, #28
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	d454      	bmi.n	800d55a <__sflush_r+0xba>
 800d4b0:	684b      	ldr	r3, [r1, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	dc02      	bgt.n	800d4bc <__sflush_r+0x1c>
 800d4b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	dd48      	ble.n	800d54e <__sflush_r+0xae>
 800d4bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4be:	2e00      	cmp	r6, #0
 800d4c0:	d045      	beq.n	800d54e <__sflush_r+0xae>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4c8:	682f      	ldr	r7, [r5, #0]
 800d4ca:	6a21      	ldr	r1, [r4, #32]
 800d4cc:	602b      	str	r3, [r5, #0]
 800d4ce:	d030      	beq.n	800d532 <__sflush_r+0x92>
 800d4d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4d2:	89a3      	ldrh	r3, [r4, #12]
 800d4d4:	0759      	lsls	r1, r3, #29
 800d4d6:	d505      	bpl.n	800d4e4 <__sflush_r+0x44>
 800d4d8:	6863      	ldr	r3, [r4, #4]
 800d4da:	1ad2      	subs	r2, r2, r3
 800d4dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4de:	b10b      	cbz	r3, 800d4e4 <__sflush_r+0x44>
 800d4e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4e2:	1ad2      	subs	r2, r2, r3
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4e8:	6a21      	ldr	r1, [r4, #32]
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	47b0      	blx	r6
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	89a3      	ldrh	r3, [r4, #12]
 800d4f2:	d106      	bne.n	800d502 <__sflush_r+0x62>
 800d4f4:	6829      	ldr	r1, [r5, #0]
 800d4f6:	291d      	cmp	r1, #29
 800d4f8:	d82b      	bhi.n	800d552 <__sflush_r+0xb2>
 800d4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800d5a4 <__sflush_r+0x104>)
 800d4fc:	410a      	asrs	r2, r1
 800d4fe:	07d6      	lsls	r6, r2, #31
 800d500:	d427      	bmi.n	800d552 <__sflush_r+0xb2>
 800d502:	2200      	movs	r2, #0
 800d504:	6062      	str	r2, [r4, #4]
 800d506:	04d9      	lsls	r1, r3, #19
 800d508:	6922      	ldr	r2, [r4, #16]
 800d50a:	6022      	str	r2, [r4, #0]
 800d50c:	d504      	bpl.n	800d518 <__sflush_r+0x78>
 800d50e:	1c42      	adds	r2, r0, #1
 800d510:	d101      	bne.n	800d516 <__sflush_r+0x76>
 800d512:	682b      	ldr	r3, [r5, #0]
 800d514:	b903      	cbnz	r3, 800d518 <__sflush_r+0x78>
 800d516:	6560      	str	r0, [r4, #84]	@ 0x54
 800d518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d51a:	602f      	str	r7, [r5, #0]
 800d51c:	b1b9      	cbz	r1, 800d54e <__sflush_r+0xae>
 800d51e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d522:	4299      	cmp	r1, r3
 800d524:	d002      	beq.n	800d52c <__sflush_r+0x8c>
 800d526:	4628      	mov	r0, r5
 800d528:	f7fe f966 	bl	800b7f8 <_free_r>
 800d52c:	2300      	movs	r3, #0
 800d52e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d530:	e00d      	b.n	800d54e <__sflush_r+0xae>
 800d532:	2301      	movs	r3, #1
 800d534:	4628      	mov	r0, r5
 800d536:	47b0      	blx	r6
 800d538:	4602      	mov	r2, r0
 800d53a:	1c50      	adds	r0, r2, #1
 800d53c:	d1c9      	bne.n	800d4d2 <__sflush_r+0x32>
 800d53e:	682b      	ldr	r3, [r5, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d0c6      	beq.n	800d4d2 <__sflush_r+0x32>
 800d544:	2b1d      	cmp	r3, #29
 800d546:	d001      	beq.n	800d54c <__sflush_r+0xac>
 800d548:	2b16      	cmp	r3, #22
 800d54a:	d11e      	bne.n	800d58a <__sflush_r+0xea>
 800d54c:	602f      	str	r7, [r5, #0]
 800d54e:	2000      	movs	r0, #0
 800d550:	e022      	b.n	800d598 <__sflush_r+0xf8>
 800d552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d556:	b21b      	sxth	r3, r3
 800d558:	e01b      	b.n	800d592 <__sflush_r+0xf2>
 800d55a:	690f      	ldr	r7, [r1, #16]
 800d55c:	2f00      	cmp	r7, #0
 800d55e:	d0f6      	beq.n	800d54e <__sflush_r+0xae>
 800d560:	0793      	lsls	r3, r2, #30
 800d562:	680e      	ldr	r6, [r1, #0]
 800d564:	bf08      	it	eq
 800d566:	694b      	ldreq	r3, [r1, #20]
 800d568:	600f      	str	r7, [r1, #0]
 800d56a:	bf18      	it	ne
 800d56c:	2300      	movne	r3, #0
 800d56e:	eba6 0807 	sub.w	r8, r6, r7
 800d572:	608b      	str	r3, [r1, #8]
 800d574:	f1b8 0f00 	cmp.w	r8, #0
 800d578:	dde9      	ble.n	800d54e <__sflush_r+0xae>
 800d57a:	6a21      	ldr	r1, [r4, #32]
 800d57c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d57e:	4643      	mov	r3, r8
 800d580:	463a      	mov	r2, r7
 800d582:	4628      	mov	r0, r5
 800d584:	47b0      	blx	r6
 800d586:	2800      	cmp	r0, #0
 800d588:	dc08      	bgt.n	800d59c <__sflush_r+0xfc>
 800d58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	4407      	add	r7, r0
 800d59e:	eba8 0800 	sub.w	r8, r8, r0
 800d5a2:	e7e7      	b.n	800d574 <__sflush_r+0xd4>
 800d5a4:	dfbffffe 	.word	0xdfbffffe

0800d5a8 <_fflush_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	690b      	ldr	r3, [r1, #16]
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	b913      	cbnz	r3, 800d5b8 <_fflush_r+0x10>
 800d5b2:	2500      	movs	r5, #0
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	b118      	cbz	r0, 800d5c2 <_fflush_r+0x1a>
 800d5ba:	6a03      	ldr	r3, [r0, #32]
 800d5bc:	b90b      	cbnz	r3, 800d5c2 <_fflush_r+0x1a>
 800d5be:	f7fd f8ed 	bl	800a79c <__sinit>
 800d5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d0f3      	beq.n	800d5b2 <_fflush_r+0xa>
 800d5ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5cc:	07d0      	lsls	r0, r2, #31
 800d5ce:	d404      	bmi.n	800d5da <_fflush_r+0x32>
 800d5d0:	0599      	lsls	r1, r3, #22
 800d5d2:	d402      	bmi.n	800d5da <_fflush_r+0x32>
 800d5d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5d6:	f7fd fa9a 	bl	800ab0e <__retarget_lock_acquire_recursive>
 800d5da:	4628      	mov	r0, r5
 800d5dc:	4621      	mov	r1, r4
 800d5de:	f7ff ff5f 	bl	800d4a0 <__sflush_r>
 800d5e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5e4:	07da      	lsls	r2, r3, #31
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	d4e4      	bmi.n	800d5b4 <_fflush_r+0xc>
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	059b      	lsls	r3, r3, #22
 800d5ee:	d4e1      	bmi.n	800d5b4 <_fflush_r+0xc>
 800d5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5f2:	f7fd fa8d 	bl	800ab10 <__retarget_lock_release_recursive>
 800d5f6:	e7dd      	b.n	800d5b4 <_fflush_r+0xc>

0800d5f8 <fiprintf>:
 800d5f8:	b40e      	push	{r1, r2, r3}
 800d5fa:	b503      	push	{r0, r1, lr}
 800d5fc:	4601      	mov	r1, r0
 800d5fe:	ab03      	add	r3, sp, #12
 800d600:	4805      	ldr	r0, [pc, #20]	@ (800d618 <fiprintf+0x20>)
 800d602:	f853 2b04 	ldr.w	r2, [r3], #4
 800d606:	6800      	ldr	r0, [r0, #0]
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	f7ff fe31 	bl	800d270 <_vfiprintf_r>
 800d60e:	b002      	add	sp, #8
 800d610:	f85d eb04 	ldr.w	lr, [sp], #4
 800d614:	b003      	add	sp, #12
 800d616:	4770      	bx	lr
 800d618:	200000d4 	.word	0x200000d4

0800d61c <__swbuf_r>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	460e      	mov	r6, r1
 800d620:	4614      	mov	r4, r2
 800d622:	4605      	mov	r5, r0
 800d624:	b118      	cbz	r0, 800d62e <__swbuf_r+0x12>
 800d626:	6a03      	ldr	r3, [r0, #32]
 800d628:	b90b      	cbnz	r3, 800d62e <__swbuf_r+0x12>
 800d62a:	f7fd f8b7 	bl	800a79c <__sinit>
 800d62e:	69a3      	ldr	r3, [r4, #24]
 800d630:	60a3      	str	r3, [r4, #8]
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	071a      	lsls	r2, r3, #28
 800d636:	d501      	bpl.n	800d63c <__swbuf_r+0x20>
 800d638:	6923      	ldr	r3, [r4, #16]
 800d63a:	b943      	cbnz	r3, 800d64e <__swbuf_r+0x32>
 800d63c:	4621      	mov	r1, r4
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 f82a 	bl	800d698 <__swsetup_r>
 800d644:	b118      	cbz	r0, 800d64e <__swbuf_r+0x32>
 800d646:	f04f 37ff 	mov.w	r7, #4294967295
 800d64a:	4638      	mov	r0, r7
 800d64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	6922      	ldr	r2, [r4, #16]
 800d652:	1a98      	subs	r0, r3, r2
 800d654:	6963      	ldr	r3, [r4, #20]
 800d656:	b2f6      	uxtb	r6, r6
 800d658:	4283      	cmp	r3, r0
 800d65a:	4637      	mov	r7, r6
 800d65c:	dc05      	bgt.n	800d66a <__swbuf_r+0x4e>
 800d65e:	4621      	mov	r1, r4
 800d660:	4628      	mov	r0, r5
 800d662:	f7ff ffa1 	bl	800d5a8 <_fflush_r>
 800d666:	2800      	cmp	r0, #0
 800d668:	d1ed      	bne.n	800d646 <__swbuf_r+0x2a>
 800d66a:	68a3      	ldr	r3, [r4, #8]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	60a3      	str	r3, [r4, #8]
 800d670:	6823      	ldr	r3, [r4, #0]
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	6022      	str	r2, [r4, #0]
 800d676:	701e      	strb	r6, [r3, #0]
 800d678:	6962      	ldr	r2, [r4, #20]
 800d67a:	1c43      	adds	r3, r0, #1
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d004      	beq.n	800d68a <__swbuf_r+0x6e>
 800d680:	89a3      	ldrh	r3, [r4, #12]
 800d682:	07db      	lsls	r3, r3, #31
 800d684:	d5e1      	bpl.n	800d64a <__swbuf_r+0x2e>
 800d686:	2e0a      	cmp	r6, #10
 800d688:	d1df      	bne.n	800d64a <__swbuf_r+0x2e>
 800d68a:	4621      	mov	r1, r4
 800d68c:	4628      	mov	r0, r5
 800d68e:	f7ff ff8b 	bl	800d5a8 <_fflush_r>
 800d692:	2800      	cmp	r0, #0
 800d694:	d0d9      	beq.n	800d64a <__swbuf_r+0x2e>
 800d696:	e7d6      	b.n	800d646 <__swbuf_r+0x2a>

0800d698 <__swsetup_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4b29      	ldr	r3, [pc, #164]	@ (800d740 <__swsetup_r+0xa8>)
 800d69c:	4605      	mov	r5, r0
 800d69e:	6818      	ldr	r0, [r3, #0]
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	b118      	cbz	r0, 800d6ac <__swsetup_r+0x14>
 800d6a4:	6a03      	ldr	r3, [r0, #32]
 800d6a6:	b90b      	cbnz	r3, 800d6ac <__swsetup_r+0x14>
 800d6a8:	f7fd f878 	bl	800a79c <__sinit>
 800d6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b0:	0719      	lsls	r1, r3, #28
 800d6b2:	d422      	bmi.n	800d6fa <__swsetup_r+0x62>
 800d6b4:	06da      	lsls	r2, r3, #27
 800d6b6:	d407      	bmi.n	800d6c8 <__swsetup_r+0x30>
 800d6b8:	2209      	movs	r2, #9
 800d6ba:	602a      	str	r2, [r5, #0]
 800d6bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6c0:	81a3      	strh	r3, [r4, #12]
 800d6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c6:	e033      	b.n	800d730 <__swsetup_r+0x98>
 800d6c8:	0758      	lsls	r0, r3, #29
 800d6ca:	d512      	bpl.n	800d6f2 <__swsetup_r+0x5a>
 800d6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6ce:	b141      	cbz	r1, 800d6e2 <__swsetup_r+0x4a>
 800d6d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6d4:	4299      	cmp	r1, r3
 800d6d6:	d002      	beq.n	800d6de <__swsetup_r+0x46>
 800d6d8:	4628      	mov	r0, r5
 800d6da:	f7fe f88d 	bl	800b7f8 <_free_r>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6e2:	89a3      	ldrh	r3, [r4, #12]
 800d6e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6063      	str	r3, [r4, #4]
 800d6ee:	6923      	ldr	r3, [r4, #16]
 800d6f0:	6023      	str	r3, [r4, #0]
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	f043 0308 	orr.w	r3, r3, #8
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	6923      	ldr	r3, [r4, #16]
 800d6fc:	b94b      	cbnz	r3, 800d712 <__swsetup_r+0x7a>
 800d6fe:	89a3      	ldrh	r3, [r4, #12]
 800d700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d708:	d003      	beq.n	800d712 <__swsetup_r+0x7a>
 800d70a:	4621      	mov	r1, r4
 800d70c:	4628      	mov	r0, r5
 800d70e:	f000 fc31 	bl	800df74 <__smakebuf_r>
 800d712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d716:	f013 0201 	ands.w	r2, r3, #1
 800d71a:	d00a      	beq.n	800d732 <__swsetup_r+0x9a>
 800d71c:	2200      	movs	r2, #0
 800d71e:	60a2      	str	r2, [r4, #8]
 800d720:	6962      	ldr	r2, [r4, #20]
 800d722:	4252      	negs	r2, r2
 800d724:	61a2      	str	r2, [r4, #24]
 800d726:	6922      	ldr	r2, [r4, #16]
 800d728:	b942      	cbnz	r2, 800d73c <__swsetup_r+0xa4>
 800d72a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d72e:	d1c5      	bne.n	800d6bc <__swsetup_r+0x24>
 800d730:	bd38      	pop	{r3, r4, r5, pc}
 800d732:	0799      	lsls	r1, r3, #30
 800d734:	bf58      	it	pl
 800d736:	6962      	ldrpl	r2, [r4, #20]
 800d738:	60a2      	str	r2, [r4, #8]
 800d73a:	e7f4      	b.n	800d726 <__swsetup_r+0x8e>
 800d73c:	2000      	movs	r0, #0
 800d73e:	e7f7      	b.n	800d730 <__swsetup_r+0x98>
 800d740:	200000d4 	.word	0x200000d4

0800d744 <memmove>:
 800d744:	4288      	cmp	r0, r1
 800d746:	b510      	push	{r4, lr}
 800d748:	eb01 0402 	add.w	r4, r1, r2
 800d74c:	d902      	bls.n	800d754 <memmove+0x10>
 800d74e:	4284      	cmp	r4, r0
 800d750:	4623      	mov	r3, r4
 800d752:	d807      	bhi.n	800d764 <memmove+0x20>
 800d754:	1e43      	subs	r3, r0, #1
 800d756:	42a1      	cmp	r1, r4
 800d758:	d008      	beq.n	800d76c <memmove+0x28>
 800d75a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d75e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d762:	e7f8      	b.n	800d756 <memmove+0x12>
 800d764:	4402      	add	r2, r0
 800d766:	4601      	mov	r1, r0
 800d768:	428a      	cmp	r2, r1
 800d76a:	d100      	bne.n	800d76e <memmove+0x2a>
 800d76c:	bd10      	pop	{r4, pc}
 800d76e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d776:	e7f7      	b.n	800d768 <memmove+0x24>

0800d778 <strncmp>:
 800d778:	b510      	push	{r4, lr}
 800d77a:	b16a      	cbz	r2, 800d798 <strncmp+0x20>
 800d77c:	3901      	subs	r1, #1
 800d77e:	1884      	adds	r4, r0, r2
 800d780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d784:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d788:	429a      	cmp	r2, r3
 800d78a:	d103      	bne.n	800d794 <strncmp+0x1c>
 800d78c:	42a0      	cmp	r0, r4
 800d78e:	d001      	beq.n	800d794 <strncmp+0x1c>
 800d790:	2a00      	cmp	r2, #0
 800d792:	d1f5      	bne.n	800d780 <strncmp+0x8>
 800d794:	1ad0      	subs	r0, r2, r3
 800d796:	bd10      	pop	{r4, pc}
 800d798:	4610      	mov	r0, r2
 800d79a:	e7fc      	b.n	800d796 <strncmp+0x1e>

0800d79c <_sbrk_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	4d06      	ldr	r5, [pc, #24]	@ (800d7b8 <_sbrk_r+0x1c>)
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	602b      	str	r3, [r5, #0]
 800d7a8:	f7f4 f8ca 	bl	8001940 <_sbrk>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	d102      	bne.n	800d7b6 <_sbrk_r+0x1a>
 800d7b0:	682b      	ldr	r3, [r5, #0]
 800d7b2:	b103      	cbz	r3, 800d7b6 <_sbrk_r+0x1a>
 800d7b4:	6023      	str	r3, [r4, #0]
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}
 800d7b8:	20000794 	.word	0x20000794

0800d7bc <memcpy>:
 800d7bc:	440a      	add	r2, r1
 800d7be:	4291      	cmp	r1, r2
 800d7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7c4:	d100      	bne.n	800d7c8 <memcpy+0xc>
 800d7c6:	4770      	bx	lr
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7d2:	4291      	cmp	r1, r2
 800d7d4:	d1f9      	bne.n	800d7ca <memcpy+0xe>
 800d7d6:	bd10      	pop	{r4, pc}

0800d7d8 <nan>:
 800d7d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7e0 <nan+0x8>
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	00000000 	.word	0x00000000
 800d7e4:	7ff80000 	.word	0x7ff80000

0800d7e8 <abort>:
 800d7e8:	b508      	push	{r3, lr}
 800d7ea:	2006      	movs	r0, #6
 800d7ec:	f000 fc26 	bl	800e03c <raise>
 800d7f0:	2001      	movs	r0, #1
 800d7f2:	f7f4 f82d 	bl	8001850 <_exit>

0800d7f6 <_calloc_r>:
 800d7f6:	b570      	push	{r4, r5, r6, lr}
 800d7f8:	fba1 5402 	umull	r5, r4, r1, r2
 800d7fc:	b93c      	cbnz	r4, 800d80e <_calloc_r+0x18>
 800d7fe:	4629      	mov	r1, r5
 800d800:	f7fe f86e 	bl	800b8e0 <_malloc_r>
 800d804:	4606      	mov	r6, r0
 800d806:	b928      	cbnz	r0, 800d814 <_calloc_r+0x1e>
 800d808:	2600      	movs	r6, #0
 800d80a:	4630      	mov	r0, r6
 800d80c:	bd70      	pop	{r4, r5, r6, pc}
 800d80e:	220c      	movs	r2, #12
 800d810:	6002      	str	r2, [r0, #0]
 800d812:	e7f9      	b.n	800d808 <_calloc_r+0x12>
 800d814:	462a      	mov	r2, r5
 800d816:	4621      	mov	r1, r4
 800d818:	f7fd f89f 	bl	800a95a <memset>
 800d81c:	e7f5      	b.n	800d80a <_calloc_r+0x14>

0800d81e <rshift>:
 800d81e:	6903      	ldr	r3, [r0, #16]
 800d820:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d828:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d82c:	f100 0414 	add.w	r4, r0, #20
 800d830:	dd45      	ble.n	800d8be <rshift+0xa0>
 800d832:	f011 011f 	ands.w	r1, r1, #31
 800d836:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d83a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d83e:	d10c      	bne.n	800d85a <rshift+0x3c>
 800d840:	f100 0710 	add.w	r7, r0, #16
 800d844:	4629      	mov	r1, r5
 800d846:	42b1      	cmp	r1, r6
 800d848:	d334      	bcc.n	800d8b4 <rshift+0x96>
 800d84a:	1a9b      	subs	r3, r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	1eea      	subs	r2, r5, #3
 800d850:	4296      	cmp	r6, r2
 800d852:	bf38      	it	cc
 800d854:	2300      	movcc	r3, #0
 800d856:	4423      	add	r3, r4
 800d858:	e015      	b.n	800d886 <rshift+0x68>
 800d85a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d85e:	f1c1 0820 	rsb	r8, r1, #32
 800d862:	40cf      	lsrs	r7, r1
 800d864:	f105 0e04 	add.w	lr, r5, #4
 800d868:	46a1      	mov	r9, r4
 800d86a:	4576      	cmp	r6, lr
 800d86c:	46f4      	mov	ip, lr
 800d86e:	d815      	bhi.n	800d89c <rshift+0x7e>
 800d870:	1a9a      	subs	r2, r3, r2
 800d872:	0092      	lsls	r2, r2, #2
 800d874:	3a04      	subs	r2, #4
 800d876:	3501      	adds	r5, #1
 800d878:	42ae      	cmp	r6, r5
 800d87a:	bf38      	it	cc
 800d87c:	2200      	movcc	r2, #0
 800d87e:	18a3      	adds	r3, r4, r2
 800d880:	50a7      	str	r7, [r4, r2]
 800d882:	b107      	cbz	r7, 800d886 <rshift+0x68>
 800d884:	3304      	adds	r3, #4
 800d886:	1b1a      	subs	r2, r3, r4
 800d888:	42a3      	cmp	r3, r4
 800d88a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d88e:	bf08      	it	eq
 800d890:	2300      	moveq	r3, #0
 800d892:	6102      	str	r2, [r0, #16]
 800d894:	bf08      	it	eq
 800d896:	6143      	streq	r3, [r0, #20]
 800d898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d89c:	f8dc c000 	ldr.w	ip, [ip]
 800d8a0:	fa0c fc08 	lsl.w	ip, ip, r8
 800d8a4:	ea4c 0707 	orr.w	r7, ip, r7
 800d8a8:	f849 7b04 	str.w	r7, [r9], #4
 800d8ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8b0:	40cf      	lsrs	r7, r1
 800d8b2:	e7da      	b.n	800d86a <rshift+0x4c>
 800d8b4:	f851 cb04 	ldr.w	ip, [r1], #4
 800d8b8:	f847 cf04 	str.w	ip, [r7, #4]!
 800d8bc:	e7c3      	b.n	800d846 <rshift+0x28>
 800d8be:	4623      	mov	r3, r4
 800d8c0:	e7e1      	b.n	800d886 <rshift+0x68>

0800d8c2 <__hexdig_fun>:
 800d8c2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d8c6:	2b09      	cmp	r3, #9
 800d8c8:	d802      	bhi.n	800d8d0 <__hexdig_fun+0xe>
 800d8ca:	3820      	subs	r0, #32
 800d8cc:	b2c0      	uxtb	r0, r0
 800d8ce:	4770      	bx	lr
 800d8d0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d8d4:	2b05      	cmp	r3, #5
 800d8d6:	d801      	bhi.n	800d8dc <__hexdig_fun+0x1a>
 800d8d8:	3847      	subs	r0, #71	@ 0x47
 800d8da:	e7f7      	b.n	800d8cc <__hexdig_fun+0xa>
 800d8dc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d8e0:	2b05      	cmp	r3, #5
 800d8e2:	d801      	bhi.n	800d8e8 <__hexdig_fun+0x26>
 800d8e4:	3827      	subs	r0, #39	@ 0x27
 800d8e6:	e7f1      	b.n	800d8cc <__hexdig_fun+0xa>
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	4770      	bx	lr

0800d8ec <__gethex>:
 800d8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f0:	b085      	sub	sp, #20
 800d8f2:	468a      	mov	sl, r1
 800d8f4:	9302      	str	r3, [sp, #8]
 800d8f6:	680b      	ldr	r3, [r1, #0]
 800d8f8:	9001      	str	r0, [sp, #4]
 800d8fa:	4690      	mov	r8, r2
 800d8fc:	1c9c      	adds	r4, r3, #2
 800d8fe:	46a1      	mov	r9, r4
 800d900:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d904:	2830      	cmp	r0, #48	@ 0x30
 800d906:	d0fa      	beq.n	800d8fe <__gethex+0x12>
 800d908:	eba9 0303 	sub.w	r3, r9, r3
 800d90c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d910:	f7ff ffd7 	bl	800d8c2 <__hexdig_fun>
 800d914:	4605      	mov	r5, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	d168      	bne.n	800d9ec <__gethex+0x100>
 800d91a:	49a0      	ldr	r1, [pc, #640]	@ (800db9c <__gethex+0x2b0>)
 800d91c:	2201      	movs	r2, #1
 800d91e:	4648      	mov	r0, r9
 800d920:	f7ff ff2a 	bl	800d778 <strncmp>
 800d924:	4607      	mov	r7, r0
 800d926:	2800      	cmp	r0, #0
 800d928:	d167      	bne.n	800d9fa <__gethex+0x10e>
 800d92a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d92e:	4626      	mov	r6, r4
 800d930:	f7ff ffc7 	bl	800d8c2 <__hexdig_fun>
 800d934:	2800      	cmp	r0, #0
 800d936:	d062      	beq.n	800d9fe <__gethex+0x112>
 800d938:	4623      	mov	r3, r4
 800d93a:	7818      	ldrb	r0, [r3, #0]
 800d93c:	2830      	cmp	r0, #48	@ 0x30
 800d93e:	4699      	mov	r9, r3
 800d940:	f103 0301 	add.w	r3, r3, #1
 800d944:	d0f9      	beq.n	800d93a <__gethex+0x4e>
 800d946:	f7ff ffbc 	bl	800d8c2 <__hexdig_fun>
 800d94a:	fab0 f580 	clz	r5, r0
 800d94e:	096d      	lsrs	r5, r5, #5
 800d950:	f04f 0b01 	mov.w	fp, #1
 800d954:	464a      	mov	r2, r9
 800d956:	4616      	mov	r6, r2
 800d958:	3201      	adds	r2, #1
 800d95a:	7830      	ldrb	r0, [r6, #0]
 800d95c:	f7ff ffb1 	bl	800d8c2 <__hexdig_fun>
 800d960:	2800      	cmp	r0, #0
 800d962:	d1f8      	bne.n	800d956 <__gethex+0x6a>
 800d964:	498d      	ldr	r1, [pc, #564]	@ (800db9c <__gethex+0x2b0>)
 800d966:	2201      	movs	r2, #1
 800d968:	4630      	mov	r0, r6
 800d96a:	f7ff ff05 	bl	800d778 <strncmp>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d13f      	bne.n	800d9f2 <__gethex+0x106>
 800d972:	b944      	cbnz	r4, 800d986 <__gethex+0x9a>
 800d974:	1c74      	adds	r4, r6, #1
 800d976:	4622      	mov	r2, r4
 800d978:	4616      	mov	r6, r2
 800d97a:	3201      	adds	r2, #1
 800d97c:	7830      	ldrb	r0, [r6, #0]
 800d97e:	f7ff ffa0 	bl	800d8c2 <__hexdig_fun>
 800d982:	2800      	cmp	r0, #0
 800d984:	d1f8      	bne.n	800d978 <__gethex+0x8c>
 800d986:	1ba4      	subs	r4, r4, r6
 800d988:	00a7      	lsls	r7, r4, #2
 800d98a:	7833      	ldrb	r3, [r6, #0]
 800d98c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d990:	2b50      	cmp	r3, #80	@ 0x50
 800d992:	d13e      	bne.n	800da12 <__gethex+0x126>
 800d994:	7873      	ldrb	r3, [r6, #1]
 800d996:	2b2b      	cmp	r3, #43	@ 0x2b
 800d998:	d033      	beq.n	800da02 <__gethex+0x116>
 800d99a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d99c:	d034      	beq.n	800da08 <__gethex+0x11c>
 800d99e:	1c71      	adds	r1, r6, #1
 800d9a0:	2400      	movs	r4, #0
 800d9a2:	7808      	ldrb	r0, [r1, #0]
 800d9a4:	f7ff ff8d 	bl	800d8c2 <__hexdig_fun>
 800d9a8:	1e43      	subs	r3, r0, #1
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b18      	cmp	r3, #24
 800d9ae:	d830      	bhi.n	800da12 <__gethex+0x126>
 800d9b0:	f1a0 0210 	sub.w	r2, r0, #16
 800d9b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9b8:	f7ff ff83 	bl	800d8c2 <__hexdig_fun>
 800d9bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800d9c0:	fa5f fc8c 	uxtb.w	ip, ip
 800d9c4:	f1bc 0f18 	cmp.w	ip, #24
 800d9c8:	f04f 030a 	mov.w	r3, #10
 800d9cc:	d91e      	bls.n	800da0c <__gethex+0x120>
 800d9ce:	b104      	cbz	r4, 800d9d2 <__gethex+0xe6>
 800d9d0:	4252      	negs	r2, r2
 800d9d2:	4417      	add	r7, r2
 800d9d4:	f8ca 1000 	str.w	r1, [sl]
 800d9d8:	b1ed      	cbz	r5, 800da16 <__gethex+0x12a>
 800d9da:	f1bb 0f00 	cmp.w	fp, #0
 800d9de:	bf0c      	ite	eq
 800d9e0:	2506      	moveq	r5, #6
 800d9e2:	2500      	movne	r5, #0
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	b005      	add	sp, #20
 800d9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ec:	2500      	movs	r5, #0
 800d9ee:	462c      	mov	r4, r5
 800d9f0:	e7b0      	b.n	800d954 <__gethex+0x68>
 800d9f2:	2c00      	cmp	r4, #0
 800d9f4:	d1c7      	bne.n	800d986 <__gethex+0x9a>
 800d9f6:	4627      	mov	r7, r4
 800d9f8:	e7c7      	b.n	800d98a <__gethex+0x9e>
 800d9fa:	464e      	mov	r6, r9
 800d9fc:	462f      	mov	r7, r5
 800d9fe:	2501      	movs	r5, #1
 800da00:	e7c3      	b.n	800d98a <__gethex+0x9e>
 800da02:	2400      	movs	r4, #0
 800da04:	1cb1      	adds	r1, r6, #2
 800da06:	e7cc      	b.n	800d9a2 <__gethex+0xb6>
 800da08:	2401      	movs	r4, #1
 800da0a:	e7fb      	b.n	800da04 <__gethex+0x118>
 800da0c:	fb03 0002 	mla	r0, r3, r2, r0
 800da10:	e7ce      	b.n	800d9b0 <__gethex+0xc4>
 800da12:	4631      	mov	r1, r6
 800da14:	e7de      	b.n	800d9d4 <__gethex+0xe8>
 800da16:	eba6 0309 	sub.w	r3, r6, r9
 800da1a:	3b01      	subs	r3, #1
 800da1c:	4629      	mov	r1, r5
 800da1e:	2b07      	cmp	r3, #7
 800da20:	dc0a      	bgt.n	800da38 <__gethex+0x14c>
 800da22:	9801      	ldr	r0, [sp, #4]
 800da24:	f7fd ffe8 	bl	800b9f8 <_Balloc>
 800da28:	4604      	mov	r4, r0
 800da2a:	b940      	cbnz	r0, 800da3e <__gethex+0x152>
 800da2c:	4b5c      	ldr	r3, [pc, #368]	@ (800dba0 <__gethex+0x2b4>)
 800da2e:	4602      	mov	r2, r0
 800da30:	21e4      	movs	r1, #228	@ 0xe4
 800da32:	485c      	ldr	r0, [pc, #368]	@ (800dba4 <__gethex+0x2b8>)
 800da34:	f7fd f874 	bl	800ab20 <__assert_func>
 800da38:	3101      	adds	r1, #1
 800da3a:	105b      	asrs	r3, r3, #1
 800da3c:	e7ef      	b.n	800da1e <__gethex+0x132>
 800da3e:	f100 0a14 	add.w	sl, r0, #20
 800da42:	2300      	movs	r3, #0
 800da44:	4655      	mov	r5, sl
 800da46:	469b      	mov	fp, r3
 800da48:	45b1      	cmp	r9, r6
 800da4a:	d337      	bcc.n	800dabc <__gethex+0x1d0>
 800da4c:	f845 bb04 	str.w	fp, [r5], #4
 800da50:	eba5 050a 	sub.w	r5, r5, sl
 800da54:	10ad      	asrs	r5, r5, #2
 800da56:	6125      	str	r5, [r4, #16]
 800da58:	4658      	mov	r0, fp
 800da5a:	f7fe f8bf 	bl	800bbdc <__hi0bits>
 800da5e:	016d      	lsls	r5, r5, #5
 800da60:	f8d8 6000 	ldr.w	r6, [r8]
 800da64:	1a2d      	subs	r5, r5, r0
 800da66:	42b5      	cmp	r5, r6
 800da68:	dd54      	ble.n	800db14 <__gethex+0x228>
 800da6a:	1bad      	subs	r5, r5, r6
 800da6c:	4629      	mov	r1, r5
 800da6e:	4620      	mov	r0, r4
 800da70:	f7fe fc53 	bl	800c31a <__any_on>
 800da74:	4681      	mov	r9, r0
 800da76:	b178      	cbz	r0, 800da98 <__gethex+0x1ac>
 800da78:	1e6b      	subs	r3, r5, #1
 800da7a:	1159      	asrs	r1, r3, #5
 800da7c:	f003 021f 	and.w	r2, r3, #31
 800da80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da84:	f04f 0901 	mov.w	r9, #1
 800da88:	fa09 f202 	lsl.w	r2, r9, r2
 800da8c:	420a      	tst	r2, r1
 800da8e:	d003      	beq.n	800da98 <__gethex+0x1ac>
 800da90:	454b      	cmp	r3, r9
 800da92:	dc36      	bgt.n	800db02 <__gethex+0x216>
 800da94:	f04f 0902 	mov.w	r9, #2
 800da98:	4629      	mov	r1, r5
 800da9a:	4620      	mov	r0, r4
 800da9c:	f7ff febf 	bl	800d81e <rshift>
 800daa0:	442f      	add	r7, r5
 800daa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800daa6:	42bb      	cmp	r3, r7
 800daa8:	da42      	bge.n	800db30 <__gethex+0x244>
 800daaa:	9801      	ldr	r0, [sp, #4]
 800daac:	4621      	mov	r1, r4
 800daae:	f7fd ffe3 	bl	800ba78 <_Bfree>
 800dab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dab4:	2300      	movs	r3, #0
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	25a3      	movs	r5, #163	@ 0xa3
 800daba:	e793      	b.n	800d9e4 <__gethex+0xf8>
 800dabc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dac0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dac2:	d012      	beq.n	800daea <__gethex+0x1fe>
 800dac4:	2b20      	cmp	r3, #32
 800dac6:	d104      	bne.n	800dad2 <__gethex+0x1e6>
 800dac8:	f845 bb04 	str.w	fp, [r5], #4
 800dacc:	f04f 0b00 	mov.w	fp, #0
 800dad0:	465b      	mov	r3, fp
 800dad2:	7830      	ldrb	r0, [r6, #0]
 800dad4:	9303      	str	r3, [sp, #12]
 800dad6:	f7ff fef4 	bl	800d8c2 <__hexdig_fun>
 800dada:	9b03      	ldr	r3, [sp, #12]
 800dadc:	f000 000f 	and.w	r0, r0, #15
 800dae0:	4098      	lsls	r0, r3
 800dae2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dae6:	3304      	adds	r3, #4
 800dae8:	e7ae      	b.n	800da48 <__gethex+0x15c>
 800daea:	45b1      	cmp	r9, r6
 800daec:	d8ea      	bhi.n	800dac4 <__gethex+0x1d8>
 800daee:	492b      	ldr	r1, [pc, #172]	@ (800db9c <__gethex+0x2b0>)
 800daf0:	9303      	str	r3, [sp, #12]
 800daf2:	2201      	movs	r2, #1
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7ff fe3f 	bl	800d778 <strncmp>
 800dafa:	9b03      	ldr	r3, [sp, #12]
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d1e1      	bne.n	800dac4 <__gethex+0x1d8>
 800db00:	e7a2      	b.n	800da48 <__gethex+0x15c>
 800db02:	1ea9      	subs	r1, r5, #2
 800db04:	4620      	mov	r0, r4
 800db06:	f7fe fc08 	bl	800c31a <__any_on>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d0c2      	beq.n	800da94 <__gethex+0x1a8>
 800db0e:	f04f 0903 	mov.w	r9, #3
 800db12:	e7c1      	b.n	800da98 <__gethex+0x1ac>
 800db14:	da09      	bge.n	800db2a <__gethex+0x23e>
 800db16:	1b75      	subs	r5, r6, r5
 800db18:	4621      	mov	r1, r4
 800db1a:	9801      	ldr	r0, [sp, #4]
 800db1c:	462a      	mov	r2, r5
 800db1e:	f7fe f9c3 	bl	800bea8 <__lshift>
 800db22:	1b7f      	subs	r7, r7, r5
 800db24:	4604      	mov	r4, r0
 800db26:	f100 0a14 	add.w	sl, r0, #20
 800db2a:	f04f 0900 	mov.w	r9, #0
 800db2e:	e7b8      	b.n	800daa2 <__gethex+0x1b6>
 800db30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db34:	42bd      	cmp	r5, r7
 800db36:	dd6f      	ble.n	800dc18 <__gethex+0x32c>
 800db38:	1bed      	subs	r5, r5, r7
 800db3a:	42ae      	cmp	r6, r5
 800db3c:	dc34      	bgt.n	800dba8 <__gethex+0x2bc>
 800db3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db42:	2b02      	cmp	r3, #2
 800db44:	d022      	beq.n	800db8c <__gethex+0x2a0>
 800db46:	2b03      	cmp	r3, #3
 800db48:	d024      	beq.n	800db94 <__gethex+0x2a8>
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d115      	bne.n	800db7a <__gethex+0x28e>
 800db4e:	42ae      	cmp	r6, r5
 800db50:	d113      	bne.n	800db7a <__gethex+0x28e>
 800db52:	2e01      	cmp	r6, #1
 800db54:	d10b      	bne.n	800db6e <__gethex+0x282>
 800db56:	9a02      	ldr	r2, [sp, #8]
 800db58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db5c:	6013      	str	r3, [r2, #0]
 800db5e:	2301      	movs	r3, #1
 800db60:	6123      	str	r3, [r4, #16]
 800db62:	f8ca 3000 	str.w	r3, [sl]
 800db66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db68:	2562      	movs	r5, #98	@ 0x62
 800db6a:	601c      	str	r4, [r3, #0]
 800db6c:	e73a      	b.n	800d9e4 <__gethex+0xf8>
 800db6e:	1e71      	subs	r1, r6, #1
 800db70:	4620      	mov	r0, r4
 800db72:	f7fe fbd2 	bl	800c31a <__any_on>
 800db76:	2800      	cmp	r0, #0
 800db78:	d1ed      	bne.n	800db56 <__gethex+0x26a>
 800db7a:	9801      	ldr	r0, [sp, #4]
 800db7c:	4621      	mov	r1, r4
 800db7e:	f7fd ff7b 	bl	800ba78 <_Bfree>
 800db82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db84:	2300      	movs	r3, #0
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	2550      	movs	r5, #80	@ 0x50
 800db8a:	e72b      	b.n	800d9e4 <__gethex+0xf8>
 800db8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1f3      	bne.n	800db7a <__gethex+0x28e>
 800db92:	e7e0      	b.n	800db56 <__gethex+0x26a>
 800db94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1dd      	bne.n	800db56 <__gethex+0x26a>
 800db9a:	e7ee      	b.n	800db7a <__gethex+0x28e>
 800db9c:	0800e540 	.word	0x0800e540
 800dba0:	0800e3d4 	.word	0x0800e3d4
 800dba4:	0800e5b1 	.word	0x0800e5b1
 800dba8:	1e6f      	subs	r7, r5, #1
 800dbaa:	f1b9 0f00 	cmp.w	r9, #0
 800dbae:	d130      	bne.n	800dc12 <__gethex+0x326>
 800dbb0:	b127      	cbz	r7, 800dbbc <__gethex+0x2d0>
 800dbb2:	4639      	mov	r1, r7
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f7fe fbb0 	bl	800c31a <__any_on>
 800dbba:	4681      	mov	r9, r0
 800dbbc:	117a      	asrs	r2, r7, #5
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dbc4:	f007 071f 	and.w	r7, r7, #31
 800dbc8:	40bb      	lsls	r3, r7
 800dbca:	4213      	tst	r3, r2
 800dbcc:	4629      	mov	r1, r5
 800dbce:	4620      	mov	r0, r4
 800dbd0:	bf18      	it	ne
 800dbd2:	f049 0902 	orrne.w	r9, r9, #2
 800dbd6:	f7ff fe22 	bl	800d81e <rshift>
 800dbda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dbde:	1b76      	subs	r6, r6, r5
 800dbe0:	2502      	movs	r5, #2
 800dbe2:	f1b9 0f00 	cmp.w	r9, #0
 800dbe6:	d047      	beq.n	800dc78 <__gethex+0x38c>
 800dbe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d015      	beq.n	800dc1c <__gethex+0x330>
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d017      	beq.n	800dc24 <__gethex+0x338>
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d109      	bne.n	800dc0c <__gethex+0x320>
 800dbf8:	f019 0f02 	tst.w	r9, #2
 800dbfc:	d006      	beq.n	800dc0c <__gethex+0x320>
 800dbfe:	f8da 3000 	ldr.w	r3, [sl]
 800dc02:	ea49 0903 	orr.w	r9, r9, r3
 800dc06:	f019 0f01 	tst.w	r9, #1
 800dc0a:	d10e      	bne.n	800dc2a <__gethex+0x33e>
 800dc0c:	f045 0510 	orr.w	r5, r5, #16
 800dc10:	e032      	b.n	800dc78 <__gethex+0x38c>
 800dc12:	f04f 0901 	mov.w	r9, #1
 800dc16:	e7d1      	b.n	800dbbc <__gethex+0x2d0>
 800dc18:	2501      	movs	r5, #1
 800dc1a:	e7e2      	b.n	800dbe2 <__gethex+0x2f6>
 800dc1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc1e:	f1c3 0301 	rsb	r3, r3, #1
 800dc22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d0f0      	beq.n	800dc0c <__gethex+0x320>
 800dc2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc2e:	f104 0314 	add.w	r3, r4, #20
 800dc32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc3a:	f04f 0c00 	mov.w	ip, #0
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc48:	d01b      	beq.n	800dc82 <__gethex+0x396>
 800dc4a:	3201      	adds	r2, #1
 800dc4c:	6002      	str	r2, [r0, #0]
 800dc4e:	2d02      	cmp	r5, #2
 800dc50:	f104 0314 	add.w	r3, r4, #20
 800dc54:	d13c      	bne.n	800dcd0 <__gethex+0x3e4>
 800dc56:	f8d8 2000 	ldr.w	r2, [r8]
 800dc5a:	3a01      	subs	r2, #1
 800dc5c:	42b2      	cmp	r2, r6
 800dc5e:	d109      	bne.n	800dc74 <__gethex+0x388>
 800dc60:	1171      	asrs	r1, r6, #5
 800dc62:	2201      	movs	r2, #1
 800dc64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc68:	f006 061f 	and.w	r6, r6, #31
 800dc6c:	fa02 f606 	lsl.w	r6, r2, r6
 800dc70:	421e      	tst	r6, r3
 800dc72:	d13a      	bne.n	800dcea <__gethex+0x3fe>
 800dc74:	f045 0520 	orr.w	r5, r5, #32
 800dc78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc7a:	601c      	str	r4, [r3, #0]
 800dc7c:	9b02      	ldr	r3, [sp, #8]
 800dc7e:	601f      	str	r7, [r3, #0]
 800dc80:	e6b0      	b.n	800d9e4 <__gethex+0xf8>
 800dc82:	4299      	cmp	r1, r3
 800dc84:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc88:	d8d9      	bhi.n	800dc3e <__gethex+0x352>
 800dc8a:	68a3      	ldr	r3, [r4, #8]
 800dc8c:	459b      	cmp	fp, r3
 800dc8e:	db17      	blt.n	800dcc0 <__gethex+0x3d4>
 800dc90:	6861      	ldr	r1, [r4, #4]
 800dc92:	9801      	ldr	r0, [sp, #4]
 800dc94:	3101      	adds	r1, #1
 800dc96:	f7fd feaf 	bl	800b9f8 <_Balloc>
 800dc9a:	4681      	mov	r9, r0
 800dc9c:	b918      	cbnz	r0, 800dca6 <__gethex+0x3ba>
 800dc9e:	4b1a      	ldr	r3, [pc, #104]	@ (800dd08 <__gethex+0x41c>)
 800dca0:	4602      	mov	r2, r0
 800dca2:	2184      	movs	r1, #132	@ 0x84
 800dca4:	e6c5      	b.n	800da32 <__gethex+0x146>
 800dca6:	6922      	ldr	r2, [r4, #16]
 800dca8:	3202      	adds	r2, #2
 800dcaa:	f104 010c 	add.w	r1, r4, #12
 800dcae:	0092      	lsls	r2, r2, #2
 800dcb0:	300c      	adds	r0, #12
 800dcb2:	f7ff fd83 	bl	800d7bc <memcpy>
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	9801      	ldr	r0, [sp, #4]
 800dcba:	f7fd fedd 	bl	800ba78 <_Bfree>
 800dcbe:	464c      	mov	r4, r9
 800dcc0:	6923      	ldr	r3, [r4, #16]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcc8:	6122      	str	r2, [r4, #16]
 800dcca:	2201      	movs	r2, #1
 800dccc:	615a      	str	r2, [r3, #20]
 800dcce:	e7be      	b.n	800dc4e <__gethex+0x362>
 800dcd0:	6922      	ldr	r2, [r4, #16]
 800dcd2:	455a      	cmp	r2, fp
 800dcd4:	dd0b      	ble.n	800dcee <__gethex+0x402>
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f7ff fda0 	bl	800d81e <rshift>
 800dcde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dce2:	3701      	adds	r7, #1
 800dce4:	42bb      	cmp	r3, r7
 800dce6:	f6ff aee0 	blt.w	800daaa <__gethex+0x1be>
 800dcea:	2501      	movs	r5, #1
 800dcec:	e7c2      	b.n	800dc74 <__gethex+0x388>
 800dcee:	f016 061f 	ands.w	r6, r6, #31
 800dcf2:	d0fa      	beq.n	800dcea <__gethex+0x3fe>
 800dcf4:	4453      	add	r3, sl
 800dcf6:	f1c6 0620 	rsb	r6, r6, #32
 800dcfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcfe:	f7fd ff6d 	bl	800bbdc <__hi0bits>
 800dd02:	42b0      	cmp	r0, r6
 800dd04:	dbe7      	blt.n	800dcd6 <__gethex+0x3ea>
 800dd06:	e7f0      	b.n	800dcea <__gethex+0x3fe>
 800dd08:	0800e3d4 	.word	0x0800e3d4

0800dd0c <L_shift>:
 800dd0c:	f1c2 0208 	rsb	r2, r2, #8
 800dd10:	0092      	lsls	r2, r2, #2
 800dd12:	b570      	push	{r4, r5, r6, lr}
 800dd14:	f1c2 0620 	rsb	r6, r2, #32
 800dd18:	6843      	ldr	r3, [r0, #4]
 800dd1a:	6804      	ldr	r4, [r0, #0]
 800dd1c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd20:	432c      	orrs	r4, r5
 800dd22:	40d3      	lsrs	r3, r2
 800dd24:	6004      	str	r4, [r0, #0]
 800dd26:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd2a:	4288      	cmp	r0, r1
 800dd2c:	d3f4      	bcc.n	800dd18 <L_shift+0xc>
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}

0800dd30 <__match>:
 800dd30:	b530      	push	{r4, r5, lr}
 800dd32:	6803      	ldr	r3, [r0, #0]
 800dd34:	3301      	adds	r3, #1
 800dd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd3a:	b914      	cbnz	r4, 800dd42 <__match+0x12>
 800dd3c:	6003      	str	r3, [r0, #0]
 800dd3e:	2001      	movs	r0, #1
 800dd40:	bd30      	pop	{r4, r5, pc}
 800dd42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dd4a:	2d19      	cmp	r5, #25
 800dd4c:	bf98      	it	ls
 800dd4e:	3220      	addls	r2, #32
 800dd50:	42a2      	cmp	r2, r4
 800dd52:	d0f0      	beq.n	800dd36 <__match+0x6>
 800dd54:	2000      	movs	r0, #0
 800dd56:	e7f3      	b.n	800dd40 <__match+0x10>

0800dd58 <__hexnan>:
 800dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	680b      	ldr	r3, [r1, #0]
 800dd5e:	6801      	ldr	r1, [r0, #0]
 800dd60:	115e      	asrs	r6, r3, #5
 800dd62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd66:	f013 031f 	ands.w	r3, r3, #31
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	bf18      	it	ne
 800dd6e:	3604      	addne	r6, #4
 800dd70:	2500      	movs	r5, #0
 800dd72:	1f37      	subs	r7, r6, #4
 800dd74:	4682      	mov	sl, r0
 800dd76:	4690      	mov	r8, r2
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd7e:	46b9      	mov	r9, r7
 800dd80:	463c      	mov	r4, r7
 800dd82:	9502      	str	r5, [sp, #8]
 800dd84:	46ab      	mov	fp, r5
 800dd86:	784a      	ldrb	r2, [r1, #1]
 800dd88:	1c4b      	adds	r3, r1, #1
 800dd8a:	9303      	str	r3, [sp, #12]
 800dd8c:	b342      	cbz	r2, 800dde0 <__hexnan+0x88>
 800dd8e:	4610      	mov	r0, r2
 800dd90:	9105      	str	r1, [sp, #20]
 800dd92:	9204      	str	r2, [sp, #16]
 800dd94:	f7ff fd95 	bl	800d8c2 <__hexdig_fun>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d151      	bne.n	800de40 <__hexnan+0xe8>
 800dd9c:	9a04      	ldr	r2, [sp, #16]
 800dd9e:	9905      	ldr	r1, [sp, #20]
 800dda0:	2a20      	cmp	r2, #32
 800dda2:	d818      	bhi.n	800ddd6 <__hexnan+0x7e>
 800dda4:	9b02      	ldr	r3, [sp, #8]
 800dda6:	459b      	cmp	fp, r3
 800dda8:	dd13      	ble.n	800ddd2 <__hexnan+0x7a>
 800ddaa:	454c      	cmp	r4, r9
 800ddac:	d206      	bcs.n	800ddbc <__hexnan+0x64>
 800ddae:	2d07      	cmp	r5, #7
 800ddb0:	dc04      	bgt.n	800ddbc <__hexnan+0x64>
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f7ff ffa8 	bl	800dd0c <L_shift>
 800ddbc:	4544      	cmp	r4, r8
 800ddbe:	d952      	bls.n	800de66 <__hexnan+0x10e>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	f1a4 0904 	sub.w	r9, r4, #4
 800ddc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddca:	f8cd b008 	str.w	fp, [sp, #8]
 800ddce:	464c      	mov	r4, r9
 800ddd0:	461d      	mov	r5, r3
 800ddd2:	9903      	ldr	r1, [sp, #12]
 800ddd4:	e7d7      	b.n	800dd86 <__hexnan+0x2e>
 800ddd6:	2a29      	cmp	r2, #41	@ 0x29
 800ddd8:	d157      	bne.n	800de8a <__hexnan+0x132>
 800ddda:	3102      	adds	r1, #2
 800dddc:	f8ca 1000 	str.w	r1, [sl]
 800dde0:	f1bb 0f00 	cmp.w	fp, #0
 800dde4:	d051      	beq.n	800de8a <__hexnan+0x132>
 800dde6:	454c      	cmp	r4, r9
 800dde8:	d206      	bcs.n	800ddf8 <__hexnan+0xa0>
 800ddea:	2d07      	cmp	r5, #7
 800ddec:	dc04      	bgt.n	800ddf8 <__hexnan+0xa0>
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7ff ff8a 	bl	800dd0c <L_shift>
 800ddf8:	4544      	cmp	r4, r8
 800ddfa:	d936      	bls.n	800de6a <__hexnan+0x112>
 800ddfc:	f1a8 0204 	sub.w	r2, r8, #4
 800de00:	4623      	mov	r3, r4
 800de02:	f853 1b04 	ldr.w	r1, [r3], #4
 800de06:	f842 1f04 	str.w	r1, [r2, #4]!
 800de0a:	429f      	cmp	r7, r3
 800de0c:	d2f9      	bcs.n	800de02 <__hexnan+0xaa>
 800de0e:	1b3b      	subs	r3, r7, r4
 800de10:	f023 0303 	bic.w	r3, r3, #3
 800de14:	3304      	adds	r3, #4
 800de16:	3401      	adds	r4, #1
 800de18:	3e03      	subs	r6, #3
 800de1a:	42b4      	cmp	r4, r6
 800de1c:	bf88      	it	hi
 800de1e:	2304      	movhi	r3, #4
 800de20:	4443      	add	r3, r8
 800de22:	2200      	movs	r2, #0
 800de24:	f843 2b04 	str.w	r2, [r3], #4
 800de28:	429f      	cmp	r7, r3
 800de2a:	d2fb      	bcs.n	800de24 <__hexnan+0xcc>
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	b91b      	cbnz	r3, 800de38 <__hexnan+0xe0>
 800de30:	4547      	cmp	r7, r8
 800de32:	d128      	bne.n	800de86 <__hexnan+0x12e>
 800de34:	2301      	movs	r3, #1
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	2005      	movs	r0, #5
 800de3a:	b007      	add	sp, #28
 800de3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de40:	3501      	adds	r5, #1
 800de42:	2d08      	cmp	r5, #8
 800de44:	f10b 0b01 	add.w	fp, fp, #1
 800de48:	dd06      	ble.n	800de58 <__hexnan+0x100>
 800de4a:	4544      	cmp	r4, r8
 800de4c:	d9c1      	bls.n	800ddd2 <__hexnan+0x7a>
 800de4e:	2300      	movs	r3, #0
 800de50:	f844 3c04 	str.w	r3, [r4, #-4]
 800de54:	2501      	movs	r5, #1
 800de56:	3c04      	subs	r4, #4
 800de58:	6822      	ldr	r2, [r4, #0]
 800de5a:	f000 000f 	and.w	r0, r0, #15
 800de5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de62:	6020      	str	r0, [r4, #0]
 800de64:	e7b5      	b.n	800ddd2 <__hexnan+0x7a>
 800de66:	2508      	movs	r5, #8
 800de68:	e7b3      	b.n	800ddd2 <__hexnan+0x7a>
 800de6a:	9b01      	ldr	r3, [sp, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d0dd      	beq.n	800de2c <__hexnan+0xd4>
 800de70:	f1c3 0320 	rsb	r3, r3, #32
 800de74:	f04f 32ff 	mov.w	r2, #4294967295
 800de78:	40da      	lsrs	r2, r3
 800de7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de7e:	4013      	ands	r3, r2
 800de80:	f846 3c04 	str.w	r3, [r6, #-4]
 800de84:	e7d2      	b.n	800de2c <__hexnan+0xd4>
 800de86:	3f04      	subs	r7, #4
 800de88:	e7d0      	b.n	800de2c <__hexnan+0xd4>
 800de8a:	2004      	movs	r0, #4
 800de8c:	e7d5      	b.n	800de3a <__hexnan+0xe2>

0800de8e <__ascii_mbtowc>:
 800de8e:	b082      	sub	sp, #8
 800de90:	b901      	cbnz	r1, 800de94 <__ascii_mbtowc+0x6>
 800de92:	a901      	add	r1, sp, #4
 800de94:	b142      	cbz	r2, 800dea8 <__ascii_mbtowc+0x1a>
 800de96:	b14b      	cbz	r3, 800deac <__ascii_mbtowc+0x1e>
 800de98:	7813      	ldrb	r3, [r2, #0]
 800de9a:	600b      	str	r3, [r1, #0]
 800de9c:	7812      	ldrb	r2, [r2, #0]
 800de9e:	1e10      	subs	r0, r2, #0
 800dea0:	bf18      	it	ne
 800dea2:	2001      	movne	r0, #1
 800dea4:	b002      	add	sp, #8
 800dea6:	4770      	bx	lr
 800dea8:	4610      	mov	r0, r2
 800deaa:	e7fb      	b.n	800dea4 <__ascii_mbtowc+0x16>
 800deac:	f06f 0001 	mvn.w	r0, #1
 800deb0:	e7f8      	b.n	800dea4 <__ascii_mbtowc+0x16>

0800deb2 <_realloc_r>:
 800deb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb6:	4680      	mov	r8, r0
 800deb8:	4615      	mov	r5, r2
 800deba:	460c      	mov	r4, r1
 800debc:	b921      	cbnz	r1, 800dec8 <_realloc_r+0x16>
 800debe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dec2:	4611      	mov	r1, r2
 800dec4:	f7fd bd0c 	b.w	800b8e0 <_malloc_r>
 800dec8:	b92a      	cbnz	r2, 800ded6 <_realloc_r+0x24>
 800deca:	f7fd fc95 	bl	800b7f8 <_free_r>
 800dece:	2400      	movs	r4, #0
 800ded0:	4620      	mov	r0, r4
 800ded2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded6:	f000 f8ef 	bl	800e0b8 <_malloc_usable_size_r>
 800deda:	4285      	cmp	r5, r0
 800dedc:	4606      	mov	r6, r0
 800dede:	d802      	bhi.n	800dee6 <_realloc_r+0x34>
 800dee0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dee4:	d8f4      	bhi.n	800ded0 <_realloc_r+0x1e>
 800dee6:	4629      	mov	r1, r5
 800dee8:	4640      	mov	r0, r8
 800deea:	f7fd fcf9 	bl	800b8e0 <_malloc_r>
 800deee:	4607      	mov	r7, r0
 800def0:	2800      	cmp	r0, #0
 800def2:	d0ec      	beq.n	800dece <_realloc_r+0x1c>
 800def4:	42b5      	cmp	r5, r6
 800def6:	462a      	mov	r2, r5
 800def8:	4621      	mov	r1, r4
 800defa:	bf28      	it	cs
 800defc:	4632      	movcs	r2, r6
 800defe:	f7ff fc5d 	bl	800d7bc <memcpy>
 800df02:	4621      	mov	r1, r4
 800df04:	4640      	mov	r0, r8
 800df06:	f7fd fc77 	bl	800b7f8 <_free_r>
 800df0a:	463c      	mov	r4, r7
 800df0c:	e7e0      	b.n	800ded0 <_realloc_r+0x1e>

0800df0e <__ascii_wctomb>:
 800df0e:	4603      	mov	r3, r0
 800df10:	4608      	mov	r0, r1
 800df12:	b141      	cbz	r1, 800df26 <__ascii_wctomb+0x18>
 800df14:	2aff      	cmp	r2, #255	@ 0xff
 800df16:	d904      	bls.n	800df22 <__ascii_wctomb+0x14>
 800df18:	228a      	movs	r2, #138	@ 0x8a
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	f04f 30ff 	mov.w	r0, #4294967295
 800df20:	4770      	bx	lr
 800df22:	700a      	strb	r2, [r1, #0]
 800df24:	2001      	movs	r0, #1
 800df26:	4770      	bx	lr

0800df28 <__swhatbuf_r>:
 800df28:	b570      	push	{r4, r5, r6, lr}
 800df2a:	460c      	mov	r4, r1
 800df2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df30:	2900      	cmp	r1, #0
 800df32:	b096      	sub	sp, #88	@ 0x58
 800df34:	4615      	mov	r5, r2
 800df36:	461e      	mov	r6, r3
 800df38:	da0d      	bge.n	800df56 <__swhatbuf_r+0x2e>
 800df3a:	89a3      	ldrh	r3, [r4, #12]
 800df3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df40:	f04f 0100 	mov.w	r1, #0
 800df44:	bf14      	ite	ne
 800df46:	2340      	movne	r3, #64	@ 0x40
 800df48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df4c:	2000      	movs	r0, #0
 800df4e:	6031      	str	r1, [r6, #0]
 800df50:	602b      	str	r3, [r5, #0]
 800df52:	b016      	add	sp, #88	@ 0x58
 800df54:	bd70      	pop	{r4, r5, r6, pc}
 800df56:	466a      	mov	r2, sp
 800df58:	f000 f878 	bl	800e04c <_fstat_r>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	dbec      	blt.n	800df3a <__swhatbuf_r+0x12>
 800df60:	9901      	ldr	r1, [sp, #4]
 800df62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df6a:	4259      	negs	r1, r3
 800df6c:	4159      	adcs	r1, r3
 800df6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df72:	e7eb      	b.n	800df4c <__swhatbuf_r+0x24>

0800df74 <__smakebuf_r>:
 800df74:	898b      	ldrh	r3, [r1, #12]
 800df76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df78:	079d      	lsls	r5, r3, #30
 800df7a:	4606      	mov	r6, r0
 800df7c:	460c      	mov	r4, r1
 800df7e:	d507      	bpl.n	800df90 <__smakebuf_r+0x1c>
 800df80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	6123      	str	r3, [r4, #16]
 800df88:	2301      	movs	r3, #1
 800df8a:	6163      	str	r3, [r4, #20]
 800df8c:	b003      	add	sp, #12
 800df8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df90:	ab01      	add	r3, sp, #4
 800df92:	466a      	mov	r2, sp
 800df94:	f7ff ffc8 	bl	800df28 <__swhatbuf_r>
 800df98:	9f00      	ldr	r7, [sp, #0]
 800df9a:	4605      	mov	r5, r0
 800df9c:	4639      	mov	r1, r7
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7fd fc9e 	bl	800b8e0 <_malloc_r>
 800dfa4:	b948      	cbnz	r0, 800dfba <__smakebuf_r+0x46>
 800dfa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfaa:	059a      	lsls	r2, r3, #22
 800dfac:	d4ee      	bmi.n	800df8c <__smakebuf_r+0x18>
 800dfae:	f023 0303 	bic.w	r3, r3, #3
 800dfb2:	f043 0302 	orr.w	r3, r3, #2
 800dfb6:	81a3      	strh	r3, [r4, #12]
 800dfb8:	e7e2      	b.n	800df80 <__smakebuf_r+0xc>
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	6020      	str	r0, [r4, #0]
 800dfbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfc2:	81a3      	strh	r3, [r4, #12]
 800dfc4:	9b01      	ldr	r3, [sp, #4]
 800dfc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dfca:	b15b      	cbz	r3, 800dfe4 <__smakebuf_r+0x70>
 800dfcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f000 f84d 	bl	800e070 <_isatty_r>
 800dfd6:	b128      	cbz	r0, 800dfe4 <__smakebuf_r+0x70>
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	f023 0303 	bic.w	r3, r3, #3
 800dfde:	f043 0301 	orr.w	r3, r3, #1
 800dfe2:	81a3      	strh	r3, [r4, #12]
 800dfe4:	89a3      	ldrh	r3, [r4, #12]
 800dfe6:	431d      	orrs	r5, r3
 800dfe8:	81a5      	strh	r5, [r4, #12]
 800dfea:	e7cf      	b.n	800df8c <__smakebuf_r+0x18>

0800dfec <_raise_r>:
 800dfec:	291f      	cmp	r1, #31
 800dfee:	b538      	push	{r3, r4, r5, lr}
 800dff0:	4605      	mov	r5, r0
 800dff2:	460c      	mov	r4, r1
 800dff4:	d904      	bls.n	800e000 <_raise_r+0x14>
 800dff6:	2316      	movs	r3, #22
 800dff8:	6003      	str	r3, [r0, #0]
 800dffa:	f04f 30ff 	mov.w	r0, #4294967295
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e002:	b112      	cbz	r2, 800e00a <_raise_r+0x1e>
 800e004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e008:	b94b      	cbnz	r3, 800e01e <_raise_r+0x32>
 800e00a:	4628      	mov	r0, r5
 800e00c:	f000 f852 	bl	800e0b4 <_getpid_r>
 800e010:	4622      	mov	r2, r4
 800e012:	4601      	mov	r1, r0
 800e014:	4628      	mov	r0, r5
 800e016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e01a:	f000 b839 	b.w	800e090 <_kill_r>
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d00a      	beq.n	800e038 <_raise_r+0x4c>
 800e022:	1c59      	adds	r1, r3, #1
 800e024:	d103      	bne.n	800e02e <_raise_r+0x42>
 800e026:	2316      	movs	r3, #22
 800e028:	6003      	str	r3, [r0, #0]
 800e02a:	2001      	movs	r0, #1
 800e02c:	e7e7      	b.n	800dffe <_raise_r+0x12>
 800e02e:	2100      	movs	r1, #0
 800e030:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e034:	4620      	mov	r0, r4
 800e036:	4798      	blx	r3
 800e038:	2000      	movs	r0, #0
 800e03a:	e7e0      	b.n	800dffe <_raise_r+0x12>

0800e03c <raise>:
 800e03c:	4b02      	ldr	r3, [pc, #8]	@ (800e048 <raise+0xc>)
 800e03e:	4601      	mov	r1, r0
 800e040:	6818      	ldr	r0, [r3, #0]
 800e042:	f7ff bfd3 	b.w	800dfec <_raise_r>
 800e046:	bf00      	nop
 800e048:	200000d4 	.word	0x200000d4

0800e04c <_fstat_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4d07      	ldr	r5, [pc, #28]	@ (800e06c <_fstat_r+0x20>)
 800e050:	2300      	movs	r3, #0
 800e052:	4604      	mov	r4, r0
 800e054:	4608      	mov	r0, r1
 800e056:	4611      	mov	r1, r2
 800e058:	602b      	str	r3, [r5, #0]
 800e05a:	f7f3 fc49 	bl	80018f0 <_fstat>
 800e05e:	1c43      	adds	r3, r0, #1
 800e060:	d102      	bne.n	800e068 <_fstat_r+0x1c>
 800e062:	682b      	ldr	r3, [r5, #0]
 800e064:	b103      	cbz	r3, 800e068 <_fstat_r+0x1c>
 800e066:	6023      	str	r3, [r4, #0]
 800e068:	bd38      	pop	{r3, r4, r5, pc}
 800e06a:	bf00      	nop
 800e06c:	20000794 	.word	0x20000794

0800e070 <_isatty_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d06      	ldr	r5, [pc, #24]	@ (800e08c <_isatty_r+0x1c>)
 800e074:	2300      	movs	r3, #0
 800e076:	4604      	mov	r4, r0
 800e078:	4608      	mov	r0, r1
 800e07a:	602b      	str	r3, [r5, #0]
 800e07c:	f7f3 fc48 	bl	8001910 <_isatty>
 800e080:	1c43      	adds	r3, r0, #1
 800e082:	d102      	bne.n	800e08a <_isatty_r+0x1a>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	b103      	cbz	r3, 800e08a <_isatty_r+0x1a>
 800e088:	6023      	str	r3, [r4, #0]
 800e08a:	bd38      	pop	{r3, r4, r5, pc}
 800e08c:	20000794 	.word	0x20000794

0800e090 <_kill_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d07      	ldr	r5, [pc, #28]	@ (800e0b0 <_kill_r+0x20>)
 800e094:	2300      	movs	r3, #0
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	4611      	mov	r1, r2
 800e09c:	602b      	str	r3, [r5, #0]
 800e09e:	f7f3 fbc7 	bl	8001830 <_kill>
 800e0a2:	1c43      	adds	r3, r0, #1
 800e0a4:	d102      	bne.n	800e0ac <_kill_r+0x1c>
 800e0a6:	682b      	ldr	r3, [r5, #0]
 800e0a8:	b103      	cbz	r3, 800e0ac <_kill_r+0x1c>
 800e0aa:	6023      	str	r3, [r4, #0]
 800e0ac:	bd38      	pop	{r3, r4, r5, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20000794 	.word	0x20000794

0800e0b4 <_getpid_r>:
 800e0b4:	f7f3 bbb4 	b.w	8001820 <_getpid>

0800e0b8 <_malloc_usable_size_r>:
 800e0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0bc:	1f18      	subs	r0, r3, #4
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	bfbc      	itt	lt
 800e0c2:	580b      	ldrlt	r3, [r1, r0]
 800e0c4:	18c0      	addlt	r0, r0, r3
 800e0c6:	4770      	bx	lr

0800e0c8 <_init>:
 800e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ca:	bf00      	nop
 800e0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ce:	bc08      	pop	{r3}
 800e0d0:	469e      	mov	lr, r3
 800e0d2:	4770      	bx	lr

0800e0d4 <_fini>:
 800e0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d6:	bf00      	nop
 800e0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0da:	bc08      	pop	{r3}
 800e0dc:	469e      	mov	lr, r3
 800e0de:	4770      	bx	lr
