
stm32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e388  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800e568  0800e568  0000f568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eabc  0800eabc  000102a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eabc  0800eabc  0000fabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eac4  0800eac4  000102a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eac4  0800eac4  0000fac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eac8  0800eac8  0000fac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a4  20000000  0800eacc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200002a4  0800ed70  000102a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800ed70  00010820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b476  00000000  00000000  000102d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003896  00000000  00000000  0002b74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0002efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001179  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a613  00000000  00000000  000317f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1b3  00000000  00000000  0005be0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114b43  00000000  00000000  00077fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cb02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007630  00000000  00000000  0018cb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00194178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a4 	.word	0x200002a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e550 	.word	0x0800e550

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a8 	.word	0x200002a8
 800021c:	0800e550 	.word	0x0800e550

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 feb8 	bl	800ade2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_ADC1_Init+0xec>)
 800107c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xec>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010bc:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80010c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010e2:	f001 fded 	bl	8002cc0 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fb48 	bl	8001780 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010fc:	f002 fe1e 	bl	8003d3c <HAL_ADCEx_MultiModeConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001106:	f000 fb3b 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_ADC1_Init+0xf0>)
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001112:	2303      	movs	r3, #3
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	@ 0x7f
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001128:	f002 f878 	bl	800321c <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001132:	f000 fb25 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	@ 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002c0 	.word	0x200002c0
 8001144:	08600004 	.word	0x08600004

08001148 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f009 fe44 	bl	800ade2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_ADC2_Init+0xc4>)
 800115e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001162:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001166:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001182:	2204      	movs	r2, #4
 8001184:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001194:	2201      	movs	r2, #1
 8001196:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011c4:	f001 fd7c 	bl	8002cc0 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f000 fad7 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC2_Init+0xc8>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	@ 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011f0:	f002 f814 	bl	800321c <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011fa:	f000 fac1 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000032c 	.word	0x2000032c
 800120c:	50000100 	.word	0x50000100
 8001210:	19200040 	.word	0x19200040

08001214 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a4      	sub	sp, #144	@ 0x90
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001230:	2254      	movs	r2, #84	@ 0x54
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f009 fdd4 	bl	800ade2 <memset>
  if(adcHandle->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	f040 80a0 	bne.w	8001386 <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001250:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fa4e 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001262:	f000 fa8d 	bl	8001780 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b79      	ldr	r3, [pc, #484]	@ (800144c <HAL_ADC_MspInit+0x238>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a77      	ldr	r2, [pc, #476]	@ (800144c <HAL_ADC_MspInit+0x238>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b76      	ldr	r3, [pc, #472]	@ (800144c <HAL_ADC_MspInit+0x238>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b75      	ldr	r3, [pc, #468]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a74      	ldr	r2, [pc, #464]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b72      	ldr	r3, [pc, #456]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b6f      	ldr	r3, [pc, #444]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a6e      	ldr	r2, [pc, #440]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b6c      	ldr	r3, [pc, #432]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b69      	ldr	r3, [pc, #420]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a68      	ldr	r2, [pc, #416]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b66      	ldr	r3, [pc, #408]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b63      	ldr	r3, [pc, #396]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a62      	ldr	r2, [pc, #392]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4859      	ldr	r0, [pc, #356]	@ (8001454 <HAL_ADC_MspInit+0x240>)
 80012f0:	f003 fa6e 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f003 fa5f 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001312:	2303      	movs	r3, #3
 8001314:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001326:	4619      	mov	r1, r3
 8001328:	484b      	ldr	r0, [pc, #300]	@ (8001458 <HAL_ADC_MspInit+0x244>)
 800132a:	f003 fa51 	bl	80047d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800132e:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001330:	4a4b      	ldr	r2, [pc, #300]	@ (8001460 <HAL_ADC_MspInit+0x24c>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001334:	4b49      	ldr	r3, [pc, #292]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001336:	2205      	movs	r2, #5
 8001338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b48      	ldr	r3, [pc, #288]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b46      	ldr	r3, [pc, #280]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b45      	ldr	r3, [pc, #276]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134c:	4b43      	ldr	r3, [pc, #268]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800134e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001354:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800135a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800135c:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800135e:	2220      	movs	r2, #32
 8001360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001368:	483c      	ldr	r0, [pc, #240]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800136a:	f002 feff 	bl	800416c <HAL_DMA_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001374:	f000 fa04 	bl	8001780 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a38      	ldr	r2, [pc, #224]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
 800137e:	4a37      	ldr	r2, [pc, #220]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001384:	e05e      	b.n	8001444 <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a36      	ldr	r2, [pc, #216]	@ (8001464 <HAL_ADC_MspInit+0x250>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d159      	bne.n	8001444 <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001396:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f9a9 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 80013ac:	f000 f9e8 	bl	8001780 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b0:	4b26      	ldr	r3, [pc, #152]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a25      	ldr	r2, [pc, #148]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10b      	bne.n	80013da <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800140a:	230b      	movs	r3, #11
 800140c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <HAL_ADC_MspInit+0x240>)
 8001422:	f003 f9d5 	bl	80047d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001426:	2301      	movs	r3, #1
 8001428:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001440:	f003 f9c6 	bl	80047d0 <HAL_GPIO_Init>
}
 8001444:	bf00      	nop
 8001446:	3790      	adds	r7, #144	@ 0x90
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200003f8 	.word	0x200003f8
 8001450:	40021000 	.word	0x40021000
 8001454:	48000800 	.word	0x48000800
 8001458:	48000400 	.word	0x48000400
 800145c:	20000398 	.word	0x20000398
 8001460:	40020008 	.word	0x40020008
 8001464:	50000100 	.word	0x50000100

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6493      	str	r3, [r2, #72]	@ 0x48
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_DMA_Init+0x50>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <MX_DMA_Init+0x50>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6493      	str	r3, [r2, #72]	@ 0x48
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	200b      	movs	r0, #11
 80014a4:	f002 fe2d 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f002 fe44 	bl	8004136 <HAL_NVIC_EnableIRQ>

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b43      	ldr	r3, [pc, #268]	@ (80015e0 <MX_GPIO_Init+0x124>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a42      	ldr	r2, [pc, #264]	@ (80015e0 <MX_GPIO_Init+0x124>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <MX_GPIO_Init+0x124>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ea:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <MX_GPIO_Init+0x124>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a3c      	ldr	r2, [pc, #240]	@ (80015e0 <MX_GPIO_Init+0x124>)
 80014f0:	f043 0320 	orr.w	r3, r3, #32
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <MX_GPIO_Init+0x124>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a36      	ldr	r2, [pc, #216]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <MX_GPIO_Init+0x124>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a30      	ldr	r2, [pc, #192]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_GPIO_Init+0x124>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2120      	movs	r1, #32
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f003 fabf 	bl	8004ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2104      	movs	r1, #4
 800155a:	4822      	ldr	r0, [pc, #136]	@ (80015e4 <MX_GPIO_Init+0x128>)
 800155c:	f003 faba 	bl	8004ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin|Z_Pin;
 8001560:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	481c      	ldr	r0, [pc, #112]	@ (80015e8 <MX_GPIO_Init+0x12c>)
 8001578:	f003 f92a 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800157c:	2320      	movs	r3, #32
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f003 f91b 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800159a:	2304      	movs	r3, #4
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <MX_GPIO_Init+0x128>)
 80015b2:	f003 f90d 	bl	80047d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2017      	movs	r0, #23
 80015bc:	f002 fda1 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015c0:	2017      	movs	r0, #23
 80015c2:	f002 fdb8 	bl	8004136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2028      	movs	r0, #40	@ 0x28
 80015cc:	f002 fd99 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d0:	2028      	movs	r0, #40	@ 0x28
 80015d2:	f002 fdb0 	bl	8004136 <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	@ 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000c00 	.word	0x48000c00
 80015e8:	48000800 	.word	0x48000800

080015ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 80015f4:	1d39      	adds	r1, r7, #4
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	2201      	movs	r2, #1
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <__io_putchar+0x20>)
 80015fe:	f006 fa94 	bl	8007b2a <HAL_UART_Transmit>

  // HAL_UART_Transmit(&huart2, (uint8_t*)&chr,1, HAL_MAX_DELAY);

  return chr;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200004ec 	.word	0x200004ec

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001614:	f001 f8a3 	bl	800275e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 f822 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161c:	f7ff ff4e 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001620:	f7ff ff22 	bl	8001468 <MX_DMA_Init>
  MX_ADC2_Init();
 8001624:	f7ff fd90 	bl	8001148 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001628:	f7ff fd14 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 800162c:	f000 fa12 	bl	8001a54 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001630:	f000 fc68 	bl	8001f04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001634:	f000 fcb2 	bl	8001f9c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001638:	f000 fb30 	bl	8001c9c <MX_TIM4_Init>
  MX_TIM3_Init();
 800163c:	f000 fad8 	bl	8001bf0 <MX_TIM3_Init>

  // HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  // HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
  // HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
  // HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
  Shell_Init();
 8001640:	f000 feec 	bl	800241c <Shell_Init>
  ADC_DMA_Init();
 8001644:	f000 fe9c 	bl	8002380 <ADC_DMA_Init>
  //displayCurrent();
  HAL_TIM_Base_Start_IT(&htim4) ;
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <main+0x4c>)
 800164a:	f004 fb6b 	bl	8005d24 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Shell_Loop();
 800164e:	f000 ff25 	bl	800249c <Shell_Loop>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f001 f8f4 	bl	8002840 <HAL_Delay>
    Shell_Loop();
 8001658:	bf00      	nop
 800165a:	e7f8      	b.n	800164e <main+0x3e>
 800165c:	200004a0 	.word	0x200004a0

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	2238      	movs	r2, #56	@ 0x38
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f009 fbb7 	bl	800ade2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001682:	2000      	movs	r0, #0
 8001684:	f003 fa56 	bl	8004b34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001690:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001692:	2302      	movs	r3, #2
 8001694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001696:	2303      	movs	r3, #3
 8001698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800169a:	2306      	movs	r3, #6
 800169c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800169e:	2355      	movs	r3, #85	@ 0x55
 80016a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 faf2 	bl	8004c9c <HAL_RCC_OscConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016be:	f000 f85f 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c2:	230f      	movs	r3, #15
 80016c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c6:	2303      	movs	r3, #3
 80016c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2104      	movs	r1, #4
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 fdf0 	bl	80052c0 <HAL_RCC_ClockConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016e6:	f000 f84b 	bl	8001780 <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3750      	adds	r7, #80	@ 0x50
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]

  if(GPIO_Pin == Z_Pin) {
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001704:	d108      	bne.n	8001718 <HAL_GPIO_EXTI_Callback+0x24>
  //vitesse = getSpeed(oldpos);
  //oldpos = getPos();
  nbre_tours ++ ;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_GPIO_EXTI_Callback+0x30>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_GPIO_EXTI_Callback+0x30>)
 8001710:	801a      	strh	r2, [r3, #0]
  TIM3->CNT = 0 ;
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_GPIO_EXTI_Callback+0x34>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
  }

}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000400 	.word	0x20000400
 8001728:	40000400 	.word	0x40000400

0800172c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d111      	bne.n	8001762 <HAL_TIM_PeriodElapsedCallback+0x36>
    {
    	vitesse = nbre_tours*Fe*60 ; ; //getSpeed(oldpos);
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	fb03 f202 	mul.w	r2, r3, r2
 800174c:	4613      	mov	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175c:	4b07      	ldr	r3, [pc, #28]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800175e:	edc3 7a00 	vstr	s15, [r3]
    	//oldpos = getPos();
    	//TIM3->
    }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40000800 	.word	0x40000800
 8001774:	20000400 	.word	0x20000400
 8001778:	20000000 	.word	0x20000000
 800177c:	200003fc 	.word	0x200003fc

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <Error_Handler+0x8>

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	4a0e      	ldr	r2, [pc, #56]	@ (80017d0 <HAL_MspInit+0x44>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6613      	str	r3, [r2, #96]	@ 0x60
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <HAL_MspInit+0x44>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017c2:	f003 fa5b 	bl	8004c7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <NMI_Handler+0x4>

080017dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <MemManage_Handler+0x4>

080017ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182a:	f000 ffeb 	bl	8002804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <DMA1_Channel1_IRQHandler+0x10>)
 800183a:	f002 fe7a 	bl	8004532 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000398 	.word	0x20000398

08001848 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_Pin);
 800184c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001850:	f003 f958 	bl	8004b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <TIM4_IRQHandler+0x10>)
 800185e:	f004 fe1d 	bl	800649c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200004a0 	.word	0x200004a0

0800186c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <USART2_IRQHandler+0x10>)
 8001872:	f006 fa35 	bl	8007ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200004ec 	.word	0x200004ec

08001880 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <USART3_IRQHandler+0x10>)
 8001886:	f006 fa2b 	bl	8007ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000580 	.word	0x20000580

08001894 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001898:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800189c:	f003 f932 	bl	8004b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_kill>:

int _kill(int pid, int sig)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018be:	f009 fb3f 	bl	800af40 <__errno>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2216      	movs	r2, #22
 80018c6:	601a      	str	r2, [r3, #0]
  return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_exit>:

void _exit (int status)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffe7 	bl	80018b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018e6:	bf00      	nop
 80018e8:	e7fd      	b.n	80018e6 <_exit+0x12>

080018ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e00a      	b.n	8001912 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018fc:	f3af 8000 	nop.w
 8001900:	4601      	mov	r1, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60ba      	str	r2, [r7, #8]
 8001908:	b2ca      	uxtb	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbf0      	blt.n	80018fc <_read+0x12>
  }

  return len;
 800191a:	687b      	ldr	r3, [r7, #4]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e009      	b.n	800194a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fe54 	bl	80015ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbf1      	blt.n	8001936 <_write+0x12>
  }
  return len;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_close>:

int _close(int file)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001984:	605a      	str	r2, [r3, #4]
  return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_isatty>:

int _isatty(int file)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	@ (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f009 faa4 	bl	800af40 <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20020000 	.word	0x20020000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	20000404 	.word	0x20000404
 8001a2c:	20000820 	.word	0x20000820

08001a30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <SystemInit+0x20>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <SystemInit+0x20>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b09c      	sub	sp, #112	@ 0x70
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	615a      	str	r2, [r3, #20]
 8001a86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2234      	movs	r2, #52	@ 0x34
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f009 f9a7 	bl	800ade2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a94:	4b54      	ldr	r3, [pc, #336]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001a96:	4a55      	ldr	r2, [pc, #340]	@ (8001bec <MX_TIM1_Init+0x198>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7-1;
 8001a9a:	4b53      	ldr	r3, [pc, #332]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001a9c:	2206      	movs	r2, #6
 8001a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001aa0:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001aa6:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001aa8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aae:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aba:	4b4b      	ldr	r3, [pc, #300]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001abc:	2280      	movs	r2, #128	@ 0x80
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ac0:	4849      	ldr	r0, [pc, #292]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001ac2:	f004 f867 	bl	8005b94 <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001acc:	f7ff fe58 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ad6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ada:	4619      	mov	r1, r3
 8001adc:	4842      	ldr	r0, [pc, #264]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001ade:	f004 ff41 	bl	8006964 <HAL_TIM_ConfigClockSource>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ae8:	f7ff fe4a 	bl	8001780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aec:	483e      	ldr	r0, [pc, #248]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001aee:	f004 f991 	bl	8005e14 <HAL_TIM_PWM_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001af8:	f7ff fe42 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001afc:	2320      	movs	r3, #32
 8001afe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4836      	ldr	r0, [pc, #216]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001b10:	f005 fe26 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b1a:	f7ff fe31 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1e:	2360      	movs	r3, #96	@ 0x60
 8001b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 614;
 8001b22:	f240 2366 	movw	r3, #614	@ 0x266
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b40:	2200      	movs	r2, #0
 8001b42:	4619      	mov	r1, r3
 8001b44:	4828      	ldr	r0, [pc, #160]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001b46:	f004 fdf9 	bl	800673c <HAL_TIM_PWM_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b50:	f7ff fe16 	bl	8001780 <Error_Handler>
  }
  sConfigOC.Pulse = 410;
 8001b54:	f44f 73cd 	mov.w	r3, #410	@ 0x19a
 8001b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4821      	ldr	r0, [pc, #132]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001b64:	f004 fdea 	bl	800673c <HAL_TIM_PWM_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001b6e:	f7ff fe07 	bl	8001780 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481a      	ldr	r0, [pc, #104]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001b80:	f004 fddc 	bl	800673c <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001b8a:	f7ff fdf9 	bl	8001780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 8001b9a:	2311      	movs	r3, #17
 8001b9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001bcc:	f005 fe5e 	bl	800788c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8001bd6:	f7ff fdd3 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bda:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <MX_TIM1_Init+0x194>)
 8001bdc:	f000 f92a 	bl	8001e34 <HAL_TIM_MspPostInit>

}
 8001be0:	bf00      	nop
 8001be2:	3770      	adds	r7, #112	@ 0x70
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000408 	.word	0x20000408
 8001bec:	40012c00 	.word	0x40012c00

08001bf0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2224      	movs	r2, #36	@ 0x24
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f009 f8ef 	bl	800ade2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	463b      	mov	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c10:	4a21      	ldr	r2, [pc, #132]	@ (8001c98 <MX_TIM3_Init+0xa8>)
 8001c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c60:	f004 fae8 	bl	8006234 <HAL_TIM_Encoder_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c6a:	f7ff fd89 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c7c:	f005 fd70 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c86:	f7ff fd7b 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	@ 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000454 	.word	0x20000454
 8001c98:	40000400 	.word	0x40000400

08001c9c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <MX_TIM4_Init+0x9c>)
 8001cbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1700-1;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001cc2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001cc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001cd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ce2:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001ce4:	f003 ff56 	bl	8005b94 <HAL_TIM_Base_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001cee:	f7ff fd47 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480d      	ldr	r0, [pc, #52]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001d00:	f004 fe30 	bl	8006964 <HAL_TIM_ConfigClockSource>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001d0a:	f7ff fd39 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	@ (8001d34 <MX_TIM4_Init+0x98>)
 8001d1c:	f005 fd20 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001d26:	f7ff fd2b 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200004a0 	.word	0x200004a0
 8001d38:	40000800 	.word	0x40000800

08001d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <HAL_TIM_Base_MspInit+0x68>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10c      	bne.n	8001d68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	4a15      	ldr	r2, [pc, #84]	@ (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d66:	e018      	b.n	8001d9a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001dac <HAL_TIM_Base_MspInit+0x70>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d113      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	201e      	movs	r0, #30
 8001d90:	f002 f9b7 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d94:	201e      	movs	r0, #30
 8001d96:	f002 f9ce 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40000800 	.word	0x40000800

08001db0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a17      	ldr	r2, [pc, #92]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d128      	bne.n	8001e24 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0x80>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	4a16      	ldr	r2, [pc, #88]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0x80>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dde:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0x80>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0x80>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	4a10      	ldr	r2, [pc, #64]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0x80>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0x80>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e02:	2350      	movs	r3, #80	@ 0x50
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e12:	2302      	movs	r3, #2
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e20:	f002 fcd6 	bl	80047d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	@ 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	@ 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a29      	ldr	r2, [pc, #164]	@ (8001ef8 <HAL_TIM_MspPostInit+0xc4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d14b      	bne.n	8001eee <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	4b29      	ldr	r3, [pc, #164]	@ (8001efc <HAL_TIM_MspPostInit+0xc8>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a28      	ldr	r2, [pc, #160]	@ (8001efc <HAL_TIM_MspPostInit+0xc8>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <HAL_TIM_MspPostInit+0xc8>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <HAL_TIM_MspPostInit+0xc8>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	4a22      	ldr	r2, [pc, #136]	@ (8001efc <HAL_TIM_MspPostInit+0xc8>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_TIM_MspPostInit+0xc8>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001e86:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e98:	2306      	movs	r3, #6
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4817      	ldr	r0, [pc, #92]	@ (8001f00 <HAL_TIM_MspPostInit+0xcc>)
 8001ea4:	f002 fc94 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001ea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480e      	ldr	r0, [pc, #56]	@ (8001f00 <HAL_TIM_MspPostInit+0xcc>)
 8001ec6:	f002 fc83 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001eca:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001edc:	2306      	movs	r3, #6
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eea:	f002 fc71 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	@ 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	48000400 	.word	0x48000400

08001f04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f0a:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <MX_USART2_UART_Init+0x94>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f0e:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4c:	4811      	ldr	r0, [pc, #68]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f4e:	f005 fd9c 	bl	8007a8a <HAL_UART_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f58:	f7ff fc12 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	480d      	ldr	r0, [pc, #52]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f60:	f007 fe13 	bl	8009b8a <HAL_UARTEx_SetTxFifoThreshold>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f6a:	f7ff fc09 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4808      	ldr	r0, [pc, #32]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f72:	f007 fe48 	bl	8009c06 <HAL_UARTEx_SetRxFifoThreshold>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f7c:	f7ff fc00 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <MX_USART2_UART_Init+0x90>)
 8001f82:	f007 fdc9 	bl	8009b18 <HAL_UARTEx_DisableFifoMode>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f8c:	f7ff fbf8 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200004ec 	.word	0x200004ec
 8001f98:	40004400 	.word	0x40004400

08001f9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fa2:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <MX_USART3_UART_Init+0x94>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fe4:	4811      	ldr	r0, [pc, #68]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001fe6:	f005 fd50 	bl	8007a8a <HAL_UART_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ff0:	f7ff fbc6 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	480d      	ldr	r0, [pc, #52]	@ (800202c <MX_USART3_UART_Init+0x90>)
 8001ff8:	f007 fdc7 	bl	8009b8a <HAL_UARTEx_SetTxFifoThreshold>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002002:	f7ff fbbd 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4808      	ldr	r0, [pc, #32]	@ (800202c <MX_USART3_UART_Init+0x90>)
 800200a:	f007 fdfc 	bl	8009c06 <HAL_UARTEx_SetRxFifoThreshold>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002014:	f7ff fbb4 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	@ (800202c <MX_USART3_UART_Init+0x90>)
 800201a:	f007 fd7d 	bl	8009b18 <HAL_UARTEx_DisableFifoMode>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002024:	f7ff fbac 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000580 	.word	0x20000580
 8002030:	40004800 	.word	0x40004800

08002034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0a0      	sub	sp, #128	@ 0x80
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	2254      	movs	r2, #84	@ 0x54
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f008 fec4 	bl	800ade2 <memset>
  if(uartHandle->Instance==USART2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a45      	ldr	r2, [pc, #276]	@ (8002174 <HAL_UART_MspInit+0x140>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d13f      	bne.n	80020e4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fb41 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800207c:	f7ff fb80 	bl	8001780 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	4b3d      	ldr	r3, [pc, #244]	@ (8002178 <HAL_UART_MspInit+0x144>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	4a3c      	ldr	r2, [pc, #240]	@ (8002178 <HAL_UART_MspInit+0x144>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208a:	6593      	str	r3, [r2, #88]	@ 0x58
 800208c:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <HAL_UART_MspInit+0x144>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b37      	ldr	r3, [pc, #220]	@ (8002178 <HAL_UART_MspInit+0x144>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	4a36      	ldr	r2, [pc, #216]	@ (8002178 <HAL_UART_MspInit+0x144>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a4:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_UART_MspInit+0x144>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020b0:	230c      	movs	r3, #12
 80020b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c0:	2307      	movs	r3, #7
 80020c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ce:	f002 fb7f 	bl	80047d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	2026      	movs	r0, #38	@ 0x26
 80020d8:	f002 f813 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020dc:	2026      	movs	r0, #38	@ 0x26
 80020de:	f002 f82a 	bl	8004136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020e2:	e043      	b.n	800216c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a24      	ldr	r2, [pc, #144]	@ (800217c <HAL_UART_MspInit+0x148>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d13e      	bne.n	800216c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020ee:	2304      	movs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fafc 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002106:	f7ff fb3b 	bl	8001780 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_UART_MspInit+0x144>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	4a1a      	ldr	r2, [pc, #104]	@ (8002178 <HAL_UART_MspInit+0x144>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002114:	6593      	str	r3, [r2, #88]	@ 0x58
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HAL_UART_MspInit+0x144>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_UART_MspInit+0x144>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	4a14      	ldr	r2, [pc, #80]	@ (8002178 <HAL_UART_MspInit+0x144>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_UART_MspInit+0x144>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800213a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800213e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800214c:	2307      	movs	r3, #7
 800214e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002154:	4619      	mov	r1, r3
 8002156:	480a      	ldr	r0, [pc, #40]	@ (8002180 <HAL_UART_MspInit+0x14c>)
 8002158:	f002 fb3a 	bl	80047d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2027      	movs	r0, #39	@ 0x27
 8002162:	f001 ffce 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002166:	2027      	movs	r0, #39	@ 0x27
 8002168:	f001 ffe5 	bl	8004136 <HAL_NVIC_EnableIRQ>
}
 800216c:	bf00      	nop
 800216e:	3780      	adds	r7, #128	@ 0x80
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40004400 	.word	0x40004400
 8002178:	40021000 	.word	0x40021000
 800217c:	40004800 	.word	0x40004800
 8002180:	48000800 	.word	0x48000800

08002184 <setPWMsDutyCycle>:
 *
 * @param alpha Nouvelle valeur du rapport cyclique souhaité
 */

static void setPWMsDutyCycle(int alpha)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	int alphaActuel = __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_1); // Obtient le rapport cyclique actuel de TIM_CHANNEL1
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <setPWMsDutyCycle+0x78>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002192:	60fb      	str	r3, [r7, #12]

	// Ajustement progressif du rapport cyclique
	if (alpha < alphaActuel)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	da27      	bge.n	80021ec <setPWMsDutyCycle+0x68>
	{
		// Si la nouvelle valeur est inférieure à l'actuelle, on la diminue progressivement
		while (alphaActuel > alpha)
 800219c:	e010      	b.n	80021c0 <setPWMsDutyCycle+0x3c>
		{
			alphaActuel--; // Décrémente alphaActuel pour atteindre la cible
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, alphaActuel);
 80021a4:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <setPWMsDutyCycle+0x78>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - alphaActuel);
 80021ac:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <setPWMsDutyCycle+0x7c>)
 80021ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <setPWMsDutyCycle+0x78>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1a8a      	subs	r2, r1, r2
 80021b8:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(20);
 80021ba:	2014      	movs	r0, #20
 80021bc:	f000 fb40 	bl	8002840 <HAL_Delay>
		while (alphaActuel > alpha)
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dcea      	bgt.n	800219e <setPWMsDutyCycle+0x1a>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, alphaActuel);
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - alphaActuel);
			HAL_Delay(20);
		}
	}
}
 80021c8:	e014      	b.n	80021f4 <setPWMsDutyCycle+0x70>
			alphaActuel++; // Incrémente alphaActuel pour atteindre la cible
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, alphaActuel);
 80021d0:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <setPWMsDutyCycle+0x78>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - alphaActuel);
 80021d8:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <setPWMsDutyCycle+0x7c>)
 80021da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <setPWMsDutyCycle+0x78>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1a8a      	subs	r2, r1, r2
 80021e4:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(20);
 80021e6:	2014      	movs	r0, #20
 80021e8:	f000 fb2a 	bl	8002840 <HAL_Delay>
		while (alphaActuel < alpha)
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbea      	blt.n	80021ca <setPWMsDutyCycle+0x46>
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000408 	.word	0x20000408
 8002200:	40012c00 	.word	0x40012c00

08002204 <moteurSetSpeed>:
 *
 * @param cmd La commande de vitesse souhaitée transmise par UART
 */

void moteurSetSpeed(char *cmd)
{
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	float vitesse = atoi(cmd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f007 fd87 	bl	8009d20 <atoi>
 8002212:	ee07 0a90 	vmov	s15, r0
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	edc7 7a03 	vstr	s15, [r7, #12]
	if (vitesse > VITESSE_MAX) // Limite la vitesse à la valeur maximale
 800221e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002222:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80022ac <moteurSetSpeed+0xa8>
 8002226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	dd01      	ble.n	8002234 <moteurSetSpeed+0x30>
	{
		vitesse = VITESSE_MAX;
 8002230:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <moteurSetSpeed+0xac>)
 8002232:	60fb      	str	r3, [r7, #12]
	}
	if (vitesse < 0) // Limite la vitesse à la valeur minimale
 8002234:	edd7 7a03 	vldr	s15, [r7, #12]
 8002238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	d502      	bpl.n	8002248 <moteurSetSpeed+0x44>
	{
		vitesse = 0;
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
	}
	uint32_t alpha = 0.5*(1+vitesse/VITESSE_MAX)*ALPHA_MAX; // Convertit la vitesse en rapport cyclique PWM
 8002248:	ed97 7a03 	vldr	s14, [r7, #12]
 800224c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80022ac <moteurSetSpeed+0xa8>
 8002250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002254:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225c:	ee17 0a90 	vmov	r0, s15
 8002260:	f7fe f9aa 	bl	80005b8 <__aeabi_f2d>
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <moteurSetSpeed+0xb0>)
 800226a:	f7fe f9fd 	bl	8000668 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4614      	mov	r4, r2
 8002274:	461d      	mov	r5, r3
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <moteurSetSpeed+0xb4>)
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f97a 	bl	8000574 <__aeabi_ui2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4620      	mov	r0, r4
 8002286:	4629      	mov	r1, r5
 8002288:	f7fe f9ee 	bl	8000668 <__aeabi_dmul>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fcc0 	bl	8000c18 <__aeabi_d2uiz>
 8002298:	4603      	mov	r3, r0
 800229a:	60bb      	str	r3, [r7, #8]
	setPWMsDutyCycle(alpha);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff70 	bl	8002184 <setPWMsDutyCycle>
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bdb0      	pop	{r4, r5, r7, pc}
 80022ac:	453b8000 	.word	0x453b8000
 80022b0:	453b8000 	.word	0x453b8000
 80022b4:	3fe00000 	.word	0x3fe00000
 80022b8:	40012c00 	.word	0x40012c00

080022bc <moteurStart>:
 * Cette fonction initialise le moteur avec un rapport cyclique correspondant à une vitesse de 50%.
 * Elle configure les canaux TIM_CHANNEL1 et TIM_CHANNEL2 avec des valeurs complémentaires pour démarrer le moteur.
 */
void moteurStart(void)

{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, ALPHA_0);
 80022c0:	4b12      	ldr	r3, [pc, #72]	@ (800230c <moteurStart+0x50>)
 80022c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c4:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <moteurStart+0x54>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0852      	lsrs	r2, r2, #1
 80022ca:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MAX - ALPHA_0);
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <moteurStart+0x50>)
 80022ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022d0:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <moteurStart+0x50>)
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	085a      	lsrs	r2, r3, #1
 80022d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <moteurStart+0x54>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1a8a      	subs	r2, r1, r2
 80022dc:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022de:	2100      	movs	r1, #0
 80022e0:	480b      	ldr	r0, [pc, #44]	@ (8002310 <moteurStart+0x54>)
 80022e2:	f003 fdf9 	bl	8005ed8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80022e6:	2104      	movs	r1, #4
 80022e8:	4809      	ldr	r0, [pc, #36]	@ (8002310 <moteurStart+0x54>)
 80022ea:	f003 fdf5 	bl	8005ed8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80022ee:	2100      	movs	r1, #0
 80022f0:	4807      	ldr	r0, [pc, #28]	@ (8002310 <moteurStart+0x54>)
 80022f2:	f005 f915 	bl	8007520 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80022f6:	2104      	movs	r1, #4
 80022f8:	4805      	ldr	r0, [pc, #20]	@ (8002310 <moteurStart+0x54>)
 80022fa:	f005 f911 	bl	8007520 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80022fe:	213c      	movs	r1, #60	@ 0x3c
 8002300:	4804      	ldr	r0, [pc, #16]	@ (8002314 <moteurStart+0x58>)
 8002302:	f004 f83d 	bl	8006380 <HAL_TIM_Encoder_Start>
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00
 8002310:	20000408 	.word	0x20000408
 8002314:	20000454 	.word	0x20000454

08002318 <moteurStop>:
 *
 * Cette fonction stoppe le moteur en mettant le rapport cyclique des canaux TIM_CHANNEL1 et TIM_CHANNEL2 à 0.
 * Elle arrête le signal PWM pour chaque canal.
 */
void moteurStop(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, ALPHA_MIN);
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <moteurStop+0x38>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, ALPHA_MIN);
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <moteurStop+0x38>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2200      	movs	r2, #0
 800232a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800232c:	2100      	movs	r1, #0
 800232e:	4808      	ldr	r0, [pc, #32]	@ (8002350 <moteurStop+0x38>)
 8002330:	f003 fee4 	bl	80060fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002334:	2104      	movs	r1, #4
 8002336:	4806      	ldr	r0, [pc, #24]	@ (8002350 <moteurStop+0x38>)
 8002338:	f003 fee0 	bl	80060fc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800233c:	2100      	movs	r1, #0
 800233e:	4804      	ldr	r0, [pc, #16]	@ (8002350 <moteurStop+0x38>)
 8002340:	f005 f9b0 	bl	80076a4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002344:	2104      	movs	r1, #4
 8002346:	4802      	ldr	r0, [pc, #8]	@ (8002350 <moteurStop+0x38>)
 8002348:	f005 f9ac 	bl	80076a4 <HAL_TIMEx_PWMN_Stop>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000408 	.word	0x20000408

08002354 <displayCurrent>:
 * Cette fonction lit la dernière valeur convertie par l'ADC (gérée en arrière-plan par le DMA),
 * calcule le courant correspondant à l'aide des paramètres calibrés, puis
 * affiche la valeur du courant sur la console via `printf`.
 */
void displayCurrent(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
	float I = getCurrent();
 800235a:	f000 f823 	bl	80023a4 <getCurrent>
 800235e:	ed87 0a01 	vstr	s0, [r7, #4]

	// Afficher le courant mesuré
	printf("Current = %f A\r\n", I);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe f928 	bl	80005b8 <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4803      	ldr	r0, [pc, #12]	@ (800237c <displayCurrent+0x28>)
 800236e:	f008 fc8f 	bl	800ac90 <iprintf>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	0800e568 	.word	0x0800e568

08002380 <ADC_DMA_Init>:
 *
 * Configure le DMA pour transférer les données ADC dans un tampon
 * et démarre le TIMER pour assurer un déclenchement périodique des conversions ADC.
 */
void ADC_DMA_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	// Démarre le DMA pour recevoir les données ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, ADC_BUFFER_SIZE);
 8002384:	2201      	movs	r2, #1
 8002386:	4904      	ldr	r1, [pc, #16]	@ (8002398 <ADC_DMA_Init+0x18>)
 8002388:	4804      	ldr	r0, [pc, #16]	@ (800239c <ADC_DMA_Init+0x1c>)
 800238a:	f000 fe55 	bl	8003038 <HAL_ADC_Start_DMA>

	// Démarre le timer pour déclencher les conversions ADC périodiquement
	HAL_TIM_Base_Start(&htim1);
 800238e:	4804      	ldr	r0, [pc, #16]	@ (80023a0 <ADC_DMA_Init+0x20>)
 8002390:	f003 fc58 	bl	8005c44 <HAL_TIM_Base_Start>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000614 	.word	0x20000614
 800239c:	200002c0 	.word	0x200002c0
 80023a0:	20000408 	.word	0x20000408

080023a4 <getCurrent>:
 * en utilisant une formule calibrée.
 *
 * @return Le courant mesuré en ampères (float).
 */
float getCurrent(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
	// Lire la dernière valeur convertie par l'ADC
	float ADC_value = adc_buffer[0];
 80023aa:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <getCurrent+0x64>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b6:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calculer la tension de sortie à partir de la valeur ADC
	float Vout = ADC_value*Vref/ ADC_12B;
 80023ba:	4b14      	ldr	r3, [pc, #80]	@ (800240c <getCurrent+0x68>)
 80023bc:	ed93 7a00 	vldr	s14, [r3]
 80023c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <getCurrent+0x6c>)
 80023ca:	ed93 7a00 	vldr	s14, [r3]
 80023ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d2:	edc7 7a02 	vstr	s15, [r7, #8]

	// Calculer le courant à partir de la tension de sortie
	float I = (Vout- Voff)/Ks;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <getCurrent+0x70>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80023e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <getCurrent+0x74>)
 80023e6:	ed93 7a00 	vldr	s14, [r3]
 80023ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ee:	edc7 7a01 	vstr	s15, [r7, #4]

	// Retourner le courant calculé
	return I;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	ee07 3a90 	vmov	s15, r3
}
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000614 	.word	0x20000614
 800240c:	2000000c 	.word	0x2000000c
 8002410:	20000008 	.word	0x20000008
 8002414:	20000010 	.word	0x20000010
 8002418:	20000014 	.word	0x20000014

0800241c <Shell_Init>:
char *token;
int newCmdReady = 0;
extern float vitesse ;

void Shell_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0

	memset(argv, (int)NULL, MAX_ARGS * sizeof(char *));
 8002420:	2224      	movs	r2, #36	@ 0x24
 8002422:	2100      	movs	r1, #0
 8002424:	4816      	ldr	r0, [pc, #88]	@ (8002480 <Shell_Init+0x64>)
 8002426:	f008 fcdc 	bl	800ade2 <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE * sizeof(char));
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2100      	movs	r1, #0
 800242e:	4815      	ldr	r0, [pc, #84]	@ (8002484 <Shell_Init+0x68>)
 8002430:	f008 fcd7 	bl	800ade2 <memset>
	memset(uartRxBuffer, (int)NULL, UART_RX_BUFFER_SIZE * sizeof(char));
 8002434:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <Shell_Init+0x6c>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, (int)NULL, UART_TX_BUFFER_SIZE * sizeof(char));
 800243a:	2240      	movs	r2, #64	@ 0x40
 800243c:	2100      	movs	r1, #0
 800243e:	4813      	ldr	r0, [pc, #76]	@ (800248c <Shell_Init+0x70>)
 8002440:	f008 fccf 	bl	800ade2 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002444:	2201      	movs	r2, #1
 8002446:	4910      	ldr	r1, [pc, #64]	@ (8002488 <Shell_Init+0x6c>)
 8002448:	4811      	ldr	r0, [pc, #68]	@ (8002490 <Shell_Init+0x74>)
 800244a:	f005 fbfd 	bl	8007c48 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800244e:	4811      	ldr	r0, [pc, #68]	@ (8002494 <Shell_Init+0x78>)
 8002450:	f7fd ff46 	bl	80002e0 <strlen>
 8002454:	4603      	mov	r3, r0
 8002456:	b29a      	uxth	r2, r3
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	490d      	ldr	r1, [pc, #52]	@ (8002494 <Shell_Init+0x78>)
 800245e:	480c      	ldr	r0, [pc, #48]	@ (8002490 <Shell_Init+0x74>)
 8002460:	f005 fb63 	bl	8007b2a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002464:	480c      	ldr	r0, [pc, #48]	@ (8002498 <Shell_Init+0x7c>)
 8002466:	f7fd ff3b 	bl	80002e0 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	b29a      	uxth	r2, r3
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	4909      	ldr	r1, [pc, #36]	@ (8002498 <Shell_Init+0x7c>)
 8002474:	4806      	ldr	r0, [pc, #24]	@ (8002490 <Shell_Init+0x74>)
 8002476:	f005 fb58 	bl	8007b2a <HAL_UART_Transmit>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200006a0 	.word	0x200006a0
 8002484:	2000065c 	.word	0x2000065c
 8002488:	20000618 	.word	0x20000618
 800248c:	2000061c 	.word	0x2000061c
 8002490:	200004ec 	.word	0x200004ec
 8002494:	20000034 	.word	0x20000034
 8002498:	20000018 	.word	0x20000018

0800249c <Shell_Loop>:

void Shell_Loop(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	if (uartRxReceived)
 80024a2:	4b75      	ldr	r3, [pc, #468]	@ (8002678 <Shell_Loop+0x1dc>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d05b      	beq.n	8002562 <Shell_Loop+0xc6>
	{
		switch (uartRxBuffer[0])
 80024aa:	4b74      	ldr	r3, [pc, #464]	@ (800267c <Shell_Loop+0x1e0>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d034      	beq.n	800251c <Shell_Loop+0x80>
 80024b2:	2b0d      	cmp	r3, #13
 80024b4:	d142      	bne.n	800253c <Shell_Loop+0xa0>
		{
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	2203      	movs	r2, #3
 80024bc:	4970      	ldr	r1, [pc, #448]	@ (8002680 <Shell_Loop+0x1e4>)
 80024be:	4871      	ldr	r0, [pc, #452]	@ (8002684 <Shell_Loop+0x1e8>)
 80024c0:	f005 fb33 	bl	8007b2a <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80024c4:	4b70      	ldr	r3, [pc, #448]	@ (8002688 <Shell_Loop+0x1ec>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a70      	ldr	r2, [pc, #448]	@ (800268c <Shell_Loop+0x1f0>)
 80024ca:	2100      	movs	r1, #0
 80024cc:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80024ce:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <Shell_Loop+0x1f4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80024d4:	496f      	ldr	r1, [pc, #444]	@ (8002694 <Shell_Loop+0x1f8>)
 80024d6:	486d      	ldr	r0, [pc, #436]	@ (800268c <Shell_Loop+0x1f0>)
 80024d8:	f008 fc8c 	bl	800adf4 <strtok>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a6e      	ldr	r2, [pc, #440]	@ (8002698 <Shell_Loop+0x1fc>)
 80024e0:	6013      	str	r3, [r2, #0]
			while (token != NULL)
 80024e2:	e010      	b.n	8002506 <Shell_Loop+0x6a>
			{
				argv[argc++] = token;
 80024e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002690 <Shell_Loop+0x1f4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	4969      	ldr	r1, [pc, #420]	@ (8002690 <Shell_Loop+0x1f4>)
 80024ec:	600a      	str	r2, [r1, #0]
 80024ee:	4a6a      	ldr	r2, [pc, #424]	@ (8002698 <Shell_Loop+0x1fc>)
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	496a      	ldr	r1, [pc, #424]	@ (800269c <Shell_Loop+0x200>)
 80024f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80024f8:	4966      	ldr	r1, [pc, #408]	@ (8002694 <Shell_Loop+0x1f8>)
 80024fa:	2000      	movs	r0, #0
 80024fc:	f008 fc7a 	bl	800adf4 <strtok>
 8002500:	4603      	mov	r3, r0
 8002502:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <Shell_Loop+0x1fc>)
 8002504:	6013      	str	r3, [r2, #0]
			while (token != NULL)
 8002506:	4b64      	ldr	r3, [pc, #400]	@ (8002698 <Shell_Loop+0x1fc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ea      	bne.n	80024e4 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 800250e:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <Shell_Loop+0x1ec>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002514:	4b62      	ldr	r3, [pc, #392]	@ (80026a0 <Shell_Loop+0x204>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]
			break;
 800251a:	e01f      	b.n	800255c <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 800251c:	4b5a      	ldr	r3, [pc, #360]	@ (8002688 <Shell_Loop+0x1ec>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	4959      	ldr	r1, [pc, #356]	@ (8002688 <Shell_Loop+0x1ec>)
 8002524:	600a      	str	r2, [r1, #0]
 8002526:	4a59      	ldr	r2, [pc, #356]	@ (800268c <Shell_Loop+0x1f0>)
 8002528:	2100      	movs	r1, #0
 800252a:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	2204      	movs	r2, #4
 8002532:	495c      	ldr	r1, [pc, #368]	@ (80026a4 <Shell_Loop+0x208>)
 8002534:	4853      	ldr	r0, [pc, #332]	@ (8002684 <Shell_Loop+0x1e8>)
 8002536:	f005 faf8 	bl	8007b2a <HAL_UART_Transmit>
			break;
 800253a:	e00f      	b.n	800255c <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800253c:	4b52      	ldr	r3, [pc, #328]	@ (8002688 <Shell_Loop+0x1ec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	4951      	ldr	r1, [pc, #324]	@ (8002688 <Shell_Loop+0x1ec>)
 8002544:	600a      	str	r2, [r1, #0]
 8002546:	4a4d      	ldr	r2, [pc, #308]	@ (800267c <Shell_Loop+0x1e0>)
 8002548:	7811      	ldrb	r1, [r2, #0]
 800254a:	4a50      	ldr	r2, [pc, #320]	@ (800268c <Shell_Loop+0x1f0>)
 800254c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	2201      	movs	r2, #1
 8002554:	4949      	ldr	r1, [pc, #292]	@ (800267c <Shell_Loop+0x1e0>)
 8002556:	484b      	ldr	r0, [pc, #300]	@ (8002684 <Shell_Loop+0x1e8>)
 8002558:	f005 fae7 	bl	8007b2a <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800255c:	4b46      	ldr	r3, [pc, #280]	@ (8002678 <Shell_Loop+0x1dc>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
	}

	if (newCmdReady)
 8002562:	4b4f      	ldr	r3, [pc, #316]	@ (80026a0 <Shell_Loop+0x204>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8081 	beq.w	800266e <Shell_Loop+0x1d2>
	{
		if (strcmp(argv[1], "what") == 0)
 800256c:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <Shell_Loop+0x200>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	494d      	ldr	r1, [pc, #308]	@ (80026a8 <Shell_Loop+0x20c>)
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fe54 	bl	8000220 <strcmp>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <Shell_Loop+0xf2>
		{
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	221a      	movs	r2, #26
 8002584:	4949      	ldr	r1, [pc, #292]	@ (80026ac <Shell_Loop+0x210>)
 8002586:	483f      	ldr	r0, [pc, #252]	@ (8002684 <Shell_Loop+0x1e8>)
 8002588:	f005 facf 	bl	8007b2a <HAL_UART_Transmit>
 800258c:	e065      	b.n	800265a <Shell_Loop+0x1be>
		}
		else if (strcmp(argv[0], "help") == 0)
 800258e:	4b43      	ldr	r3, [pc, #268]	@ (800269c <Shell_Loop+0x200>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4947      	ldr	r1, [pc, #284]	@ (80026b0 <Shell_Loop+0x214>)
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd fe43 	bl	8000220 <strcmp>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10e      	bne.n	80025be <Shell_Loop+0x122>
		{
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80025a0:	4a44      	ldr	r2, [pc, #272]	@ (80026b4 <Shell_Loop+0x218>)
 80025a2:	2140      	movs	r1, #64	@ 0x40
 80025a4:	4844      	ldr	r0, [pc, #272]	@ (80026b8 <Shell_Loop+0x21c>)
 80025a6:	f008 fb85 	bl	800acb4 <sniprintf>
 80025aa:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	4940      	ldr	r1, [pc, #256]	@ (80026b8 <Shell_Loop+0x21c>)
 80025b6:	4833      	ldr	r0, [pc, #204]	@ (8002684 <Shell_Loop+0x1e8>)
 80025b8:	f005 fab7 	bl	8007b2a <HAL_UART_Transmit>
 80025bc:	e04d      	b.n	800265a <Shell_Loop+0x1be>
		}
		else if (strcmp(argv[0], "speed") == 0)
 80025be:	4b37      	ldr	r3, [pc, #220]	@ (800269c <Shell_Loop+0x200>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	493e      	ldr	r1, [pc, #248]	@ (80026bc <Shell_Loop+0x220>)
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd fe2b 	bl	8000220 <strcmp>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <Shell_Loop+0x140>
		{
			moteurSetSpeed(argv[1]);
 80025d0:	4b32      	ldr	r3, [pc, #200]	@ (800269c <Shell_Loop+0x200>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fe15 	bl	8002204 <moteurSetSpeed>
 80025da:	e03e      	b.n	800265a <Shell_Loop+0x1be>
		}
		else if (strcmp(argv[0], "stop") == 0)
 80025dc:	4b2f      	ldr	r3, [pc, #188]	@ (800269c <Shell_Loop+0x200>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4937      	ldr	r1, [pc, #220]	@ (80026c0 <Shell_Loop+0x224>)
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd fe1c 	bl	8000220 <strcmp>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <Shell_Loop+0x158>
		{
			moteurStop();
 80025ee:	f7ff fe93 	bl	8002318 <moteurStop>
 80025f2:	e032      	b.n	800265a <Shell_Loop+0x1be>
		}
		else if (strcmp(argv[0], "start") == 0)
 80025f4:	4b29      	ldr	r3, [pc, #164]	@ (800269c <Shell_Loop+0x200>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4932      	ldr	r1, [pc, #200]	@ (80026c4 <Shell_Loop+0x228>)
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd fe10 	bl	8000220 <strcmp>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <Shell_Loop+0x170>
		{
			moteurStart();
 8002606:	f7ff fe59 	bl	80022bc <moteurStart>
 800260a:	e026      	b.n	800265a <Shell_Loop+0x1be>
		}
		else if (strcmp(argv[0], "vitesse") == 0)
 800260c:	4b23      	ldr	r3, [pc, #140]	@ (800269c <Shell_Loop+0x200>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	492d      	ldr	r1, [pc, #180]	@ (80026c8 <Shell_Loop+0x22c>)
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd fe04 	bl	8000220 <strcmp>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <Shell_Loop+0x198>
				{
					printf("la vitesse est %f \n",vitesse);
 800261e:	4b2b      	ldr	r3, [pc, #172]	@ (80026cc <Shell_Loop+0x230>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ffc8 	bl	80005b8 <__aeabi_f2d>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4828      	ldr	r0, [pc, #160]	@ (80026d0 <Shell_Loop+0x234>)
 800262e:	f008 fb2f 	bl	800ac90 <iprintf>
 8002632:	e012      	b.n	800265a <Shell_Loop+0x1be>
				}
		else if (strcmp(argv[0], "current") == 0)
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <Shell_Loop+0x200>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4926      	ldr	r1, [pc, #152]	@ (80026d4 <Shell_Loop+0x238>)
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fdf0 	bl	8000220 <strcmp>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <Shell_Loop+0x1b0>
		{
			displayCurrent();
 8002646:	f7ff fe85 	bl	8002354 <displayCurrent>
 800264a:	e006      	b.n	800265a <Shell_Loop+0x1be>
		}
		else
		{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	2214      	movs	r2, #20
 8002652:	4921      	ldr	r1, [pc, #132]	@ (80026d8 <Shell_Loop+0x23c>)
 8002654:	480b      	ldr	r0, [pc, #44]	@ (8002684 <Shell_Loop+0x1e8>)
 8002656:	f005 fa68 	bl	8007b2a <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	221c      	movs	r2, #28
 8002660:	491e      	ldr	r1, [pc, #120]	@ (80026dc <Shell_Loop+0x240>)
 8002662:	4808      	ldr	r0, [pc, #32]	@ (8002684 <Shell_Loop+0x1e8>)
 8002664:	f005 fa61 	bl	8007b2a <HAL_UART_Transmit>
		newCmdReady = 0;
 8002668:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <Shell_Loop+0x204>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
	}
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000616 	.word	0x20000616
 800267c:	20000618 	.word	0x20000618
 8002680:	2000009c 	.word	0x2000009c
 8002684:	200004ec 	.word	0x200004ec
 8002688:	2000069c 	.word	0x2000069c
 800268c:	2000065c 	.word	0x2000065c
 8002690:	200006c4 	.word	0x200006c4
 8002694:	0800e57c 	.word	0x0800e57c
 8002698:	200006c8 	.word	0x200006c8
 800269c:	200006a0 	.word	0x200006a0
 80026a0:	200006cc 	.word	0x200006cc
 80026a4:	200000a0 	.word	0x200000a0
 80026a8:	0800e580 	.word	0x0800e580
 80026ac:	200000b8 	.word	0x200000b8
 80026b0:	0800e588 	.word	0x0800e588
 80026b4:	0800e590 	.word	0x0800e590
 80026b8:	2000061c 	.word	0x2000061c
 80026bc:	0800e5b8 	.word	0x0800e5b8
 80026c0:	0800e5c0 	.word	0x0800e5c0
 80026c4:	0800e5c8 	.word	0x0800e5c8
 80026c8:	0800e5d0 	.word	0x0800e5d0
 80026cc:	200003fc 	.word	0x200003fc
 80026d0:	0800e5d8 	.word	0x0800e5d8
 80026d4:	0800e5ec 	.word	0x0800e5ec
 80026d8:	200000a4 	.word	0x200000a4
 80026dc:	20000018 	.word	0x20000018

080026e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_UART_RxCpltCallback+0x20>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80026ee:	2201      	movs	r2, #1
 80026f0:	4904      	ldr	r1, [pc, #16]	@ (8002704 <HAL_UART_RxCpltCallback+0x24>)
 80026f2:	4805      	ldr	r0, [pc, #20]	@ (8002708 <HAL_UART_RxCpltCallback+0x28>)
 80026f4:	f005 faa8 	bl	8007c48 <HAL_UART_Receive_IT>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000616 	.word	0x20000616
 8002704:	20000618 	.word	0x20000618
 8002708:	200004ec 	.word	0x200004ec

0800270c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800270c:	480d      	ldr	r0, [pc, #52]	@ (8002744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800270e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002710:	f7ff f98e 	bl	8001a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002714:	480c      	ldr	r0, [pc, #48]	@ (8002748 <LoopForever+0x6>)
  ldr r1, =_edata
 8002716:	490d      	ldr	r1, [pc, #52]	@ (800274c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <LoopForever+0xe>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800272c:	4c0a      	ldr	r4, [pc, #40]	@ (8002758 <LoopForever+0x16>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273a:	f008 fc07 	bl	800af4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800273e:	f7fe ff67 	bl	8001610 <main>

08002742 <LoopForever>:

LoopForever:
    b LoopForever
 8002742:	e7fe      	b.n	8002742 <LoopForever>
  ldr   r0, =_estack
 8002744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800274c:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8002750:	0800eacc 	.word	0x0800eacc
  ldr r2, =_sbss
 8002754:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8002758:	20000820 	.word	0x20000820

0800275c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC1_2_IRQHandler>

0800275e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002768:	2003      	movs	r0, #3
 800276a:	f001 fcbf 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800276e:	2000      	movs	r0, #0
 8002770:	f000 f80e 	bl	8002790 <HAL_InitTick>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	e001      	b.n	8002784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002780:	f7ff f804 	bl	800178c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002784:	79fb      	ldrb	r3, [r7, #7]

}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800279c:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_InitTick+0x68>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d022      	beq.n	80027ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027a4:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_InitTick+0x6c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_InitTick+0x68>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fcca 	bl	8004152 <HAL_SYSTICK_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10f      	bne.n	80027e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	d809      	bhi.n	80027de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ca:	2200      	movs	r2, #0
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295
 80027d2:	f001 fc96 	bl	8004102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <HAL_InitTick+0x70>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e007      	b.n	80027ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e004      	b.n	80027ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
 80027e8:	e001      	b.n	80027ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200000d8 	.word	0x200000d8
 80027fc:	20000004 	.word	0x20000004
 8002800:	200000d4 	.word	0x200000d4

08002804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <HAL_IncTick+0x1c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_IncTick+0x20>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4413      	add	r3, r2
 8002812:	4a03      	ldr	r2, [pc, #12]	@ (8002820 <HAL_IncTick+0x1c>)
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	200006d0 	.word	0x200006d0
 8002824:	200000d8 	.word	0x200000d8

08002828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTick;
 800282c:	4b03      	ldr	r3, [pc, #12]	@ (800283c <HAL_GetTick+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	200006d0 	.word	0x200006d0

08002840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff ffee 	bl	8002828 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d004      	beq.n	8002864 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <HAL_Delay+0x40>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002864:	bf00      	nop
 8002866:	f7ff ffdf 	bl	8002828 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	429a      	cmp	r2, r3
 8002874:	d8f7      	bhi.n	8002866 <HAL_Delay+0x26>
  {
  }
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200000d8 	.word	0x200000d8

08002884 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	609a      	str	r2, [r3, #8]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3360      	adds	r3, #96	@ 0x60
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <LL_ADC_SetOffset+0x44>)
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	4313      	orrs	r3, r2
 800291c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002924:	bf00      	nop
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	03fff000 	.word	0x03fff000

08002934 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3360      	adds	r3, #96	@ 0x60
 8002942:	461a      	mov	r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3360      	adds	r3, #96	@ 0x60
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	431a      	orrs	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3360      	adds	r3, #96	@ 0x60
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3360      	adds	r3, #96	@ 0x60
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	615a      	str	r2, [r3, #20]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3330      	adds	r3, #48	@ 0x30
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	4413      	add	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	211f      	movs	r1, #31
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 011f 	and.w	r1, r3, #31
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	0e5b      	lsrs	r3, r3, #25
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	0d1b      	lsrs	r3, r3, #20
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2107      	movs	r1, #7
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	401a      	ands	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	0d1b      	lsrs	r3, r3, #20
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	431a      	orrs	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	43db      	mvns	r3, r3
 8002b16:	401a      	ands	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0318 	and.w	r3, r3, #24
 8002b1e:	4908      	ldr	r1, [pc, #32]	@ (8002b40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b20:	40d9      	lsrs	r1, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	400b      	ands	r3, r1
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	0007ffff 	.word	0x0007ffff

08002b44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 031f 	and.w	r3, r3, #31
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6093      	str	r3, [r2, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002be8:	d101      	bne.n	8002bee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <LL_ADC_IsEnabled+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <LL_ADC_IsEnabled+0x1a>
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d101      	bne.n	8002c8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d101      	bne.n	8002cb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b089      	sub	sp, #36	@ 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1a9      	b.n	800302e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fe fa93 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff3f 	bl	8002b84 <LL_ADC_IsDeepPowerDownEnabled>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff25 	bl	8002b60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff ff5a 	bl	8002bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d115      	bne.n	8002d52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff3e 	bl	8002bac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d30:	4b9c      	ldr	r3, [pc, #624]	@ (8002fa4 <HAL_ADC_Init+0x2e4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	4a9c      	ldr	r2, [pc, #624]	@ (8002fa8 <HAL_ADC_Init+0x2e8>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d44:	e002      	b.n	8002d4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f9      	bne.n	8002d46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff3c 	bl	8002bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	f043 0210 	orr.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff75 	bl	8002c72 <LL_ADC_REG_IsConversionOngoing>
 8002d88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 8142 	bne.w	800301c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 813e 	bne.w	800301c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002da8:	f043 0202 	orr.w	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff35 	bl	8002c24 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d141      	bne.n	8002e44 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc8:	d004      	beq.n	8002dd4 <HAL_ADC_Init+0x114>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a77      	ldr	r2, [pc, #476]	@ (8002fac <HAL_ADC_Init+0x2ec>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10f      	bne.n	8002df4 <HAL_ADC_Init+0x134>
 8002dd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002dd8:	f7ff ff24 	bl	8002c24 <LL_ADC_IsEnabled>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	4873      	ldr	r0, [pc, #460]	@ (8002fac <HAL_ADC_Init+0x2ec>)
 8002de0:	f7ff ff20 	bl	8002c24 <LL_ADC_IsEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4323      	orrs	r3, r4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e012      	b.n	8002e1a <HAL_ADC_Init+0x15a>
 8002df4:	486e      	ldr	r0, [pc, #440]	@ (8002fb0 <HAL_ADC_Init+0x2f0>)
 8002df6:	f7ff ff15 	bl	8002c24 <LL_ADC_IsEnabled>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	486d      	ldr	r0, [pc, #436]	@ (8002fb4 <HAL_ADC_Init+0x2f4>)
 8002dfe:	f7ff ff11 	bl	8002c24 <LL_ADC_IsEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	431c      	orrs	r4, r3
 8002e06:	486c      	ldr	r0, [pc, #432]	@ (8002fb8 <HAL_ADC_Init+0x2f8>)
 8002e08:	f7ff ff0c 	bl	8002c24 <LL_ADC_IsEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e26:	d004      	beq.n	8002e32 <HAL_ADC_Init+0x172>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5f      	ldr	r2, [pc, #380]	@ (8002fac <HAL_ADC_Init+0x2ec>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_Init+0x176>
 8002e32:	4a62      	ldr	r2, [pc, #392]	@ (8002fbc <HAL_ADC_Init+0x2fc>)
 8002e34:	e000      	b.n	8002e38 <HAL_ADC_Init+0x178>
 8002e36:	4a62      	ldr	r2, [pc, #392]	@ (8002fc0 <HAL_ADC_Init+0x300>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7ff fd20 	bl	8002884 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7f5b      	ldrb	r3, [r3, #29]
 8002e48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	045b      	lsls	r3, r3, #17
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	4b48      	ldr	r3, [pc, #288]	@ (8002fc4 <HAL_ADC_Init+0x304>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fee4 	bl	8002c98 <LL_ADC_INJ_IsConversionOngoing>
 8002ed0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d17f      	bne.n	8002fd8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d17c      	bne.n	8002fd8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ee2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002eea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002efa:	f023 0302 	bic.w	r3, r3, #2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d017      	beq.n	8002f40 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6911      	ldr	r1, [r2, #16]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f3e:	e013      	b.n	8002f68 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f64:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d12a      	bne.n	8002fc8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f94:	430a      	orrs	r2, r1
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	e019      	b.n	8002fd8 <HAL_ADC_Init+0x318>
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	053e2d63 	.word	0x053e2d63
 8002fac:	50000100 	.word	0x50000100
 8002fb0:	50000400 	.word	0x50000400
 8002fb4:	50000500 	.word	0x50000500
 8002fb8:	50000600 	.word	0x50000600
 8002fbc:	50000300 	.word	0x50000300
 8002fc0:	50000700 	.word	0x50000700
 8002fc4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10c      	bne.n	8002ffa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f023 010f 	bic.w	r1, r3, #15
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ff8:	e007      	b.n	800300a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 020f 	bic.w	r2, r2, #15
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	65da      	str	r2, [r3, #92]	@ 0x5c
 800301a:	e007      	b.n	800302c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800302c:	7ffb      	ldrb	r3, [r7, #31]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	bf00      	nop

08003038 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304c:	d004      	beq.n	8003058 <HAL_ADC_Start_DMA+0x20>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a5a      	ldr	r2, [pc, #360]	@ (80031bc <HAL_ADC_Start_DMA+0x184>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_ADC_Start_DMA+0x24>
 8003058:	4b59      	ldr	r3, [pc, #356]	@ (80031c0 <HAL_ADC_Start_DMA+0x188>)
 800305a:	e000      	b.n	800305e <HAL_ADC_Start_DMA+0x26>
 800305c:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <HAL_ADC_Start_DMA+0x18c>)
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fd70 	bl	8002b44 <LL_ADC_GetMultimode>
 8003064:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fe01 	bl	8002c72 <LL_ADC_REG_IsConversionOngoing>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 809b 	bne.w	80031ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADC_Start_DMA+0x4e>
 8003082:	2302      	movs	r3, #2
 8003084:	e096      	b.n	80031b4 <HAL_ADC_Start_DMA+0x17c>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4d      	ldr	r2, [pc, #308]	@ (80031c8 <HAL_ADC_Start_DMA+0x190>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d008      	beq.n	80030aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d002      	beq.n	80030aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b09      	cmp	r3, #9
 80030a8:	d17a      	bne.n	80031a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fcf6 	bl	8003a9c <ADC_Enable>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d16d      	bne.n	8003196 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a3a      	ldr	r2, [pc, #232]	@ (80031bc <HAL_ADC_Start_DMA+0x184>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_ADC_Start_DMA+0xb4>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3b      	ldr	r2, [pc, #236]	@ (80031cc <HAL_ADC_Start_DMA+0x194>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d002      	beq.n	80030e8 <HAL_ADC_Start_DMA+0xb0>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	e003      	b.n	80030f0 <HAL_ADC_Start_DMA+0xb8>
 80030e8:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <HAL_ADC_Start_DMA+0x198>)
 80030ea:	e001      	b.n	80030f0 <HAL_ADC_Start_DMA+0xb8>
 80030ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d002      	beq.n	80030fe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311a:	f023 0206 	bic.w	r2, r3, #6
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	661a      	str	r2, [r3, #96]	@ 0x60
 8003122:	e002      	b.n	800312a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	4a29      	ldr	r2, [pc, #164]	@ (80031d4 <HAL_ADC_Start_DMA+0x19c>)
 8003130:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003136:	4a28      	ldr	r2, [pc, #160]	@ (80031d8 <HAL_ADC_Start_DMA+0x1a0>)
 8003138:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313e:	4a27      	ldr	r2, [pc, #156]	@ (80031dc <HAL_ADC_Start_DMA+0x1a4>)
 8003140:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	221c      	movs	r2, #28
 8003148:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0210 	orr.w	r2, r2, #16
 8003160:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3340      	adds	r3, #64	@ 0x40
 800317c:	4619      	mov	r1, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f001 f89b 	bl	80042bc <HAL_DMA_Start_IT>
 8003186:	4603      	mov	r3, r0
 8003188:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fd5b 	bl	8002c4a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003194:	e00d      	b.n	80031b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800319e:	e008      	b.n	80031b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80031ac:	e001      	b.n	80031b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	50000100 	.word	0x50000100
 80031c0:	50000300 	.word	0x50000300
 80031c4:	50000700 	.word	0x50000700
 80031c8:	50000600 	.word	0x50000600
 80031cc:	50000500 	.word	0x50000500
 80031d0:	50000400 	.word	0x50000400
 80031d4:	08003bc9 	.word	0x08003bc9
 80031d8:	08003ca1 	.word	0x08003ca1
 80031dc:	08003cbd 	.word	0x08003cbd

080031e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b0b6      	sub	sp, #216	@ 0xd8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x24>
 800323a:	2302      	movs	r3, #2
 800323c:	f000 bc13 	b.w	8003a66 <HAL_ADC_ConfigChannel+0x84a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fd10 	bl	8002c72 <LL_ADC_REG_IsConversionOngoing>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 83f3 	bne.w	8003a40 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f7ff fbf1 	bl	8002a4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fcfe 	bl	8002c72 <LL_ADC_REG_IsConversionOngoing>
 8003276:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fd0a 	bl	8002c98 <LL_ADC_INJ_IsConversionOngoing>
 8003284:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003288:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800328c:	2b00      	cmp	r3, #0
 800328e:	f040 81d9 	bne.w	8003644 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 81d4 	bne.w	8003644 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032a4:	d10f      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7ff fbf8 	bl	8002aa6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fb9f 	bl	8002a02 <LL_ADC_SetSamplingTimeCommonConfig>
 80032c4:	e00e      	b.n	80032e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f7ff fbe7 	bl	8002aa6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fb8f 	bl	8002a02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b04      	cmp	r3, #4
 8003304:	d022      	beq.n	800334c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003316:	f7ff fae9 	bl	80028ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	461a      	mov	r2, r3
 8003328:	f7ff fb35 	bl	8002996 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x126>
 800333c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003340:	e000      	b.n	8003344 <HAL_ADC_ConfigChannel+0x128>
 8003342:	2300      	movs	r3, #0
 8003344:	461a      	mov	r2, r3
 8003346:	f7ff fb41 	bl	80029cc <LL_ADC_SetOffsetSaturation>
 800334a:	e17b      	b.n	8003644 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff faee 	bl	8002934 <LL_ADC_GetOffsetChannel>
 8003358:	4603      	mov	r3, r0
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x15c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fae3 	bl	8002934 <LL_ADC_GetOffsetChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	f003 021f 	and.w	r2, r3, #31
 8003376:	e01e      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x19a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fad8 	bl	8002934 <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800339a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800339e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e004      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80033aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x1b2>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	0e9b      	lsrs	r3, r3, #26
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	e018      	b.n	8003400 <HAL_ADC_ConfigChannel+0x1e4>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80033e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80033ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80033f2:	2320      	movs	r3, #32
 80033f4:	e004      	b.n	8003400 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80033f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003400:	429a      	cmp	r2, r3
 8003402:	d106      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff faa7 	bl	8002960 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fa8b 	bl	8002934 <LL_ADC_GetOffsetChannel>
 800341e:	4603      	mov	r3, r0
 8003420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_ADC_ConfigChannel+0x222>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fa80 	bl	8002934 <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	e01e      	b.n	800347c <HAL_ADC_ConfigChannel+0x260>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fa75 	bl	8002934 <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800345c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003460:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e004      	b.n	800347a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x278>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	e018      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x2aa>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80034a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80034b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e004      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80034bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d106      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fa44 	bl	8002960 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2102      	movs	r1, #2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fa28 	bl	8002934 <LL_ADC_GetOffsetChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x2e8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fa1d 	bl	8002934 <LL_ADC_GetOffsetChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	f003 021f 	and.w	r2, r3, #31
 8003502:	e01e      	b.n	8003542 <HAL_ADC_ConfigChannel+0x326>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fa12 	bl	8002934 <LL_ADC_GetOffsetChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003522:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800352a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e004      	b.n	8003540 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003536:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <HAL_ADC_ConfigChannel+0x33e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	0e9b      	lsrs	r3, r3, #26
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	e016      	b.n	8003588 <HAL_ADC_ConfigChannel+0x36c>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800356c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800356e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003572:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800357a:	2320      	movs	r3, #32
 800357c:	e004      	b.n	8003588 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800357e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003588:	429a      	cmp	r2, r3
 800358a:	d106      	bne.n	800359a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	2102      	movs	r1, #2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f9e3 	bl	8002960 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2103      	movs	r1, #3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff f9c7 	bl	8002934 <LL_ADC_GetOffsetChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x3aa>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2103      	movs	r1, #3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f9bc 	bl	8002934 <LL_ADC_GetOffsetChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	e017      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x3da>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2103      	movs	r1, #3
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f9b1 	bl	8002934 <LL_ADC_GetOffsetChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80035e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80035ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_ADC_ConfigChannel+0x3f2>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	e011      	b.n	8003632 <HAL_ADC_ConfigChannel+0x416>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800361c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800361e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e003      	b.n	8003632 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800362a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003632:	429a      	cmp	r2, r3
 8003634:	d106      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	2103      	movs	r1, #3
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f98e 	bl	8002960 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff faeb 	bl	8002c24 <LL_ADC_IsEnabled>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 813d 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f7ff fa4a 	bl	8002afc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4aa2      	ldr	r2, [pc, #648]	@ (80038f8 <HAL_ADC_ConfigChannel+0x6dc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f040 812e 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_ADC_ConfigChannel+0x480>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2b09      	cmp	r3, #9
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e019      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x4b4>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80036aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80036ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80036b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2b09      	cmp	r3, #9
 80036c8:	bf94      	ite	ls
 80036ca:	2301      	movls	r3, #1
 80036cc:	2300      	movhi	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d079      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x4d4>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	069b      	lsls	r3, r3, #26
 80036ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ee:	e015      	b.n	800371c <HAL_ADC_ConfigChannel+0x500>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003700:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003708:	2320      	movs	r3, #32
 800370a:	e003      	b.n	8003714 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3301      	adds	r3, #1
 8003716:	069b      	lsls	r3, r3, #26
 8003718:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_ADC_ConfigChannel+0x520>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0e9b      	lsrs	r3, r3, #26
 800372e:	3301      	adds	r3, #1
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	e017      	b.n	800376c <HAL_ADC_ConfigChannel+0x550>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800374a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800374e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e003      	b.n	8003760 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2101      	movs	r1, #1
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	ea42 0103 	orr.w	r1, r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x576>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	3301      	adds	r3, #1
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	051b      	lsls	r3, r3, #20
 8003790:	e018      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x5a8>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80037a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80037aa:	2320      	movs	r3, #32
 80037ac:	e003      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80037ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c4:	430b      	orrs	r3, r1
 80037c6:	e07e      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x5c8>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	3301      	adds	r3, #1
 80037dc:	069b      	lsls	r3, r3, #26
 80037de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037e2:	e015      	b.n	8003810 <HAL_ADC_ConfigChannel+0x5f4>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	069b      	lsls	r3, r3, #26
 800380c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x614>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0e9b      	lsrs	r3, r3, #26
 8003822:	3301      	adds	r3, #1
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2101      	movs	r1, #1
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	e017      	b.n	8003860 <HAL_ADC_ConfigChannel+0x644>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	61fb      	str	r3, [r7, #28]
  return result;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003848:	2320      	movs	r3, #32
 800384a:	e003      	b.n	8003854 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2101      	movs	r1, #1
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	ea42 0103 	orr.w	r1, r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_ADC_ConfigChannel+0x670>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0e9b      	lsrs	r3, r3, #26
 8003876:	3301      	adds	r3, #1
 8003878:	f003 021f 	and.w	r2, r3, #31
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	3b1e      	subs	r3, #30
 8003884:	051b      	lsls	r3, r3, #20
 8003886:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800388a:	e01b      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x6a8>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	613b      	str	r3, [r7, #16]
  return result;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80038a4:	2320      	movs	r3, #32
 80038a6:	e003      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	3b1e      	subs	r3, #30
 80038be:	051b      	lsls	r3, r3, #20
 80038c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7ff f8eb 	bl	8002aa6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <HAL_ADC_ConfigChannel+0x6e0>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80be 	beq.w	8003a5a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x6d6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <HAL_ADC_ConfigChannel+0x6e4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10a      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x6ec>
 80038f2:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <HAL_ADC_ConfigChannel+0x6e8>)
 80038f4:	e009      	b.n	800390a <HAL_ADC_ConfigChannel+0x6ee>
 80038f6:	bf00      	nop
 80038f8:	407f0000 	.word	0x407f0000
 80038fc:	80080000 	.word	0x80080000
 8003900:	50000100 	.word	0x50000100
 8003904:	50000300 	.word	0x50000300
 8003908:	4b59      	ldr	r3, [pc, #356]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe ffe0 	bl	80028d0 <LL_ADC_GetCommonPathInternalCh>
 8003910:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a56      	ldr	r2, [pc, #344]	@ (8003a74 <HAL_ADC_ConfigChannel+0x858>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x70c>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a55      	ldr	r2, [pc, #340]	@ (8003a78 <HAL_ADC_ConfigChannel+0x85c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d13a      	bne.n	800399e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800392c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d134      	bne.n	800399e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800393c:	d005      	beq.n	800394a <HAL_ADC_ConfigChannel+0x72e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a4e      	ldr	r2, [pc, #312]	@ (8003a7c <HAL_ADC_ConfigChannel+0x860>)
 8003944:	4293      	cmp	r3, r2
 8003946:	f040 8085 	bne.w	8003a54 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003952:	d004      	beq.n	800395e <HAL_ADC_ConfigChannel+0x742>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a49      	ldr	r2, [pc, #292]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x746>
 800395e:	4a49      	ldr	r2, [pc, #292]	@ (8003a84 <HAL_ADC_ConfigChannel+0x868>)
 8003960:	e000      	b.n	8003964 <HAL_ADC_ConfigChannel+0x748>
 8003962:	4a43      	ldr	r2, [pc, #268]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 8003964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003968:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f7fe ff9b 	bl	80028aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003974:	4b44      	ldr	r3, [pc, #272]	@ (8003a88 <HAL_ADC_ConfigChannel+0x86c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	4a44      	ldr	r2, [pc, #272]	@ (8003a8c <HAL_ADC_ConfigChannel+0x870>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800398e:	e002      	b.n	8003996 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f9      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399c:	e05a      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003a90 <HAL_ADC_ConfigChannel+0x874>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d125      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11f      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a31      	ldr	r2, [pc, #196]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d104      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x7ac>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a34      	ldr	r2, [pc, #208]	@ (8003a94 <HAL_ADC_ConfigChannel+0x878>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d047      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d0:	d004      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x7c0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x7c4>
 80039dc:	4a29      	ldr	r2, [pc, #164]	@ (8003a84 <HAL_ADC_ConfigChannel+0x868>)
 80039de:	e000      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x7c6>
 80039e0:	4a23      	ldr	r2, [pc, #140]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 80039e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7fe ff5c 	bl	80028aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039f2:	e031      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a27      	ldr	r2, [pc, #156]	@ (8003a98 <HAL_ADC_ConfigChannel+0x87c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d12d      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d127      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a1c:	d004      	beq.n	8003a28 <HAL_ADC_ConfigChannel+0x80c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x810>
 8003a28:	4a16      	ldr	r2, [pc, #88]	@ (8003a84 <HAL_ADC_ConfigChannel+0x868>)
 8003a2a:	e000      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x812>
 8003a2c:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 8003a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7fe ff36 	bl	80028aa <LL_ADC_SetCommonPathInternalCh>
 8003a3e:	e00c      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003a52:	e002      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	37d8      	adds	r7, #216	@ 0xd8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	50000700 	.word	0x50000700
 8003a74:	c3210000 	.word	0xc3210000
 8003a78:	90c00010 	.word	0x90c00010
 8003a7c:	50000600 	.word	0x50000600
 8003a80:	50000100 	.word	0x50000100
 8003a84:	50000300 	.word	0x50000300
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	053e2d63 	.word	0x053e2d63
 8003a90:	c7520000 	.word	0xc7520000
 8003a94:	50000500 	.word	0x50000500
 8003a98:	cb840000 	.word	0xcb840000

08003a9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff f8b9 	bl	8002c24 <LL_ADC_IsEnabled>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d176      	bne.n	8003ba6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb0 <ADC_Enable+0x114>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	f043 0210 	orr.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e062      	b.n	8003ba8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f888 	bl	8002bfc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af4:	d004      	beq.n	8003b00 <ADC_Enable+0x64>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb4 <ADC_Enable+0x118>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <ADC_Enable+0x68>
 8003b00:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb8 <ADC_Enable+0x11c>)
 8003b02:	e000      	b.n	8003b06 <ADC_Enable+0x6a>
 8003b04:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <ADC_Enable+0x120>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fee2 	bl	80028d0 <LL_ADC_GetCommonPathInternalCh>
 8003b0c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d013      	beq.n	8003b3e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b16:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc0 <ADC_Enable+0x124>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	4a29      	ldr	r2, [pc, #164]	@ (8003bc4 <ADC_Enable+0x128>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b30:	e002      	b.n	8003b38 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f9      	bne.n	8003b32 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe fe73 	bl	8002828 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b44:	e028      	b.n	8003b98 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff f86a 	bl	8002c24 <LL_ADC_IsEnabled>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff f84e 	bl	8002bfc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b60:	f7fe fe62 	bl	8002828 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d914      	bls.n	8003b98 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d00d      	beq.n	8003b98 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d1cf      	bne.n	8003b46 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	8000003f 	.word	0x8000003f
 8003bb4:	50000100 	.word	0x50000100
 8003bb8:	50000300 	.word	0x50000300
 8003bbc:	50000700 	.word	0x50000700
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	053e2d63 	.word	0x053e2d63

08003bc8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d14b      	bne.n	8003c7a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d021      	beq.n	8003c40 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe ff11 	bl	8002a28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d032      	beq.n	8003c72 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d12b      	bne.n	8003c72 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11f      	bne.n	8003c72 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c3e:	e018      	b.n	8003c72 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d111      	bne.n	8003c72 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d105      	bne.n	8003c72 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fab4 	bl	80031e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c78:	e00e      	b.n	8003c98 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff fabe 	bl	8003208 <HAL_ADC_ErrorCallback>
}
 8003c8c:	e004      	b.n	8003c98 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff faa0 	bl	80031f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fa90 	bl	8003208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <LL_ADC_IsEnabled>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <LL_ADC_IsEnabled+0x18>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <LL_ADC_IsEnabled+0x1a>
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d101      	bne.n	8003d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a1      	sub	sp, #132	@ 0x84
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0e7      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d62:	2300      	movs	r3, #0
 8003d64:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d66:	2300      	movs	r3, #0
 8003d68:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d72:	d102      	bne.n	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d74:	4b6f      	ldr	r3, [pc, #444]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	e009      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d102      	bne.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d84:	4b6d      	ldr	r3, [pc, #436]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	e001      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0be      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ffb1 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8003db4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ffab 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 80a0 	bne.w	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f040 809c 	bne.w	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd8:	d004      	beq.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a55      	ldr	r2, [pc, #340]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003de4:	4b56      	ldr	r3, [pc, #344]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003de6:	e000      	b.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003de8:	4b56      	ldr	r3, [pc, #344]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003dea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d04b      	beq.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e06:	035b      	lsls	r3, r3, #13
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e18:	d004      	beq.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a45      	ldr	r2, [pc, #276]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10f      	bne.n	8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e28:	f7ff ff62 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	4841      	ldr	r0, [pc, #260]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e30:	f7ff ff5e 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4323      	orrs	r3, r4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e012      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e44:	483c      	ldr	r0, [pc, #240]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e46:	f7ff ff53 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	483b      	ldr	r0, [pc, #236]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e4e:	f7ff ff4f 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e52:	4603      	mov	r3, r0
 8003e54:	431c      	orrs	r4, r3
 8003e56:	483c      	ldr	r0, [pc, #240]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e58:	f7ff ff4a 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4323      	orrs	r3, r4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d056      	beq.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	6811      	ldr	r1, [r2, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e88:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e8a:	e047      	b.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ea0:	d004      	beq.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a23      	ldr	r2, [pc, #140]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10f      	bne.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003eac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003eb0:	f7ff ff1e 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	481f      	ldr	r0, [pc, #124]	@ (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eb8:	f7ff ff1a 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4323      	orrs	r3, r4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e012      	b.n	8003ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ecc:	481a      	ldr	r0, [pc, #104]	@ (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ece:	f7ff ff0f 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4819      	ldr	r0, [pc, #100]	@ (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ed6:	f7ff ff0b 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	431c      	orrs	r4, r3
 8003ede:	481a      	ldr	r0, [pc, #104]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ee0:	f7ff ff06 	bl	8003cf0 <LL_ADC_IsEnabled>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4323      	orrs	r3, r4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003efe:	f023 030f 	bic.w	r3, r3, #15
 8003f02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f06:	e009      	b.n	8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f1a:	e000      	b.n	8003f1e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3784      	adds	r7, #132	@ 0x84
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	50000100 	.word	0x50000100
 8003f38:	50000400 	.word	0x50000400
 8003f3c:	50000500 	.word	0x50000500
 8003f40:	50000300 	.word	0x50000300
 8003f44:	50000700 	.word	0x50000700
 8003f48:	50000600 	.word	0x50000600

08003f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f7e:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60d3      	str	r3, [r2, #12]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <__NVIC_GetPriorityGrouping+0x18>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0307 	and.w	r3, r3, #7
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db0b      	blt.n	8003fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	4907      	ldr	r1, [pc, #28]	@ (8003fe8 <__NVIC_EnableIRQ+0x38>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000e100 	.word	0xe000e100

08003fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	db0a      	blt.n	8004016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	490c      	ldr	r1, [pc, #48]	@ (8004038 <__NVIC_SetPriority+0x4c>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	440b      	add	r3, r1
 8004010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004014:	e00a      	b.n	800402c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4908      	ldr	r1, [pc, #32]	@ (800403c <__NVIC_SetPriority+0x50>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	3b04      	subs	r3, #4
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	440b      	add	r3, r1
 800402a:	761a      	strb	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000e100 	.word	0xe000e100
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	@ 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f1c3 0307 	rsb	r3, r3, #7
 800405a:	2b04      	cmp	r3, #4
 800405c:	bf28      	it	cs
 800405e:	2304      	movcs	r3, #4
 8004060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3304      	adds	r3, #4
 8004066:	2b06      	cmp	r3, #6
 8004068:	d902      	bls.n	8004070 <NVIC_EncodePriority+0x30>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3b03      	subs	r3, #3
 800406e:	e000      	b.n	8004072 <NVIC_EncodePriority+0x32>
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	401a      	ands	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004088:	f04f 31ff 	mov.w	r1, #4294967295
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43d9      	mvns	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004098:	4313      	orrs	r3, r2
         );
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	@ 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f7ff ff8e 	bl	8003fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	@ (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff29 	bl	8003f4c <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004110:	f7ff ff40 	bl	8003f94 <__NVIC_GetPriorityGrouping>
 8004114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7ff ff90 	bl	8004040 <NVIC_EncodePriority>
 8004120:	4602      	mov	r2, r0
 8004122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff5f 	bl	8003fec <__NVIC_SetPriority>
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	4603      	mov	r3, r0
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff33 	bl	8003fb0 <__NVIC_EnableIRQ>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ffa4 	bl	80040a8 <SysTick_Config>
 8004160:	4603      	mov	r3, r0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e08d      	b.n	800429a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	4b47      	ldr	r3, [pc, #284]	@ (80042a4 <HAL_DMA_Init+0x138>)
 8004186:	429a      	cmp	r2, r3
 8004188:	d80f      	bhi.n	80041aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	4b45      	ldr	r3, [pc, #276]	@ (80042a8 <HAL_DMA_Init+0x13c>)
 8004192:	4413      	add	r3, r2
 8004194:	4a45      	ldr	r2, [pc, #276]	@ (80042ac <HAL_DMA_Init+0x140>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	009a      	lsls	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a42      	ldr	r2, [pc, #264]	@ (80042b0 <HAL_DMA_Init+0x144>)
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80041a8:	e00e      	b.n	80041c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b40      	ldr	r3, [pc, #256]	@ (80042b4 <HAL_DMA_Init+0x148>)
 80041b2:	4413      	add	r3, r2
 80041b4:	4a3d      	ldr	r2, [pc, #244]	@ (80042ac <HAL_DMA_Init+0x140>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a3c      	ldr	r2, [pc, #240]	@ (80042b8 <HAL_DMA_Init+0x14c>)
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa76 	bl	800470c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004228:	d102      	bne.n	8004230 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004244:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_DMA_Init+0x104>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d80c      	bhi.n	8004270 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa96 	bl	8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	e008      	b.n	8004282 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40020407 	.word	0x40020407
 80042a8:	bffdfff8 	.word	0xbffdfff8
 80042ac:	cccccccd 	.word	0xcccccccd
 80042b0:	40020000 	.word	0x40020000
 80042b4:	bffdfbf8 	.word	0xbffdfbf8
 80042b8:	40020400 	.word	0x40020400

080042bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_DMA_Start_IT+0x20>
 80042d8:	2302      	movs	r3, #2
 80042da:	e066      	b.n	80043aa <HAL_DMA_Start_IT+0xee>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d155      	bne.n	800439c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f9bb 	bl	8004690 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 020e 	orr.w	r2, r2, #14
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e00f      	b.n	8004354 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0204 	bic.w	r2, r2, #4
 8004342:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 020a 	orr.w	r2, r2, #10
 8004352:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004370:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004388:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e005      	b.n	80043a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d005      	beq.n	80043d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	e037      	b.n	8004446 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020e 	bic.w	r2, r2, #14
 80043e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f003 021f 	and.w	r2, r3, #31
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004422:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004436:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800443a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004444:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d00d      	beq.n	8004498 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2204      	movs	r2, #4
 8004480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e047      	b.n	8004528 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 020e 	bic.w	r2, r2, #14
 80044a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044cc:	f003 021f 	and.w	r2, r3, #31
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f202 	lsl.w	r2, r1, r2
 80044da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004506:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
    }
  }
  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2204      	movs	r2, #4
 8004554:	409a      	lsls	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d026      	beq.n	80045ac <HAL_DMA_IRQHandler+0x7a>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d021      	beq.n	80045ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0204 	bic.w	r2, r2, #4
 8004584:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f003 021f 	and.w	r2, r3, #31
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	2104      	movs	r1, #4
 8004594:	fa01 f202 	lsl.w	r2, r1, r2
 8004598:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d071      	beq.n	8004686 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045aa:	e06c      	b.n	8004686 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2202      	movs	r2, #2
 80045b6:	409a      	lsls	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02e      	beq.n	800461e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d029      	beq.n	800461e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 020a 	bic.w	r2, r2, #10
 80045e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f4:	f003 021f 	and.w	r2, r3, #31
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	2102      	movs	r1, #2
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d038      	beq.n	8004686 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800461c:	e033      	b.n	8004686 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2208      	movs	r2, #8
 8004628:	409a      	lsls	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d025      	beq.n	8004688 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 020e 	bic.w	r2, r2, #14
 800464a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f202 	lsl.w	r2, r1, r2
 800465e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004686:	bf00      	nop
 8004688:	bf00      	nop
}
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	f003 021f 	and.w	r2, r3, #31
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	2101      	movs	r1, #1
 80046c8:	fa01 f202 	lsl.w	r2, r1, r2
 80046cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d108      	bne.n	80046f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046ee:	e007      	b.n	8004700 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	60da      	str	r2, [r3, #12]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	4b16      	ldr	r3, [pc, #88]	@ (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800471c:	429a      	cmp	r2, r3
 800471e:	d802      	bhi.n	8004726 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004720:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e001      	b.n	800472a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004726:	4b15      	ldr	r3, [pc, #84]	@ (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004728:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3b08      	subs	r3, #8
 8004736:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a0b      	ldr	r2, [pc, #44]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004756:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40020407 	.word	0x40020407
 8004778:	40020800 	.word	0x40020800
 800477c:	40020820 	.word	0x40020820
 8004780:	cccccccd 	.word	0xcccccccd
 8004784:	40020880 	.word	0x40020880

08004788 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a08      	ldr	r2, [pc, #32]	@ (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047aa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	1000823f 	.word	0x1000823f
 80047cc:	40020940 	.word	0x40020940

080047d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047de:	e15a      	b.n	8004a96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	2101      	movs	r1, #1
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	4013      	ands	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 814c 	beq.w	8004a90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d005      	beq.n	8004810 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800480c:	2b02      	cmp	r3, #2
 800480e:	d130      	bne.n	8004872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	2203      	movs	r2, #3
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004846:	2201      	movs	r2, #1
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	f003 0201 	and.w	r2, r3, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b03      	cmp	r3, #3
 800487c:	d017      	beq.n	80048ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	2203      	movs	r2, #3
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d123      	bne.n	8004902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	08da      	lsrs	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3208      	adds	r2, #8
 80048c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	220f      	movs	r2, #15
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	08da      	lsrs	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3208      	adds	r2, #8
 80048fc:	6939      	ldr	r1, [r7, #16]
 80048fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	2203      	movs	r2, #3
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80a6 	beq.w	8004a90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004944:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab4 <HAL_GPIO_Init+0x2e4>)
 8004946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004948:	4a5a      	ldr	r2, [pc, #360]	@ (8004ab4 <HAL_GPIO_Init+0x2e4>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004950:	4b58      	ldr	r3, [pc, #352]	@ (8004ab4 <HAL_GPIO_Init+0x2e4>)
 8004952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800495c:	4a56      	ldr	r2, [pc, #344]	@ (8004ab8 <HAL_GPIO_Init+0x2e8>)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	3302      	adds	r3, #2
 8004964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	220f      	movs	r2, #15
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004986:	d01f      	beq.n	80049c8 <HAL_GPIO_Init+0x1f8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a4c      	ldr	r2, [pc, #304]	@ (8004abc <HAL_GPIO_Init+0x2ec>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d019      	beq.n	80049c4 <HAL_GPIO_Init+0x1f4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a4b      	ldr	r2, [pc, #300]	@ (8004ac0 <HAL_GPIO_Init+0x2f0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <HAL_GPIO_Init+0x1f0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac4 <HAL_GPIO_Init+0x2f4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00d      	beq.n	80049bc <HAL_GPIO_Init+0x1ec>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a49      	ldr	r2, [pc, #292]	@ (8004ac8 <HAL_GPIO_Init+0x2f8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <HAL_GPIO_Init+0x1e8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a48      	ldr	r2, [pc, #288]	@ (8004acc <HAL_GPIO_Init+0x2fc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <HAL_GPIO_Init+0x1e4>
 80049b0:	2305      	movs	r3, #5
 80049b2:	e00a      	b.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049b4:	2306      	movs	r3, #6
 80049b6:	e008      	b.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049b8:	2304      	movs	r3, #4
 80049ba:	e006      	b.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049bc:	2303      	movs	r3, #3
 80049be:	e004      	b.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e002      	b.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049c8:	2300      	movs	r3, #0
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	f002 0203 	and.w	r2, r2, #3
 80049d0:	0092      	lsls	r2, r2, #2
 80049d2:	4093      	lsls	r3, r2
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049da:	4937      	ldr	r1, [pc, #220]	@ (8004ab8 <HAL_GPIO_Init+0x2e8>)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049e8:	4b39      	ldr	r3, [pc, #228]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a0c:	4a30      	ldr	r2, [pc, #192]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a12:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a36:	4a26      	ldr	r2, [pc, #152]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a60:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a66:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a8a:	4a11      	ldr	r2, [pc, #68]	@ (8004ad0 <HAL_GPIO_Init+0x300>)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3301      	adds	r3, #1
 8004a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f ae9d 	bne.w	80047e0 <HAL_GPIO_Init+0x10>
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	48000400 	.word	0x48000400
 8004ac0:	48000800 	.word	0x48000800
 8004ac4:	48000c00 	.word	0x48000c00
 8004ac8:	48001000 	.word	0x48001000
 8004acc:	48001400 	.word	0x48001400
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	807b      	strh	r3, [r7, #2]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ae4:	787b      	ldrb	r3, [r7, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aea:	887a      	ldrh	r2, [r7, #2]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004af0:	e002      	b.n	8004af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004af2:	887a      	ldrh	r2, [r7, #2]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b0e:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d006      	beq.n	8004b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b1a:	4a05      	ldr	r2, [pc, #20]	@ (8004b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fc fde6 	bl	80016f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40010400 	.word	0x40010400

08004b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d141      	bne.n	8004bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b42:	4b4b      	ldr	r3, [pc, #300]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b4e:	d131      	bne.n	8004bb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b50:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b56:	4a46      	ldr	r2, [pc, #280]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b60:	4b43      	ldr	r3, [pc, #268]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b68:	4a41      	ldr	r2, [pc, #260]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b70:	4b40      	ldr	r3, [pc, #256]	@ (8004c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2232      	movs	r2, #50	@ 0x32
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	0c9b      	lsrs	r3, r3, #18
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b86:	e002      	b.n	8004b8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b8e:	4b38      	ldr	r3, [pc, #224]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d102      	bne.n	8004ba2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f2      	bne.n	8004b88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ba2:	4b33      	ldr	r3, [pc, #204]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bae:	d158      	bne.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e057      	b.n	8004c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bba:	4a2d      	ldr	r2, [pc, #180]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bc4:	e04d      	b.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bcc:	d141      	bne.n	8004c52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bce:	4b28      	ldr	r3, [pc, #160]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bda:	d131      	bne.n	8004c40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bdc:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be2:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bec:	4b20      	ldr	r3, [pc, #128]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2232      	movs	r2, #50	@ 0x32
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	4a1c      	ldr	r2, [pc, #112]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	0c9b      	lsrs	r3, r3, #18
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c12:	e002      	b.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c26:	d102      	bne.n	8004c2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f2      	bne.n	8004c14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c2e:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3a:	d112      	bne.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e011      	b.n	8004c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c46:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c50:	e007      	b.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c52:	4b07      	ldr	r3, [pc, #28]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c5a:	4a05      	ldr	r2, [pc, #20]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40007000 	.word	0x40007000
 8004c74:	20000004 	.word	0x20000004
 8004c78:	431bde83 	.word	0x431bde83

08004c7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c80:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a04      	ldr	r2, [pc, #16]	@ (8004c98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c8a:	6093      	str	r3, [r2, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40007000 	.word	0x40007000

08004c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e2fe      	b.n	80052ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d075      	beq.n	8004da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cba:	4b97      	ldr	r3, [pc, #604]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc4:	4b94      	ldr	r3, [pc, #592]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d102      	bne.n	8004cda <HAL_RCC_OscConfig+0x3e>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d002      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x44>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05b      	beq.n	8004da4 <HAL_RCC_OscConfig+0x108>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d157      	bne.n	8004da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e2d9      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d00:	d106      	bne.n	8004d10 <HAL_RCC_OscConfig+0x74>
 8004d02:	4b85      	ldr	r3, [pc, #532]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a84      	ldr	r2, [pc, #528]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0xb0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x98>
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b7c      	ldr	r3, [pc, #496]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a7b      	ldr	r2, [pc, #492]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0xb0>
 8004d34:	4b78      	ldr	r3, [pc, #480]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a77      	ldr	r2, [pc, #476]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b75      	ldr	r3, [pc, #468]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a74      	ldr	r2, [pc, #464]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd fd68 	bl	8002828 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fd fd64 	bl	8002828 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	@ 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e29e      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0xc0>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fd54 	bl	8002828 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fd fd50 	bl	8002828 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	@ 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e28a      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d96:	4b60      	ldr	r3, [pc, #384]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0xe8>
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d075      	beq.n	8004e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db2:	4b59      	ldr	r3, [pc, #356]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dbc:	4b56      	ldr	r3, [pc, #344]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x136>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d002      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x13c>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d11f      	bne.n	8004e18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_OscConfig+0x154>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e25d      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b49      	ldr	r3, [pc, #292]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	4946      	ldr	r1, [pc, #280]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e04:	4b45      	ldr	r3, [pc, #276]	@ (8004f1c <HAL_RCC_OscConfig+0x280>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fd fcc1 	bl	8002790 <HAL_InitTick>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d043      	beq.n	8004e9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e249      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e20:	4b3d      	ldr	r3, [pc, #244]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3c      	ldr	r2, [pc, #240]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd fcfc 	bl	8002828 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fd fcf8 	bl	8002828 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e232      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e46:	4b34      	ldr	r3, [pc, #208]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e52:	4b31      	ldr	r3, [pc, #196]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	492d      	ldr	r1, [pc, #180]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
 8004e66:	e01a      	b.n	8004e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e68:	4b2b      	ldr	r3, [pc, #172]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fd fcd8 	bl	8002828 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fcd4 	bl	8002828 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e20e      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e8e:	4b22      	ldr	r3, [pc, #136]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x1e0>
 8004e9a:	e000      	b.n	8004e9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d041      	beq.n	8004f2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01c      	beq.n	8004eec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb2:	4b19      	ldr	r3, [pc, #100]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eb8:	4a17      	ldr	r2, [pc, #92]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec2:	f7fd fcb1 	bl	8002828 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eca:	f7fd fcad 	bl	8002828 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e1e7      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004edc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0ef      	beq.n	8004eca <HAL_RCC_OscConfig+0x22e>
 8004eea:	e020      	b.n	8004f2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef2:	4a09      	ldr	r2, [pc, #36]	@ (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fd fc94 	bl	8002828 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f02:	e00d      	b.n	8004f20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f04:	f7fd fc90 	bl	8002828 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d906      	bls.n	8004f20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e1ca      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	200000d4 	.word	0x200000d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f20:	4b8c      	ldr	r3, [pc, #560]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ea      	bne.n	8004f04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80a6 	beq.w	8005088 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f40:	4b84      	ldr	r3, [pc, #528]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_OscConfig+0x2b4>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x2b6>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	4b7f      	ldr	r3, [pc, #508]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f62:	4b7c      	ldr	r3, [pc, #496]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f72:	4b79      	ldr	r3, [pc, #484]	@ (8005158 <HAL_RCC_OscConfig+0x4bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d118      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f7e:	4b76      	ldr	r3, [pc, #472]	@ (8005158 <HAL_RCC_OscConfig+0x4bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a75      	ldr	r2, [pc, #468]	@ (8005158 <HAL_RCC_OscConfig+0x4bc>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8a:	f7fd fc4d 	bl	8002828 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f92:	f7fd fc49 	bl	8002828 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e183      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8005158 <HAL_RCC_OscConfig+0x4bc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d108      	bne.n	8004fca <HAL_RCC_OscConfig+0x32e>
 8004fb8:	4b66      	ldr	r3, [pc, #408]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbe:	4a65      	ldr	r2, [pc, #404]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fc8:	e024      	b.n	8005014 <HAL_RCC_OscConfig+0x378>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d110      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x358>
 8004fd2:	4b60      	ldr	r3, [pc, #384]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ff2:	e00f      	b.n	8005014 <HAL_RCC_OscConfig+0x378>
 8004ff4:	4b57      	ldr	r3, [pc, #348]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	4a56      	ldr	r2, [pc, #344]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005004:	4b53      	ldr	r3, [pc, #332]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500a:	4a52      	ldr	r2, [pc, #328]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 800500c:	f023 0304 	bic.w	r3, r3, #4
 8005010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d016      	beq.n	800504a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501c:	f7fd fc04 	bl	8002828 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005022:	e00a      	b.n	800503a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005024:	f7fd fc00 	bl	8002828 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e138      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503a:	4b46      	ldr	r3, [pc, #280]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0ed      	beq.n	8005024 <HAL_RCC_OscConfig+0x388>
 8005048:	e015      	b.n	8005076 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fd fbed 	bl	8002828 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005050:	e00a      	b.n	8005068 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f7fd fbe9 	bl	8002828 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005060:	4293      	cmp	r3, r2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e121      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005068:	4b3a      	ldr	r3, [pc, #232]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1ed      	bne.n	8005052 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005076:	7ffb      	ldrb	r3, [r7, #31]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4b35      	ldr	r3, [pc, #212]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005080:	4a34      	ldr	r2, [pc, #208]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005086:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d03c      	beq.n	800510e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01c      	beq.n	80050d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800509c:	4b2d      	ldr	r3, [pc, #180]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 800509e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fd fbbc 	bl	8002828 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050b4:	f7fd fbb8 	bl	8002828 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0f2      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050c6:	4b23      	ldr	r3, [pc, #140]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 80050c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ef      	beq.n	80050b4 <HAL_RCC_OscConfig+0x418>
 80050d4:	e01b      	b.n	800510e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 80050d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e6:	f7fd fb9f 	bl	8002828 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ee:	f7fd fb9b 	bl	8002828 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e0d5      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005100:	4b14      	ldr	r3, [pc, #80]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8005102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ef      	bne.n	80050ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80c9 	beq.w	80052aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005118:	4b0e      	ldr	r3, [pc, #56]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b0c      	cmp	r3, #12
 8005122:	f000 8083 	beq.w	800522c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d15e      	bne.n	80051ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a08      	ldr	r2, [pc, #32]	@ (8005154 <HAL_RCC_OscConfig+0x4b8>)
 8005134:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fd fb75 	bl	8002828 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005140:	e00c      	b.n	800515c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005142:	f7fd fb71 	bl	8002828 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d905      	bls.n	800515c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0ab      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
 8005154:	40021000 	.word	0x40021000
 8005158:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800515c:	4b55      	ldr	r3, [pc, #340]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ec      	bne.n	8005142 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005168:	4b52      	ldr	r3, [pc, #328]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	4b52      	ldr	r3, [pc, #328]	@ (80052b8 <HAL_RCC_OscConfig+0x61c>)
 800516e:	4013      	ands	r3, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6a11      	ldr	r1, [r2, #32]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005178:	3a01      	subs	r2, #1
 800517a:	0112      	lsls	r2, r2, #4
 800517c:	4311      	orrs	r1, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005182:	0212      	lsls	r2, r2, #8
 8005184:	4311      	orrs	r1, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800518a:	0852      	lsrs	r2, r2, #1
 800518c:	3a01      	subs	r2, #1
 800518e:	0552      	lsls	r2, r2, #21
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005196:	0852      	lsrs	r2, r2, #1
 8005198:	3a01      	subs	r2, #1
 800519a:	0652      	lsls	r2, r2, #25
 800519c:	4311      	orrs	r1, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051a2:	06d2      	lsls	r2, r2, #27
 80051a4:	430a      	orrs	r2, r1
 80051a6:	4943      	ldr	r1, [pc, #268]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ac:	4b41      	ldr	r3, [pc, #260]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a40      	ldr	r2, [pc, #256]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051b8:	4b3e      	ldr	r3, [pc, #248]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a3d      	ldr	r2, [pc, #244]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fd fb30 	bl	8002828 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fd fb2c 	bl	8002828 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e066      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051de:	4b35      	ldr	r3, [pc, #212]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x530>
 80051ea:	e05e      	b.n	80052aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ec:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a30      	ldr	r2, [pc, #192]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 80051f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fd fb16 	bl	8002828 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005200:	f7fd fb12 	bl	8002828 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e04c      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005212:	4b28      	ldr	r3, [pc, #160]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800521e:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	4924      	ldr	r1, [pc, #144]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 8005224:	4b25      	ldr	r3, [pc, #148]	@ (80052bc <HAL_RCC_OscConfig+0x620>)
 8005226:	4013      	ands	r3, r2
 8005228:	60cb      	str	r3, [r1, #12]
 800522a:	e03e      	b.n	80052aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e039      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005238:	4b1e      	ldr	r3, [pc, #120]	@ (80052b4 <HAL_RCC_OscConfig+0x618>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 0203 	and.w	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	429a      	cmp	r2, r3
 800524a:	d12c      	bne.n	80052a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	3b01      	subs	r3, #1
 8005258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d123      	bne.n	80052a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d11b      	bne.n	80052a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d113      	bne.n	80052a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	3b01      	subs	r3, #1
 800528c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d109      	bne.n	80052a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000
 80052b8:	019f800c 	.word	0x019f800c
 80052bc:	feeefffc 	.word	0xfeeefffc

080052c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e11e      	b.n	8005516 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b91      	ldr	r3, [pc, #580]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d910      	bls.n	8005308 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b8e      	ldr	r3, [pc, #568]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 020f 	bic.w	r2, r3, #15
 80052ee:	498c      	ldr	r1, [pc, #560]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e106      	b.n	8005516 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d073      	beq.n	80053fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d129      	bne.n	8005370 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531c:	4b81      	ldr	r3, [pc, #516]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0f4      	b.n	8005516 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800532c:	f000 f99e 	bl	800566c <RCC_GetSysClockFreqFromPLLSource>
 8005330:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4a7c      	ldr	r2, [pc, #496]	@ (8005528 <HAL_RCC_ClockConfig+0x268>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d93f      	bls.n	80053ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800533a:	4b7a      	ldr	r3, [pc, #488]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800534e:	2b00      	cmp	r3, #0
 8005350:	d033      	beq.n	80053ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005356:	2b00      	cmp	r3, #0
 8005358:	d12f      	bne.n	80053ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800535a:	4b72      	ldr	r3, [pc, #456]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005362:	4a70      	ldr	r2, [pc, #448]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 8005364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005368:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800536a:	2380      	movs	r3, #128	@ 0x80
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e024      	b.n	80053ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005378:	4b6a      	ldr	r3, [pc, #424]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0c6      	b.n	8005516 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005388:	4b66      	ldr	r3, [pc, #408]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0be      	b.n	8005516 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005398:	f000 f8ce 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 800539c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4a61      	ldr	r2, [pc, #388]	@ (8005528 <HAL_RCC_ClockConfig+0x268>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d909      	bls.n	80053ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ae:	4a5d      	ldr	r2, [pc, #372]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80053b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053b6:	2380      	movs	r3, #128	@ 0x80
 80053b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0203 	bic.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4957      	ldr	r1, [pc, #348]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053cc:	f7fd fa2c 	bl	8002828 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d4:	f7fd fa28 	bl	8002828 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e095      	b.n	8005516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	4b4e      	ldr	r3, [pc, #312]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 020c 	and.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1eb      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d023      	beq.n	8005450 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005414:	4b43      	ldr	r3, [pc, #268]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a42      	ldr	r2, [pc, #264]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800541a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800541e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800542c:	4b3d      	ldr	r3, [pc, #244]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005434:	4a3b      	ldr	r2, [pc, #236]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 8005436:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800543a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543c:	4b39      	ldr	r3, [pc, #228]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4936      	ldr	r1, [pc, #216]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
 800544e:	e008      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b80      	cmp	r3, #128	@ 0x80
 8005454:	d105      	bne.n	8005462 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005456:	4b33      	ldr	r3, [pc, #204]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	4a32      	ldr	r2, [pc, #200]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 800545c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005460:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005462:	4b2f      	ldr	r3, [pc, #188]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d21d      	bcs.n	80054ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005470:	4b2b      	ldr	r3, [pc, #172]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 020f 	bic.w	r2, r3, #15
 8005478:	4929      	ldr	r1, [pc, #164]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005480:	f7fd f9d2 	bl	8002828 <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	e00a      	b.n	800549e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005488:	f7fd f9ce 	bl	8002828 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e03b      	b.n	8005516 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b20      	ldr	r3, [pc, #128]	@ (8005520 <HAL_RCC_ClockConfig+0x260>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d1ed      	bne.n	8005488 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4917      	ldr	r1, [pc, #92]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054d6:	4b13      	ldr	r3, [pc, #76]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	490f      	ldr	r1, [pc, #60]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ea:	f000 f825 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80054ee:	4602      	mov	r2, r0
 80054f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005524 <HAL_RCC_ClockConfig+0x264>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	490c      	ldr	r1, [pc, #48]	@ (800552c <HAL_RCC_ClockConfig+0x26c>)
 80054fc:	5ccb      	ldrb	r3, [r1, r3]
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	fa22 f303 	lsr.w	r3, r2, r3
 8005506:	4a0a      	ldr	r2, [pc, #40]	@ (8005530 <HAL_RCC_ClockConfig+0x270>)
 8005508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800550a:	4b0a      	ldr	r3, [pc, #40]	@ (8005534 <HAL_RCC_ClockConfig+0x274>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd f93e 	bl	8002790 <HAL_InitTick>
 8005514:	4603      	mov	r3, r0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40022000 	.word	0x40022000
 8005524:	40021000 	.word	0x40021000
 8005528:	04c4b400 	.word	0x04c4b400
 800552c:	0800e5f4 	.word	0x0800e5f4
 8005530:	20000004 	.word	0x20000004
 8005534:	200000d4 	.word	0x200000d4

08005538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800553e:	4b2c      	ldr	r3, [pc, #176]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b04      	cmp	r3, #4
 8005548:	d102      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800554a:	4b2a      	ldr	r3, [pc, #168]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e047      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005550:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	2b08      	cmp	r3, #8
 800555a:	d102      	bne.n	8005562 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800555c:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	e03e      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005562:	4b23      	ldr	r3, [pc, #140]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b0c      	cmp	r3, #12
 800556c:	d136      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800556e:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005578:	4b1d      	ldr	r3, [pc, #116]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	3301      	adds	r3, #1
 8005584:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d10c      	bne.n	80055a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800558c:	4a1a      	ldr	r2, [pc, #104]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	4a16      	ldr	r2, [pc, #88]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005596:	68d2      	ldr	r2, [r2, #12]
 8005598:	0a12      	lsrs	r2, r2, #8
 800559a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	617b      	str	r3, [r7, #20]
      break;
 80055a4:	e00c      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055a6:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	4a10      	ldr	r2, [pc, #64]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b0:	68d2      	ldr	r2, [r2, #12]
 80055b2:	0a12      	lsrs	r2, r2, #8
 80055b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
      break;
 80055be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	0e5b      	lsrs	r3, r3, #25
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	3301      	adds	r3, #1
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	e001      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055e0:	693b      	ldr	r3, [r7, #16]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	016e3600 	.word	0x016e3600

080055fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <HAL_RCC_GetHCLKFreq+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000004 	.word	0x20000004

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005618:	f7ff fff0 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4904      	ldr	r1, [pc, #16]	@ (800563c <HAL_RCC_GetPCLK1Freq+0x28>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	0800e604 	.word	0x0800e604

08005640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005644:	f7ff ffda 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0adb      	lsrs	r3, r3, #11
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4904      	ldr	r1, [pc, #16]	@ (8005668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	0800e604 	.word	0x0800e604

0800566c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005672:	4b1e      	ldr	r3, [pc, #120]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800567c:	4b1b      	ldr	r3, [pc, #108]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d10c      	bne.n	80056aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005690:	4a17      	ldr	r2, [pc, #92]	@ (80056f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	fbb2 f3f3 	udiv	r3, r2, r3
 8005698:	4a14      	ldr	r2, [pc, #80]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800569a:	68d2      	ldr	r2, [r2, #12]
 800569c:	0a12      	lsrs	r2, r2, #8
 800569e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	617b      	str	r3, [r7, #20]
    break;
 80056a8:	e00c      	b.n	80056c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056aa:	4a12      	ldr	r2, [pc, #72]	@ (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	4a0e      	ldr	r2, [pc, #56]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056b4:	68d2      	ldr	r2, [r2, #12]
 80056b6:	0a12      	lsrs	r2, r2, #8
 80056b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056bc:	fb02 f303 	mul.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
    break;
 80056c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056c4:	4b09      	ldr	r3, [pc, #36]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	0e5b      	lsrs	r3, r3, #25
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	3301      	adds	r3, #1
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056de:	687b      	ldr	r3, [r7, #4]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40021000 	.word	0x40021000
 80056f0:	016e3600 	.word	0x016e3600
 80056f4:	00f42400 	.word	0x00f42400

080056f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005700:	2300      	movs	r3, #0
 8005702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005704:	2300      	movs	r3, #0
 8005706:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8098 	beq.w	8005846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005716:	2300      	movs	r3, #0
 8005718:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571a:	4b43      	ldr	r3, [pc, #268]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10d      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005726:	4b40      	ldr	r3, [pc, #256]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572a:	4a3f      	ldr	r2, [pc, #252]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
 8005732:	4b3d      	ldr	r3, [pc, #244]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573e:	2301      	movs	r3, #1
 8005740:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005742:	4b3a      	ldr	r3, [pc, #232]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a39      	ldr	r2, [pc, #228]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800574c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800574e:	f7fd f86b 	bl	8002828 <HAL_GetTick>
 8005752:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005754:	e009      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005756:	f7fd f867 	bl	8002828 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d902      	bls.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	74fb      	strb	r3, [r7, #19]
        break;
 8005768:	e005      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576a:	4b30      	ldr	r3, [pc, #192]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0ef      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d159      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800577c:	4b2a      	ldr	r3, [pc, #168]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005786:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01e      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d019      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005798:	4b23      	ldr	r3, [pc, #140]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a4:	4b20      	ldr	r3, [pc, #128]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057c4:	4a18      	ldr	r2, [pc, #96]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fd f827 	bl	8002828 <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057dc:	e00b      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057de:	f7fd f823 	bl	8002828 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d902      	bls.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	74fb      	strb	r3, [r7, #19]
            break;
 80057f4:	e006      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0ec      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580a:	4b07      	ldr	r3, [pc, #28]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005818:	4903      	ldr	r1, [pc, #12]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005820:	e008      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005822:	7cfb      	ldrb	r3, [r7, #19]
 8005824:	74bb      	strb	r3, [r7, #18]
 8005826:	e005      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005828:	40021000 	.word	0x40021000
 800582c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005834:	7c7b      	ldrb	r3, [r7, #17]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005844:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005852:	4ba1      	ldr	r3, [pc, #644]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005858:	f023 0203 	bic.w	r2, r3, #3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	499d      	ldr	r1, [pc, #628]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005874:	4b98      	ldr	r3, [pc, #608]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587a:	f023 020c 	bic.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4995      	ldr	r1, [pc, #596]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005896:	4b90      	ldr	r3, [pc, #576]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	498c      	ldr	r1, [pc, #560]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058b8:	4b87      	ldr	r3, [pc, #540]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	4984      	ldr	r1, [pc, #528]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058da:	4b7f      	ldr	r3, [pc, #508]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	497b      	ldr	r1, [pc, #492]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058fc:	4b76      	ldr	r3, [pc, #472]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	4973      	ldr	r1, [pc, #460]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800591e:	4b6e      	ldr	r3, [pc, #440]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005924:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	496a      	ldr	r1, [pc, #424]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005940:	4b65      	ldr	r3, [pc, #404]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	4962      	ldr	r1, [pc, #392]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005962:	4b5d      	ldr	r3, [pc, #372]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005968:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	4959      	ldr	r1, [pc, #356]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005984:	4b54      	ldr	r3, [pc, #336]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	4951      	ldr	r1, [pc, #324]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a6:	4b4c      	ldr	r3, [pc, #304]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	4948      	ldr	r1, [pc, #288]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059c8:	4b43      	ldr	r3, [pc, #268]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d6:	4940      	ldr	r1, [pc, #256]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059e6:	d105      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a3a      	ldr	r2, [pc, #232]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d015      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a00:	4b35      	ldr	r3, [pc, #212]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a0e:	4932      	ldr	r1, [pc, #200]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a1e:	d105      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a20:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a2a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d015      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a38:	4b27      	ldr	r3, [pc, #156]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	4924      	ldr	r1, [pc, #144]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a56:	d105      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a58:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d015      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a70:	4b19      	ldr	r3, [pc, #100]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7e:	4916      	ldr	r1, [pc, #88]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8e:	d105      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a90:	4b11      	ldr	r3, [pc, #68]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a10      	ldr	r2, [pc, #64]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d019      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	4908      	ldr	r1, [pc, #32]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ac6:	d109      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac8:	4b03      	ldr	r3, [pc, #12]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a02      	ldr	r2, [pc, #8]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ad2:	60d3      	str	r3, [r2, #12]
 8005ad4:	e002      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ad6:	bf00      	nop
 8005ad8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ae8:	4b29      	ldr	r3, [pc, #164]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	4926      	ldr	r1, [pc, #152]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b06:	d105      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b08:	4b21      	ldr	r3, [pc, #132]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a20      	ldr	r2, [pc, #128]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d015      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b20:	4b1b      	ldr	r3, [pc, #108]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b26:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b2e:	4918      	ldr	r1, [pc, #96]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3e:	d105      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b40:	4b13      	ldr	r3, [pc, #76]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a12      	ldr	r2, [pc, #72]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d015      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b58:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b66:	490a      	ldr	r1, [pc, #40]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b76:	d105      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b78:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a04      	ldr	r2, [pc, #16]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b84:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40021000 	.word	0x40021000

08005b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e049      	b.n	8005c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fc f8be 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f001 f804 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d001      	beq.n	8005c5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e04c      	b.n	8005cf6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a26      	ldr	r2, [pc, #152]	@ (8005d04 <HAL_TIM_Base_Start+0xc0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d022      	beq.n	8005cb4 <HAL_TIM_Base_Start+0x70>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c76:	d01d      	beq.n	8005cb4 <HAL_TIM_Base_Start+0x70>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a22      	ldr	r2, [pc, #136]	@ (8005d08 <HAL_TIM_Base_Start+0xc4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <HAL_TIM_Base_Start+0x70>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a21      	ldr	r2, [pc, #132]	@ (8005d0c <HAL_TIM_Base_Start+0xc8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <HAL_TIM_Base_Start+0x70>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1f      	ldr	r2, [pc, #124]	@ (8005d10 <HAL_TIM_Base_Start+0xcc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_TIM_Base_Start+0x70>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d14 <HAL_TIM_Base_Start+0xd0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_TIM_Base_Start+0x70>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d18 <HAL_TIM_Base_Start+0xd4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_TIM_Base_Start+0x70>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <HAL_TIM_Base_Start+0xd8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d115      	bne.n	8005ce0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	4b19      	ldr	r3, [pc, #100]	@ (8005d20 <HAL_TIM_Base_Start+0xdc>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b06      	cmp	r3, #6
 8005cc4:	d015      	beq.n	8005cf2 <HAL_TIM_Base_Start+0xae>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ccc:	d011      	beq.n	8005cf2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	e008      	b.n	8005cf2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e000      	b.n	8005cf4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40015000 	.word	0x40015000
 8005d20:	00010007 	.word	0x00010007

08005d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e054      	b.n	8005de6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a26      	ldr	r2, [pc, #152]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d022      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d66:	d01d      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a22      	ldr	r2, [pc, #136]	@ (8005df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d018      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a21      	ldr	r2, [pc, #132]	@ (8005dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1f      	ldr	r2, [pc, #124]	@ (8005e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00e      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e04 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1c      	ldr	r2, [pc, #112]	@ (8005e08 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e0c <HAL_TIM_Base_Start_IT+0xe8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d115      	bne.n	8005dd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	4b19      	ldr	r3, [pc, #100]	@ (8005e10 <HAL_TIM_Base_Start_IT+0xec>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b06      	cmp	r3, #6
 8005db4:	d015      	beq.n	8005de2 <HAL_TIM_Base_Start_IT+0xbe>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dbc:	d011      	beq.n	8005de2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dce:	e008      	b.n	8005de2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e000      	b.n	8005de4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40015000 	.word	0x40015000
 8005e10:	00010007 	.word	0x00010007

08005e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e049      	b.n	8005eba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f841 	bl	8005ec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f000 fec4 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <HAL_TIM_PWM_Start+0x24>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	bf14      	ite	ne
 8005ef4:	2301      	movne	r3, #1
 8005ef6:	2300      	moveq	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	e03c      	b.n	8005f76 <HAL_TIM_PWM_Start+0x9e>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d109      	bne.n	8005f16 <HAL_TIM_PWM_Start+0x3e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	bf14      	ite	ne
 8005f0e:	2301      	movne	r3, #1
 8005f10:	2300      	moveq	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	e02f      	b.n	8005f76 <HAL_TIM_PWM_Start+0x9e>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d109      	bne.n	8005f30 <HAL_TIM_PWM_Start+0x58>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	e022      	b.n	8005f76 <HAL_TIM_PWM_Start+0x9e>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b0c      	cmp	r3, #12
 8005f34:	d109      	bne.n	8005f4a <HAL_TIM_PWM_Start+0x72>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	bf14      	ite	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	2300      	moveq	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	e015      	b.n	8005f76 <HAL_TIM_PWM_Start+0x9e>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x8c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e008      	b.n	8005f76 <HAL_TIM_PWM_Start+0x9e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e0a6      	b.n	80060cc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_PWM_Start+0xb6>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f8c:	e023      	b.n	8005fd6 <HAL_TIM_PWM_Start+0xfe>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_PWM_Start+0xc6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f9c:	e01b      	b.n	8005fd6 <HAL_TIM_PWM_Start+0xfe>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_PWM_Start+0xd6>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fac:	e013      	b.n	8005fd6 <HAL_TIM_PWM_Start+0xfe>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b0c      	cmp	r3, #12
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_PWM_Start+0xe6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fbc:	e00b      	b.n	8005fd6 <HAL_TIM_PWM_Start+0xfe>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_PWM_Start+0xf6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fcc:	e003      	b.n	8005fd6 <HAL_TIM_PWM_Start+0xfe>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fa78 	bl	80074d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a3a      	ldr	r2, [pc, #232]	@ (80060d4 <HAL_TIM_PWM_Start+0x1fc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_TIM_PWM_Start+0x148>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a39      	ldr	r2, [pc, #228]	@ (80060d8 <HAL_TIM_PWM_Start+0x200>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_TIM_PWM_Start+0x148>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a37      	ldr	r2, [pc, #220]	@ (80060dc <HAL_TIM_PWM_Start+0x204>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_TIM_PWM_Start+0x148>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a36      	ldr	r2, [pc, #216]	@ (80060e0 <HAL_TIM_PWM_Start+0x208>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_TIM_PWM_Start+0x148>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a34      	ldr	r2, [pc, #208]	@ (80060e4 <HAL_TIM_PWM_Start+0x20c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_TIM_PWM_Start+0x148>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a33      	ldr	r2, [pc, #204]	@ (80060e8 <HAL_TIM_PWM_Start+0x210>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <HAL_TIM_PWM_Start+0x14c>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_TIM_PWM_Start+0x14e>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006038:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a25      	ldr	r2, [pc, #148]	@ (80060d4 <HAL_TIM_PWM_Start+0x1fc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d022      	beq.n	800608a <HAL_TIM_PWM_Start+0x1b2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604c:	d01d      	beq.n	800608a <HAL_TIM_PWM_Start+0x1b2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a26      	ldr	r2, [pc, #152]	@ (80060ec <HAL_TIM_PWM_Start+0x214>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d018      	beq.n	800608a <HAL_TIM_PWM_Start+0x1b2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a24      	ldr	r2, [pc, #144]	@ (80060f0 <HAL_TIM_PWM_Start+0x218>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_TIM_PWM_Start+0x1b2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a23      	ldr	r2, [pc, #140]	@ (80060f4 <HAL_TIM_PWM_Start+0x21c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_TIM_PWM_Start+0x1b2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a19      	ldr	r2, [pc, #100]	@ (80060d8 <HAL_TIM_PWM_Start+0x200>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d009      	beq.n	800608a <HAL_TIM_PWM_Start+0x1b2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <HAL_TIM_PWM_Start+0x204>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_TIM_PWM_Start+0x1b2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	@ (80060e8 <HAL_TIM_PWM_Start+0x210>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d115      	bne.n	80060b6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <HAL_TIM_PWM_Start+0x220>)
 8006092:	4013      	ands	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b06      	cmp	r3, #6
 800609a:	d015      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1f0>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a2:	d011      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b4:	e008      	b.n	80060c8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e000      	b.n	80060ca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40013400 	.word	0x40013400
 80060dc:	40014000 	.word	0x40014000
 80060e0:	40014400 	.word	0x40014400
 80060e4:	40014800 	.word	0x40014800
 80060e8:	40015000 	.word	0x40015000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	00010007 	.word	0x00010007

080060fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f9e0 	bl	80074d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a40      	ldr	r2, [pc, #256]	@ (800621c <HAL_TIM_PWM_Stop+0x120>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d018      	beq.n	8006150 <HAL_TIM_PWM_Stop+0x54>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a3f      	ldr	r2, [pc, #252]	@ (8006220 <HAL_TIM_PWM_Stop+0x124>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <HAL_TIM_PWM_Stop+0x54>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a3d      	ldr	r2, [pc, #244]	@ (8006224 <HAL_TIM_PWM_Stop+0x128>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00e      	beq.n	8006150 <HAL_TIM_PWM_Stop+0x54>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a3c      	ldr	r2, [pc, #240]	@ (8006228 <HAL_TIM_PWM_Stop+0x12c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d009      	beq.n	8006150 <HAL_TIM_PWM_Stop+0x54>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a3a      	ldr	r2, [pc, #232]	@ (800622c <HAL_TIM_PWM_Stop+0x130>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_TIM_PWM_Stop+0x54>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a39      	ldr	r2, [pc, #228]	@ (8006230 <HAL_TIM_PWM_Stop+0x134>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d101      	bne.n	8006154 <HAL_TIM_PWM_Stop+0x58>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_TIM_PWM_Stop+0x5a>
 8006154:	2300      	movs	r3, #0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d017      	beq.n	800618a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <HAL_TIM_PWM_Stop+0x8e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d107      	bne.n	800618a <HAL_TIM_PWM_Stop+0x8e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006188:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10f      	bne.n	80061ba <HAL_TIM_PWM_Stop+0xbe>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_PWM_Stop+0xbe>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_TIM_PWM_Stop+0xce>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061c8:	e023      	b.n	8006212 <HAL_TIM_PWM_Stop+0x116>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d104      	bne.n	80061da <HAL_TIM_PWM_Stop+0xde>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d8:	e01b      	b.n	8006212 <HAL_TIM_PWM_Stop+0x116>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Stop+0xee>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061e8:	e013      	b.n	8006212 <HAL_TIM_PWM_Stop+0x116>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_PWM_Stop+0xfe>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061f8:	e00b      	b.n	8006212 <HAL_TIM_PWM_Stop+0x116>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Stop+0x10e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006208:	e003      	b.n	8006212 <HAL_TIM_PWM_Stop+0x116>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40013400 	.word	0x40013400
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800
 8006230:	40015000 	.word	0x40015000

08006234 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e097      	b.n	8006378 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7fb fda7 	bl	8001db0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006278:	f023 0307 	bic.w	r3, r3, #7
 800627c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f000 fca9 	bl	8006be0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	4313      	orrs	r3, r2
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80062d4:	f023 030c 	bic.w	r3, r3, #12
 80062d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	4313      	orrs	r3, r2
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	011a      	lsls	r2, r3, #4
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	031b      	lsls	r3, r3, #12
 8006304:	4313      	orrs	r3, r2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	4313      	orrs	r3, r2
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006390:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006398:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d110      	bne.n	80063d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d102      	bne.n	80063bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063b6:	7b7b      	ldrb	r3, [r7, #13]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d001      	beq.n	80063c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e069      	b.n	8006494 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d0:	e031      	b.n	8006436 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d110      	bne.n	80063fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d102      	bne.n	80063e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063de:	7b3b      	ldrb	r3, [r7, #12]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e055      	b.n	8006494 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063f8:	e01d      	b.n	8006436 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d108      	bne.n	8006412 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006406:	7b7b      	ldrb	r3, [r7, #13]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d102      	bne.n	8006412 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800640c:	7b3b      	ldrb	r3, [r7, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d001      	beq.n	8006416 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e03e      	b.n	8006494 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_TIM_Encoder_Start+0xc4>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d008      	beq.n	8006454 <HAL_TIM_Encoder_Start+0xd4>
 8006442:	e00f      	b.n	8006464 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2201      	movs	r2, #1
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f841 	bl	80074d4 <TIM_CCxChannelCmd>
      break;
 8006452:	e016      	b.n	8006482 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	2104      	movs	r1, #4
 800645c:	4618      	mov	r0, r3
 800645e:	f001 f839 	bl	80074d4 <TIM_CCxChannelCmd>
      break;
 8006462:	e00e      	b.n	8006482 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2201      	movs	r2, #1
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f001 f831 	bl	80074d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	2104      	movs	r1, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f001 f82a 	bl	80074d4 <TIM_CCxChannelCmd>
      break;
 8006480:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d020      	beq.n	8006500 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0202 	mvn.w	r2, #2
 80064d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fb5c 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 80064ec:	e005      	b.n	80064fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fb4e 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fb5f 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d020      	beq.n	800654c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01b      	beq.n	800654c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0204 	mvn.w	r2, #4
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fb36 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fb28 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fb39 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d020      	beq.n	8006598 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01b      	beq.n	8006598 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0208 	mvn.w	r2, #8
 8006568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2204      	movs	r2, #4
 800656e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb10 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb02 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fb13 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d020      	beq.n	80065e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01b      	beq.n	80065e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0210 	mvn.w	r2, #16
 80065b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2208      	movs	r2, #8
 80065ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 faea 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 80065d0:	e005      	b.n	80065de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fadc 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 faed 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0201 	mvn.w	r2, #1
 8006600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fb f892 	bl	800172c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00c      	beq.n	8006636 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800662e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f9c9 	bl	80079c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00c      	beq.n	800665a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 f9c1 	bl	80079dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 faa7 	bl	8006bcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0220 	mvn.w	r2, #32
 800669a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f989 	bl	80079b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00c      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80066be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f995 	bl	80079f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f98d 	bl	8007a04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00c      	beq.n	800670e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 f985 	bl	8007a18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00c      	beq.n	8006732 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800672a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f97d 	bl	8007a2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006756:	2302      	movs	r3, #2
 8006758:	e0ff      	b.n	800695a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b14      	cmp	r3, #20
 8006766:	f200 80f0 	bhi.w	800694a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800676a:	a201      	add	r2, pc, #4	@ (adr r2, 8006770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	080067c5 	.word	0x080067c5
 8006774:	0800694b 	.word	0x0800694b
 8006778:	0800694b 	.word	0x0800694b
 800677c:	0800694b 	.word	0x0800694b
 8006780:	08006805 	.word	0x08006805
 8006784:	0800694b 	.word	0x0800694b
 8006788:	0800694b 	.word	0x0800694b
 800678c:	0800694b 	.word	0x0800694b
 8006790:	08006847 	.word	0x08006847
 8006794:	0800694b 	.word	0x0800694b
 8006798:	0800694b 	.word	0x0800694b
 800679c:	0800694b 	.word	0x0800694b
 80067a0:	08006887 	.word	0x08006887
 80067a4:	0800694b 	.word	0x0800694b
 80067a8:	0800694b 	.word	0x0800694b
 80067ac:	0800694b 	.word	0x0800694b
 80067b0:	080068c9 	.word	0x080068c9
 80067b4:	0800694b 	.word	0x0800694b
 80067b8:	0800694b 	.word	0x0800694b
 80067bc:	0800694b 	.word	0x0800694b
 80067c0:	08006909 	.word	0x08006909
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fabc 	bl	8006d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0208 	orr.w	r2, r2, #8
 80067de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0204 	bic.w	r2, r2, #4
 80067ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6999      	ldr	r1, [r3, #24]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	619a      	str	r2, [r3, #24]
      break;
 8006802:	e0a5      	b.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fb36 	bl	8006e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800681e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800682e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6999      	ldr	r1, [r3, #24]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	021a      	lsls	r2, r3, #8
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	619a      	str	r2, [r3, #24]
      break;
 8006844:	e084      	b.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fba9 	bl	8006fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0208 	orr.w	r2, r2, #8
 8006860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0204 	bic.w	r2, r2, #4
 8006870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69d9      	ldr	r1, [r3, #28]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	61da      	str	r2, [r3, #28]
      break;
 8006884:	e064      	b.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fc1b 	bl	80070c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69d9      	ldr	r1, [r3, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	021a      	lsls	r2, r3, #8
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	61da      	str	r2, [r3, #28]
      break;
 80068c6:	e043      	b.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fc8e 	bl	80071f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0208 	orr.w	r2, r2, #8
 80068e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0204 	bic.w	r2, r2, #4
 80068f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006906:	e023      	b.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fcd8 	bl	80072c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006922:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006932:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	021a      	lsls	r2, r3, #8
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006948:	e002      	b.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
      break;
 800694e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop

08006964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIM_ConfigClockSource+0x1c>
 800697c:	2302      	movs	r3, #2
 800697e:	e0f6      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x20a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800699e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a6f      	ldr	r2, [pc, #444]	@ (8006b78 <HAL_TIM_ConfigClockSource+0x214>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	f000 80c1 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 80069c0:	4a6d      	ldr	r2, [pc, #436]	@ (8006b78 <HAL_TIM_ConfigClockSource+0x214>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	f200 80c6 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 80069c8:	4a6c      	ldr	r2, [pc, #432]	@ (8006b7c <HAL_TIM_ConfigClockSource+0x218>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	f000 80b9 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 80069d0:	4a6a      	ldr	r2, [pc, #424]	@ (8006b7c <HAL_TIM_ConfigClockSource+0x218>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	f200 80be 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 80069d8:	4a69      	ldr	r2, [pc, #420]	@ (8006b80 <HAL_TIM_ConfigClockSource+0x21c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	f000 80b1 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 80069e0:	4a67      	ldr	r2, [pc, #412]	@ (8006b80 <HAL_TIM_ConfigClockSource+0x21c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	f200 80b6 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 80069e8:	4a66      	ldr	r2, [pc, #408]	@ (8006b84 <HAL_TIM_ConfigClockSource+0x220>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	f000 80a9 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 80069f0:	4a64      	ldr	r2, [pc, #400]	@ (8006b84 <HAL_TIM_ConfigClockSource+0x220>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	f200 80ae 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 80069f8:	4a63      	ldr	r2, [pc, #396]	@ (8006b88 <HAL_TIM_ConfigClockSource+0x224>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	f000 80a1 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a00:	4a61      	ldr	r2, [pc, #388]	@ (8006b88 <HAL_TIM_ConfigClockSource+0x224>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	f200 80a6 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a08:	4a60      	ldr	r2, [pc, #384]	@ (8006b8c <HAL_TIM_ConfigClockSource+0x228>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	f000 8099 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a10:	4a5e      	ldr	r2, [pc, #376]	@ (8006b8c <HAL_TIM_ConfigClockSource+0x228>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	f200 809e 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a1c:	f000 8091 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a24:	f200 8096 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2c:	f000 8089 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a34:	f200 808e 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3c:	d03e      	beq.n	8006abc <HAL_TIM_ConfigClockSource+0x158>
 8006a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a42:	f200 8087 	bhi.w	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4a:	f000 8086 	beq.w	8006b5a <HAL_TIM_ConfigClockSource+0x1f6>
 8006a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a52:	d87f      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a54:	2b70      	cmp	r3, #112	@ 0x70
 8006a56:	d01a      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x12a>
 8006a58:	2b70      	cmp	r3, #112	@ 0x70
 8006a5a:	d87b      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a5c:	2b60      	cmp	r3, #96	@ 0x60
 8006a5e:	d050      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x19e>
 8006a60:	2b60      	cmp	r3, #96	@ 0x60
 8006a62:	d877      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a64:	2b50      	cmp	r3, #80	@ 0x50
 8006a66:	d03c      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x17e>
 8006a68:	2b50      	cmp	r3, #80	@ 0x50
 8006a6a:	d873      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a6c:	2b40      	cmp	r3, #64	@ 0x40
 8006a6e:	d058      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x1be>
 8006a70:	2b40      	cmp	r3, #64	@ 0x40
 8006a72:	d86f      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a74:	2b30      	cmp	r3, #48	@ 0x30
 8006a76:	d064      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a78:	2b30      	cmp	r3, #48	@ 0x30
 8006a7a:	d86b      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d060      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d867      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d05c      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d05a      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0x1de>
 8006a8c:	e062      	b.n	8006b54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a9e:	f000 fcf9 	bl	8007494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	609a      	str	r2, [r3, #8]
      break;
 8006aba:	e04f      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006acc:	f000 fce2 	bl	8007494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ade:	609a      	str	r2, [r3, #8]
      break;
 8006ae0:	e03c      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	461a      	mov	r2, r3
 8006af0:	f000 fc54 	bl	800739c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2150      	movs	r1, #80	@ 0x50
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fcad 	bl	800745a <TIM_ITRx_SetConfig>
      break;
 8006b00:	e02c      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f000 fc73 	bl	80073fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2160      	movs	r1, #96	@ 0x60
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fc9d 	bl	800745a <TIM_ITRx_SetConfig>
      break;
 8006b20:	e01c      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f000 fc34 	bl	800739c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2140      	movs	r1, #64	@ 0x40
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fc8d 	bl	800745a <TIM_ITRx_SetConfig>
      break;
 8006b40:	e00c      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f000 fc84 	bl	800745a <TIM_ITRx_SetConfig>
      break;
 8006b52:	e003      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]
      break;
 8006b58:	e000      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006b5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	00100070 	.word	0x00100070
 8006b7c:	00100060 	.word	0x00100060
 8006b80:	00100050 	.word	0x00100050
 8006b84:	00100040 	.word	0x00100040
 8006b88:	00100030 	.word	0x00100030
 8006b8c:	00100020 	.word	0x00100020

08006b90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8006d24 <TIM_Base_SetConfig+0x144>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d017      	beq.n	8006c28 <TIM_Base_SetConfig+0x48>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfe:	d013      	beq.n	8006c28 <TIM_Base_SetConfig+0x48>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a49      	ldr	r2, [pc, #292]	@ (8006d28 <TIM_Base_SetConfig+0x148>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00f      	beq.n	8006c28 <TIM_Base_SetConfig+0x48>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a48      	ldr	r2, [pc, #288]	@ (8006d2c <TIM_Base_SetConfig+0x14c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00b      	beq.n	8006c28 <TIM_Base_SetConfig+0x48>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a47      	ldr	r2, [pc, #284]	@ (8006d30 <TIM_Base_SetConfig+0x150>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <TIM_Base_SetConfig+0x48>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a46      	ldr	r2, [pc, #280]	@ (8006d34 <TIM_Base_SetConfig+0x154>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0x48>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a45      	ldr	r2, [pc, #276]	@ (8006d38 <TIM_Base_SetConfig+0x158>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d108      	bne.n	8006c3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a39      	ldr	r2, [pc, #228]	@ (8006d24 <TIM_Base_SetConfig+0x144>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d023      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c48:	d01f      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a36      	ldr	r2, [pc, #216]	@ (8006d28 <TIM_Base_SetConfig+0x148>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01b      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a35      	ldr	r2, [pc, #212]	@ (8006d2c <TIM_Base_SetConfig+0x14c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d017      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a34      	ldr	r2, [pc, #208]	@ (8006d30 <TIM_Base_SetConfig+0x150>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a33      	ldr	r2, [pc, #204]	@ (8006d34 <TIM_Base_SetConfig+0x154>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a33      	ldr	r2, [pc, #204]	@ (8006d3c <TIM_Base_SetConfig+0x15c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a32      	ldr	r2, [pc, #200]	@ (8006d40 <TIM_Base_SetConfig+0x160>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a31      	ldr	r2, [pc, #196]	@ (8006d44 <TIM_Base_SetConfig+0x164>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_Base_SetConfig+0xaa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2c      	ldr	r2, [pc, #176]	@ (8006d38 <TIM_Base_SetConfig+0x158>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d108      	bne.n	8006c9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a18      	ldr	r2, [pc, #96]	@ (8006d24 <TIM_Base_SetConfig+0x144>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d013      	beq.n	8006cf0 <TIM_Base_SetConfig+0x110>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1a      	ldr	r2, [pc, #104]	@ (8006d34 <TIM_Base_SetConfig+0x154>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00f      	beq.n	8006cf0 <TIM_Base_SetConfig+0x110>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d3c <TIM_Base_SetConfig+0x15c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <TIM_Base_SetConfig+0x110>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a19      	ldr	r2, [pc, #100]	@ (8006d40 <TIM_Base_SetConfig+0x160>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d007      	beq.n	8006cf0 <TIM_Base_SetConfig+0x110>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a18      	ldr	r2, [pc, #96]	@ (8006d44 <TIM_Base_SetConfig+0x164>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_Base_SetConfig+0x110>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a13      	ldr	r2, [pc, #76]	@ (8006d38 <TIM_Base_SetConfig+0x158>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d103      	bne.n	8006cf8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d105      	bne.n	8006d16 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f023 0201 	bic.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	611a      	str	r2, [r3, #16]
  }
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800
 8006d30:	40000c00 	.word	0x40000c00
 8006d34:	40013400 	.word	0x40013400
 8006d38:	40015000 	.word	0x40015000
 8006d3c:	40014000 	.word	0x40014000
 8006d40:	40014400 	.word	0x40014400
 8006d44:	40014800 	.word	0x40014800

08006d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	f023 0201 	bic.w	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 0302 	bic.w	r3, r3, #2
 8006d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a30      	ldr	r2, [pc, #192]	@ (8006e64 <TIM_OC1_SetConfig+0x11c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <TIM_OC1_SetConfig+0x88>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a2f      	ldr	r2, [pc, #188]	@ (8006e68 <TIM_OC1_SetConfig+0x120>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00f      	beq.n	8006dd0 <TIM_OC1_SetConfig+0x88>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a2e      	ldr	r2, [pc, #184]	@ (8006e6c <TIM_OC1_SetConfig+0x124>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00b      	beq.n	8006dd0 <TIM_OC1_SetConfig+0x88>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a2d      	ldr	r2, [pc, #180]	@ (8006e70 <TIM_OC1_SetConfig+0x128>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d007      	beq.n	8006dd0 <TIM_OC1_SetConfig+0x88>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006e74 <TIM_OC1_SetConfig+0x12c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_OC1_SetConfig+0x88>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a2b      	ldr	r2, [pc, #172]	@ (8006e78 <TIM_OC1_SetConfig+0x130>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10c      	bne.n	8006dea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f023 0308 	bic.w	r3, r3, #8
 8006dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f023 0304 	bic.w	r3, r3, #4
 8006de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1d      	ldr	r2, [pc, #116]	@ (8006e64 <TIM_OC1_SetConfig+0x11c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <TIM_OC1_SetConfig+0xd2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e68 <TIM_OC1_SetConfig+0x120>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00f      	beq.n	8006e1a <TIM_OC1_SetConfig+0xd2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e6c <TIM_OC1_SetConfig+0x124>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00b      	beq.n	8006e1a <TIM_OC1_SetConfig+0xd2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1a      	ldr	r2, [pc, #104]	@ (8006e70 <TIM_OC1_SetConfig+0x128>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <TIM_OC1_SetConfig+0xd2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a19      	ldr	r2, [pc, #100]	@ (8006e74 <TIM_OC1_SetConfig+0x12c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_OC1_SetConfig+0xd2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a18      	ldr	r2, [pc, #96]	@ (8006e78 <TIM_OC1_SetConfig+0x130>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d111      	bne.n	8006e3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	621a      	str	r2, [r3, #32]
}
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40012c00 	.word	0x40012c00
 8006e68:	40013400 	.word	0x40013400
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800
 8006e78:	40015000 	.word	0x40015000

08006e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f023 0210 	bic.w	r2, r3, #16
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 0320 	bic.w	r3, r3, #32
 8006eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a2c      	ldr	r2, [pc, #176]	@ (8006f8c <TIM_OC2_SetConfig+0x110>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d007      	beq.n	8006ef0 <TIM_OC2_SetConfig+0x74>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8006f90 <TIM_OC2_SetConfig+0x114>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC2_SetConfig+0x74>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a2a      	ldr	r2, [pc, #168]	@ (8006f94 <TIM_OC2_SetConfig+0x118>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10d      	bne.n	8006f0c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f8c <TIM_OC2_SetConfig+0x110>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <TIM_OC2_SetConfig+0xc0>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a1e      	ldr	r2, [pc, #120]	@ (8006f90 <TIM_OC2_SetConfig+0x114>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00f      	beq.n	8006f3c <TIM_OC2_SetConfig+0xc0>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <TIM_OC2_SetConfig+0x11c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <TIM_OC2_SetConfig+0xc0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a1d      	ldr	r2, [pc, #116]	@ (8006f9c <TIM_OC2_SetConfig+0x120>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_OC2_SetConfig+0xc0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa0 <TIM_OC2_SetConfig+0x124>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC2_SetConfig+0xc0>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a17      	ldr	r2, [pc, #92]	@ (8006f94 <TIM_OC2_SetConfig+0x118>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d113      	bne.n	8006f64 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40013400 	.word	0x40013400
 8006f94:	40015000 	.word	0x40015000
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800

08006fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a2b      	ldr	r2, [pc, #172]	@ (80070b0 <TIM_OC3_SetConfig+0x10c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d007      	beq.n	8007016 <TIM_OC3_SetConfig+0x72>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a2a      	ldr	r2, [pc, #168]	@ (80070b4 <TIM_OC3_SetConfig+0x110>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d003      	beq.n	8007016 <TIM_OC3_SetConfig+0x72>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a29      	ldr	r2, [pc, #164]	@ (80070b8 <TIM_OC3_SetConfig+0x114>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d10d      	bne.n	8007032 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800701c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1e      	ldr	r2, [pc, #120]	@ (80070b0 <TIM_OC3_SetConfig+0x10c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <TIM_OC3_SetConfig+0xbe>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a1d      	ldr	r2, [pc, #116]	@ (80070b4 <TIM_OC3_SetConfig+0x110>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00f      	beq.n	8007062 <TIM_OC3_SetConfig+0xbe>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1d      	ldr	r2, [pc, #116]	@ (80070bc <TIM_OC3_SetConfig+0x118>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_OC3_SetConfig+0xbe>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <TIM_OC3_SetConfig+0x11c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_OC3_SetConfig+0xbe>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1b      	ldr	r2, [pc, #108]	@ (80070c4 <TIM_OC3_SetConfig+0x120>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC3_SetConfig+0xbe>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a16      	ldr	r2, [pc, #88]	@ (80070b8 <TIM_OC3_SetConfig+0x114>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d113      	bne.n	800708a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40015000 	.word	0x40015000
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800

080070c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	031b      	lsls	r3, r3, #12
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a2c      	ldr	r2, [pc, #176]	@ (80071d8 <TIM_OC4_SetConfig+0x110>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_OC4_SetConfig+0x74>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a2b      	ldr	r2, [pc, #172]	@ (80071dc <TIM_OC4_SetConfig+0x114>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_OC4_SetConfig+0x74>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a2a      	ldr	r2, [pc, #168]	@ (80071e0 <TIM_OC4_SetConfig+0x118>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d10d      	bne.n	8007158 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	031b      	lsls	r3, r3, #12
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007156:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a1f      	ldr	r2, [pc, #124]	@ (80071d8 <TIM_OC4_SetConfig+0x110>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d013      	beq.n	8007188 <TIM_OC4_SetConfig+0xc0>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a1e      	ldr	r2, [pc, #120]	@ (80071dc <TIM_OC4_SetConfig+0x114>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00f      	beq.n	8007188 <TIM_OC4_SetConfig+0xc0>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a1e      	ldr	r2, [pc, #120]	@ (80071e4 <TIM_OC4_SetConfig+0x11c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00b      	beq.n	8007188 <TIM_OC4_SetConfig+0xc0>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a1d      	ldr	r2, [pc, #116]	@ (80071e8 <TIM_OC4_SetConfig+0x120>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <TIM_OC4_SetConfig+0xc0>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a1c      	ldr	r2, [pc, #112]	@ (80071ec <TIM_OC4_SetConfig+0x124>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC4_SetConfig+0xc0>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a17      	ldr	r2, [pc, #92]	@ (80071e0 <TIM_OC4_SetConfig+0x118>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d113      	bne.n	80071b0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800718e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007196:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	019b      	lsls	r3, r3, #6
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	019b      	lsls	r3, r3, #6
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40013400 	.word	0x40013400
 80071e0:	40015000 	.word	0x40015000
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800721e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007234:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	041b      	lsls	r3, r3, #16
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a19      	ldr	r2, [pc, #100]	@ (80072ac <TIM_OC5_SetConfig+0xbc>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <TIM_OC5_SetConfig+0x82>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a18      	ldr	r2, [pc, #96]	@ (80072b0 <TIM_OC5_SetConfig+0xc0>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00f      	beq.n	8007272 <TIM_OC5_SetConfig+0x82>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a17      	ldr	r2, [pc, #92]	@ (80072b4 <TIM_OC5_SetConfig+0xc4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00b      	beq.n	8007272 <TIM_OC5_SetConfig+0x82>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a16      	ldr	r2, [pc, #88]	@ (80072b8 <TIM_OC5_SetConfig+0xc8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <TIM_OC5_SetConfig+0x82>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a15      	ldr	r2, [pc, #84]	@ (80072bc <TIM_OC5_SetConfig+0xcc>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC5_SetConfig+0x82>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a14      	ldr	r2, [pc, #80]	@ (80072c0 <TIM_OC5_SetConfig+0xd0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d109      	bne.n	8007286 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007278:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	621a      	str	r2, [r3, #32]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40013400 	.word	0x40013400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800
 80072c0:	40015000 	.word	0x40015000

080072c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800730a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	051b      	lsls	r3, r3, #20
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a1a      	ldr	r2, [pc, #104]	@ (8007384 <TIM_OC6_SetConfig+0xc0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d013      	beq.n	8007348 <TIM_OC6_SetConfig+0x84>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a19      	ldr	r2, [pc, #100]	@ (8007388 <TIM_OC6_SetConfig+0xc4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00f      	beq.n	8007348 <TIM_OC6_SetConfig+0x84>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a18      	ldr	r2, [pc, #96]	@ (800738c <TIM_OC6_SetConfig+0xc8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00b      	beq.n	8007348 <TIM_OC6_SetConfig+0x84>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a17      	ldr	r2, [pc, #92]	@ (8007390 <TIM_OC6_SetConfig+0xcc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_OC6_SetConfig+0x84>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a16      	ldr	r2, [pc, #88]	@ (8007394 <TIM_OC6_SetConfig+0xd0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC6_SetConfig+0x84>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a15      	ldr	r2, [pc, #84]	@ (8007398 <TIM_OC6_SetConfig+0xd4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d109      	bne.n	800735c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800734e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	029b      	lsls	r3, r3, #10
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40013400 	.word	0x40013400
 800738c:	40014000 	.word	0x40014000
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800
 8007398:	40015000 	.word	0x40015000

0800739c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f023 0201 	bic.w	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f023 030a 	bic.w	r3, r3, #10
 80073d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b087      	sub	sp, #28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f023 0210 	bic.w	r2, r3, #16
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	031b      	lsls	r3, r3, #12
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007436:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	f043 0307 	orr.w	r3, r3, #7
 8007480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	609a      	str	r2, [r3, #8]
}
 80074c8:	bf00      	nop
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	2201      	movs	r2, #1
 80074e8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	43db      	mvns	r3, r3
 80074f6:	401a      	ands	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	431a      	orrs	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
	...

08007520 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <HAL_TIMEx_PWMN_Start+0x24>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b01      	cmp	r3, #1
 800753a:	bf14      	ite	ne
 800753c:	2301      	movne	r3, #1
 800753e:	2300      	moveq	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	e022      	b.n	800758a <HAL_TIMEx_PWMN_Start+0x6a>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b04      	cmp	r3, #4
 8007548:	d109      	bne.n	800755e <HAL_TIMEx_PWMN_Start+0x3e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b01      	cmp	r3, #1
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	e015      	b.n	800758a <HAL_TIMEx_PWMN_Start+0x6a>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b08      	cmp	r3, #8
 8007562:	d109      	bne.n	8007578 <HAL_TIMEx_PWMN_Start+0x58>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	bf14      	ite	ne
 8007570:	2301      	movne	r3, #1
 8007572:	2300      	moveq	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	e008      	b.n	800758a <HAL_TIMEx_PWMN_Start+0x6a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	bf14      	ite	ne
 8007584:	2301      	movne	r3, #1
 8007586:	2300      	moveq	r3, #0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e073      	b.n	800767a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <HAL_TIMEx_PWMN_Start+0x82>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075a0:	e013      	b.n	80075ca <HAL_TIMEx_PWMN_Start+0xaa>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d104      	bne.n	80075b2 <HAL_TIMEx_PWMN_Start+0x92>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075b0:	e00b      	b.n	80075ca <HAL_TIMEx_PWMN_Start+0xaa>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d104      	bne.n	80075c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075c0:	e003      	b.n	80075ca <HAL_TIMEx_PWMN_Start+0xaa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2204      	movs	r2, #4
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fa34 	bl	8007a40 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a25      	ldr	r2, [pc, #148]	@ (8007684 <HAL_TIMEx_PWMN_Start+0x164>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d022      	beq.n	8007638 <HAL_TIMEx_PWMN_Start+0x118>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fa:	d01d      	beq.n	8007638 <HAL_TIMEx_PWMN_Start+0x118>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a21      	ldr	r2, [pc, #132]	@ (8007688 <HAL_TIMEx_PWMN_Start+0x168>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <HAL_TIMEx_PWMN_Start+0x118>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a20      	ldr	r2, [pc, #128]	@ (800768c <HAL_TIMEx_PWMN_Start+0x16c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <HAL_TIMEx_PWMN_Start+0x118>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1e      	ldr	r2, [pc, #120]	@ (8007690 <HAL_TIMEx_PWMN_Start+0x170>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <HAL_TIMEx_PWMN_Start+0x118>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1d      	ldr	r2, [pc, #116]	@ (8007694 <HAL_TIMEx_PWMN_Start+0x174>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <HAL_TIMEx_PWMN_Start+0x118>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1b      	ldr	r2, [pc, #108]	@ (8007698 <HAL_TIMEx_PWMN_Start+0x178>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIMEx_PWMN_Start+0x118>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1a      	ldr	r2, [pc, #104]	@ (800769c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d115      	bne.n	8007664 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	4b18      	ldr	r3, [pc, #96]	@ (80076a0 <HAL_TIMEx_PWMN_Start+0x180>)
 8007640:	4013      	ands	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b06      	cmp	r3, #6
 8007648:	d015      	beq.n	8007676 <HAL_TIMEx_PWMN_Start+0x156>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007650:	d011      	beq.n	8007676 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0201 	orr.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007662:	e008      	b.n	8007676 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e000      	b.n	8007678 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007676:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40000400 	.word	0x40000400
 800768c:	40000800 	.word	0x40000800
 8007690:	40000c00 	.word	0x40000c00
 8007694:	40013400 	.word	0x40013400
 8007698:	40014000 	.word	0x40014000
 800769c:	40015000 	.word	0x40015000
 80076a0:	00010007 	.word	0x00010007

080076a4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f9c2 	bl	8007a40 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10f      	bne.n	80076ec <HAL_TIMEx_PWMN_Stop+0x48>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80076d6:	4013      	ands	r3, r2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <HAL_TIMEx_PWMN_Stop+0x48>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6a1a      	ldr	r2, [r3, #32]
 80076f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076f6:	4013      	ands	r3, r2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10f      	bne.n	800771c <HAL_TIMEx_PWMN_Stop+0x78>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a1a      	ldr	r2, [r3, #32]
 8007702:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d107      	bne.n	800771c <HAL_TIMEx_PWMN_Stop+0x78>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0201 	bic.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <HAL_TIMEx_PWMN_Stop+0x88>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800772a:	e013      	b.n	8007754 <HAL_TIMEx_PWMN_Stop+0xb0>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d104      	bne.n	800773c <HAL_TIMEx_PWMN_Stop+0x98>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800773a:	e00b      	b.n	8007754 <HAL_TIMEx_PWMN_Stop+0xb0>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b08      	cmp	r3, #8
 8007740:	d104      	bne.n	800774c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800774a:	e003      	b.n	8007754 <HAL_TIMEx_PWMN_Stop+0xb0>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007774:	2302      	movs	r3, #2
 8007776:	e074      	b.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a34      	ldr	r2, [pc, #208]	@ (8007870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d009      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a33      	ldr	r2, [pc, #204]	@ (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a31      	ldr	r2, [pc, #196]	@ (8007878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d108      	bne.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80077ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a21      	ldr	r2, [pc, #132]	@ (8007870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d022      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f8:	d01d      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1f      	ldr	r2, [pc, #124]	@ (800787c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d018      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a1d      	ldr	r2, [pc, #116]	@ (8007880 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1c      	ldr	r2, [pc, #112]	@ (8007884 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a15      	ldr	r2, [pc, #84]	@ (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a18      	ldr	r2, [pc, #96]	@ (8007888 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a11      	ldr	r2, [pc, #68]	@ (8007878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d10c      	bne.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800783c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	4313      	orrs	r3, r2
 8007846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	40012c00 	.word	0x40012c00
 8007874:	40013400 	.word	0x40013400
 8007878:	40015000 	.word	0x40015000
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	40014000 	.word	0x40014000

0800788c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e078      	b.n	800799a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	041b      	lsls	r3, r3, #16
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1c      	ldr	r2, [pc, #112]	@ (80079a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1b      	ldr	r2, [pc, #108]	@ (80079ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a19      	ldr	r2, [pc, #100]	@ (80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d11c      	bne.n	8007988 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	051b      	lsls	r3, r3, #20
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40013400 	.word	0x40013400
 80079b0:	40015000 	.word	0x40015000

080079b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	2204      	movs	r2, #4
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1a      	ldr	r2, [r3, #32]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e042      	b.n	8007b22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fa fac0 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	@ 0x24
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 ff61 	bl	800899c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fc62 	bl	80083a4 <UART_SetConfig>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e01b      	b.n	8007b22 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 ffe0 	bl	8008ae0 <UART_CheckIdleState>
 8007b20:	4603      	mov	r3, r0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b08a      	sub	sp, #40	@ 0x28
 8007b2e:	af02      	add	r7, sp, #8
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	603b      	str	r3, [r7, #0]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d17b      	bne.n	8007c3c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_UART_Transmit+0x26>
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e074      	b.n	8007c3e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2221      	movs	r2, #33	@ 0x21
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b64:	f7fa fe60 	bl	8002828 <HAL_GetTick>
 8007b68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b82:	d108      	bne.n	8007b96 <HAL_UART_Transmit+0x6c>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	e003      	b.n	8007b9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b9e:	e030      	b.n	8007c02 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2180      	movs	r1, #128	@ 0x80
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f001 f842 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e03d      	b.n	8007c3e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10b      	bne.n	8007be0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	3302      	adds	r3, #2
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	e007      	b.n	8007bf0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	3301      	adds	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1c8      	bne.n	8007ba0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2140      	movs	r1, #64	@ 0x40
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f001 f80b 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e006      	b.n	8007c3e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e000      	b.n	8007c3e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c3c:	2302      	movs	r3, #2
  }
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	@ 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d137      	bne.n	8007cd0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_UART_Receive_IT+0x24>
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e030      	b.n	8007cd2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a18      	ldr	r2, [pc, #96]	@ (8007cdc <HAL_UART_Receive_IT+0x94>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d01f      	beq.n	8007cc0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d018      	beq.n	8007cc0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	623b      	str	r3, [r7, #32]
 8007cae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e6      	bne.n	8007c8e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68b9      	ldr	r1, [r7, #8]
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f001 f822 	bl	8008d10 <UART_Start_Receive_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	e000      	b.n	8007cd2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
  }
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3728      	adds	r7, #40	@ 0x28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40008000 	.word	0x40008000

08007ce0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b0ba      	sub	sp, #232	@ 0xe8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d0e:	4013      	ands	r3, r2
 8007d10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d11b      	bne.n	8007d54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d015      	beq.n	8007d54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d105      	bne.n	8007d40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8300 	beq.w	800834a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
      }
      return;
 8007d52:	e2fa      	b.n	800834a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 8123 	beq.w	8007fa4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d62:	4b8d      	ldr	r3, [pc, #564]	@ (8007f98 <HAL_UART_IRQHandler+0x2b8>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8007f9c <HAL_UART_IRQHandler+0x2bc>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8116 	beq.w	8007fa4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d011      	beq.n	8007da8 <HAL_UART_IRQHandler+0xc8>
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2201      	movs	r2, #1
 8007d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9e:	f043 0201 	orr.w	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d011      	beq.n	8007dd8 <HAL_UART_IRQHandler+0xf8>
 8007db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dce:	f043 0204 	orr.w	r2, r3, #4
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d011      	beq.n	8007e08 <HAL_UART_IRQHandler+0x128>
 8007de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2204      	movs	r2, #4
 8007df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfe:	f043 0202 	orr.w	r2, r3, #2
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d017      	beq.n	8007e44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e18:	f003 0320 	and.w	r3, r3, #32
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d105      	bne.n	8007e2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e24:	4b5c      	ldr	r3, [pc, #368]	@ (8007f98 <HAL_UART_IRQHandler+0x2b8>)
 8007e26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2208      	movs	r2, #8
 8007e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e3a:	f043 0208 	orr.w	r2, r3, #8
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d012      	beq.n	8007e76 <HAL_UART_IRQHandler+0x196>
 8007e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00c      	beq.n	8007e76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6c:	f043 0220 	orr.w	r2, r3, #32
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8266 	beq.w	800834e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d013      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d105      	bne.n	8007ea6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eca:	2b40      	cmp	r3, #64	@ 0x40
 8007ecc:	d005      	beq.n	8007eda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ed2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d054      	beq.n	8007f84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f001 f83a 	bl	8008f54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eea:	2b40      	cmp	r3, #64	@ 0x40
 8007eec:	d146      	bne.n	8007f7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3308      	adds	r3, #8
 8007f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1d9      	bne.n	8007eee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d017      	beq.n	8007f74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f4a:	4a15      	ldr	r2, [pc, #84]	@ (8007fa0 <HAL_UART_IRQHandler+0x2c0>)
 8007f4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fc fa85 	bl	8004464 <HAL_DMA_Abort_IT>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d019      	beq.n	8007f94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f72:	e00f      	b.n	8007f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f9ff 	bl	8008378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7a:	e00b      	b.n	8007f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f9fb 	bl	8008378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f82:	e007      	b.n	8007f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f9f7 	bl	8008378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007f92:	e1dc      	b.n	800834e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f94:	bf00      	nop
    return;
 8007f96:	e1da      	b.n	800834e <HAL_UART_IRQHandler+0x66e>
 8007f98:	10000001 	.word	0x10000001
 8007f9c:	04000120 	.word	0x04000120
 8007fa0:	08009021 	.word	0x08009021

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	f040 8170 	bne.w	800828e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 8169 	beq.w	800828e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 8162 	beq.w	800828e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2210      	movs	r2, #16
 8007fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fdc:	2b40      	cmp	r3, #64	@ 0x40
 8007fde:	f040 80d8 	bne.w	8008192 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ff0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80af 	beq.w	8008158 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008000:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008004:	429a      	cmp	r2, r3
 8008006:	f080 80a7 	bcs.w	8008158 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008010:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	f040 8087 	bne.w	8008136 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800803c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008056:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800805e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800806a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1da      	bne.n	8008028 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008096:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800809a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800809e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e1      	bne.n	8008072 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80080d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80080d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e3      	bne.n	80080ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008104:	f023 0310 	bic.w	r3, r3, #16
 8008108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008116:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008118:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800811c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e4      	bne.n	80080f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008130:	4618      	mov	r0, r3
 8008132:	f7fc f93e 	bl	80043b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008148:	b29b      	uxth	r3, r3
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	b29b      	uxth	r3, r3
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f91b 	bl	800838c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008156:	e0fc      	b.n	8008352 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800815e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008162:	429a      	cmp	r2, r3
 8008164:	f040 80f5 	bne.w	8008352 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b20      	cmp	r3, #32
 8008178:	f040 80eb 	bne.w	8008352 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8fe 	bl	800838c <HAL_UARTEx_RxEventCallback>
      return;
 8008190:	e0df      	b.n	8008352 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800819e:	b29b      	uxth	r3, r3
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 80d1 	beq.w	8008356 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80081b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 80cc 	beq.w	8008356 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	e853 3f00 	ldrex	r3, [r3]
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e4      	bne.n	80081be <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	623b      	str	r3, [r7, #32]
   return(result);
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800821c:	633a      	str	r2, [r7, #48]	@ 0x30
 800821e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e1      	bne.n	80081f4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	60fb      	str	r3, [r7, #12]
   return(result);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0310 	bic.w	r3, r3, #16
 8008258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	69b9      	ldr	r1, [r7, #24]
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	617b      	str	r3, [r7, #20]
   return(result);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e4      	bne.n	8008244 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f880 	bl	800838c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800828c:	e063      	b.n	8008356 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800828e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <HAL_UART_IRQHandler+0x5d8>
 800829a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800829e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80082ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 fc13 	bl	8009adc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082b6:	e051      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80082b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d014      	beq.n	80082ee <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80082c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d105      	bne.n	80082dc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80082d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d03a      	beq.n	800835a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	4798      	blx	r3
    }
    return;
 80082ec:	e035      	b.n	800835a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <HAL_UART_IRQHandler+0x62e>
 80082fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fe9c 	bl	8009044 <UART_EndTransmit_IT>
    return;
 800830c:	e026      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800830e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <HAL_UART_IRQHandler+0x64e>
 800831a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 fbec 	bl	8009b04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800832c:	e016      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d010      	beq.n	800835c <HAL_UART_IRQHandler+0x67c>
 800833a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800833e:	2b00      	cmp	r3, #0
 8008340:	da0c      	bge.n	800835c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fbd4 	bl	8009af0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008348:	e008      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
      return;
 800834a:	bf00      	nop
 800834c:	e006      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
    return;
 800834e:	bf00      	nop
 8008350:	e004      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
      return;
 8008352:	bf00      	nop
 8008354:	e002      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
      return;
 8008356:	bf00      	nop
 8008358:	e000      	b.n	800835c <HAL_UART_IRQHandler+0x67c>
    return;
 800835a:	bf00      	nop
  }
}
 800835c:	37e8      	adds	r7, #232	@ 0xe8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop

08008364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083a8:	b08c      	sub	sp, #48	@ 0x30
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	431a      	orrs	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	4baa      	ldr	r3, [pc, #680]	@ (800867c <UART_SetConfig+0x2d8>)
 80083d4:	4013      	ands	r3, r2
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083dc:	430b      	orrs	r3, r1
 80083de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a9f      	ldr	r2, [pc, #636]	@ (8008680 <UART_SetConfig+0x2dc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800840c:	4313      	orrs	r3, r2
 800840e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800841a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008424:	430b      	orrs	r3, r1
 8008426:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842e:	f023 010f 	bic.w	r1, r3, #15
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a90      	ldr	r2, [pc, #576]	@ (8008684 <UART_SetConfig+0x2e0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d125      	bne.n	8008494 <UART_SetConfig+0xf0>
 8008448:	4b8f      	ldr	r3, [pc, #572]	@ (8008688 <UART_SetConfig+0x2e4>)
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d81a      	bhi.n	800848c <UART_SetConfig+0xe8>
 8008456:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <UART_SetConfig+0xb8>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	0800846d 	.word	0x0800846d
 8008460:	0800847d 	.word	0x0800847d
 8008464:	08008475 	.word	0x08008475
 8008468:	08008485 	.word	0x08008485
 800846c:	2301      	movs	r3, #1
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008472:	e116      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008474:	2302      	movs	r3, #2
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800847a:	e112      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800847c:	2304      	movs	r3, #4
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008482:	e10e      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008484:	2308      	movs	r3, #8
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848a:	e10a      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800848c:	2310      	movs	r3, #16
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008492:	e106      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a7c      	ldr	r2, [pc, #496]	@ (800868c <UART_SetConfig+0x2e8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d138      	bne.n	8008510 <UART_SetConfig+0x16c>
 800849e:	4b7a      	ldr	r3, [pc, #488]	@ (8008688 <UART_SetConfig+0x2e4>)
 80084a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a4:	f003 030c 	and.w	r3, r3, #12
 80084a8:	2b0c      	cmp	r3, #12
 80084aa:	d82d      	bhi.n	8008508 <UART_SetConfig+0x164>
 80084ac:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <UART_SetConfig+0x110>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084e9 	.word	0x080084e9
 80084b8:	08008509 	.word	0x08008509
 80084bc:	08008509 	.word	0x08008509
 80084c0:	08008509 	.word	0x08008509
 80084c4:	080084f9 	.word	0x080084f9
 80084c8:	08008509 	.word	0x08008509
 80084cc:	08008509 	.word	0x08008509
 80084d0:	08008509 	.word	0x08008509
 80084d4:	080084f1 	.word	0x080084f1
 80084d8:	08008509 	.word	0x08008509
 80084dc:	08008509 	.word	0x08008509
 80084e0:	08008509 	.word	0x08008509
 80084e4:	08008501 	.word	0x08008501
 80084e8:	2300      	movs	r3, #0
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	e0d8      	b.n	80086a2 <UART_SetConfig+0x2fe>
 80084f0:	2302      	movs	r3, #2
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f6:	e0d4      	b.n	80086a2 <UART_SetConfig+0x2fe>
 80084f8:	2304      	movs	r3, #4
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084fe:	e0d0      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008500:	2308      	movs	r3, #8
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008506:	e0cc      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008508:	2310      	movs	r3, #16
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800850e:	e0c8      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a5e      	ldr	r2, [pc, #376]	@ (8008690 <UART_SetConfig+0x2ec>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d125      	bne.n	8008566 <UART_SetConfig+0x1c2>
 800851a:	4b5b      	ldr	r3, [pc, #364]	@ (8008688 <UART_SetConfig+0x2e4>)
 800851c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008520:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008524:	2b30      	cmp	r3, #48	@ 0x30
 8008526:	d016      	beq.n	8008556 <UART_SetConfig+0x1b2>
 8008528:	2b30      	cmp	r3, #48	@ 0x30
 800852a:	d818      	bhi.n	800855e <UART_SetConfig+0x1ba>
 800852c:	2b20      	cmp	r3, #32
 800852e:	d00a      	beq.n	8008546 <UART_SetConfig+0x1a2>
 8008530:	2b20      	cmp	r3, #32
 8008532:	d814      	bhi.n	800855e <UART_SetConfig+0x1ba>
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <UART_SetConfig+0x19a>
 8008538:	2b10      	cmp	r3, #16
 800853a:	d008      	beq.n	800854e <UART_SetConfig+0x1aa>
 800853c:	e00f      	b.n	800855e <UART_SetConfig+0x1ba>
 800853e:	2300      	movs	r3, #0
 8008540:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008544:	e0ad      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008546:	2302      	movs	r3, #2
 8008548:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800854c:	e0a9      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800854e:	2304      	movs	r3, #4
 8008550:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008554:	e0a5      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008556:	2308      	movs	r3, #8
 8008558:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800855c:	e0a1      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800855e:	2310      	movs	r3, #16
 8008560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008564:	e09d      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a4a      	ldr	r2, [pc, #296]	@ (8008694 <UART_SetConfig+0x2f0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d125      	bne.n	80085bc <UART_SetConfig+0x218>
 8008570:	4b45      	ldr	r3, [pc, #276]	@ (8008688 <UART_SetConfig+0x2e4>)
 8008572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008576:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800857a:	2bc0      	cmp	r3, #192	@ 0xc0
 800857c:	d016      	beq.n	80085ac <UART_SetConfig+0x208>
 800857e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008580:	d818      	bhi.n	80085b4 <UART_SetConfig+0x210>
 8008582:	2b80      	cmp	r3, #128	@ 0x80
 8008584:	d00a      	beq.n	800859c <UART_SetConfig+0x1f8>
 8008586:	2b80      	cmp	r3, #128	@ 0x80
 8008588:	d814      	bhi.n	80085b4 <UART_SetConfig+0x210>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <UART_SetConfig+0x1f0>
 800858e:	2b40      	cmp	r3, #64	@ 0x40
 8008590:	d008      	beq.n	80085a4 <UART_SetConfig+0x200>
 8008592:	e00f      	b.n	80085b4 <UART_SetConfig+0x210>
 8008594:	2300      	movs	r3, #0
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800859a:	e082      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800859c:	2302      	movs	r3, #2
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a2:	e07e      	b.n	80086a2 <UART_SetConfig+0x2fe>
 80085a4:	2304      	movs	r3, #4
 80085a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085aa:	e07a      	b.n	80086a2 <UART_SetConfig+0x2fe>
 80085ac:	2308      	movs	r3, #8
 80085ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b2:	e076      	b.n	80086a2 <UART_SetConfig+0x2fe>
 80085b4:	2310      	movs	r3, #16
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ba:	e072      	b.n	80086a2 <UART_SetConfig+0x2fe>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a35      	ldr	r2, [pc, #212]	@ (8008698 <UART_SetConfig+0x2f4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d12a      	bne.n	800861c <UART_SetConfig+0x278>
 80085c6:	4b30      	ldr	r3, [pc, #192]	@ (8008688 <UART_SetConfig+0x2e4>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085d4:	d01a      	beq.n	800860c <UART_SetConfig+0x268>
 80085d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085da:	d81b      	bhi.n	8008614 <UART_SetConfig+0x270>
 80085dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e0:	d00c      	beq.n	80085fc <UART_SetConfig+0x258>
 80085e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e6:	d815      	bhi.n	8008614 <UART_SetConfig+0x270>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <UART_SetConfig+0x250>
 80085ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085f0:	d008      	beq.n	8008604 <UART_SetConfig+0x260>
 80085f2:	e00f      	b.n	8008614 <UART_SetConfig+0x270>
 80085f4:	2300      	movs	r3, #0
 80085f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085fa:	e052      	b.n	80086a2 <UART_SetConfig+0x2fe>
 80085fc:	2302      	movs	r3, #2
 80085fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008602:	e04e      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008604:	2304      	movs	r3, #4
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800860a:	e04a      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800860c:	2308      	movs	r3, #8
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008612:	e046      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008614:	2310      	movs	r3, #16
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800861a:	e042      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a17      	ldr	r2, [pc, #92]	@ (8008680 <UART_SetConfig+0x2dc>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d13a      	bne.n	800869c <UART_SetConfig+0x2f8>
 8008626:	4b18      	ldr	r3, [pc, #96]	@ (8008688 <UART_SetConfig+0x2e4>)
 8008628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800862c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008630:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008634:	d01a      	beq.n	800866c <UART_SetConfig+0x2c8>
 8008636:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800863a:	d81b      	bhi.n	8008674 <UART_SetConfig+0x2d0>
 800863c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008640:	d00c      	beq.n	800865c <UART_SetConfig+0x2b8>
 8008642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008646:	d815      	bhi.n	8008674 <UART_SetConfig+0x2d0>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <UART_SetConfig+0x2b0>
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008650:	d008      	beq.n	8008664 <UART_SetConfig+0x2c0>
 8008652:	e00f      	b.n	8008674 <UART_SetConfig+0x2d0>
 8008654:	2300      	movs	r3, #0
 8008656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800865a:	e022      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800865c:	2302      	movs	r3, #2
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008662:	e01e      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008664:	2304      	movs	r3, #4
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800866a:	e01a      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800866c:	2308      	movs	r3, #8
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008672:	e016      	b.n	80086a2 <UART_SetConfig+0x2fe>
 8008674:	2310      	movs	r3, #16
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800867a:	e012      	b.n	80086a2 <UART_SetConfig+0x2fe>
 800867c:	cfff69f3 	.word	0xcfff69f3
 8008680:	40008000 	.word	0x40008000
 8008684:	40013800 	.word	0x40013800
 8008688:	40021000 	.word	0x40021000
 800868c:	40004400 	.word	0x40004400
 8008690:	40004800 	.word	0x40004800
 8008694:	40004c00 	.word	0x40004c00
 8008698:	40005000 	.word	0x40005000
 800869c:	2310      	movs	r3, #16
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4aae      	ldr	r2, [pc, #696]	@ (8008960 <UART_SetConfig+0x5bc>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	f040 8097 	bne.w	80087dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d823      	bhi.n	80086fe <UART_SetConfig+0x35a>
 80086b6:	a201      	add	r2, pc, #4	@ (adr r2, 80086bc <UART_SetConfig+0x318>)
 80086b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086bc:	080086e1 	.word	0x080086e1
 80086c0:	080086ff 	.word	0x080086ff
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086ff 	.word	0x080086ff
 80086cc:	080086ef 	.word	0x080086ef
 80086d0:	080086ff 	.word	0x080086ff
 80086d4:	080086ff 	.word	0x080086ff
 80086d8:	080086ff 	.word	0x080086ff
 80086dc:	080086f7 	.word	0x080086f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086e0:	f7fc ff98 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80086e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086e6:	e010      	b.n	800870a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e8:	4b9e      	ldr	r3, [pc, #632]	@ (8008964 <UART_SetConfig+0x5c0>)
 80086ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086ec:	e00d      	b.n	800870a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ee:	f7fc ff23 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80086f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086f4:	e009      	b.n	800870a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086fc:	e005      	b.n	800870a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8130 	beq.w	8008972 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008716:	4a94      	ldr	r2, [pc, #592]	@ (8008968 <UART_SetConfig+0x5c4>)
 8008718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800871c:	461a      	mov	r2, r3
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	fbb3 f3f2 	udiv	r3, r3, r2
 8008724:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4413      	add	r3, r2
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	429a      	cmp	r2, r3
 8008734:	d305      	bcc.n	8008742 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	429a      	cmp	r2, r3
 8008740:	d903      	bls.n	800874a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008748:	e113      	b.n	8008972 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874c:	2200      	movs	r2, #0
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	60fa      	str	r2, [r7, #12]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	4a84      	ldr	r2, [pc, #528]	@ (8008968 <UART_SetConfig+0x5c4>)
 8008758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800875c:	b29b      	uxth	r3, r3
 800875e:	2200      	movs	r2, #0
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800876c:	f7f8 fac4 	bl	8000cf8 <__aeabi_uldivmod>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4610      	mov	r0, r2
 8008776:	4619      	mov	r1, r3
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	020b      	lsls	r3, r1, #8
 8008782:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008786:	0202      	lsls	r2, r0, #8
 8008788:	6979      	ldr	r1, [r7, #20]
 800878a:	6849      	ldr	r1, [r1, #4]
 800878c:	0849      	lsrs	r1, r1, #1
 800878e:	2000      	movs	r0, #0
 8008790:	460c      	mov	r4, r1
 8008792:	4605      	mov	r5, r0
 8008794:	eb12 0804 	adds.w	r8, r2, r4
 8008798:	eb43 0905 	adc.w	r9, r3, r5
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	469a      	mov	sl, r3
 80087a4:	4693      	mov	fp, r2
 80087a6:	4652      	mov	r2, sl
 80087a8:	465b      	mov	r3, fp
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f8 faa3 	bl	8000cf8 <__aeabi_uldivmod>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4613      	mov	r3, r2
 80087b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087c0:	d308      	bcc.n	80087d4 <UART_SetConfig+0x430>
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087c8:	d204      	bcs.n	80087d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6a3a      	ldr	r2, [r7, #32]
 80087d0:	60da      	str	r2, [r3, #12]
 80087d2:	e0ce      	b.n	8008972 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087da:	e0ca      	b.n	8008972 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087e4:	d166      	bne.n	80088b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80087e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d827      	bhi.n	800883e <UART_SetConfig+0x49a>
 80087ee:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <UART_SetConfig+0x450>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008819 	.word	0x08008819
 80087f8:	08008821 	.word	0x08008821
 80087fc:	08008829 	.word	0x08008829
 8008800:	0800883f 	.word	0x0800883f
 8008804:	0800882f 	.word	0x0800882f
 8008808:	0800883f 	.word	0x0800883f
 800880c:	0800883f 	.word	0x0800883f
 8008810:	0800883f 	.word	0x0800883f
 8008814:	08008837 	.word	0x08008837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008818:	f7fc fefc 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 800881c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800881e:	e014      	b.n	800884a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008820:	f7fc ff0e 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 8008824:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008826:	e010      	b.n	800884a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008828:	4b4e      	ldr	r3, [pc, #312]	@ (8008964 <UART_SetConfig+0x5c0>)
 800882a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800882c:	e00d      	b.n	800884a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800882e:	f7fc fe83 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 8008832:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008834:	e009      	b.n	800884a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800883a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800883c:	e005      	b.n	800884a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 8090 	beq.w	8008972 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008856:	4a44      	ldr	r2, [pc, #272]	@ (8008968 <UART_SetConfig+0x5c4>)
 8008858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800885c:	461a      	mov	r2, r3
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	fbb3 f3f2 	udiv	r3, r3, r2
 8008864:	005a      	lsls	r2, r3, #1
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	441a      	add	r2, r3
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	fbb2 f3f3 	udiv	r3, r2, r3
 8008876:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	2b0f      	cmp	r3, #15
 800887c:	d916      	bls.n	80088ac <UART_SetConfig+0x508>
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008884:	d212      	bcs.n	80088ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f023 030f 	bic.w	r3, r3, #15
 800888e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	085b      	lsrs	r3, r3, #1
 8008894:	b29b      	uxth	r3, r3
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	b29a      	uxth	r2, r3
 800889c:	8bfb      	ldrh	r3, [r7, #30]
 800889e:	4313      	orrs	r3, r2
 80088a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	8bfa      	ldrh	r2, [r7, #30]
 80088a8:	60da      	str	r2, [r3, #12]
 80088aa:	e062      	b.n	8008972 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088b2:	e05e      	b.n	8008972 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d828      	bhi.n	800890e <UART_SetConfig+0x56a>
 80088bc:	a201      	add	r2, pc, #4	@ (adr r2, 80088c4 <UART_SetConfig+0x520>)
 80088be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c2:	bf00      	nop
 80088c4:	080088e9 	.word	0x080088e9
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	0800890f 	.word	0x0800890f
 80088d4:	080088ff 	.word	0x080088ff
 80088d8:	0800890f 	.word	0x0800890f
 80088dc:	0800890f 	.word	0x0800890f
 80088e0:	0800890f 	.word	0x0800890f
 80088e4:	08008907 	.word	0x08008907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e8:	f7fc fe94 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80088ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088ee:	e014      	b.n	800891a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088f0:	f7fc fea6 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 80088f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088f6:	e010      	b.n	800891a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008964 <UART_SetConfig+0x5c0>)
 80088fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088fc:	e00d      	b.n	800891a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fe:	f7fc fe1b 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 8008902:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008904:	e009      	b.n	800891a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800890a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800890c:	e005      	b.n	800891a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008918:	bf00      	nop
    }

    if (pclk != 0U)
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	2b00      	cmp	r3, #0
 800891e:	d028      	beq.n	8008972 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008924:	4a10      	ldr	r2, [pc, #64]	@ (8008968 <UART_SetConfig+0x5c4>)
 8008926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800892a:	461a      	mov	r2, r3
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	085b      	lsrs	r3, r3, #1
 8008938:	441a      	add	r2, r3
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008942:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	2b0f      	cmp	r3, #15
 8008948:	d910      	bls.n	800896c <UART_SetConfig+0x5c8>
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008950:	d20c      	bcs.n	800896c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	b29a      	uxth	r2, r3
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60da      	str	r2, [r3, #12]
 800895c:	e009      	b.n	8008972 <UART_SetConfig+0x5ce>
 800895e:	bf00      	nop
 8008960:	40008000 	.word	0x40008000
 8008964:	00f42400 	.word	0x00f42400
 8008968:	0800e60c 	.word	0x0800e60c
      }
      else
      {
        ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2201      	movs	r2, #1
 8008976:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2201      	movs	r2, #1
 800897e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2200      	movs	r2, #0
 8008986:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2200      	movs	r2, #0
 800898c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800898e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008992:	4618      	mov	r0, r3
 8008994:	3730      	adds	r7, #48	@ 0x30
 8008996:	46bd      	mov	sp, r7
 8008998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800899c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00a      	beq.n	80089c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00a      	beq.n	8008a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00a      	beq.n	8008a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a9a:	d10a      	bne.n	8008ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b098      	sub	sp, #96	@ 0x60
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008af0:	f7f9 fe9a 	bl	8002828 <HAL_GetTick>
 8008af4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d12f      	bne.n	8008b64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f88e 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d022      	beq.n	8008b64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e063      	b.n	8008c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d149      	bne.n	8008c06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f857 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d03c      	beq.n	8008c06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	623b      	str	r3, [r7, #32]
   return(result);
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008baa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e6      	bne.n	8008b8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bde:	61fa      	str	r2, [r7, #28]
 8008be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	69b9      	ldr	r1, [r7, #24]
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	617b      	str	r3, [r7, #20]
   return(result);
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e5      	bne.n	8008bbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e012      	b.n	8008c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3758      	adds	r7, #88	@ 0x58
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	4613      	mov	r3, r2
 8008c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c44:	e04f      	b.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d04b      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4e:	f7f9 fdeb 	bl	8002828 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d302      	bcc.n	8008c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e04e      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d037      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b80      	cmp	r3, #128	@ 0x80
 8008c7a:	d034      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b40      	cmp	r3, #64	@ 0x40
 8008c80:	d031      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d110      	bne.n	8008cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2208      	movs	r2, #8
 8008c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f95b 	bl	8008f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e029      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc0:	d111      	bne.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f941 	bl	8008f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e00f      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69da      	ldr	r2, [r3, #28]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d0a0      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b0a3      	sub	sp, #140	@ 0x8c
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	88fa      	ldrh	r2, [r7, #6]
 8008d28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	88fa      	ldrh	r2, [r7, #6]
 8008d30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d42:	d10e      	bne.n	8008d62 <UART_Start_Receive_IT+0x52>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d105      	bne.n	8008d58 <UART_Start_Receive_IT+0x48>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008d52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d56:	e02d      	b.n	8008db4 <UART_Start_Receive_IT+0xa4>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	22ff      	movs	r2, #255	@ 0xff
 8008d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d60:	e028      	b.n	8008db4 <UART_Start_Receive_IT+0xa4>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <UART_Start_Receive_IT+0x76>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d104      	bne.n	8008d7c <UART_Start_Receive_IT+0x6c>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	22ff      	movs	r2, #255	@ 0xff
 8008d76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d7a:	e01b      	b.n	8008db4 <UART_Start_Receive_IT+0xa4>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	227f      	movs	r2, #127	@ 0x7f
 8008d80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d84:	e016      	b.n	8008db4 <UART_Start_Receive_IT+0xa4>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d8e:	d10d      	bne.n	8008dac <UART_Start_Receive_IT+0x9c>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d104      	bne.n	8008da2 <UART_Start_Receive_IT+0x92>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	227f      	movs	r2, #127	@ 0x7f
 8008d9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008da0:	e008      	b.n	8008db4 <UART_Start_Receive_IT+0xa4>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	223f      	movs	r2, #63	@ 0x3f
 8008da6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008daa:	e003      	b.n	8008db4 <UART_Start_Receive_IT+0xa4>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2222      	movs	r2, #34	@ 0x22
 8008dc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3308      	adds	r3, #8
 8008dca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dd6:	f043 0301 	orr.w	r3, r3, #1
 8008dda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008de8:	673a      	str	r2, [r7, #112]	@ 0x70
 8008dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008dee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008df0:	e841 2300 	strex	r3, r2, [r1]
 8008df4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1e3      	bne.n	8008dc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e04:	d14f      	bne.n	8008ea6 <UART_Start_Receive_IT+0x196>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d349      	bcc.n	8008ea6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e1a:	d107      	bne.n	8008e2c <UART_Start_Receive_IT+0x11c>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d103      	bne.n	8008e2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4a47      	ldr	r2, [pc, #284]	@ (8008f44 <UART_Start_Receive_IT+0x234>)
 8008e28:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e2a:	e002      	b.n	8008e32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4a46      	ldr	r2, [pc, #280]	@ (8008f48 <UART_Start_Receive_IT+0x238>)
 8008e30:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d01a      	beq.n	8008e70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e5e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e4      	bne.n	8008e3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008e90:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e5      	bne.n	8008e70 <UART_Start_Receive_IT+0x160>
 8008ea4:	e046      	b.n	8008f34 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eae:	d107      	bne.n	8008ec0 <UART_Start_Receive_IT+0x1b0>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a24      	ldr	r2, [pc, #144]	@ (8008f4c <UART_Start_Receive_IT+0x23c>)
 8008ebc:	675a      	str	r2, [r3, #116]	@ 0x74
 8008ebe:	e002      	b.n	8008ec6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4a23      	ldr	r2, [pc, #140]	@ (8008f50 <UART_Start_Receive_IT+0x240>)
 8008ec4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d019      	beq.n	8008f02 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008ee2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e6      	bne.n	8008ece <UART_Start_Receive_IT+0x1be>
 8008f00:	e018      	b.n	8008f34 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f043 0320 	orr.w	r3, r3, #32
 8008f16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f20:	623b      	str	r3, [r7, #32]
 8008f22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	69f9      	ldr	r1, [r7, #28]
 8008f26:	6a3a      	ldr	r2, [r7, #32]
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e6      	bne.n	8008f02 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	378c      	adds	r7, #140	@ 0x8c
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	08009771 	.word	0x08009771
 8008f48:	0800940d 	.word	0x0800940d
 8008f4c:	08009255 	.word	0x08009255
 8008f50:	0800909d 	.word	0x0800909d

08008f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b095      	sub	sp, #84	@ 0x54
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e6      	bne.n	8008f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3308      	adds	r3, #8
 8008f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fa4:	f023 0301 	bic.w	r3, r3, #1
 8008fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e3      	bne.n	8008f8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d118      	bne.n	8009000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	e853 3f00 	ldrex	r3, [r3]
 8008fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f023 0310 	bic.w	r3, r3, #16
 8008fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	6979      	ldr	r1, [r7, #20]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e6      	bne.n	8008fce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009014:	bf00      	nop
 8009016:	3754      	adds	r7, #84	@ 0x54
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff f99e 	bl	8008378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800903c:	bf00      	nop
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	60bb      	str	r3, [r7, #8]
   return(result);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009060:	61fb      	str	r3, [r7, #28]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6979      	ldr	r1, [r7, #20]
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	613b      	str	r3, [r7, #16]
   return(result);
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e6      	bne.n	800904c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff f969 	bl	8008364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009092:	bf00      	nop
 8009094:	3720      	adds	r7, #32
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b09c      	sub	sp, #112	@ 0x70
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090b4:	2b22      	cmp	r3, #34	@ 0x22
 80090b6:	f040 80be 	bne.w	8009236 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80090c8:	b2d9      	uxtb	r1, r3
 80090ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d4:	400a      	ands	r2, r1
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f040 80a1 	bne.w	8009246 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009122:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009124:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009128:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e6      	bne.n	8009104 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3308      	adds	r3, #8
 800913c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009148:	f023 0301 	bic.w	r3, r3, #1
 800914c:	667b      	str	r3, [r7, #100]	@ 0x64
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3308      	adds	r3, #8
 8009154:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009156:	647a      	str	r2, [r7, #68]	@ 0x44
 8009158:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800915c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e5      	bne.n	8009136 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a33      	ldr	r2, [pc, #204]	@ (8009250 <UART_RxISR_8BIT+0x1b4>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d01f      	beq.n	80091c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d018      	beq.n	80091c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	623b      	str	r3, [r7, #32]
   return(result);
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80091b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e6      	bne.n	8009196 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d12e      	bne.n	800922e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0310 	bic.w	r3, r3, #16
 80091ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091f4:	61fb      	str	r3, [r7, #28]
 80091f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	69b9      	ldr	r1, [r7, #24]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	617b      	str	r3, [r7, #20]
   return(result);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	f003 0310 	and.w	r3, r3, #16
 8009212:	2b10      	cmp	r3, #16
 8009214:	d103      	bne.n	800921e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2210      	movs	r2, #16
 800921c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff f8b0 	bl	800838c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800922c:	e00b      	b.n	8009246 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f9 fa56 	bl	80026e0 <HAL_UART_RxCpltCallback>
}
 8009234:	e007      	b.n	8009246 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0208 	orr.w	r2, r2, #8
 8009244:	619a      	str	r2, [r3, #24]
}
 8009246:	bf00      	nop
 8009248:	3770      	adds	r7, #112	@ 0x70
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	40008000 	.word	0x40008000

08009254 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b09c      	sub	sp, #112	@ 0x70
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009262:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800926c:	2b22      	cmp	r3, #34	@ 0x22
 800926e:	f040 80be 	bne.w	80093ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009280:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009282:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009286:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800928a:	4013      	ands	r3, r2
 800928c:	b29a      	uxth	r2, r3
 800928e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009290:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009296:	1c9a      	adds	r2, r3, #2
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	3b01      	subs	r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f040 80a1 	bne.w	80093fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80092ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092da:	657b      	str	r3, [r7, #84]	@ 0x54
 80092dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80092e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e6      	bne.n	80092bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	f023 0301 	bic.w	r3, r3, #1
 8009304:	663b      	str	r3, [r7, #96]	@ 0x60
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800930e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009310:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e5      	bne.n	80092ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a33      	ldr	r2, [pc, #204]	@ (8009408 <UART_RxISR_16BIT+0x1b4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d01f      	beq.n	8009380 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d018      	beq.n	8009380 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	61fb      	str	r3, [r7, #28]
   return(result);
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009362:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800936c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800936e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e6      	bne.n	800934e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009384:	2b01      	cmp	r3, #1
 8009386:	d12e      	bne.n	80093e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	e853 3f00 	ldrex	r3, [r3]
 800939a:	60bb      	str	r3, [r7, #8]
   return(result);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f023 0310 	bic.w	r3, r3, #16
 80093a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093ac:	61bb      	str	r3, [r7, #24]
 80093ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	6979      	ldr	r1, [r7, #20]
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	613b      	str	r3, [r7, #16]
   return(result);
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e6      	bne.n	800938e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f003 0310 	and.w	r3, r3, #16
 80093ca:	2b10      	cmp	r3, #16
 80093cc:	d103      	bne.n	80093d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2210      	movs	r2, #16
 80093d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7fe ffd4 	bl	800838c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093e4:	e00b      	b.n	80093fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7f9 f97a 	bl	80026e0 <HAL_UART_RxCpltCallback>
}
 80093ec:	e007      	b.n	80093fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	699a      	ldr	r2, [r3, #24]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f042 0208 	orr.w	r2, r2, #8
 80093fc:	619a      	str	r2, [r3, #24]
}
 80093fe:	bf00      	nop
 8009400:	3770      	adds	r7, #112	@ 0x70
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40008000 	.word	0x40008000

0800940c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b0ac      	sub	sp, #176	@ 0xb0
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800941a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009442:	2b22      	cmp	r3, #34	@ 0x22
 8009444:	f040 8183 	bne.w	800974e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800944e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009452:	e126      	b.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800945e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009462:	b2d9      	uxtb	r1, r3
 8009464:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009468:	b2da      	uxtb	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800946e:	400a      	ands	r2, r1
 8009470:	b2d2      	uxtb	r2, r2
 8009472:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009484:	b29b      	uxth	r3, r3
 8009486:	3b01      	subs	r3, #1
 8009488:	b29a      	uxth	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800949a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d053      	beq.n	800954e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d011      	beq.n	80094d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80094b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00b      	beq.n	80094d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2201      	movs	r2, #1
 80094c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094cc:	f043 0201 	orr.w	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094da:	f003 0302 	and.w	r3, r3, #2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d011      	beq.n	8009506 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80094e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2202      	movs	r2, #2
 80094f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094fc:	f043 0204 	orr.w	r2, r3, #4
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d011      	beq.n	8009536 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2204      	movs	r2, #4
 8009524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952c:	f043 0202 	orr.w	r2, r3, #2
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800953c:	2b00      	cmp	r3, #0
 800953e:	d006      	beq.n	800954e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7fe ff19 	bl	8008378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	f040 80a3 	bne.w	80096a2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800956a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800956c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800957e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009580:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009584:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800958c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e4      	bne.n	800955c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80095a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095a8:	f023 0301 	bic.w	r3, r3, #1
 80095ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3308      	adds	r3, #8
 80095b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095ba:	66ba      	str	r2, [r7, #104]	@ 0x68
 80095bc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80095c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80095c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e1      	bne.n	8009592 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a60      	ldr	r2, [pc, #384]	@ (8009768 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d021      	beq.n	8009630 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d01a      	beq.n	8009630 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009602:	e853 3f00 	ldrex	r3, [r3]
 8009606:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800960a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800960e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800961c:	657b      	str	r3, [r7, #84]	@ 0x54
 800961e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009620:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009622:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009624:	e841 2300 	strex	r3, r2, [r1]
 8009628:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800962a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e4      	bne.n	80095fa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d130      	bne.n	800969a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	f023 0310 	bic.w	r3, r3, #16
 8009652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009660:	643b      	str	r3, [r7, #64]	@ 0x40
 8009662:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e4      	bne.n	800963e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	f003 0310 	and.w	r3, r3, #16
 800967e:	2b10      	cmp	r3, #16
 8009680:	d103      	bne.n	800968a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2210      	movs	r2, #16
 8009688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fe fe7a 	bl	800838c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009698:	e00e      	b.n	80096b8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7f9 f820 	bl	80026e0 <HAL_UART_RxCpltCallback>
        break;
 80096a0:	e00a      	b.n	80096b8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096a2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d006      	beq.n	80096b8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80096aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f47f aece 	bne.w	8009454 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096be:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d049      	beq.n	800975e <UART_RxISR_8BIT_FIFOEN+0x352>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80096d0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d242      	bcs.n	800975e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3308      	adds	r3, #8
 80096de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80096fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e3      	bne.n	80096d8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a16      	ldr	r2, [pc, #88]	@ (800976c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009714:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	60bb      	str	r3, [r7, #8]
   return(result);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f043 0320 	orr.w	r3, r3, #32
 800972a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009738:	61bb      	str	r3, [r7, #24]
 800973a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6979      	ldr	r1, [r7, #20]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	613b      	str	r3, [r7, #16]
   return(result);
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e4      	bne.n	8009716 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800974c:	e007      	b.n	800975e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	699a      	ldr	r2, [r3, #24]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0208 	orr.w	r2, r2, #8
 800975c:	619a      	str	r2, [r3, #24]
}
 800975e:	bf00      	nop
 8009760:	37b0      	adds	r7, #176	@ 0xb0
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40008000 	.word	0x40008000
 800976c:	0800909d 	.word	0x0800909d

08009770 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b0ae      	sub	sp, #184	@ 0xb8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800977e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097a6:	2b22      	cmp	r3, #34	@ 0x22
 80097a8:	f040 8187 	bne.w	8009aba <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097b6:	e12a      	b.n	8009a0e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097be:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80097ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80097ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80097d2:	4013      	ands	r3, r2
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e0:	1c9a      	adds	r2, r3, #2
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	3b01      	subs	r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b00      	cmp	r3, #0
 800980c:	d053      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800980e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d011      	beq.n	800983e <UART_RxISR_16BIT_FIFOEN+0xce>
 800981a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800981e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2201      	movs	r2, #1
 800982c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009834:	f043 0201 	orr.w	r2, r3, #1
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800983e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d011      	beq.n	800986e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800984a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00b      	beq.n	800986e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2202      	movs	r2, #2
 800985c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009864:	f043 0204 	orr.w	r2, r3, #4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800986e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800987a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2204      	movs	r2, #4
 800988c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009894:	f043 0202 	orr.w	r2, r3, #2
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d006      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7fe fd65 	bl	8008378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f040 80a5 	bne.w	8009a0e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80098f2:	e841 2300 	strex	r3, r2, [r1]
 80098f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80098f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1e2      	bne.n	80098c4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3308      	adds	r3, #8
 8009904:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800990e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3308      	adds	r3, #8
 8009922:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009926:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009928:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800992c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e1      	bne.n	80098fe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a60      	ldr	r2, [pc, #384]	@ (8009ad4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d021      	beq.n	800999c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d01a      	beq.n	800999c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009976:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800997a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009988:	65bb      	str	r3, [r7, #88]	@ 0x58
 800998a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800998e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e4      	bne.n	8009966 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d130      	bne.n	8009a06 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ba:	f023 0310 	bic.w	r3, r3, #16
 80099be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80099ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e4      	bne.n	80099aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	f003 0310 	and.w	r3, r3, #16
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d103      	bne.n	80099f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2210      	movs	r2, #16
 80099f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe fcc4 	bl	800838c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a04:	e00e      	b.n	8009a24 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7f8 fe6a 	bl	80026e0 <HAL_UART_RxCpltCallback>
        break;
 8009a0c:	e00a      	b.n	8009a24 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a0e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d006      	beq.n	8009a24 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009a16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a1a:	f003 0320 	and.w	r3, r3, #32
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f47f aeca 	bne.w	80097b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a2a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d049      	beq.n	8009aca <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a3c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d242      	bcs.n	8009aca <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3308      	adds	r3, #8
 8009a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	e853 3f00 	ldrex	r3, [r3]
 8009a52:	623b      	str	r3, [r7, #32]
   return(result);
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3308      	adds	r3, #8
 8009a64:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009a68:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a70:	e841 2300 	strex	r3, r2, [r1]
 8009a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e3      	bne.n	8009a44 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a16      	ldr	r2, [pc, #88]	@ (8009ad8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009a80:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	e853 3f00 	ldrex	r3, [r3]
 8009a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f043 0320 	orr.w	r3, r3, #32
 8009a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009aa4:	61fb      	str	r3, [r7, #28]
 8009aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	69b9      	ldr	r1, [r7, #24]
 8009aaa:	69fa      	ldr	r2, [r7, #28]
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e4      	bne.n	8009a82 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ab8:	e007      	b.n	8009aca <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	699a      	ldr	r2, [r3, #24]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f042 0208 	orr.w	r2, r2, #8
 8009ac8:	619a      	str	r2, [r3, #24]
}
 8009aca:	bf00      	nop
 8009acc:	37b8      	adds	r7, #184	@ 0xb8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40008000 	.word	0x40008000
 8009ad8:	08009255 	.word	0x08009255

08009adc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_UARTEx_DisableFifoMode+0x16>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e027      	b.n	8009b7e <HAL_UARTEx_DisableFifoMode+0x66>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2224      	movs	r2, #36	@ 0x24
 8009b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d101      	bne.n	8009ba2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e02d      	b.n	8009bfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2224      	movs	r2, #36	@ 0x24
 8009bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 0201 	bic.w	r2, r2, #1
 8009bc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f850 	bl	8009c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e02d      	b.n	8009c7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2224      	movs	r2, #36	@ 0x24
 8009c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f022 0201 	bic.w	r2, r2, #1
 8009c44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f812 	bl	8009c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d108      	bne.n	8009ca6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ca4:	e031      	b.n	8009d0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009caa:	2308      	movs	r3, #8
 8009cac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	0e5b      	lsrs	r3, r3, #25
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	0f5b      	lsrs	r3, r3, #29
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	7b3a      	ldrb	r2, [r7, #12]
 8009cd2:	4911      	ldr	r1, [pc, #68]	@ (8009d18 <UARTEx_SetNbDataToProcess+0x94>)
 8009cd4:	5c8a      	ldrb	r2, [r1, r2]
 8009cd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cda:	7b3a      	ldrb	r2, [r7, #12]
 8009cdc:	490f      	ldr	r1, [pc, #60]	@ (8009d1c <UARTEx_SetNbDataToProcess+0x98>)
 8009cde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	7b7a      	ldrb	r2, [r7, #13]
 8009cf0:	4909      	ldr	r1, [pc, #36]	@ (8009d18 <UARTEx_SetNbDataToProcess+0x94>)
 8009cf2:	5c8a      	ldrb	r2, [r1, r2]
 8009cf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cf8:	7b7a      	ldrb	r2, [r7, #13]
 8009cfa:	4908      	ldr	r1, [pc, #32]	@ (8009d1c <UARTEx_SetNbDataToProcess+0x98>)
 8009cfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	0800e624 	.word	0x0800e624
 8009d1c:	0800e62c 	.word	0x0800e62c

08009d20 <atoi>:
 8009d20:	220a      	movs	r2, #10
 8009d22:	2100      	movs	r1, #0
 8009d24:	f000 b87c 	b.w	8009e20 <strtol>

08009d28 <_strtol_l.constprop.0>:
 8009d28:	2b24      	cmp	r3, #36	@ 0x24
 8009d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2e:	4686      	mov	lr, r0
 8009d30:	4690      	mov	r8, r2
 8009d32:	d801      	bhi.n	8009d38 <_strtol_l.constprop.0+0x10>
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d106      	bne.n	8009d46 <_strtol_l.constprop.0+0x1e>
 8009d38:	f001 f902 	bl	800af40 <__errno>
 8009d3c:	2316      	movs	r3, #22
 8009d3e:	6003      	str	r3, [r0, #0]
 8009d40:	2000      	movs	r0, #0
 8009d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d46:	4834      	ldr	r0, [pc, #208]	@ (8009e18 <_strtol_l.constprop.0+0xf0>)
 8009d48:	460d      	mov	r5, r1
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d50:	5d06      	ldrb	r6, [r0, r4]
 8009d52:	f016 0608 	ands.w	r6, r6, #8
 8009d56:	d1f8      	bne.n	8009d4a <_strtol_l.constprop.0+0x22>
 8009d58:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d5a:	d12d      	bne.n	8009db8 <_strtol_l.constprop.0+0x90>
 8009d5c:	782c      	ldrb	r4, [r5, #0]
 8009d5e:	2601      	movs	r6, #1
 8009d60:	1c95      	adds	r5, r2, #2
 8009d62:	f033 0210 	bics.w	r2, r3, #16
 8009d66:	d109      	bne.n	8009d7c <_strtol_l.constprop.0+0x54>
 8009d68:	2c30      	cmp	r4, #48	@ 0x30
 8009d6a:	d12a      	bne.n	8009dc2 <_strtol_l.constprop.0+0x9a>
 8009d6c:	782a      	ldrb	r2, [r5, #0]
 8009d6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d72:	2a58      	cmp	r2, #88	@ 0x58
 8009d74:	d125      	bne.n	8009dc2 <_strtol_l.constprop.0+0x9a>
 8009d76:	786c      	ldrb	r4, [r5, #1]
 8009d78:	2310      	movs	r3, #16
 8009d7a:	3502      	adds	r5, #2
 8009d7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d80:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d84:	2200      	movs	r2, #0
 8009d86:	fbbc f9f3 	udiv	r9, ip, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d94:	2f09      	cmp	r7, #9
 8009d96:	d81b      	bhi.n	8009dd0 <_strtol_l.constprop.0+0xa8>
 8009d98:	463c      	mov	r4, r7
 8009d9a:	42a3      	cmp	r3, r4
 8009d9c:	dd27      	ble.n	8009dee <_strtol_l.constprop.0+0xc6>
 8009d9e:	1c57      	adds	r7, r2, #1
 8009da0:	d007      	beq.n	8009db2 <_strtol_l.constprop.0+0x8a>
 8009da2:	4581      	cmp	r9, r0
 8009da4:	d320      	bcc.n	8009de8 <_strtol_l.constprop.0+0xc0>
 8009da6:	d101      	bne.n	8009dac <_strtol_l.constprop.0+0x84>
 8009da8:	45a2      	cmp	sl, r4
 8009daa:	db1d      	blt.n	8009de8 <_strtol_l.constprop.0+0xc0>
 8009dac:	fb00 4003 	mla	r0, r0, r3, r4
 8009db0:	2201      	movs	r2, #1
 8009db2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009db6:	e7eb      	b.n	8009d90 <_strtol_l.constprop.0+0x68>
 8009db8:	2c2b      	cmp	r4, #43	@ 0x2b
 8009dba:	bf04      	itt	eq
 8009dbc:	782c      	ldrbeq	r4, [r5, #0]
 8009dbe:	1c95      	addeq	r5, r2, #2
 8009dc0:	e7cf      	b.n	8009d62 <_strtol_l.constprop.0+0x3a>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1da      	bne.n	8009d7c <_strtol_l.constprop.0+0x54>
 8009dc6:	2c30      	cmp	r4, #48	@ 0x30
 8009dc8:	bf0c      	ite	eq
 8009dca:	2308      	moveq	r3, #8
 8009dcc:	230a      	movne	r3, #10
 8009dce:	e7d5      	b.n	8009d7c <_strtol_l.constprop.0+0x54>
 8009dd0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009dd4:	2f19      	cmp	r7, #25
 8009dd6:	d801      	bhi.n	8009ddc <_strtol_l.constprop.0+0xb4>
 8009dd8:	3c37      	subs	r4, #55	@ 0x37
 8009dda:	e7de      	b.n	8009d9a <_strtol_l.constprop.0+0x72>
 8009ddc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009de0:	2f19      	cmp	r7, #25
 8009de2:	d804      	bhi.n	8009dee <_strtol_l.constprop.0+0xc6>
 8009de4:	3c57      	subs	r4, #87	@ 0x57
 8009de6:	e7d8      	b.n	8009d9a <_strtol_l.constprop.0+0x72>
 8009de8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dec:	e7e1      	b.n	8009db2 <_strtol_l.constprop.0+0x8a>
 8009dee:	1c53      	adds	r3, r2, #1
 8009df0:	d108      	bne.n	8009e04 <_strtol_l.constprop.0+0xdc>
 8009df2:	2322      	movs	r3, #34	@ 0x22
 8009df4:	f8ce 3000 	str.w	r3, [lr]
 8009df8:	4660      	mov	r0, ip
 8009dfa:	f1b8 0f00 	cmp.w	r8, #0
 8009dfe:	d0a0      	beq.n	8009d42 <_strtol_l.constprop.0+0x1a>
 8009e00:	1e69      	subs	r1, r5, #1
 8009e02:	e006      	b.n	8009e12 <_strtol_l.constprop.0+0xea>
 8009e04:	b106      	cbz	r6, 8009e08 <_strtol_l.constprop.0+0xe0>
 8009e06:	4240      	negs	r0, r0
 8009e08:	f1b8 0f00 	cmp.w	r8, #0
 8009e0c:	d099      	beq.n	8009d42 <_strtol_l.constprop.0+0x1a>
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	d1f6      	bne.n	8009e00 <_strtol_l.constprop.0+0xd8>
 8009e12:	f8c8 1000 	str.w	r1, [r8]
 8009e16:	e794      	b.n	8009d42 <_strtol_l.constprop.0+0x1a>
 8009e18:	0800e635 	.word	0x0800e635

08009e1c <_strtol_r>:
 8009e1c:	f7ff bf84 	b.w	8009d28 <_strtol_l.constprop.0>

08009e20 <strtol>:
 8009e20:	4613      	mov	r3, r2
 8009e22:	460a      	mov	r2, r1
 8009e24:	4601      	mov	r1, r0
 8009e26:	4802      	ldr	r0, [pc, #8]	@ (8009e30 <strtol+0x10>)
 8009e28:	6800      	ldr	r0, [r0, #0]
 8009e2a:	f7ff bf7d 	b.w	8009d28 <_strtol_l.constprop.0>
 8009e2e:	bf00      	nop
 8009e30:	200000e8 	.word	0x200000e8

08009e34 <__cvt>:
 8009e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	ec57 6b10 	vmov	r6, r7, d0
 8009e3c:	2f00      	cmp	r7, #0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	4619      	mov	r1, r3
 8009e42:	463b      	mov	r3, r7
 8009e44:	bfbb      	ittet	lt
 8009e46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e4a:	461f      	movlt	r7, r3
 8009e4c:	2300      	movge	r3, #0
 8009e4e:	232d      	movlt	r3, #45	@ 0x2d
 8009e50:	700b      	strb	r3, [r1, #0]
 8009e52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e58:	4691      	mov	r9, r2
 8009e5a:	f023 0820 	bic.w	r8, r3, #32
 8009e5e:	bfbc      	itt	lt
 8009e60:	4632      	movlt	r2, r6
 8009e62:	4616      	movlt	r6, r2
 8009e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e68:	d005      	beq.n	8009e76 <__cvt+0x42>
 8009e6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e6e:	d100      	bne.n	8009e72 <__cvt+0x3e>
 8009e70:	3401      	adds	r4, #1
 8009e72:	2102      	movs	r1, #2
 8009e74:	e000      	b.n	8009e78 <__cvt+0x44>
 8009e76:	2103      	movs	r1, #3
 8009e78:	ab03      	add	r3, sp, #12
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	ab02      	add	r3, sp, #8
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	ec47 6b10 	vmov	d0, r6, r7
 8009e84:	4653      	mov	r3, sl
 8009e86:	4622      	mov	r2, r4
 8009e88:	f001 f936 	bl	800b0f8 <_dtoa_r>
 8009e8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e90:	4605      	mov	r5, r0
 8009e92:	d119      	bne.n	8009ec8 <__cvt+0x94>
 8009e94:	f019 0f01 	tst.w	r9, #1
 8009e98:	d00e      	beq.n	8009eb8 <__cvt+0x84>
 8009e9a:	eb00 0904 	add.w	r9, r0, r4
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	f7f6 fe47 	bl	8000b38 <__aeabi_dcmpeq>
 8009eaa:	b108      	cbz	r0, 8009eb0 <__cvt+0x7c>
 8009eac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009eb0:	2230      	movs	r2, #48	@ 0x30
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	454b      	cmp	r3, r9
 8009eb6:	d31e      	bcc.n	8009ef6 <__cvt+0xc2>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ebc:	1b5b      	subs	r3, r3, r5
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	b004      	add	sp, #16
 8009ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ecc:	eb00 0904 	add.w	r9, r0, r4
 8009ed0:	d1e5      	bne.n	8009e9e <__cvt+0x6a>
 8009ed2:	7803      	ldrb	r3, [r0, #0]
 8009ed4:	2b30      	cmp	r3, #48	@ 0x30
 8009ed6:	d10a      	bne.n	8009eee <__cvt+0xba>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2300      	movs	r3, #0
 8009edc:	4630      	mov	r0, r6
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 fe2a 	bl	8000b38 <__aeabi_dcmpeq>
 8009ee4:	b918      	cbnz	r0, 8009eee <__cvt+0xba>
 8009ee6:	f1c4 0401 	rsb	r4, r4, #1
 8009eea:	f8ca 4000 	str.w	r4, [sl]
 8009eee:	f8da 3000 	ldr.w	r3, [sl]
 8009ef2:	4499      	add	r9, r3
 8009ef4:	e7d3      	b.n	8009e9e <__cvt+0x6a>
 8009ef6:	1c59      	adds	r1, r3, #1
 8009ef8:	9103      	str	r1, [sp, #12]
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e7d9      	b.n	8009eb2 <__cvt+0x7e>

08009efe <__exponent>:
 8009efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f00:	2900      	cmp	r1, #0
 8009f02:	bfba      	itte	lt
 8009f04:	4249      	neglt	r1, r1
 8009f06:	232d      	movlt	r3, #45	@ 0x2d
 8009f08:	232b      	movge	r3, #43	@ 0x2b
 8009f0a:	2909      	cmp	r1, #9
 8009f0c:	7002      	strb	r2, [r0, #0]
 8009f0e:	7043      	strb	r3, [r0, #1]
 8009f10:	dd29      	ble.n	8009f66 <__exponent+0x68>
 8009f12:	f10d 0307 	add.w	r3, sp, #7
 8009f16:	461d      	mov	r5, r3
 8009f18:	270a      	movs	r7, #10
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f20:	fb07 1416 	mls	r4, r7, r6, r1
 8009f24:	3430      	adds	r4, #48	@ 0x30
 8009f26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	2c63      	cmp	r4, #99	@ 0x63
 8009f2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f32:	4631      	mov	r1, r6
 8009f34:	dcf1      	bgt.n	8009f1a <__exponent+0x1c>
 8009f36:	3130      	adds	r1, #48	@ 0x30
 8009f38:	1e94      	subs	r4, r2, #2
 8009f3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f3e:	1c41      	adds	r1, r0, #1
 8009f40:	4623      	mov	r3, r4
 8009f42:	42ab      	cmp	r3, r5
 8009f44:	d30a      	bcc.n	8009f5c <__exponent+0x5e>
 8009f46:	f10d 0309 	add.w	r3, sp, #9
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	42ac      	cmp	r4, r5
 8009f4e:	bf88      	it	hi
 8009f50:	2300      	movhi	r3, #0
 8009f52:	3302      	adds	r3, #2
 8009f54:	4403      	add	r3, r0
 8009f56:	1a18      	subs	r0, r3, r0
 8009f58:	b003      	add	sp, #12
 8009f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f64:	e7ed      	b.n	8009f42 <__exponent+0x44>
 8009f66:	2330      	movs	r3, #48	@ 0x30
 8009f68:	3130      	adds	r1, #48	@ 0x30
 8009f6a:	7083      	strb	r3, [r0, #2]
 8009f6c:	70c1      	strb	r1, [r0, #3]
 8009f6e:	1d03      	adds	r3, r0, #4
 8009f70:	e7f1      	b.n	8009f56 <__exponent+0x58>
	...

08009f74 <_printf_float>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	b08d      	sub	sp, #52	@ 0x34
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f80:	4616      	mov	r6, r2
 8009f82:	461f      	mov	r7, r3
 8009f84:	4605      	mov	r5, r0
 8009f86:	f000 ff91 	bl	800aeac <_localeconv_r>
 8009f8a:	6803      	ldr	r3, [r0, #0]
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7f6 f9a6 	bl	80002e0 <strlen>
 8009f94:	2300      	movs	r3, #0
 8009f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f98:	f8d8 3000 	ldr.w	r3, [r8]
 8009f9c:	9005      	str	r0, [sp, #20]
 8009f9e:	3307      	adds	r3, #7
 8009fa0:	f023 0307 	bic.w	r3, r3, #7
 8009fa4:	f103 0208 	add.w	r2, r3, #8
 8009fa8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009fac:	f8d4 b000 	ldr.w	fp, [r4]
 8009fb0:	f8c8 2000 	str.w	r2, [r8]
 8009fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009fbc:	9307      	str	r3, [sp, #28]
 8009fbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fca:	4b9c      	ldr	r3, [pc, #624]	@ (800a23c <_printf_float+0x2c8>)
 8009fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd0:	f7f6 fde4 	bl	8000b9c <__aeabi_dcmpun>
 8009fd4:	bb70      	cbnz	r0, 800a034 <_printf_float+0xc0>
 8009fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fda:	4b98      	ldr	r3, [pc, #608]	@ (800a23c <_printf_float+0x2c8>)
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	f7f6 fdbe 	bl	8000b60 <__aeabi_dcmple>
 8009fe4:	bb30      	cbnz	r0, 800a034 <_printf_float+0xc0>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4640      	mov	r0, r8
 8009fec:	4649      	mov	r1, r9
 8009fee:	f7f6 fdad 	bl	8000b4c <__aeabi_dcmplt>
 8009ff2:	b110      	cbz	r0, 8009ffa <_printf_float+0x86>
 8009ff4:	232d      	movs	r3, #45	@ 0x2d
 8009ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ffa:	4a91      	ldr	r2, [pc, #580]	@ (800a240 <_printf_float+0x2cc>)
 8009ffc:	4b91      	ldr	r3, [pc, #580]	@ (800a244 <_printf_float+0x2d0>)
 8009ffe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a002:	bf94      	ite	ls
 800a004:	4690      	movls	r8, r2
 800a006:	4698      	movhi	r8, r3
 800a008:	2303      	movs	r3, #3
 800a00a:	6123      	str	r3, [r4, #16]
 800a00c:	f02b 0304 	bic.w	r3, fp, #4
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	f04f 0900 	mov.w	r9, #0
 800a016:	9700      	str	r7, [sp, #0]
 800a018:	4633      	mov	r3, r6
 800a01a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f9d2 	bl	800a3c8 <_printf_common>
 800a024:	3001      	adds	r0, #1
 800a026:	f040 808d 	bne.w	800a144 <_printf_float+0x1d0>
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295
 800a02e:	b00d      	add	sp, #52	@ 0x34
 800a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a034:	4642      	mov	r2, r8
 800a036:	464b      	mov	r3, r9
 800a038:	4640      	mov	r0, r8
 800a03a:	4649      	mov	r1, r9
 800a03c:	f7f6 fdae 	bl	8000b9c <__aeabi_dcmpun>
 800a040:	b140      	cbz	r0, 800a054 <_printf_float+0xe0>
 800a042:	464b      	mov	r3, r9
 800a044:	2b00      	cmp	r3, #0
 800a046:	bfbc      	itt	lt
 800a048:	232d      	movlt	r3, #45	@ 0x2d
 800a04a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a04e:	4a7e      	ldr	r2, [pc, #504]	@ (800a248 <_printf_float+0x2d4>)
 800a050:	4b7e      	ldr	r3, [pc, #504]	@ (800a24c <_printf_float+0x2d8>)
 800a052:	e7d4      	b.n	8009ffe <_printf_float+0x8a>
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a05a:	9206      	str	r2, [sp, #24]
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	d13b      	bne.n	800a0d8 <_printf_float+0x164>
 800a060:	2306      	movs	r3, #6
 800a062:	6063      	str	r3, [r4, #4]
 800a064:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a068:	2300      	movs	r3, #0
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	9303      	str	r3, [sp, #12]
 800a06e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a070:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a074:	ab09      	add	r3, sp, #36	@ 0x24
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	6861      	ldr	r1, [r4, #4]
 800a07a:	ec49 8b10 	vmov	d0, r8, r9
 800a07e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a082:	4628      	mov	r0, r5
 800a084:	f7ff fed6 	bl	8009e34 <__cvt>
 800a088:	9b06      	ldr	r3, [sp, #24]
 800a08a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a08c:	2b47      	cmp	r3, #71	@ 0x47
 800a08e:	4680      	mov	r8, r0
 800a090:	d129      	bne.n	800a0e6 <_printf_float+0x172>
 800a092:	1cc8      	adds	r0, r1, #3
 800a094:	db02      	blt.n	800a09c <_printf_float+0x128>
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	4299      	cmp	r1, r3
 800a09a:	dd41      	ble.n	800a120 <_printf_float+0x1ac>
 800a09c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0a0:	fa5f fa8a 	uxtb.w	sl, sl
 800a0a4:	3901      	subs	r1, #1
 800a0a6:	4652      	mov	r2, sl
 800a0a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0ae:	f7ff ff26 	bl	8009efe <__exponent>
 800a0b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0b4:	1813      	adds	r3, r2, r0
 800a0b6:	2a01      	cmp	r2, #1
 800a0b8:	4681      	mov	r9, r0
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	dc02      	bgt.n	800a0c4 <_printf_float+0x150>
 800a0be:	6822      	ldr	r2, [r4, #0]
 800a0c0:	07d2      	lsls	r2, r2, #31
 800a0c2:	d501      	bpl.n	800a0c8 <_printf_float+0x154>
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	6123      	str	r3, [r4, #16]
 800a0c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0a2      	beq.n	800a016 <_printf_float+0xa2>
 800a0d0:	232d      	movs	r3, #45	@ 0x2d
 800a0d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0d6:	e79e      	b.n	800a016 <_printf_float+0xa2>
 800a0d8:	9a06      	ldr	r2, [sp, #24]
 800a0da:	2a47      	cmp	r2, #71	@ 0x47
 800a0dc:	d1c2      	bne.n	800a064 <_printf_float+0xf0>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1c0      	bne.n	800a064 <_printf_float+0xf0>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e7bd      	b.n	800a062 <_printf_float+0xee>
 800a0e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0ea:	d9db      	bls.n	800a0a4 <_printf_float+0x130>
 800a0ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a0f0:	d118      	bne.n	800a124 <_printf_float+0x1b0>
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	6863      	ldr	r3, [r4, #4]
 800a0f6:	dd0b      	ble.n	800a110 <_printf_float+0x19c>
 800a0f8:	6121      	str	r1, [r4, #16]
 800a0fa:	b913      	cbnz	r3, 800a102 <_printf_float+0x18e>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	07d0      	lsls	r0, r2, #31
 800a100:	d502      	bpl.n	800a108 <_printf_float+0x194>
 800a102:	3301      	adds	r3, #1
 800a104:	440b      	add	r3, r1
 800a106:	6123      	str	r3, [r4, #16]
 800a108:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a10a:	f04f 0900 	mov.w	r9, #0
 800a10e:	e7db      	b.n	800a0c8 <_printf_float+0x154>
 800a110:	b913      	cbnz	r3, 800a118 <_printf_float+0x1a4>
 800a112:	6822      	ldr	r2, [r4, #0]
 800a114:	07d2      	lsls	r2, r2, #31
 800a116:	d501      	bpl.n	800a11c <_printf_float+0x1a8>
 800a118:	3302      	adds	r3, #2
 800a11a:	e7f4      	b.n	800a106 <_printf_float+0x192>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e7f2      	b.n	800a106 <_printf_float+0x192>
 800a120:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a126:	4299      	cmp	r1, r3
 800a128:	db05      	blt.n	800a136 <_printf_float+0x1c2>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	6121      	str	r1, [r4, #16]
 800a12e:	07d8      	lsls	r0, r3, #31
 800a130:	d5ea      	bpl.n	800a108 <_printf_float+0x194>
 800a132:	1c4b      	adds	r3, r1, #1
 800a134:	e7e7      	b.n	800a106 <_printf_float+0x192>
 800a136:	2900      	cmp	r1, #0
 800a138:	bfd4      	ite	le
 800a13a:	f1c1 0202 	rsble	r2, r1, #2
 800a13e:	2201      	movgt	r2, #1
 800a140:	4413      	add	r3, r2
 800a142:	e7e0      	b.n	800a106 <_printf_float+0x192>
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	055a      	lsls	r2, r3, #21
 800a148:	d407      	bmi.n	800a15a <_printf_float+0x1e6>
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	4642      	mov	r2, r8
 800a14e:	4631      	mov	r1, r6
 800a150:	4628      	mov	r0, r5
 800a152:	47b8      	blx	r7
 800a154:	3001      	adds	r0, #1
 800a156:	d12b      	bne.n	800a1b0 <_printf_float+0x23c>
 800a158:	e767      	b.n	800a02a <_printf_float+0xb6>
 800a15a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a15e:	f240 80dd 	bls.w	800a31c <_printf_float+0x3a8>
 800a162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a166:	2200      	movs	r2, #0
 800a168:	2300      	movs	r3, #0
 800a16a:	f7f6 fce5 	bl	8000b38 <__aeabi_dcmpeq>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d033      	beq.n	800a1da <_printf_float+0x266>
 800a172:	4a37      	ldr	r2, [pc, #220]	@ (800a250 <_printf_float+0x2dc>)
 800a174:	2301      	movs	r3, #1
 800a176:	4631      	mov	r1, r6
 800a178:	4628      	mov	r0, r5
 800a17a:	47b8      	blx	r7
 800a17c:	3001      	adds	r0, #1
 800a17e:	f43f af54 	beq.w	800a02a <_printf_float+0xb6>
 800a182:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a186:	4543      	cmp	r3, r8
 800a188:	db02      	blt.n	800a190 <_printf_float+0x21c>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	07d8      	lsls	r0, r3, #31
 800a18e:	d50f      	bpl.n	800a1b0 <_printf_float+0x23c>
 800a190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	f43f af45 	beq.w	800a02a <_printf_float+0xb6>
 800a1a0:	f04f 0900 	mov.w	r9, #0
 800a1a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1a8:	f104 0a1a 	add.w	sl, r4, #26
 800a1ac:	45c8      	cmp	r8, r9
 800a1ae:	dc09      	bgt.n	800a1c4 <_printf_float+0x250>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	079b      	lsls	r3, r3, #30
 800a1b4:	f100 8103 	bmi.w	800a3be <_printf_float+0x44a>
 800a1b8:	68e0      	ldr	r0, [r4, #12]
 800a1ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1bc:	4298      	cmp	r0, r3
 800a1be:	bfb8      	it	lt
 800a1c0:	4618      	movlt	r0, r3
 800a1c2:	e734      	b.n	800a02e <_printf_float+0xba>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4652      	mov	r2, sl
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f af2b 	beq.w	800a02a <_printf_float+0xb6>
 800a1d4:	f109 0901 	add.w	r9, r9, #1
 800a1d8:	e7e8      	b.n	800a1ac <_printf_float+0x238>
 800a1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dc39      	bgt.n	800a254 <_printf_float+0x2e0>
 800a1e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a250 <_printf_float+0x2dc>)
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f43f af1d 	beq.w	800a02a <_printf_float+0xb6>
 800a1f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a1f4:	ea59 0303 	orrs.w	r3, r9, r3
 800a1f8:	d102      	bne.n	800a200 <_printf_float+0x28c>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	07d9      	lsls	r1, r3, #31
 800a1fe:	d5d7      	bpl.n	800a1b0 <_printf_float+0x23c>
 800a200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	47b8      	blx	r7
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f af0d 	beq.w	800a02a <_printf_float+0xb6>
 800a210:	f04f 0a00 	mov.w	sl, #0
 800a214:	f104 0b1a 	add.w	fp, r4, #26
 800a218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21a:	425b      	negs	r3, r3
 800a21c:	4553      	cmp	r3, sl
 800a21e:	dc01      	bgt.n	800a224 <_printf_float+0x2b0>
 800a220:	464b      	mov	r3, r9
 800a222:	e793      	b.n	800a14c <_printf_float+0x1d8>
 800a224:	2301      	movs	r3, #1
 800a226:	465a      	mov	r2, fp
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	f43f aefb 	beq.w	800a02a <_printf_float+0xb6>
 800a234:	f10a 0a01 	add.w	sl, sl, #1
 800a238:	e7ee      	b.n	800a218 <_printf_float+0x2a4>
 800a23a:	bf00      	nop
 800a23c:	7fefffff 	.word	0x7fefffff
 800a240:	0800e735 	.word	0x0800e735
 800a244:	0800e739 	.word	0x0800e739
 800a248:	0800e73d 	.word	0x0800e73d
 800a24c:	0800e741 	.word	0x0800e741
 800a250:	0800e745 	.word	0x0800e745
 800a254:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a256:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a25a:	4553      	cmp	r3, sl
 800a25c:	bfa8      	it	ge
 800a25e:	4653      	movge	r3, sl
 800a260:	2b00      	cmp	r3, #0
 800a262:	4699      	mov	r9, r3
 800a264:	dc36      	bgt.n	800a2d4 <_printf_float+0x360>
 800a266:	f04f 0b00 	mov.w	fp, #0
 800a26a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a26e:	f104 021a 	add.w	r2, r4, #26
 800a272:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a274:	9306      	str	r3, [sp, #24]
 800a276:	eba3 0309 	sub.w	r3, r3, r9
 800a27a:	455b      	cmp	r3, fp
 800a27c:	dc31      	bgt.n	800a2e2 <_printf_float+0x36e>
 800a27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a280:	459a      	cmp	sl, r3
 800a282:	dc3a      	bgt.n	800a2fa <_printf_float+0x386>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	07da      	lsls	r2, r3, #31
 800a288:	d437      	bmi.n	800a2fa <_printf_float+0x386>
 800a28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28c:	ebaa 0903 	sub.w	r9, sl, r3
 800a290:	9b06      	ldr	r3, [sp, #24]
 800a292:	ebaa 0303 	sub.w	r3, sl, r3
 800a296:	4599      	cmp	r9, r3
 800a298:	bfa8      	it	ge
 800a29a:	4699      	movge	r9, r3
 800a29c:	f1b9 0f00 	cmp.w	r9, #0
 800a2a0:	dc33      	bgt.n	800a30a <_printf_float+0x396>
 800a2a2:	f04f 0800 	mov.w	r8, #0
 800a2a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2aa:	f104 0b1a 	add.w	fp, r4, #26
 800a2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b0:	ebaa 0303 	sub.w	r3, sl, r3
 800a2b4:	eba3 0309 	sub.w	r3, r3, r9
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	f77f af79 	ble.w	800a1b0 <_printf_float+0x23c>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	465a      	mov	r2, fp
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	47b8      	blx	r7
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	f43f aeae 	beq.w	800a02a <_printf_float+0xb6>
 800a2ce:	f108 0801 	add.w	r8, r8, #1
 800a2d2:	e7ec      	b.n	800a2ae <_printf_float+0x33a>
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d1c2      	bne.n	800a266 <_printf_float+0x2f2>
 800a2e0:	e6a3      	b.n	800a02a <_printf_float+0xb6>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	9206      	str	r2, [sp, #24]
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f ae9c 	beq.w	800a02a <_printf_float+0xb6>
 800a2f2:	9a06      	ldr	r2, [sp, #24]
 800a2f4:	f10b 0b01 	add.w	fp, fp, #1
 800a2f8:	e7bb      	b.n	800a272 <_printf_float+0x2fe>
 800a2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fe:	4631      	mov	r1, r6
 800a300:	4628      	mov	r0, r5
 800a302:	47b8      	blx	r7
 800a304:	3001      	adds	r0, #1
 800a306:	d1c0      	bne.n	800a28a <_printf_float+0x316>
 800a308:	e68f      	b.n	800a02a <_printf_float+0xb6>
 800a30a:	9a06      	ldr	r2, [sp, #24]
 800a30c:	464b      	mov	r3, r9
 800a30e:	4442      	add	r2, r8
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	d1c3      	bne.n	800a2a2 <_printf_float+0x32e>
 800a31a:	e686      	b.n	800a02a <_printf_float+0xb6>
 800a31c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a320:	f1ba 0f01 	cmp.w	sl, #1
 800a324:	dc01      	bgt.n	800a32a <_printf_float+0x3b6>
 800a326:	07db      	lsls	r3, r3, #31
 800a328:	d536      	bpl.n	800a398 <_printf_float+0x424>
 800a32a:	2301      	movs	r3, #1
 800a32c:	4642      	mov	r2, r8
 800a32e:	4631      	mov	r1, r6
 800a330:	4628      	mov	r0, r5
 800a332:	47b8      	blx	r7
 800a334:	3001      	adds	r0, #1
 800a336:	f43f ae78 	beq.w	800a02a <_printf_float+0xb6>
 800a33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	47b8      	blx	r7
 800a344:	3001      	adds	r0, #1
 800a346:	f43f ae70 	beq.w	800a02a <_printf_float+0xb6>
 800a34a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a34e:	2200      	movs	r2, #0
 800a350:	2300      	movs	r3, #0
 800a352:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a356:	f7f6 fbef 	bl	8000b38 <__aeabi_dcmpeq>
 800a35a:	b9c0      	cbnz	r0, 800a38e <_printf_float+0x41a>
 800a35c:	4653      	mov	r3, sl
 800a35e:	f108 0201 	add.w	r2, r8, #1
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	d10c      	bne.n	800a386 <_printf_float+0x412>
 800a36c:	e65d      	b.n	800a02a <_printf_float+0xb6>
 800a36e:	2301      	movs	r3, #1
 800a370:	465a      	mov	r2, fp
 800a372:	4631      	mov	r1, r6
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	f43f ae56 	beq.w	800a02a <_printf_float+0xb6>
 800a37e:	f108 0801 	add.w	r8, r8, #1
 800a382:	45d0      	cmp	r8, sl
 800a384:	dbf3      	blt.n	800a36e <_printf_float+0x3fa>
 800a386:	464b      	mov	r3, r9
 800a388:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a38c:	e6df      	b.n	800a14e <_printf_float+0x1da>
 800a38e:	f04f 0800 	mov.w	r8, #0
 800a392:	f104 0b1a 	add.w	fp, r4, #26
 800a396:	e7f4      	b.n	800a382 <_printf_float+0x40e>
 800a398:	2301      	movs	r3, #1
 800a39a:	4642      	mov	r2, r8
 800a39c:	e7e1      	b.n	800a362 <_printf_float+0x3ee>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	464a      	mov	r2, r9
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b8      	blx	r7
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	f43f ae3e 	beq.w	800a02a <_printf_float+0xb6>
 800a3ae:	f108 0801 	add.w	r8, r8, #1
 800a3b2:	68e3      	ldr	r3, [r4, #12]
 800a3b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3b6:	1a5b      	subs	r3, r3, r1
 800a3b8:	4543      	cmp	r3, r8
 800a3ba:	dcf0      	bgt.n	800a39e <_printf_float+0x42a>
 800a3bc:	e6fc      	b.n	800a1b8 <_printf_float+0x244>
 800a3be:	f04f 0800 	mov.w	r8, #0
 800a3c2:	f104 0919 	add.w	r9, r4, #25
 800a3c6:	e7f4      	b.n	800a3b2 <_printf_float+0x43e>

0800a3c8 <_printf_common>:
 800a3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	4698      	mov	r8, r3
 800a3d0:	688a      	ldr	r2, [r1, #8]
 800a3d2:	690b      	ldr	r3, [r1, #16]
 800a3d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	bfb8      	it	lt
 800a3dc:	4613      	movlt	r3, r2
 800a3de:	6033      	str	r3, [r6, #0]
 800a3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	b10a      	cbz	r2, 800a3ee <_printf_common+0x26>
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	6033      	str	r3, [r6, #0]
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	0699      	lsls	r1, r3, #26
 800a3f2:	bf42      	ittt	mi
 800a3f4:	6833      	ldrmi	r3, [r6, #0]
 800a3f6:	3302      	addmi	r3, #2
 800a3f8:	6033      	strmi	r3, [r6, #0]
 800a3fa:	6825      	ldr	r5, [r4, #0]
 800a3fc:	f015 0506 	ands.w	r5, r5, #6
 800a400:	d106      	bne.n	800a410 <_printf_common+0x48>
 800a402:	f104 0a19 	add.w	sl, r4, #25
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	6832      	ldr	r2, [r6, #0]
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dc26      	bgt.n	800a45e <_printf_common+0x96>
 800a410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a414:	6822      	ldr	r2, [r4, #0]
 800a416:	3b00      	subs	r3, #0
 800a418:	bf18      	it	ne
 800a41a:	2301      	movne	r3, #1
 800a41c:	0692      	lsls	r2, r2, #26
 800a41e:	d42b      	bmi.n	800a478 <_printf_common+0xb0>
 800a420:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a424:	4641      	mov	r1, r8
 800a426:	4638      	mov	r0, r7
 800a428:	47c8      	blx	r9
 800a42a:	3001      	adds	r0, #1
 800a42c:	d01e      	beq.n	800a46c <_printf_common+0xa4>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	6922      	ldr	r2, [r4, #16]
 800a432:	f003 0306 	and.w	r3, r3, #6
 800a436:	2b04      	cmp	r3, #4
 800a438:	bf02      	ittt	eq
 800a43a:	68e5      	ldreq	r5, [r4, #12]
 800a43c:	6833      	ldreq	r3, [r6, #0]
 800a43e:	1aed      	subeq	r5, r5, r3
 800a440:	68a3      	ldr	r3, [r4, #8]
 800a442:	bf0c      	ite	eq
 800a444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a448:	2500      	movne	r5, #0
 800a44a:	4293      	cmp	r3, r2
 800a44c:	bfc4      	itt	gt
 800a44e:	1a9b      	subgt	r3, r3, r2
 800a450:	18ed      	addgt	r5, r5, r3
 800a452:	2600      	movs	r6, #0
 800a454:	341a      	adds	r4, #26
 800a456:	42b5      	cmp	r5, r6
 800a458:	d11a      	bne.n	800a490 <_printf_common+0xc8>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e008      	b.n	800a470 <_printf_common+0xa8>
 800a45e:	2301      	movs	r3, #1
 800a460:	4652      	mov	r2, sl
 800a462:	4641      	mov	r1, r8
 800a464:	4638      	mov	r0, r7
 800a466:	47c8      	blx	r9
 800a468:	3001      	adds	r0, #1
 800a46a:	d103      	bne.n	800a474 <_printf_common+0xac>
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a474:	3501      	adds	r5, #1
 800a476:	e7c6      	b.n	800a406 <_printf_common+0x3e>
 800a478:	18e1      	adds	r1, r4, r3
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	2030      	movs	r0, #48	@ 0x30
 800a47e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a482:	4422      	add	r2, r4
 800a484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a48c:	3302      	adds	r3, #2
 800a48e:	e7c7      	b.n	800a420 <_printf_common+0x58>
 800a490:	2301      	movs	r3, #1
 800a492:	4622      	mov	r2, r4
 800a494:	4641      	mov	r1, r8
 800a496:	4638      	mov	r0, r7
 800a498:	47c8      	blx	r9
 800a49a:	3001      	adds	r0, #1
 800a49c:	d0e6      	beq.n	800a46c <_printf_common+0xa4>
 800a49e:	3601      	adds	r6, #1
 800a4a0:	e7d9      	b.n	800a456 <_printf_common+0x8e>
	...

0800a4a4 <_printf_i>:
 800a4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	7e0f      	ldrb	r7, [r1, #24]
 800a4aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4ac:	2f78      	cmp	r7, #120	@ 0x78
 800a4ae:	4691      	mov	r9, r2
 800a4b0:	4680      	mov	r8, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	469a      	mov	sl, r3
 800a4b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ba:	d807      	bhi.n	800a4cc <_printf_i+0x28>
 800a4bc:	2f62      	cmp	r7, #98	@ 0x62
 800a4be:	d80a      	bhi.n	800a4d6 <_printf_i+0x32>
 800a4c0:	2f00      	cmp	r7, #0
 800a4c2:	f000 80d2 	beq.w	800a66a <_printf_i+0x1c6>
 800a4c6:	2f58      	cmp	r7, #88	@ 0x58
 800a4c8:	f000 80b9 	beq.w	800a63e <_printf_i+0x19a>
 800a4cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4d4:	e03a      	b.n	800a54c <_printf_i+0xa8>
 800a4d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4da:	2b15      	cmp	r3, #21
 800a4dc:	d8f6      	bhi.n	800a4cc <_printf_i+0x28>
 800a4de:	a101      	add	r1, pc, #4	@ (adr r1, 800a4e4 <_printf_i+0x40>)
 800a4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4e4:	0800a53d 	.word	0x0800a53d
 800a4e8:	0800a551 	.word	0x0800a551
 800a4ec:	0800a4cd 	.word	0x0800a4cd
 800a4f0:	0800a4cd 	.word	0x0800a4cd
 800a4f4:	0800a4cd 	.word	0x0800a4cd
 800a4f8:	0800a4cd 	.word	0x0800a4cd
 800a4fc:	0800a551 	.word	0x0800a551
 800a500:	0800a4cd 	.word	0x0800a4cd
 800a504:	0800a4cd 	.word	0x0800a4cd
 800a508:	0800a4cd 	.word	0x0800a4cd
 800a50c:	0800a4cd 	.word	0x0800a4cd
 800a510:	0800a651 	.word	0x0800a651
 800a514:	0800a57b 	.word	0x0800a57b
 800a518:	0800a60b 	.word	0x0800a60b
 800a51c:	0800a4cd 	.word	0x0800a4cd
 800a520:	0800a4cd 	.word	0x0800a4cd
 800a524:	0800a673 	.word	0x0800a673
 800a528:	0800a4cd 	.word	0x0800a4cd
 800a52c:	0800a57b 	.word	0x0800a57b
 800a530:	0800a4cd 	.word	0x0800a4cd
 800a534:	0800a4cd 	.word	0x0800a4cd
 800a538:	0800a613 	.word	0x0800a613
 800a53c:	6833      	ldr	r3, [r6, #0]
 800a53e:	1d1a      	adds	r2, r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6032      	str	r2, [r6, #0]
 800a544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a54c:	2301      	movs	r3, #1
 800a54e:	e09d      	b.n	800a68c <_printf_i+0x1e8>
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	6820      	ldr	r0, [r4, #0]
 800a554:	1d19      	adds	r1, r3, #4
 800a556:	6031      	str	r1, [r6, #0]
 800a558:	0606      	lsls	r6, r0, #24
 800a55a:	d501      	bpl.n	800a560 <_printf_i+0xbc>
 800a55c:	681d      	ldr	r5, [r3, #0]
 800a55e:	e003      	b.n	800a568 <_printf_i+0xc4>
 800a560:	0645      	lsls	r5, r0, #25
 800a562:	d5fb      	bpl.n	800a55c <_printf_i+0xb8>
 800a564:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a568:	2d00      	cmp	r5, #0
 800a56a:	da03      	bge.n	800a574 <_printf_i+0xd0>
 800a56c:	232d      	movs	r3, #45	@ 0x2d
 800a56e:	426d      	negs	r5, r5
 800a570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a574:	4859      	ldr	r0, [pc, #356]	@ (800a6dc <_printf_i+0x238>)
 800a576:	230a      	movs	r3, #10
 800a578:	e011      	b.n	800a59e <_printf_i+0xfa>
 800a57a:	6821      	ldr	r1, [r4, #0]
 800a57c:	6833      	ldr	r3, [r6, #0]
 800a57e:	0608      	lsls	r0, r1, #24
 800a580:	f853 5b04 	ldr.w	r5, [r3], #4
 800a584:	d402      	bmi.n	800a58c <_printf_i+0xe8>
 800a586:	0649      	lsls	r1, r1, #25
 800a588:	bf48      	it	mi
 800a58a:	b2ad      	uxthmi	r5, r5
 800a58c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a58e:	4853      	ldr	r0, [pc, #332]	@ (800a6dc <_printf_i+0x238>)
 800a590:	6033      	str	r3, [r6, #0]
 800a592:	bf14      	ite	ne
 800a594:	230a      	movne	r3, #10
 800a596:	2308      	moveq	r3, #8
 800a598:	2100      	movs	r1, #0
 800a59a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a59e:	6866      	ldr	r6, [r4, #4]
 800a5a0:	60a6      	str	r6, [r4, #8]
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	bfa2      	ittt	ge
 800a5a6:	6821      	ldrge	r1, [r4, #0]
 800a5a8:	f021 0104 	bicge.w	r1, r1, #4
 800a5ac:	6021      	strge	r1, [r4, #0]
 800a5ae:	b90d      	cbnz	r5, 800a5b4 <_printf_i+0x110>
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	d04b      	beq.n	800a64c <_printf_i+0x1a8>
 800a5b4:	4616      	mov	r6, r2
 800a5b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a5be:	5dc7      	ldrb	r7, [r0, r7]
 800a5c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5c4:	462f      	mov	r7, r5
 800a5c6:	42bb      	cmp	r3, r7
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	d9f4      	bls.n	800a5b6 <_printf_i+0x112>
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d10b      	bne.n	800a5e8 <_printf_i+0x144>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	07df      	lsls	r7, r3, #31
 800a5d4:	d508      	bpl.n	800a5e8 <_printf_i+0x144>
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	6861      	ldr	r1, [r4, #4]
 800a5da:	4299      	cmp	r1, r3
 800a5dc:	bfde      	ittt	le
 800a5de:	2330      	movle	r3, #48	@ 0x30
 800a5e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5e8:	1b92      	subs	r2, r2, r6
 800a5ea:	6122      	str	r2, [r4, #16]
 800a5ec:	f8cd a000 	str.w	sl, [sp]
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	aa03      	add	r2, sp, #12
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	f7ff fee6 	bl	800a3c8 <_printf_common>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d14a      	bne.n	800a696 <_printf_i+0x1f2>
 800a600:	f04f 30ff 	mov.w	r0, #4294967295
 800a604:	b004      	add	sp, #16
 800a606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	f043 0320 	orr.w	r3, r3, #32
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	4833      	ldr	r0, [pc, #204]	@ (800a6e0 <_printf_i+0x23c>)
 800a614:	2778      	movs	r7, #120	@ 0x78
 800a616:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	6831      	ldr	r1, [r6, #0]
 800a61e:	061f      	lsls	r7, r3, #24
 800a620:	f851 5b04 	ldr.w	r5, [r1], #4
 800a624:	d402      	bmi.n	800a62c <_printf_i+0x188>
 800a626:	065f      	lsls	r7, r3, #25
 800a628:	bf48      	it	mi
 800a62a:	b2ad      	uxthmi	r5, r5
 800a62c:	6031      	str	r1, [r6, #0]
 800a62e:	07d9      	lsls	r1, r3, #31
 800a630:	bf44      	itt	mi
 800a632:	f043 0320 	orrmi.w	r3, r3, #32
 800a636:	6023      	strmi	r3, [r4, #0]
 800a638:	b11d      	cbz	r5, 800a642 <_printf_i+0x19e>
 800a63a:	2310      	movs	r3, #16
 800a63c:	e7ac      	b.n	800a598 <_printf_i+0xf4>
 800a63e:	4827      	ldr	r0, [pc, #156]	@ (800a6dc <_printf_i+0x238>)
 800a640:	e7e9      	b.n	800a616 <_printf_i+0x172>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	f023 0320 	bic.w	r3, r3, #32
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	e7f6      	b.n	800a63a <_printf_i+0x196>
 800a64c:	4616      	mov	r6, r2
 800a64e:	e7bd      	b.n	800a5cc <_printf_i+0x128>
 800a650:	6833      	ldr	r3, [r6, #0]
 800a652:	6825      	ldr	r5, [r4, #0]
 800a654:	6961      	ldr	r1, [r4, #20]
 800a656:	1d18      	adds	r0, r3, #4
 800a658:	6030      	str	r0, [r6, #0]
 800a65a:	062e      	lsls	r6, r5, #24
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	d501      	bpl.n	800a664 <_printf_i+0x1c0>
 800a660:	6019      	str	r1, [r3, #0]
 800a662:	e002      	b.n	800a66a <_printf_i+0x1c6>
 800a664:	0668      	lsls	r0, r5, #25
 800a666:	d5fb      	bpl.n	800a660 <_printf_i+0x1bc>
 800a668:	8019      	strh	r1, [r3, #0]
 800a66a:	2300      	movs	r3, #0
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	4616      	mov	r6, r2
 800a670:	e7bc      	b.n	800a5ec <_printf_i+0x148>
 800a672:	6833      	ldr	r3, [r6, #0]
 800a674:	1d1a      	adds	r2, r3, #4
 800a676:	6032      	str	r2, [r6, #0]
 800a678:	681e      	ldr	r6, [r3, #0]
 800a67a:	6862      	ldr	r2, [r4, #4]
 800a67c:	2100      	movs	r1, #0
 800a67e:	4630      	mov	r0, r6
 800a680:	f7f5 fdde 	bl	8000240 <memchr>
 800a684:	b108      	cbz	r0, 800a68a <_printf_i+0x1e6>
 800a686:	1b80      	subs	r0, r0, r6
 800a688:	6060      	str	r0, [r4, #4]
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	6123      	str	r3, [r4, #16]
 800a68e:	2300      	movs	r3, #0
 800a690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a694:	e7aa      	b.n	800a5ec <_printf_i+0x148>
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	4632      	mov	r2, r6
 800a69a:	4649      	mov	r1, r9
 800a69c:	4640      	mov	r0, r8
 800a69e:	47d0      	blx	sl
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d0ad      	beq.n	800a600 <_printf_i+0x15c>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	079b      	lsls	r3, r3, #30
 800a6a8:	d413      	bmi.n	800a6d2 <_printf_i+0x22e>
 800a6aa:	68e0      	ldr	r0, [r4, #12]
 800a6ac:	9b03      	ldr	r3, [sp, #12]
 800a6ae:	4298      	cmp	r0, r3
 800a6b0:	bfb8      	it	lt
 800a6b2:	4618      	movlt	r0, r3
 800a6b4:	e7a6      	b.n	800a604 <_printf_i+0x160>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4632      	mov	r2, r6
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	4640      	mov	r0, r8
 800a6be:	47d0      	blx	sl
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d09d      	beq.n	800a600 <_printf_i+0x15c>
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	9903      	ldr	r1, [sp, #12]
 800a6ca:	1a5b      	subs	r3, r3, r1
 800a6cc:	42ab      	cmp	r3, r5
 800a6ce:	dcf2      	bgt.n	800a6b6 <_printf_i+0x212>
 800a6d0:	e7eb      	b.n	800a6aa <_printf_i+0x206>
 800a6d2:	2500      	movs	r5, #0
 800a6d4:	f104 0619 	add.w	r6, r4, #25
 800a6d8:	e7f5      	b.n	800a6c6 <_printf_i+0x222>
 800a6da:	bf00      	nop
 800a6dc:	0800e747 	.word	0x0800e747
 800a6e0:	0800e758 	.word	0x0800e758

0800a6e4 <_scanf_float>:
 800a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	b087      	sub	sp, #28
 800a6ea:	4617      	mov	r7, r2
 800a6ec:	9303      	str	r3, [sp, #12]
 800a6ee:	688b      	ldr	r3, [r1, #8]
 800a6f0:	1e5a      	subs	r2, r3, #1
 800a6f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a6f6:	bf81      	itttt	hi
 800a6f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6fc:	eb03 0b05 	addhi.w	fp, r3, r5
 800a700:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a704:	608b      	strhi	r3, [r1, #8]
 800a706:	680b      	ldr	r3, [r1, #0]
 800a708:	460a      	mov	r2, r1
 800a70a:	f04f 0500 	mov.w	r5, #0
 800a70e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a712:	f842 3b1c 	str.w	r3, [r2], #28
 800a716:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a71a:	4680      	mov	r8, r0
 800a71c:	460c      	mov	r4, r1
 800a71e:	bf98      	it	ls
 800a720:	f04f 0b00 	movls.w	fp, #0
 800a724:	9201      	str	r2, [sp, #4]
 800a726:	4616      	mov	r6, r2
 800a728:	46aa      	mov	sl, r5
 800a72a:	46a9      	mov	r9, r5
 800a72c:	9502      	str	r5, [sp, #8]
 800a72e:	68a2      	ldr	r2, [r4, #8]
 800a730:	b152      	cbz	r2, 800a748 <_scanf_float+0x64>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b4e      	cmp	r3, #78	@ 0x4e
 800a738:	d864      	bhi.n	800a804 <_scanf_float+0x120>
 800a73a:	2b40      	cmp	r3, #64	@ 0x40
 800a73c:	d83c      	bhi.n	800a7b8 <_scanf_float+0xd4>
 800a73e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a742:	b2c8      	uxtb	r0, r1
 800a744:	280e      	cmp	r0, #14
 800a746:	d93a      	bls.n	800a7be <_scanf_float+0xda>
 800a748:	f1b9 0f00 	cmp.w	r9, #0
 800a74c:	d003      	beq.n	800a756 <_scanf_float+0x72>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a75a:	f1ba 0f01 	cmp.w	sl, #1
 800a75e:	f200 8117 	bhi.w	800a990 <_scanf_float+0x2ac>
 800a762:	9b01      	ldr	r3, [sp, #4]
 800a764:	429e      	cmp	r6, r3
 800a766:	f200 8108 	bhi.w	800a97a <_scanf_float+0x296>
 800a76a:	2001      	movs	r0, #1
 800a76c:	b007      	add	sp, #28
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a776:	2a0d      	cmp	r2, #13
 800a778:	d8e6      	bhi.n	800a748 <_scanf_float+0x64>
 800a77a:	a101      	add	r1, pc, #4	@ (adr r1, 800a780 <_scanf_float+0x9c>)
 800a77c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a780:	0800a8c7 	.word	0x0800a8c7
 800a784:	0800a749 	.word	0x0800a749
 800a788:	0800a749 	.word	0x0800a749
 800a78c:	0800a749 	.word	0x0800a749
 800a790:	0800a927 	.word	0x0800a927
 800a794:	0800a8ff 	.word	0x0800a8ff
 800a798:	0800a749 	.word	0x0800a749
 800a79c:	0800a749 	.word	0x0800a749
 800a7a0:	0800a8d5 	.word	0x0800a8d5
 800a7a4:	0800a749 	.word	0x0800a749
 800a7a8:	0800a749 	.word	0x0800a749
 800a7ac:	0800a749 	.word	0x0800a749
 800a7b0:	0800a749 	.word	0x0800a749
 800a7b4:	0800a88d 	.word	0x0800a88d
 800a7b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a7bc:	e7db      	b.n	800a776 <_scanf_float+0x92>
 800a7be:	290e      	cmp	r1, #14
 800a7c0:	d8c2      	bhi.n	800a748 <_scanf_float+0x64>
 800a7c2:	a001      	add	r0, pc, #4	@ (adr r0, 800a7c8 <_scanf_float+0xe4>)
 800a7c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7c8:	0800a87d 	.word	0x0800a87d
 800a7cc:	0800a749 	.word	0x0800a749
 800a7d0:	0800a87d 	.word	0x0800a87d
 800a7d4:	0800a913 	.word	0x0800a913
 800a7d8:	0800a749 	.word	0x0800a749
 800a7dc:	0800a825 	.word	0x0800a825
 800a7e0:	0800a863 	.word	0x0800a863
 800a7e4:	0800a863 	.word	0x0800a863
 800a7e8:	0800a863 	.word	0x0800a863
 800a7ec:	0800a863 	.word	0x0800a863
 800a7f0:	0800a863 	.word	0x0800a863
 800a7f4:	0800a863 	.word	0x0800a863
 800a7f8:	0800a863 	.word	0x0800a863
 800a7fc:	0800a863 	.word	0x0800a863
 800a800:	0800a863 	.word	0x0800a863
 800a804:	2b6e      	cmp	r3, #110	@ 0x6e
 800a806:	d809      	bhi.n	800a81c <_scanf_float+0x138>
 800a808:	2b60      	cmp	r3, #96	@ 0x60
 800a80a:	d8b2      	bhi.n	800a772 <_scanf_float+0x8e>
 800a80c:	2b54      	cmp	r3, #84	@ 0x54
 800a80e:	d07b      	beq.n	800a908 <_scanf_float+0x224>
 800a810:	2b59      	cmp	r3, #89	@ 0x59
 800a812:	d199      	bne.n	800a748 <_scanf_float+0x64>
 800a814:	2d07      	cmp	r5, #7
 800a816:	d197      	bne.n	800a748 <_scanf_float+0x64>
 800a818:	2508      	movs	r5, #8
 800a81a:	e02c      	b.n	800a876 <_scanf_float+0x192>
 800a81c:	2b74      	cmp	r3, #116	@ 0x74
 800a81e:	d073      	beq.n	800a908 <_scanf_float+0x224>
 800a820:	2b79      	cmp	r3, #121	@ 0x79
 800a822:	e7f6      	b.n	800a812 <_scanf_float+0x12e>
 800a824:	6821      	ldr	r1, [r4, #0]
 800a826:	05c8      	lsls	r0, r1, #23
 800a828:	d51b      	bpl.n	800a862 <_scanf_float+0x17e>
 800a82a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a82e:	6021      	str	r1, [r4, #0]
 800a830:	f109 0901 	add.w	r9, r9, #1
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	d003      	beq.n	800a842 <_scanf_float+0x15e>
 800a83a:	3201      	adds	r2, #1
 800a83c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a840:	60a2      	str	r2, [r4, #8]
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	3b01      	subs	r3, #1
 800a846:	60a3      	str	r3, [r4, #8]
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	3301      	adds	r3, #1
 800a84c:	6123      	str	r3, [r4, #16]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3b01      	subs	r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	607b      	str	r3, [r7, #4]
 800a856:	f340 8087 	ble.w	800a968 <_scanf_float+0x284>
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	3301      	adds	r3, #1
 800a85e:	603b      	str	r3, [r7, #0]
 800a860:	e765      	b.n	800a72e <_scanf_float+0x4a>
 800a862:	eb1a 0105 	adds.w	r1, sl, r5
 800a866:	f47f af6f 	bne.w	800a748 <_scanf_float+0x64>
 800a86a:	6822      	ldr	r2, [r4, #0]
 800a86c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a870:	6022      	str	r2, [r4, #0]
 800a872:	460d      	mov	r5, r1
 800a874:	468a      	mov	sl, r1
 800a876:	f806 3b01 	strb.w	r3, [r6], #1
 800a87a:	e7e2      	b.n	800a842 <_scanf_float+0x15e>
 800a87c:	6822      	ldr	r2, [r4, #0]
 800a87e:	0610      	lsls	r0, r2, #24
 800a880:	f57f af62 	bpl.w	800a748 <_scanf_float+0x64>
 800a884:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a888:	6022      	str	r2, [r4, #0]
 800a88a:	e7f4      	b.n	800a876 <_scanf_float+0x192>
 800a88c:	f1ba 0f00 	cmp.w	sl, #0
 800a890:	d10e      	bne.n	800a8b0 <_scanf_float+0x1cc>
 800a892:	f1b9 0f00 	cmp.w	r9, #0
 800a896:	d10e      	bne.n	800a8b6 <_scanf_float+0x1d2>
 800a898:	6822      	ldr	r2, [r4, #0]
 800a89a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a89e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8a2:	d108      	bne.n	800a8b6 <_scanf_float+0x1d2>
 800a8a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8a8:	6022      	str	r2, [r4, #0]
 800a8aa:	f04f 0a01 	mov.w	sl, #1
 800a8ae:	e7e2      	b.n	800a876 <_scanf_float+0x192>
 800a8b0:	f1ba 0f02 	cmp.w	sl, #2
 800a8b4:	d055      	beq.n	800a962 <_scanf_float+0x27e>
 800a8b6:	2d01      	cmp	r5, #1
 800a8b8:	d002      	beq.n	800a8c0 <_scanf_float+0x1dc>
 800a8ba:	2d04      	cmp	r5, #4
 800a8bc:	f47f af44 	bne.w	800a748 <_scanf_float+0x64>
 800a8c0:	3501      	adds	r5, #1
 800a8c2:	b2ed      	uxtb	r5, r5
 800a8c4:	e7d7      	b.n	800a876 <_scanf_float+0x192>
 800a8c6:	f1ba 0f01 	cmp.w	sl, #1
 800a8ca:	f47f af3d 	bne.w	800a748 <_scanf_float+0x64>
 800a8ce:	f04f 0a02 	mov.w	sl, #2
 800a8d2:	e7d0      	b.n	800a876 <_scanf_float+0x192>
 800a8d4:	b97d      	cbnz	r5, 800a8f6 <_scanf_float+0x212>
 800a8d6:	f1b9 0f00 	cmp.w	r9, #0
 800a8da:	f47f af38 	bne.w	800a74e <_scanf_float+0x6a>
 800a8de:	6822      	ldr	r2, [r4, #0]
 800a8e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8e8:	f040 8108 	bne.w	800aafc <_scanf_float+0x418>
 800a8ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8f0:	6022      	str	r2, [r4, #0]
 800a8f2:	2501      	movs	r5, #1
 800a8f4:	e7bf      	b.n	800a876 <_scanf_float+0x192>
 800a8f6:	2d03      	cmp	r5, #3
 800a8f8:	d0e2      	beq.n	800a8c0 <_scanf_float+0x1dc>
 800a8fa:	2d05      	cmp	r5, #5
 800a8fc:	e7de      	b.n	800a8bc <_scanf_float+0x1d8>
 800a8fe:	2d02      	cmp	r5, #2
 800a900:	f47f af22 	bne.w	800a748 <_scanf_float+0x64>
 800a904:	2503      	movs	r5, #3
 800a906:	e7b6      	b.n	800a876 <_scanf_float+0x192>
 800a908:	2d06      	cmp	r5, #6
 800a90a:	f47f af1d 	bne.w	800a748 <_scanf_float+0x64>
 800a90e:	2507      	movs	r5, #7
 800a910:	e7b1      	b.n	800a876 <_scanf_float+0x192>
 800a912:	6822      	ldr	r2, [r4, #0]
 800a914:	0591      	lsls	r1, r2, #22
 800a916:	f57f af17 	bpl.w	800a748 <_scanf_float+0x64>
 800a91a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	f8cd 9008 	str.w	r9, [sp, #8]
 800a924:	e7a7      	b.n	800a876 <_scanf_float+0x192>
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a92c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a930:	d006      	beq.n	800a940 <_scanf_float+0x25c>
 800a932:	0550      	lsls	r0, r2, #21
 800a934:	f57f af08 	bpl.w	800a748 <_scanf_float+0x64>
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	f000 80de 	beq.w	800aafc <_scanf_float+0x418>
 800a940:	0591      	lsls	r1, r2, #22
 800a942:	bf58      	it	pl
 800a944:	9902      	ldrpl	r1, [sp, #8]
 800a946:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a94a:	bf58      	it	pl
 800a94c:	eba9 0101 	subpl.w	r1, r9, r1
 800a950:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a954:	bf58      	it	pl
 800a956:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a95a:	6022      	str	r2, [r4, #0]
 800a95c:	f04f 0900 	mov.w	r9, #0
 800a960:	e789      	b.n	800a876 <_scanf_float+0x192>
 800a962:	f04f 0a03 	mov.w	sl, #3
 800a966:	e786      	b.n	800a876 <_scanf_float+0x192>
 800a968:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a96c:	4639      	mov	r1, r7
 800a96e:	4640      	mov	r0, r8
 800a970:	4798      	blx	r3
 800a972:	2800      	cmp	r0, #0
 800a974:	f43f aedb 	beq.w	800a72e <_scanf_float+0x4a>
 800a978:	e6e6      	b.n	800a748 <_scanf_float+0x64>
 800a97a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a97e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a982:	463a      	mov	r2, r7
 800a984:	4640      	mov	r0, r8
 800a986:	4798      	blx	r3
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	6123      	str	r3, [r4, #16]
 800a98e:	e6e8      	b.n	800a762 <_scanf_float+0x7e>
 800a990:	1e6b      	subs	r3, r5, #1
 800a992:	2b06      	cmp	r3, #6
 800a994:	d824      	bhi.n	800a9e0 <_scanf_float+0x2fc>
 800a996:	2d02      	cmp	r5, #2
 800a998:	d836      	bhi.n	800aa08 <_scanf_float+0x324>
 800a99a:	9b01      	ldr	r3, [sp, #4]
 800a99c:	429e      	cmp	r6, r3
 800a99e:	f67f aee4 	bls.w	800a76a <_scanf_float+0x86>
 800a9a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9aa:	463a      	mov	r2, r7
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	4798      	blx	r3
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	6123      	str	r3, [r4, #16]
 800a9b6:	e7f0      	b.n	800a99a <_scanf_float+0x2b6>
 800a9b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a9c0:	463a      	mov	r2, r7
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	4798      	blx	r3
 800a9c6:	6923      	ldr	r3, [r4, #16]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	6123      	str	r3, [r4, #16]
 800a9cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9d0:	fa5f fa8a 	uxtb.w	sl, sl
 800a9d4:	f1ba 0f02 	cmp.w	sl, #2
 800a9d8:	d1ee      	bne.n	800a9b8 <_scanf_float+0x2d4>
 800a9da:	3d03      	subs	r5, #3
 800a9dc:	b2ed      	uxtb	r5, r5
 800a9de:	1b76      	subs	r6, r6, r5
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	05da      	lsls	r2, r3, #23
 800a9e4:	d530      	bpl.n	800aa48 <_scanf_float+0x364>
 800a9e6:	055b      	lsls	r3, r3, #21
 800a9e8:	d511      	bpl.n	800aa0e <_scanf_float+0x32a>
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	429e      	cmp	r6, r3
 800a9ee:	f67f aebc 	bls.w	800a76a <_scanf_float+0x86>
 800a9f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9fa:	463a      	mov	r2, r7
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	4798      	blx	r3
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	6123      	str	r3, [r4, #16]
 800aa06:	e7f0      	b.n	800a9ea <_scanf_float+0x306>
 800aa08:	46aa      	mov	sl, r5
 800aa0a:	46b3      	mov	fp, r6
 800aa0c:	e7de      	b.n	800a9cc <_scanf_float+0x2e8>
 800aa0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	2965      	cmp	r1, #101	@ 0x65
 800aa16:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	d00c      	beq.n	800aa3c <_scanf_float+0x358>
 800aa22:	2945      	cmp	r1, #69	@ 0x45
 800aa24:	d00a      	beq.n	800aa3c <_scanf_float+0x358>
 800aa26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa2a:	463a      	mov	r2, r7
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4798      	blx	r3
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	1eb5      	subs	r5, r6, #2
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa40:	463a      	mov	r2, r7
 800aa42:	4640      	mov	r0, r8
 800aa44:	4798      	blx	r3
 800aa46:	462e      	mov	r6, r5
 800aa48:	6822      	ldr	r2, [r4, #0]
 800aa4a:	f012 0210 	ands.w	r2, r2, #16
 800aa4e:	d001      	beq.n	800aa54 <_scanf_float+0x370>
 800aa50:	2000      	movs	r0, #0
 800aa52:	e68b      	b.n	800a76c <_scanf_float+0x88>
 800aa54:	7032      	strb	r2, [r6, #0]
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa60:	d11c      	bne.n	800aa9c <_scanf_float+0x3b8>
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	454b      	cmp	r3, r9
 800aa66:	eba3 0209 	sub.w	r2, r3, r9
 800aa6a:	d123      	bne.n	800aab4 <_scanf_float+0x3d0>
 800aa6c:	9901      	ldr	r1, [sp, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	4640      	mov	r0, r8
 800aa72:	f002 fcb9 	bl	800d3e8 <_strtod_r>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	6821      	ldr	r1, [r4, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f011 0f02 	tst.w	r1, #2
 800aa80:	ec57 6b10 	vmov	r6, r7, d0
 800aa84:	f103 0204 	add.w	r2, r3, #4
 800aa88:	d01f      	beq.n	800aaca <_scanf_float+0x3e6>
 800aa8a:	9903      	ldr	r1, [sp, #12]
 800aa8c:	600a      	str	r2, [r1, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	e9c3 6700 	strd	r6, r7, [r3]
 800aa94:	68e3      	ldr	r3, [r4, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	60e3      	str	r3, [r4, #12]
 800aa9a:	e7d9      	b.n	800aa50 <_scanf_float+0x36c>
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0e4      	beq.n	800aa6c <_scanf_float+0x388>
 800aaa2:	9905      	ldr	r1, [sp, #20]
 800aaa4:	230a      	movs	r3, #10
 800aaa6:	3101      	adds	r1, #1
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	f7ff f9b7 	bl	8009e1c <_strtol_r>
 800aaae:	9b04      	ldr	r3, [sp, #16]
 800aab0:	9e05      	ldr	r6, [sp, #20]
 800aab2:	1ac2      	subs	r2, r0, r3
 800aab4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aab8:	429e      	cmp	r6, r3
 800aaba:	bf28      	it	cs
 800aabc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aac0:	4910      	ldr	r1, [pc, #64]	@ (800ab04 <_scanf_float+0x420>)
 800aac2:	4630      	mov	r0, r6
 800aac4:	f000 f92a 	bl	800ad1c <siprintf>
 800aac8:	e7d0      	b.n	800aa6c <_scanf_float+0x388>
 800aaca:	f011 0f04 	tst.w	r1, #4
 800aace:	9903      	ldr	r1, [sp, #12]
 800aad0:	600a      	str	r2, [r1, #0]
 800aad2:	d1dc      	bne.n	800aa8e <_scanf_float+0x3aa>
 800aad4:	681d      	ldr	r5, [r3, #0]
 800aad6:	4632      	mov	r2, r6
 800aad8:	463b      	mov	r3, r7
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	f7f6 f85d 	bl	8000b9c <__aeabi_dcmpun>
 800aae2:	b128      	cbz	r0, 800aaf0 <_scanf_float+0x40c>
 800aae4:	4808      	ldr	r0, [pc, #32]	@ (800ab08 <_scanf_float+0x424>)
 800aae6:	f000 fa59 	bl	800af9c <nanf>
 800aaea:	ed85 0a00 	vstr	s0, [r5]
 800aaee:	e7d1      	b.n	800aa94 <_scanf_float+0x3b0>
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	f7f6 f8b0 	bl	8000c58 <__aeabi_d2f>
 800aaf8:	6028      	str	r0, [r5, #0]
 800aafa:	e7cb      	b.n	800aa94 <_scanf_float+0x3b0>
 800aafc:	f04f 0900 	mov.w	r9, #0
 800ab00:	e629      	b.n	800a756 <_scanf_float+0x72>
 800ab02:	bf00      	nop
 800ab04:	0800e769 	.word	0x0800e769
 800ab08:	0800e81a 	.word	0x0800e81a

0800ab0c <std>:
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	b510      	push	{r4, lr}
 800ab10:	4604      	mov	r4, r0
 800ab12:	e9c0 3300 	strd	r3, r3, [r0]
 800ab16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab1a:	6083      	str	r3, [r0, #8]
 800ab1c:	8181      	strh	r1, [r0, #12]
 800ab1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab20:	81c2      	strh	r2, [r0, #14]
 800ab22:	6183      	str	r3, [r0, #24]
 800ab24:	4619      	mov	r1, r3
 800ab26:	2208      	movs	r2, #8
 800ab28:	305c      	adds	r0, #92	@ 0x5c
 800ab2a:	f000 f95a 	bl	800ade2 <memset>
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <std+0x58>)
 800ab30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab32:	4b0d      	ldr	r3, [pc, #52]	@ (800ab68 <std+0x5c>)
 800ab34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab36:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <std+0x60>)
 800ab38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <std+0x64>)
 800ab3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab74 <std+0x68>)
 800ab40:	6224      	str	r4, [r4, #32]
 800ab42:	429c      	cmp	r4, r3
 800ab44:	d006      	beq.n	800ab54 <std+0x48>
 800ab46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab4a:	4294      	cmp	r4, r2
 800ab4c:	d002      	beq.n	800ab54 <std+0x48>
 800ab4e:	33d0      	adds	r3, #208	@ 0xd0
 800ab50:	429c      	cmp	r4, r3
 800ab52:	d105      	bne.n	800ab60 <std+0x54>
 800ab54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5c:	f000 ba1a 	b.w	800af94 <__retarget_lock_init_recursive>
 800ab60:	bd10      	pop	{r4, pc}
 800ab62:	bf00      	nop
 800ab64:	0800ad5d 	.word	0x0800ad5d
 800ab68:	0800ad7f 	.word	0x0800ad7f
 800ab6c:	0800adb7 	.word	0x0800adb7
 800ab70:	0800addb 	.word	0x0800addb
 800ab74:	200006d4 	.word	0x200006d4

0800ab78 <stdio_exit_handler>:
 800ab78:	4a02      	ldr	r2, [pc, #8]	@ (800ab84 <stdio_exit_handler+0xc>)
 800ab7a:	4903      	ldr	r1, [pc, #12]	@ (800ab88 <stdio_exit_handler+0x10>)
 800ab7c:	4803      	ldr	r0, [pc, #12]	@ (800ab8c <stdio_exit_handler+0x14>)
 800ab7e:	f000 b869 	b.w	800ac54 <_fwalk_sglue>
 800ab82:	bf00      	nop
 800ab84:	200000dc 	.word	0x200000dc
 800ab88:	0800da31 	.word	0x0800da31
 800ab8c:	200000ec 	.word	0x200000ec

0800ab90 <cleanup_stdio>:
 800ab90:	6841      	ldr	r1, [r0, #4]
 800ab92:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <cleanup_stdio+0x34>)
 800ab94:	4299      	cmp	r1, r3
 800ab96:	b510      	push	{r4, lr}
 800ab98:	4604      	mov	r4, r0
 800ab9a:	d001      	beq.n	800aba0 <cleanup_stdio+0x10>
 800ab9c:	f002 ff48 	bl	800da30 <_fflush_r>
 800aba0:	68a1      	ldr	r1, [r4, #8]
 800aba2:	4b09      	ldr	r3, [pc, #36]	@ (800abc8 <cleanup_stdio+0x38>)
 800aba4:	4299      	cmp	r1, r3
 800aba6:	d002      	beq.n	800abae <cleanup_stdio+0x1e>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f002 ff41 	bl	800da30 <_fflush_r>
 800abae:	68e1      	ldr	r1, [r4, #12]
 800abb0:	4b06      	ldr	r3, [pc, #24]	@ (800abcc <cleanup_stdio+0x3c>)
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d004      	beq.n	800abc0 <cleanup_stdio+0x30>
 800abb6:	4620      	mov	r0, r4
 800abb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abbc:	f002 bf38 	b.w	800da30 <_fflush_r>
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	bf00      	nop
 800abc4:	200006d4 	.word	0x200006d4
 800abc8:	2000073c 	.word	0x2000073c
 800abcc:	200007a4 	.word	0x200007a4

0800abd0 <global_stdio_init.part.0>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ac00 <global_stdio_init.part.0+0x30>)
 800abd4:	4c0b      	ldr	r4, [pc, #44]	@ (800ac04 <global_stdio_init.part.0+0x34>)
 800abd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ac08 <global_stdio_init.part.0+0x38>)
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	4620      	mov	r0, r4
 800abdc:	2200      	movs	r2, #0
 800abde:	2104      	movs	r1, #4
 800abe0:	f7ff ff94 	bl	800ab0c <std>
 800abe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abe8:	2201      	movs	r2, #1
 800abea:	2109      	movs	r1, #9
 800abec:	f7ff ff8e 	bl	800ab0c <std>
 800abf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abf4:	2202      	movs	r2, #2
 800abf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfa:	2112      	movs	r1, #18
 800abfc:	f7ff bf86 	b.w	800ab0c <std>
 800ac00:	2000080c 	.word	0x2000080c
 800ac04:	200006d4 	.word	0x200006d4
 800ac08:	0800ab79 	.word	0x0800ab79

0800ac0c <__sfp_lock_acquire>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	@ (800ac14 <__sfp_lock_acquire+0x8>)
 800ac0e:	f000 b9c2 	b.w	800af96 <__retarget_lock_acquire_recursive>
 800ac12:	bf00      	nop
 800ac14:	20000815 	.word	0x20000815

0800ac18 <__sfp_lock_release>:
 800ac18:	4801      	ldr	r0, [pc, #4]	@ (800ac20 <__sfp_lock_release+0x8>)
 800ac1a:	f000 b9bd 	b.w	800af98 <__retarget_lock_release_recursive>
 800ac1e:	bf00      	nop
 800ac20:	20000815 	.word	0x20000815

0800ac24 <__sinit>:
 800ac24:	b510      	push	{r4, lr}
 800ac26:	4604      	mov	r4, r0
 800ac28:	f7ff fff0 	bl	800ac0c <__sfp_lock_acquire>
 800ac2c:	6a23      	ldr	r3, [r4, #32]
 800ac2e:	b11b      	cbz	r3, 800ac38 <__sinit+0x14>
 800ac30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac34:	f7ff bff0 	b.w	800ac18 <__sfp_lock_release>
 800ac38:	4b04      	ldr	r3, [pc, #16]	@ (800ac4c <__sinit+0x28>)
 800ac3a:	6223      	str	r3, [r4, #32]
 800ac3c:	4b04      	ldr	r3, [pc, #16]	@ (800ac50 <__sinit+0x2c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1f5      	bne.n	800ac30 <__sinit+0xc>
 800ac44:	f7ff ffc4 	bl	800abd0 <global_stdio_init.part.0>
 800ac48:	e7f2      	b.n	800ac30 <__sinit+0xc>
 800ac4a:	bf00      	nop
 800ac4c:	0800ab91 	.word	0x0800ab91
 800ac50:	2000080c 	.word	0x2000080c

0800ac54 <_fwalk_sglue>:
 800ac54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac58:	4607      	mov	r7, r0
 800ac5a:	4688      	mov	r8, r1
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	2600      	movs	r6, #0
 800ac60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac64:	f1b9 0901 	subs.w	r9, r9, #1
 800ac68:	d505      	bpl.n	800ac76 <_fwalk_sglue+0x22>
 800ac6a:	6824      	ldr	r4, [r4, #0]
 800ac6c:	2c00      	cmp	r4, #0
 800ac6e:	d1f7      	bne.n	800ac60 <_fwalk_sglue+0xc>
 800ac70:	4630      	mov	r0, r6
 800ac72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d907      	bls.n	800ac8c <_fwalk_sglue+0x38>
 800ac7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac80:	3301      	adds	r3, #1
 800ac82:	d003      	beq.n	800ac8c <_fwalk_sglue+0x38>
 800ac84:	4629      	mov	r1, r5
 800ac86:	4638      	mov	r0, r7
 800ac88:	47c0      	blx	r8
 800ac8a:	4306      	orrs	r6, r0
 800ac8c:	3568      	adds	r5, #104	@ 0x68
 800ac8e:	e7e9      	b.n	800ac64 <_fwalk_sglue+0x10>

0800ac90 <iprintf>:
 800ac90:	b40f      	push	{r0, r1, r2, r3}
 800ac92:	b507      	push	{r0, r1, r2, lr}
 800ac94:	4906      	ldr	r1, [pc, #24]	@ (800acb0 <iprintf+0x20>)
 800ac96:	ab04      	add	r3, sp, #16
 800ac98:	6808      	ldr	r0, [r1, #0]
 800ac9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9e:	6881      	ldr	r1, [r0, #8]
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	f002 fd29 	bl	800d6f8 <_vfiprintf_r>
 800aca6:	b003      	add	sp, #12
 800aca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acac:	b004      	add	sp, #16
 800acae:	4770      	bx	lr
 800acb0:	200000e8 	.word	0x200000e8

0800acb4 <sniprintf>:
 800acb4:	b40c      	push	{r2, r3}
 800acb6:	b530      	push	{r4, r5, lr}
 800acb8:	4b17      	ldr	r3, [pc, #92]	@ (800ad18 <sniprintf+0x64>)
 800acba:	1e0c      	subs	r4, r1, #0
 800acbc:	681d      	ldr	r5, [r3, #0]
 800acbe:	b09d      	sub	sp, #116	@ 0x74
 800acc0:	da08      	bge.n	800acd4 <sniprintf+0x20>
 800acc2:	238b      	movs	r3, #139	@ 0x8b
 800acc4:	602b      	str	r3, [r5, #0]
 800acc6:	f04f 30ff 	mov.w	r0, #4294967295
 800acca:	b01d      	add	sp, #116	@ 0x74
 800accc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acd0:	b002      	add	sp, #8
 800acd2:	4770      	bx	lr
 800acd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800acdc:	bf14      	ite	ne
 800acde:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ace2:	4623      	moveq	r3, r4
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	9307      	str	r3, [sp, #28]
 800ace8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acec:	9002      	str	r0, [sp, #8]
 800acee:	9006      	str	r0, [sp, #24]
 800acf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800acf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800acf6:	ab21      	add	r3, sp, #132	@ 0x84
 800acf8:	a902      	add	r1, sp, #8
 800acfa:	4628      	mov	r0, r5
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	f002 fbd5 	bl	800d4ac <_svfiprintf_r>
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	bfbc      	itt	lt
 800ad06:	238b      	movlt	r3, #139	@ 0x8b
 800ad08:	602b      	strlt	r3, [r5, #0]
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d0dd      	beq.n	800acca <sniprintf+0x16>
 800ad0e:	9b02      	ldr	r3, [sp, #8]
 800ad10:	2200      	movs	r2, #0
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	e7d9      	b.n	800acca <sniprintf+0x16>
 800ad16:	bf00      	nop
 800ad18:	200000e8 	.word	0x200000e8

0800ad1c <siprintf>:
 800ad1c:	b40e      	push	{r1, r2, r3}
 800ad1e:	b500      	push	{lr}
 800ad20:	b09c      	sub	sp, #112	@ 0x70
 800ad22:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad24:	9002      	str	r0, [sp, #8]
 800ad26:	9006      	str	r0, [sp, #24]
 800ad28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad2c:	4809      	ldr	r0, [pc, #36]	@ (800ad54 <siprintf+0x38>)
 800ad2e:	9107      	str	r1, [sp, #28]
 800ad30:	9104      	str	r1, [sp, #16]
 800ad32:	4909      	ldr	r1, [pc, #36]	@ (800ad58 <siprintf+0x3c>)
 800ad34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad38:	9105      	str	r1, [sp, #20]
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	a902      	add	r1, sp, #8
 800ad40:	f002 fbb4 	bl	800d4ac <_svfiprintf_r>
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	b01c      	add	sp, #112	@ 0x70
 800ad4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad50:	b003      	add	sp, #12
 800ad52:	4770      	bx	lr
 800ad54:	200000e8 	.word	0x200000e8
 800ad58:	ffff0208 	.word	0xffff0208

0800ad5c <__sread>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	460c      	mov	r4, r1
 800ad60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad64:	f000 f8c8 	bl	800aef8 <_read_r>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	bfab      	itete	ge
 800ad6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad70:	181b      	addge	r3, r3, r0
 800ad72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad76:	bfac      	ite	ge
 800ad78:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad7a:	81a3      	strhlt	r3, [r4, #12]
 800ad7c:	bd10      	pop	{r4, pc}

0800ad7e <__swrite>:
 800ad7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad82:	461f      	mov	r7, r3
 800ad84:	898b      	ldrh	r3, [r1, #12]
 800ad86:	05db      	lsls	r3, r3, #23
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	d505      	bpl.n	800ad9c <__swrite+0x1e>
 800ad90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad94:	2302      	movs	r3, #2
 800ad96:	2200      	movs	r2, #0
 800ad98:	f000 f89c 	bl	800aed4 <_lseek_r>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	4628      	mov	r0, r5
 800adae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb2:	f000 b8b3 	b.w	800af1c <_write_r>

0800adb6 <__sseek>:
 800adb6:	b510      	push	{r4, lr}
 800adb8:	460c      	mov	r4, r1
 800adba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbe:	f000 f889 	bl	800aed4 <_lseek_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	bf15      	itete	ne
 800adc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800add2:	81a3      	strheq	r3, [r4, #12]
 800add4:	bf18      	it	ne
 800add6:	81a3      	strhne	r3, [r4, #12]
 800add8:	bd10      	pop	{r4, pc}

0800adda <__sclose>:
 800adda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adde:	f000 b869 	b.w	800aeb4 <_close_r>

0800ade2 <memset>:
 800ade2:	4402      	add	r2, r0
 800ade4:	4603      	mov	r3, r0
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d100      	bne.n	800adec <memset+0xa>
 800adea:	4770      	bx	lr
 800adec:	f803 1b01 	strb.w	r1, [r3], #1
 800adf0:	e7f9      	b.n	800ade6 <memset+0x4>
	...

0800adf4 <strtok>:
 800adf4:	4b16      	ldr	r3, [pc, #88]	@ (800ae50 <strtok+0x5c>)
 800adf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adfa:	681f      	ldr	r7, [r3, #0]
 800adfc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800adfe:	4605      	mov	r5, r0
 800ae00:	460e      	mov	r6, r1
 800ae02:	b9ec      	cbnz	r4, 800ae40 <strtok+0x4c>
 800ae04:	2050      	movs	r0, #80	@ 0x50
 800ae06:	f000 ff85 	bl	800bd14 <malloc>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ae0e:	b920      	cbnz	r0, 800ae1a <strtok+0x26>
 800ae10:	4b10      	ldr	r3, [pc, #64]	@ (800ae54 <strtok+0x60>)
 800ae12:	4811      	ldr	r0, [pc, #68]	@ (800ae58 <strtok+0x64>)
 800ae14:	215b      	movs	r1, #91	@ 0x5b
 800ae16:	f000 f8c7 	bl	800afa8 <__assert_func>
 800ae1a:	e9c0 4400 	strd	r4, r4, [r0]
 800ae1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ae22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ae26:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ae2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ae2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ae32:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ae36:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ae3a:	6184      	str	r4, [r0, #24]
 800ae3c:	7704      	strb	r4, [r0, #28]
 800ae3e:	6244      	str	r4, [r0, #36]	@ 0x24
 800ae40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae42:	4631      	mov	r1, r6
 800ae44:	4628      	mov	r0, r5
 800ae46:	2301      	movs	r3, #1
 800ae48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4c:	f000 b806 	b.w	800ae5c <__strtok_r>
 800ae50:	200000e8 	.word	0x200000e8
 800ae54:	0800e76e 	.word	0x0800e76e
 800ae58:	0800e785 	.word	0x0800e785

0800ae5c <__strtok_r>:
 800ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5e:	4604      	mov	r4, r0
 800ae60:	b908      	cbnz	r0, 800ae66 <__strtok_r+0xa>
 800ae62:	6814      	ldr	r4, [r2, #0]
 800ae64:	b144      	cbz	r4, 800ae78 <__strtok_r+0x1c>
 800ae66:	4620      	mov	r0, r4
 800ae68:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ae72:	b91e      	cbnz	r6, 800ae7c <__strtok_r+0x20>
 800ae74:	b965      	cbnz	r5, 800ae90 <__strtok_r+0x34>
 800ae76:	6015      	str	r5, [r2, #0]
 800ae78:	2000      	movs	r0, #0
 800ae7a:	e005      	b.n	800ae88 <__strtok_r+0x2c>
 800ae7c:	42b5      	cmp	r5, r6
 800ae7e:	d1f6      	bne.n	800ae6e <__strtok_r+0x12>
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f0      	bne.n	800ae66 <__strtok_r+0xa>
 800ae84:	6014      	str	r4, [r2, #0]
 800ae86:	7003      	strb	r3, [r0, #0]
 800ae88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae8a:	461c      	mov	r4, r3
 800ae8c:	e00c      	b.n	800aea8 <__strtok_r+0x4c>
 800ae8e:	b915      	cbnz	r5, 800ae96 <__strtok_r+0x3a>
 800ae90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae94:	460e      	mov	r6, r1
 800ae96:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ae9a:	42ab      	cmp	r3, r5
 800ae9c:	d1f7      	bne.n	800ae8e <__strtok_r+0x32>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0f3      	beq.n	800ae8a <__strtok_r+0x2e>
 800aea2:	2300      	movs	r3, #0
 800aea4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aea8:	6014      	str	r4, [r2, #0]
 800aeaa:	e7ed      	b.n	800ae88 <__strtok_r+0x2c>

0800aeac <_localeconv_r>:
 800aeac:	4800      	ldr	r0, [pc, #0]	@ (800aeb0 <_localeconv_r+0x4>)
 800aeae:	4770      	bx	lr
 800aeb0:	20000228 	.word	0x20000228

0800aeb4 <_close_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d06      	ldr	r5, [pc, #24]	@ (800aed0 <_close_r+0x1c>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7f6 fd4c 	bl	800195c <_close>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_close_r+0x1a>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_close_r+0x1a>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	20000810 	.word	0x20000810

0800aed4 <_lseek_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	@ (800aef4 <_lseek_r+0x20>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7f6 fd61 	bl	80019aa <_lseek>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_lseek_r+0x1e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_lseek_r+0x1e>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000810 	.word	0x20000810

0800aef8 <_read_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	@ (800af18 <_read_r+0x20>)
 800aefc:	4604      	mov	r4, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	2200      	movs	r2, #0
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f6 fcef 	bl	80018ea <_read>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_read_r+0x1e>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_read_r+0x1e>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20000810 	.word	0x20000810

0800af1c <_write_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d07      	ldr	r5, [pc, #28]	@ (800af3c <_write_r+0x20>)
 800af20:	4604      	mov	r4, r0
 800af22:	4608      	mov	r0, r1
 800af24:	4611      	mov	r1, r2
 800af26:	2200      	movs	r2, #0
 800af28:	602a      	str	r2, [r5, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f7f6 fcfa 	bl	8001924 <_write>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_write_r+0x1e>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_write_r+0x1e>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20000810 	.word	0x20000810

0800af40 <__errno>:
 800af40:	4b01      	ldr	r3, [pc, #4]	@ (800af48 <__errno+0x8>)
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	200000e8 	.word	0x200000e8

0800af4c <__libc_init_array>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	4d0d      	ldr	r5, [pc, #52]	@ (800af84 <__libc_init_array+0x38>)
 800af50:	4c0d      	ldr	r4, [pc, #52]	@ (800af88 <__libc_init_array+0x3c>)
 800af52:	1b64      	subs	r4, r4, r5
 800af54:	10a4      	asrs	r4, r4, #2
 800af56:	2600      	movs	r6, #0
 800af58:	42a6      	cmp	r6, r4
 800af5a:	d109      	bne.n	800af70 <__libc_init_array+0x24>
 800af5c:	4d0b      	ldr	r5, [pc, #44]	@ (800af8c <__libc_init_array+0x40>)
 800af5e:	4c0c      	ldr	r4, [pc, #48]	@ (800af90 <__libc_init_array+0x44>)
 800af60:	f003 faf6 	bl	800e550 <_init>
 800af64:	1b64      	subs	r4, r4, r5
 800af66:	10a4      	asrs	r4, r4, #2
 800af68:	2600      	movs	r6, #0
 800af6a:	42a6      	cmp	r6, r4
 800af6c:	d105      	bne.n	800af7a <__libc_init_array+0x2e>
 800af6e:	bd70      	pop	{r4, r5, r6, pc}
 800af70:	f855 3b04 	ldr.w	r3, [r5], #4
 800af74:	4798      	blx	r3
 800af76:	3601      	adds	r6, #1
 800af78:	e7ee      	b.n	800af58 <__libc_init_array+0xc>
 800af7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af7e:	4798      	blx	r3
 800af80:	3601      	adds	r6, #1
 800af82:	e7f2      	b.n	800af6a <__libc_init_array+0x1e>
 800af84:	0800eac4 	.word	0x0800eac4
 800af88:	0800eac4 	.word	0x0800eac4
 800af8c:	0800eac4 	.word	0x0800eac4
 800af90:	0800eac8 	.word	0x0800eac8

0800af94 <__retarget_lock_init_recursive>:
 800af94:	4770      	bx	lr

0800af96 <__retarget_lock_acquire_recursive>:
 800af96:	4770      	bx	lr

0800af98 <__retarget_lock_release_recursive>:
 800af98:	4770      	bx	lr
	...

0800af9c <nanf>:
 800af9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800afa4 <nanf+0x8>
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	7fc00000 	.word	0x7fc00000

0800afa8 <__assert_func>:
 800afa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afaa:	4614      	mov	r4, r2
 800afac:	461a      	mov	r2, r3
 800afae:	4b09      	ldr	r3, [pc, #36]	@ (800afd4 <__assert_func+0x2c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4605      	mov	r5, r0
 800afb4:	68d8      	ldr	r0, [r3, #12]
 800afb6:	b954      	cbnz	r4, 800afce <__assert_func+0x26>
 800afb8:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <__assert_func+0x30>)
 800afba:	461c      	mov	r4, r3
 800afbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afc0:	9100      	str	r1, [sp, #0]
 800afc2:	462b      	mov	r3, r5
 800afc4:	4905      	ldr	r1, [pc, #20]	@ (800afdc <__assert_func+0x34>)
 800afc6:	f002 fd5b 	bl	800da80 <fiprintf>
 800afca:	f002 fe51 	bl	800dc70 <abort>
 800afce:	4b04      	ldr	r3, [pc, #16]	@ (800afe0 <__assert_func+0x38>)
 800afd0:	e7f4      	b.n	800afbc <__assert_func+0x14>
 800afd2:	bf00      	nop
 800afd4:	200000e8 	.word	0x200000e8
 800afd8:	0800e81a 	.word	0x0800e81a
 800afdc:	0800e7ec 	.word	0x0800e7ec
 800afe0:	0800e7df 	.word	0x0800e7df

0800afe4 <quorem>:
 800afe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	6903      	ldr	r3, [r0, #16]
 800afea:	690c      	ldr	r4, [r1, #16]
 800afec:	42a3      	cmp	r3, r4
 800afee:	4607      	mov	r7, r0
 800aff0:	db7e      	blt.n	800b0f0 <quorem+0x10c>
 800aff2:	3c01      	subs	r4, #1
 800aff4:	f101 0814 	add.w	r8, r1, #20
 800aff8:	00a3      	lsls	r3, r4, #2
 800affa:	f100 0514 	add.w	r5, r0, #20
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b00a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b00e:	3301      	adds	r3, #1
 800b010:	429a      	cmp	r2, r3
 800b012:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b016:	fbb2 f6f3 	udiv	r6, r2, r3
 800b01a:	d32e      	bcc.n	800b07a <quorem+0x96>
 800b01c:	f04f 0a00 	mov.w	sl, #0
 800b020:	46c4      	mov	ip, r8
 800b022:	46ae      	mov	lr, r5
 800b024:	46d3      	mov	fp, sl
 800b026:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b02a:	b298      	uxth	r0, r3
 800b02c:	fb06 a000 	mla	r0, r6, r0, sl
 800b030:	0c02      	lsrs	r2, r0, #16
 800b032:	0c1b      	lsrs	r3, r3, #16
 800b034:	fb06 2303 	mla	r3, r6, r3, r2
 800b038:	f8de 2000 	ldr.w	r2, [lr]
 800b03c:	b280      	uxth	r0, r0
 800b03e:	b292      	uxth	r2, r2
 800b040:	1a12      	subs	r2, r2, r0
 800b042:	445a      	add	r2, fp
 800b044:	f8de 0000 	ldr.w	r0, [lr]
 800b048:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b052:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b056:	b292      	uxth	r2, r2
 800b058:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b05c:	45e1      	cmp	r9, ip
 800b05e:	f84e 2b04 	str.w	r2, [lr], #4
 800b062:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b066:	d2de      	bcs.n	800b026 <quorem+0x42>
 800b068:	9b00      	ldr	r3, [sp, #0]
 800b06a:	58eb      	ldr	r3, [r5, r3]
 800b06c:	b92b      	cbnz	r3, 800b07a <quorem+0x96>
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	3b04      	subs	r3, #4
 800b072:	429d      	cmp	r5, r3
 800b074:	461a      	mov	r2, r3
 800b076:	d32f      	bcc.n	800b0d8 <quorem+0xf4>
 800b078:	613c      	str	r4, [r7, #16]
 800b07a:	4638      	mov	r0, r7
 800b07c:	f001 f9c4 	bl	800c408 <__mcmp>
 800b080:	2800      	cmp	r0, #0
 800b082:	db25      	blt.n	800b0d0 <quorem+0xec>
 800b084:	4629      	mov	r1, r5
 800b086:	2000      	movs	r0, #0
 800b088:	f858 2b04 	ldr.w	r2, [r8], #4
 800b08c:	f8d1 c000 	ldr.w	ip, [r1]
 800b090:	fa1f fe82 	uxth.w	lr, r2
 800b094:	fa1f f38c 	uxth.w	r3, ip
 800b098:	eba3 030e 	sub.w	r3, r3, lr
 800b09c:	4403      	add	r3, r0
 800b09e:	0c12      	lsrs	r2, r2, #16
 800b0a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b0a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ae:	45c1      	cmp	r9, r8
 800b0b0:	f841 3b04 	str.w	r3, [r1], #4
 800b0b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0b8:	d2e6      	bcs.n	800b088 <quorem+0xa4>
 800b0ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0c2:	b922      	cbnz	r2, 800b0ce <quorem+0xea>
 800b0c4:	3b04      	subs	r3, #4
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	d30b      	bcc.n	800b0e4 <quorem+0x100>
 800b0cc:	613c      	str	r4, [r7, #16]
 800b0ce:	3601      	adds	r6, #1
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	b003      	add	sp, #12
 800b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d8:	6812      	ldr	r2, [r2, #0]
 800b0da:	3b04      	subs	r3, #4
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	d1cb      	bne.n	800b078 <quorem+0x94>
 800b0e0:	3c01      	subs	r4, #1
 800b0e2:	e7c6      	b.n	800b072 <quorem+0x8e>
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	3b04      	subs	r3, #4
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	d1ef      	bne.n	800b0cc <quorem+0xe8>
 800b0ec:	3c01      	subs	r4, #1
 800b0ee:	e7ea      	b.n	800b0c6 <quorem+0xe2>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	e7ee      	b.n	800b0d2 <quorem+0xee>
 800b0f4:	0000      	movs	r0, r0
	...

0800b0f8 <_dtoa_r>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	69c7      	ldr	r7, [r0, #28]
 800b0fe:	b099      	sub	sp, #100	@ 0x64
 800b100:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b104:	ec55 4b10 	vmov	r4, r5, d0
 800b108:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b10a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b10c:	4683      	mov	fp, r0
 800b10e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b110:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b112:	b97f      	cbnz	r7, 800b134 <_dtoa_r+0x3c>
 800b114:	2010      	movs	r0, #16
 800b116:	f000 fdfd 	bl	800bd14 <malloc>
 800b11a:	4602      	mov	r2, r0
 800b11c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b120:	b920      	cbnz	r0, 800b12c <_dtoa_r+0x34>
 800b122:	4ba7      	ldr	r3, [pc, #668]	@ (800b3c0 <_dtoa_r+0x2c8>)
 800b124:	21ef      	movs	r1, #239	@ 0xef
 800b126:	48a7      	ldr	r0, [pc, #668]	@ (800b3c4 <_dtoa_r+0x2cc>)
 800b128:	f7ff ff3e 	bl	800afa8 <__assert_func>
 800b12c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b130:	6007      	str	r7, [r0, #0]
 800b132:	60c7      	str	r7, [r0, #12]
 800b134:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b138:	6819      	ldr	r1, [r3, #0]
 800b13a:	b159      	cbz	r1, 800b154 <_dtoa_r+0x5c>
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	604a      	str	r2, [r1, #4]
 800b140:	2301      	movs	r3, #1
 800b142:	4093      	lsls	r3, r2
 800b144:	608b      	str	r3, [r1, #8]
 800b146:	4658      	mov	r0, fp
 800b148:	f000 feda 	bl	800bf00 <_Bfree>
 800b14c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	1e2b      	subs	r3, r5, #0
 800b156:	bfb9      	ittee	lt
 800b158:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b15c:	9303      	strlt	r3, [sp, #12]
 800b15e:	2300      	movge	r3, #0
 800b160:	6033      	strge	r3, [r6, #0]
 800b162:	9f03      	ldr	r7, [sp, #12]
 800b164:	4b98      	ldr	r3, [pc, #608]	@ (800b3c8 <_dtoa_r+0x2d0>)
 800b166:	bfbc      	itt	lt
 800b168:	2201      	movlt	r2, #1
 800b16a:	6032      	strlt	r2, [r6, #0]
 800b16c:	43bb      	bics	r3, r7
 800b16e:	d112      	bne.n	800b196 <_dtoa_r+0x9e>
 800b170:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b172:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b17c:	4323      	orrs	r3, r4
 800b17e:	f000 854d 	beq.w	800bc1c <_dtoa_r+0xb24>
 800b182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b184:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b3dc <_dtoa_r+0x2e4>
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 854f 	beq.w	800bc2c <_dtoa_r+0xb34>
 800b18e:	f10a 0303 	add.w	r3, sl, #3
 800b192:	f000 bd49 	b.w	800bc28 <_dtoa_r+0xb30>
 800b196:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b19a:	2200      	movs	r2, #0
 800b19c:	ec51 0b17 	vmov	r0, r1, d7
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b1a6:	f7f5 fcc7 	bl	8000b38 <__aeabi_dcmpeq>
 800b1aa:	4680      	mov	r8, r0
 800b1ac:	b158      	cbz	r0, 800b1c6 <_dtoa_r+0xce>
 800b1ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1b6:	b113      	cbz	r3, 800b1be <_dtoa_r+0xc6>
 800b1b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1ba:	4b84      	ldr	r3, [pc, #528]	@ (800b3cc <_dtoa_r+0x2d4>)
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b3e0 <_dtoa_r+0x2e8>
 800b1c2:	f000 bd33 	b.w	800bc2c <_dtoa_r+0xb34>
 800b1c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1ca:	aa16      	add	r2, sp, #88	@ 0x58
 800b1cc:	a917      	add	r1, sp, #92	@ 0x5c
 800b1ce:	4658      	mov	r0, fp
 800b1d0:	f001 fa3a 	bl	800c648 <__d2b>
 800b1d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b1d8:	4681      	mov	r9, r0
 800b1da:	2e00      	cmp	r6, #0
 800b1dc:	d077      	beq.n	800b2ce <_dtoa_r+0x1d6>
 800b1de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b1e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b1f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b1f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	4b74      	ldr	r3, [pc, #464]	@ (800b3d0 <_dtoa_r+0x2d8>)
 800b1fe:	f7f5 f87b 	bl	80002f8 <__aeabi_dsub>
 800b202:	a369      	add	r3, pc, #420	@ (adr r3, 800b3a8 <_dtoa_r+0x2b0>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	f7f5 fa2e 	bl	8000668 <__aeabi_dmul>
 800b20c:	a368      	add	r3, pc, #416	@ (adr r3, 800b3b0 <_dtoa_r+0x2b8>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f5 f873 	bl	80002fc <__adddf3>
 800b216:	4604      	mov	r4, r0
 800b218:	4630      	mov	r0, r6
 800b21a:	460d      	mov	r5, r1
 800b21c:	f7f5 f9ba 	bl	8000594 <__aeabi_i2d>
 800b220:	a365      	add	r3, pc, #404	@ (adr r3, 800b3b8 <_dtoa_r+0x2c0>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f7f5 fa1f 	bl	8000668 <__aeabi_dmul>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4620      	mov	r0, r4
 800b230:	4629      	mov	r1, r5
 800b232:	f7f5 f863 	bl	80002fc <__adddf3>
 800b236:	4604      	mov	r4, r0
 800b238:	460d      	mov	r5, r1
 800b23a:	f7f5 fcc5 	bl	8000bc8 <__aeabi_d2iz>
 800b23e:	2200      	movs	r2, #0
 800b240:	4607      	mov	r7, r0
 800b242:	2300      	movs	r3, #0
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 fc80 	bl	8000b4c <__aeabi_dcmplt>
 800b24c:	b140      	cbz	r0, 800b260 <_dtoa_r+0x168>
 800b24e:	4638      	mov	r0, r7
 800b250:	f7f5 f9a0 	bl	8000594 <__aeabi_i2d>
 800b254:	4622      	mov	r2, r4
 800b256:	462b      	mov	r3, r5
 800b258:	f7f5 fc6e 	bl	8000b38 <__aeabi_dcmpeq>
 800b25c:	b900      	cbnz	r0, 800b260 <_dtoa_r+0x168>
 800b25e:	3f01      	subs	r7, #1
 800b260:	2f16      	cmp	r7, #22
 800b262:	d851      	bhi.n	800b308 <_dtoa_r+0x210>
 800b264:	4b5b      	ldr	r3, [pc, #364]	@ (800b3d4 <_dtoa_r+0x2dc>)
 800b266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b272:	f7f5 fc6b 	bl	8000b4c <__aeabi_dcmplt>
 800b276:	2800      	cmp	r0, #0
 800b278:	d048      	beq.n	800b30c <_dtoa_r+0x214>
 800b27a:	3f01      	subs	r7, #1
 800b27c:	2300      	movs	r3, #0
 800b27e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b280:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b282:	1b9b      	subs	r3, r3, r6
 800b284:	1e5a      	subs	r2, r3, #1
 800b286:	bf44      	itt	mi
 800b288:	f1c3 0801 	rsbmi	r8, r3, #1
 800b28c:	2300      	movmi	r3, #0
 800b28e:	9208      	str	r2, [sp, #32]
 800b290:	bf54      	ite	pl
 800b292:	f04f 0800 	movpl.w	r8, #0
 800b296:	9308      	strmi	r3, [sp, #32]
 800b298:	2f00      	cmp	r7, #0
 800b29a:	db39      	blt.n	800b310 <_dtoa_r+0x218>
 800b29c:	9b08      	ldr	r3, [sp, #32]
 800b29e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b2a0:	443b      	add	r3, r7
 800b2a2:	9308      	str	r3, [sp, #32]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2aa:	2b09      	cmp	r3, #9
 800b2ac:	d864      	bhi.n	800b378 <_dtoa_r+0x280>
 800b2ae:	2b05      	cmp	r3, #5
 800b2b0:	bfc4      	itt	gt
 800b2b2:	3b04      	subgt	r3, #4
 800b2b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b8:	f1a3 0302 	sub.w	r3, r3, #2
 800b2bc:	bfcc      	ite	gt
 800b2be:	2400      	movgt	r4, #0
 800b2c0:	2401      	movle	r4, #1
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d863      	bhi.n	800b38e <_dtoa_r+0x296>
 800b2c6:	e8df f003 	tbb	[pc, r3]
 800b2ca:	372a      	.short	0x372a
 800b2cc:	5535      	.short	0x5535
 800b2ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b2d2:	441e      	add	r6, r3
 800b2d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b2d8:	2b20      	cmp	r3, #32
 800b2da:	bfc1      	itttt	gt
 800b2dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b2e0:	409f      	lslgt	r7, r3
 800b2e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b2e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b2ea:	bfd6      	itet	le
 800b2ec:	f1c3 0320 	rsble	r3, r3, #32
 800b2f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b2f4:	fa04 f003 	lslle.w	r0, r4, r3
 800b2f8:	f7f5 f93c 	bl	8000574 <__aeabi_ui2d>
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b302:	3e01      	subs	r6, #1
 800b304:	9214      	str	r2, [sp, #80]	@ 0x50
 800b306:	e777      	b.n	800b1f8 <_dtoa_r+0x100>
 800b308:	2301      	movs	r3, #1
 800b30a:	e7b8      	b.n	800b27e <_dtoa_r+0x186>
 800b30c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b30e:	e7b7      	b.n	800b280 <_dtoa_r+0x188>
 800b310:	427b      	negs	r3, r7
 800b312:	930a      	str	r3, [sp, #40]	@ 0x28
 800b314:	2300      	movs	r3, #0
 800b316:	eba8 0807 	sub.w	r8, r8, r7
 800b31a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b31c:	e7c4      	b.n	800b2a8 <_dtoa_r+0x1b0>
 800b31e:	2300      	movs	r3, #0
 800b320:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	dc35      	bgt.n	800b394 <_dtoa_r+0x29c>
 800b328:	2301      	movs	r3, #1
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	461a      	mov	r2, r3
 800b330:	920e      	str	r2, [sp, #56]	@ 0x38
 800b332:	e00b      	b.n	800b34c <_dtoa_r+0x254>
 800b334:	2301      	movs	r3, #1
 800b336:	e7f3      	b.n	800b320 <_dtoa_r+0x228>
 800b338:	2300      	movs	r3, #0
 800b33a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b33e:	18fb      	adds	r3, r7, r3
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	2b01      	cmp	r3, #1
 800b346:	9307      	str	r3, [sp, #28]
 800b348:	bfb8      	it	lt
 800b34a:	2301      	movlt	r3, #1
 800b34c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b350:	2100      	movs	r1, #0
 800b352:	2204      	movs	r2, #4
 800b354:	f102 0514 	add.w	r5, r2, #20
 800b358:	429d      	cmp	r5, r3
 800b35a:	d91f      	bls.n	800b39c <_dtoa_r+0x2a4>
 800b35c:	6041      	str	r1, [r0, #4]
 800b35e:	4658      	mov	r0, fp
 800b360:	f000 fd8e 	bl	800be80 <_Balloc>
 800b364:	4682      	mov	sl, r0
 800b366:	2800      	cmp	r0, #0
 800b368:	d13c      	bne.n	800b3e4 <_dtoa_r+0x2ec>
 800b36a:	4b1b      	ldr	r3, [pc, #108]	@ (800b3d8 <_dtoa_r+0x2e0>)
 800b36c:	4602      	mov	r2, r0
 800b36e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b372:	e6d8      	b.n	800b126 <_dtoa_r+0x2e>
 800b374:	2301      	movs	r3, #1
 800b376:	e7e0      	b.n	800b33a <_dtoa_r+0x242>
 800b378:	2401      	movs	r4, #1
 800b37a:	2300      	movs	r3, #0
 800b37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b380:	f04f 33ff 	mov.w	r3, #4294967295
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	9307      	str	r3, [sp, #28]
 800b388:	2200      	movs	r2, #0
 800b38a:	2312      	movs	r3, #18
 800b38c:	e7d0      	b.n	800b330 <_dtoa_r+0x238>
 800b38e:	2301      	movs	r3, #1
 800b390:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b392:	e7f5      	b.n	800b380 <_dtoa_r+0x288>
 800b394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	9307      	str	r3, [sp, #28]
 800b39a:	e7d7      	b.n	800b34c <_dtoa_r+0x254>
 800b39c:	3101      	adds	r1, #1
 800b39e:	0052      	lsls	r2, r2, #1
 800b3a0:	e7d8      	b.n	800b354 <_dtoa_r+0x25c>
 800b3a2:	bf00      	nop
 800b3a4:	f3af 8000 	nop.w
 800b3a8:	636f4361 	.word	0x636f4361
 800b3ac:	3fd287a7 	.word	0x3fd287a7
 800b3b0:	8b60c8b3 	.word	0x8b60c8b3
 800b3b4:	3fc68a28 	.word	0x3fc68a28
 800b3b8:	509f79fb 	.word	0x509f79fb
 800b3bc:	3fd34413 	.word	0x3fd34413
 800b3c0:	0800e76e 	.word	0x0800e76e
 800b3c4:	0800e828 	.word	0x0800e828
 800b3c8:	7ff00000 	.word	0x7ff00000
 800b3cc:	0800e746 	.word	0x0800e746
 800b3d0:	3ff80000 	.word	0x3ff80000
 800b3d4:	0800e920 	.word	0x0800e920
 800b3d8:	0800e880 	.word	0x0800e880
 800b3dc:	0800e824 	.word	0x0800e824
 800b3e0:	0800e745 	.word	0x0800e745
 800b3e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3e8:	6018      	str	r0, [r3, #0]
 800b3ea:	9b07      	ldr	r3, [sp, #28]
 800b3ec:	2b0e      	cmp	r3, #14
 800b3ee:	f200 80a4 	bhi.w	800b53a <_dtoa_r+0x442>
 800b3f2:	2c00      	cmp	r4, #0
 800b3f4:	f000 80a1 	beq.w	800b53a <_dtoa_r+0x442>
 800b3f8:	2f00      	cmp	r7, #0
 800b3fa:	dd33      	ble.n	800b464 <_dtoa_r+0x36c>
 800b3fc:	4bad      	ldr	r3, [pc, #692]	@ (800b6b4 <_dtoa_r+0x5bc>)
 800b3fe:	f007 020f 	and.w	r2, r7, #15
 800b402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b406:	ed93 7b00 	vldr	d7, [r3]
 800b40a:	05f8      	lsls	r0, r7, #23
 800b40c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b410:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b414:	d516      	bpl.n	800b444 <_dtoa_r+0x34c>
 800b416:	4ba8      	ldr	r3, [pc, #672]	@ (800b6b8 <_dtoa_r+0x5c0>)
 800b418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b41c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b420:	f7f5 fa4c 	bl	80008bc <__aeabi_ddiv>
 800b424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b428:	f004 040f 	and.w	r4, r4, #15
 800b42c:	2603      	movs	r6, #3
 800b42e:	4da2      	ldr	r5, [pc, #648]	@ (800b6b8 <_dtoa_r+0x5c0>)
 800b430:	b954      	cbnz	r4, 800b448 <_dtoa_r+0x350>
 800b432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43a:	f7f5 fa3f 	bl	80008bc <__aeabi_ddiv>
 800b43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b442:	e028      	b.n	800b496 <_dtoa_r+0x39e>
 800b444:	2602      	movs	r6, #2
 800b446:	e7f2      	b.n	800b42e <_dtoa_r+0x336>
 800b448:	07e1      	lsls	r1, r4, #31
 800b44a:	d508      	bpl.n	800b45e <_dtoa_r+0x366>
 800b44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b450:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b454:	f7f5 f908 	bl	8000668 <__aeabi_dmul>
 800b458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b45c:	3601      	adds	r6, #1
 800b45e:	1064      	asrs	r4, r4, #1
 800b460:	3508      	adds	r5, #8
 800b462:	e7e5      	b.n	800b430 <_dtoa_r+0x338>
 800b464:	f000 80d2 	beq.w	800b60c <_dtoa_r+0x514>
 800b468:	427c      	negs	r4, r7
 800b46a:	4b92      	ldr	r3, [pc, #584]	@ (800b6b4 <_dtoa_r+0x5bc>)
 800b46c:	4d92      	ldr	r5, [pc, #584]	@ (800b6b8 <_dtoa_r+0x5c0>)
 800b46e:	f004 020f 	and.w	r2, r4, #15
 800b472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b47e:	f7f5 f8f3 	bl	8000668 <__aeabi_dmul>
 800b482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b486:	1124      	asrs	r4, r4, #4
 800b488:	2300      	movs	r3, #0
 800b48a:	2602      	movs	r6, #2
 800b48c:	2c00      	cmp	r4, #0
 800b48e:	f040 80b2 	bne.w	800b5f6 <_dtoa_r+0x4fe>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1d3      	bne.n	800b43e <_dtoa_r+0x346>
 800b496:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b498:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 80b7 	beq.w	800b610 <_dtoa_r+0x518>
 800b4a2:	4b86      	ldr	r3, [pc, #536]	@ (800b6bc <_dtoa_r+0x5c4>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7f5 fb4f 	bl	8000b4c <__aeabi_dcmplt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f000 80ae 	beq.w	800b610 <_dtoa_r+0x518>
 800b4b4:	9b07      	ldr	r3, [sp, #28]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 80aa 	beq.w	800b610 <_dtoa_r+0x518>
 800b4bc:	9b00      	ldr	r3, [sp, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	dd37      	ble.n	800b532 <_dtoa_r+0x43a>
 800b4c2:	1e7b      	subs	r3, r7, #1
 800b4c4:	9304      	str	r3, [sp, #16]
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4b7d      	ldr	r3, [pc, #500]	@ (800b6c0 <_dtoa_r+0x5c8>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7f5 f8cb 	bl	8000668 <__aeabi_dmul>
 800b4d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4d6:	9c00      	ldr	r4, [sp, #0]
 800b4d8:	3601      	adds	r6, #1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f7f5 f85a 	bl	8000594 <__aeabi_i2d>
 800b4e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4e4:	f7f5 f8c0 	bl	8000668 <__aeabi_dmul>
 800b4e8:	4b76      	ldr	r3, [pc, #472]	@ (800b6c4 <_dtoa_r+0x5cc>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f7f4 ff06 	bl	80002fc <__adddf3>
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b4f6:	2c00      	cmp	r4, #0
 800b4f8:	f040 808d 	bne.w	800b616 <_dtoa_r+0x51e>
 800b4fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b500:	4b71      	ldr	r3, [pc, #452]	@ (800b6c8 <_dtoa_r+0x5d0>)
 800b502:	2200      	movs	r2, #0
 800b504:	f7f4 fef8 	bl	80002f8 <__aeabi_dsub>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b510:	462a      	mov	r2, r5
 800b512:	4633      	mov	r3, r6
 800b514:	f7f5 fb38 	bl	8000b88 <__aeabi_dcmpgt>
 800b518:	2800      	cmp	r0, #0
 800b51a:	f040 828b 	bne.w	800ba34 <_dtoa_r+0x93c>
 800b51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b522:	462a      	mov	r2, r5
 800b524:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b528:	f7f5 fb10 	bl	8000b4c <__aeabi_dcmplt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	f040 8128 	bne.w	800b782 <_dtoa_r+0x68a>
 800b532:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b536:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b53a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f2c0 815a 	blt.w	800b7f6 <_dtoa_r+0x6fe>
 800b542:	2f0e      	cmp	r7, #14
 800b544:	f300 8157 	bgt.w	800b7f6 <_dtoa_r+0x6fe>
 800b548:	4b5a      	ldr	r3, [pc, #360]	@ (800b6b4 <_dtoa_r+0x5bc>)
 800b54a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b54e:	ed93 7b00 	vldr	d7, [r3]
 800b552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b554:	2b00      	cmp	r3, #0
 800b556:	ed8d 7b00 	vstr	d7, [sp]
 800b55a:	da03      	bge.n	800b564 <_dtoa_r+0x46c>
 800b55c:	9b07      	ldr	r3, [sp, #28]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f340 8101 	ble.w	800b766 <_dtoa_r+0x66e>
 800b564:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b568:	4656      	mov	r6, sl
 800b56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f5 f9a3 	bl	80008bc <__aeabi_ddiv>
 800b576:	f7f5 fb27 	bl	8000bc8 <__aeabi_d2iz>
 800b57a:	4680      	mov	r8, r0
 800b57c:	f7f5 f80a 	bl	8000594 <__aeabi_i2d>
 800b580:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b584:	f7f5 f870 	bl	8000668 <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4620      	mov	r0, r4
 800b58e:	4629      	mov	r1, r5
 800b590:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b594:	f7f4 feb0 	bl	80002f8 <__aeabi_dsub>
 800b598:	f806 4b01 	strb.w	r4, [r6], #1
 800b59c:	9d07      	ldr	r5, [sp, #28]
 800b59e:	eba6 040a 	sub.w	r4, r6, sl
 800b5a2:	42a5      	cmp	r5, r4
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	f040 8117 	bne.w	800b7da <_dtoa_r+0x6e2>
 800b5ac:	f7f4 fea6 	bl	80002fc <__adddf3>
 800b5b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	f7f5 fae6 	bl	8000b88 <__aeabi_dcmpgt>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f040 80f9 	bne.w	800b7b4 <_dtoa_r+0x6bc>
 800b5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7f5 fab5 	bl	8000b38 <__aeabi_dcmpeq>
 800b5ce:	b118      	cbz	r0, 800b5d8 <_dtoa_r+0x4e0>
 800b5d0:	f018 0f01 	tst.w	r8, #1
 800b5d4:	f040 80ee 	bne.w	800b7b4 <_dtoa_r+0x6bc>
 800b5d8:	4649      	mov	r1, r9
 800b5da:	4658      	mov	r0, fp
 800b5dc:	f000 fc90 	bl	800bf00 <_Bfree>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	7033      	strb	r3, [r6, #0]
 800b5e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5e6:	3701      	adds	r7, #1
 800b5e8:	601f      	str	r7, [r3, #0]
 800b5ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 831d 	beq.w	800bc2c <_dtoa_r+0xb34>
 800b5f2:	601e      	str	r6, [r3, #0]
 800b5f4:	e31a      	b.n	800bc2c <_dtoa_r+0xb34>
 800b5f6:	07e2      	lsls	r2, r4, #31
 800b5f8:	d505      	bpl.n	800b606 <_dtoa_r+0x50e>
 800b5fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5fe:	f7f5 f833 	bl	8000668 <__aeabi_dmul>
 800b602:	3601      	adds	r6, #1
 800b604:	2301      	movs	r3, #1
 800b606:	1064      	asrs	r4, r4, #1
 800b608:	3508      	adds	r5, #8
 800b60a:	e73f      	b.n	800b48c <_dtoa_r+0x394>
 800b60c:	2602      	movs	r6, #2
 800b60e:	e742      	b.n	800b496 <_dtoa_r+0x39e>
 800b610:	9c07      	ldr	r4, [sp, #28]
 800b612:	9704      	str	r7, [sp, #16]
 800b614:	e761      	b.n	800b4da <_dtoa_r+0x3e2>
 800b616:	4b27      	ldr	r3, [pc, #156]	@ (800b6b4 <_dtoa_r+0x5bc>)
 800b618:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b61a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b61e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b622:	4454      	add	r4, sl
 800b624:	2900      	cmp	r1, #0
 800b626:	d053      	beq.n	800b6d0 <_dtoa_r+0x5d8>
 800b628:	4928      	ldr	r1, [pc, #160]	@ (800b6cc <_dtoa_r+0x5d4>)
 800b62a:	2000      	movs	r0, #0
 800b62c:	f7f5 f946 	bl	80008bc <__aeabi_ddiv>
 800b630:	4633      	mov	r3, r6
 800b632:	462a      	mov	r2, r5
 800b634:	f7f4 fe60 	bl	80002f8 <__aeabi_dsub>
 800b638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b63c:	4656      	mov	r6, sl
 800b63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b642:	f7f5 fac1 	bl	8000bc8 <__aeabi_d2iz>
 800b646:	4605      	mov	r5, r0
 800b648:	f7f4 ffa4 	bl	8000594 <__aeabi_i2d>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b654:	f7f4 fe50 	bl	80002f8 <__aeabi_dsub>
 800b658:	3530      	adds	r5, #48	@ 0x30
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b662:	f806 5b01 	strb.w	r5, [r6], #1
 800b666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b66a:	f7f5 fa6f 	bl	8000b4c <__aeabi_dcmplt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d171      	bne.n	800b756 <_dtoa_r+0x65e>
 800b672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b676:	4911      	ldr	r1, [pc, #68]	@ (800b6bc <_dtoa_r+0x5c4>)
 800b678:	2000      	movs	r0, #0
 800b67a:	f7f4 fe3d 	bl	80002f8 <__aeabi_dsub>
 800b67e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b682:	f7f5 fa63 	bl	8000b4c <__aeabi_dcmplt>
 800b686:	2800      	cmp	r0, #0
 800b688:	f040 8095 	bne.w	800b7b6 <_dtoa_r+0x6be>
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	f43f af50 	beq.w	800b532 <_dtoa_r+0x43a>
 800b692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b696:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c0 <_dtoa_r+0x5c8>)
 800b698:	2200      	movs	r2, #0
 800b69a:	f7f4 ffe5 	bl	8000668 <__aeabi_dmul>
 800b69e:	4b08      	ldr	r3, [pc, #32]	@ (800b6c0 <_dtoa_r+0x5c8>)
 800b6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6aa:	f7f4 ffdd 	bl	8000668 <__aeabi_dmul>
 800b6ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6b2:	e7c4      	b.n	800b63e <_dtoa_r+0x546>
 800b6b4:	0800e920 	.word	0x0800e920
 800b6b8:	0800e8f8 	.word	0x0800e8f8
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	40240000 	.word	0x40240000
 800b6c4:	401c0000 	.word	0x401c0000
 800b6c8:	40140000 	.word	0x40140000
 800b6cc:	3fe00000 	.word	0x3fe00000
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f7f4 ffc8 	bl	8000668 <__aeabi_dmul>
 800b6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800b6de:	4656      	mov	r6, sl
 800b6e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e4:	f7f5 fa70 	bl	8000bc8 <__aeabi_d2iz>
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	f7f4 ff53 	bl	8000594 <__aeabi_i2d>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f6:	f7f4 fdff 	bl	80002f8 <__aeabi_dsub>
 800b6fa:	3530      	adds	r5, #48	@ 0x30
 800b6fc:	f806 5b01 	strb.w	r5, [r6], #1
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	42a6      	cmp	r6, r4
 800b706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b70a:	f04f 0200 	mov.w	r2, #0
 800b70e:	d124      	bne.n	800b75a <_dtoa_r+0x662>
 800b710:	4bac      	ldr	r3, [pc, #688]	@ (800b9c4 <_dtoa_r+0x8cc>)
 800b712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b716:	f7f4 fdf1 	bl	80002fc <__adddf3>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b722:	f7f5 fa31 	bl	8000b88 <__aeabi_dcmpgt>
 800b726:	2800      	cmp	r0, #0
 800b728:	d145      	bne.n	800b7b6 <_dtoa_r+0x6be>
 800b72a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b72e:	49a5      	ldr	r1, [pc, #660]	@ (800b9c4 <_dtoa_r+0x8cc>)
 800b730:	2000      	movs	r0, #0
 800b732:	f7f4 fde1 	bl	80002f8 <__aeabi_dsub>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73e:	f7f5 fa05 	bl	8000b4c <__aeabi_dcmplt>
 800b742:	2800      	cmp	r0, #0
 800b744:	f43f aef5 	beq.w	800b532 <_dtoa_r+0x43a>
 800b748:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b74a:	1e73      	subs	r3, r6, #1
 800b74c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b74e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b752:	2b30      	cmp	r3, #48	@ 0x30
 800b754:	d0f8      	beq.n	800b748 <_dtoa_r+0x650>
 800b756:	9f04      	ldr	r7, [sp, #16]
 800b758:	e73e      	b.n	800b5d8 <_dtoa_r+0x4e0>
 800b75a:	4b9b      	ldr	r3, [pc, #620]	@ (800b9c8 <_dtoa_r+0x8d0>)
 800b75c:	f7f4 ff84 	bl	8000668 <__aeabi_dmul>
 800b760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b764:	e7bc      	b.n	800b6e0 <_dtoa_r+0x5e8>
 800b766:	d10c      	bne.n	800b782 <_dtoa_r+0x68a>
 800b768:	4b98      	ldr	r3, [pc, #608]	@ (800b9cc <_dtoa_r+0x8d4>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b770:	f7f4 ff7a 	bl	8000668 <__aeabi_dmul>
 800b774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b778:	f7f5 f9fc 	bl	8000b74 <__aeabi_dcmpge>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	f000 8157 	beq.w	800ba30 <_dtoa_r+0x938>
 800b782:	2400      	movs	r4, #0
 800b784:	4625      	mov	r5, r4
 800b786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b788:	43db      	mvns	r3, r3
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	4656      	mov	r6, sl
 800b78e:	2700      	movs	r7, #0
 800b790:	4621      	mov	r1, r4
 800b792:	4658      	mov	r0, fp
 800b794:	f000 fbb4 	bl	800bf00 <_Bfree>
 800b798:	2d00      	cmp	r5, #0
 800b79a:	d0dc      	beq.n	800b756 <_dtoa_r+0x65e>
 800b79c:	b12f      	cbz	r7, 800b7aa <_dtoa_r+0x6b2>
 800b79e:	42af      	cmp	r7, r5
 800b7a0:	d003      	beq.n	800b7aa <_dtoa_r+0x6b2>
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	4658      	mov	r0, fp
 800b7a6:	f000 fbab 	bl	800bf00 <_Bfree>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4658      	mov	r0, fp
 800b7ae:	f000 fba7 	bl	800bf00 <_Bfree>
 800b7b2:	e7d0      	b.n	800b756 <_dtoa_r+0x65e>
 800b7b4:	9704      	str	r7, [sp, #16]
 800b7b6:	4633      	mov	r3, r6
 800b7b8:	461e      	mov	r6, r3
 800b7ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7be:	2a39      	cmp	r2, #57	@ 0x39
 800b7c0:	d107      	bne.n	800b7d2 <_dtoa_r+0x6da>
 800b7c2:	459a      	cmp	sl, r3
 800b7c4:	d1f8      	bne.n	800b7b8 <_dtoa_r+0x6c0>
 800b7c6:	9a04      	ldr	r2, [sp, #16]
 800b7c8:	3201      	adds	r2, #1
 800b7ca:	9204      	str	r2, [sp, #16]
 800b7cc:	2230      	movs	r2, #48	@ 0x30
 800b7ce:	f88a 2000 	strb.w	r2, [sl]
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	3201      	adds	r2, #1
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	e7bd      	b.n	800b756 <_dtoa_r+0x65e>
 800b7da:	4b7b      	ldr	r3, [pc, #492]	@ (800b9c8 <_dtoa_r+0x8d0>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f7f4 ff43 	bl	8000668 <__aeabi_dmul>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	f7f5 f9a5 	bl	8000b38 <__aeabi_dcmpeq>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f43f aebb 	beq.w	800b56a <_dtoa_r+0x472>
 800b7f4:	e6f0      	b.n	800b5d8 <_dtoa_r+0x4e0>
 800b7f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	f000 80db 	beq.w	800b9b4 <_dtoa_r+0x8bc>
 800b7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b800:	2a01      	cmp	r2, #1
 800b802:	f300 80bf 	bgt.w	800b984 <_dtoa_r+0x88c>
 800b806:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b808:	2a00      	cmp	r2, #0
 800b80a:	f000 80b7 	beq.w	800b97c <_dtoa_r+0x884>
 800b80e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b812:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b814:	4646      	mov	r6, r8
 800b816:	9a08      	ldr	r2, [sp, #32]
 800b818:	2101      	movs	r1, #1
 800b81a:	441a      	add	r2, r3
 800b81c:	4658      	mov	r0, fp
 800b81e:	4498      	add	r8, r3
 800b820:	9208      	str	r2, [sp, #32]
 800b822:	f000 fc6b 	bl	800c0fc <__i2b>
 800b826:	4605      	mov	r5, r0
 800b828:	b15e      	cbz	r6, 800b842 <_dtoa_r+0x74a>
 800b82a:	9b08      	ldr	r3, [sp, #32]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dd08      	ble.n	800b842 <_dtoa_r+0x74a>
 800b830:	42b3      	cmp	r3, r6
 800b832:	9a08      	ldr	r2, [sp, #32]
 800b834:	bfa8      	it	ge
 800b836:	4633      	movge	r3, r6
 800b838:	eba8 0803 	sub.w	r8, r8, r3
 800b83c:	1af6      	subs	r6, r6, r3
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	9308      	str	r3, [sp, #32]
 800b842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b844:	b1f3      	cbz	r3, 800b884 <_dtoa_r+0x78c>
 800b846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 80b7 	beq.w	800b9bc <_dtoa_r+0x8c4>
 800b84e:	b18c      	cbz	r4, 800b874 <_dtoa_r+0x77c>
 800b850:	4629      	mov	r1, r5
 800b852:	4622      	mov	r2, r4
 800b854:	4658      	mov	r0, fp
 800b856:	f000 fd11 	bl	800c27c <__pow5mult>
 800b85a:	464a      	mov	r2, r9
 800b85c:	4601      	mov	r1, r0
 800b85e:	4605      	mov	r5, r0
 800b860:	4658      	mov	r0, fp
 800b862:	f000 fc61 	bl	800c128 <__multiply>
 800b866:	4649      	mov	r1, r9
 800b868:	9004      	str	r0, [sp, #16]
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fb48 	bl	800bf00 <_Bfree>
 800b870:	9b04      	ldr	r3, [sp, #16]
 800b872:	4699      	mov	r9, r3
 800b874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b876:	1b1a      	subs	r2, r3, r4
 800b878:	d004      	beq.n	800b884 <_dtoa_r+0x78c>
 800b87a:	4649      	mov	r1, r9
 800b87c:	4658      	mov	r0, fp
 800b87e:	f000 fcfd 	bl	800c27c <__pow5mult>
 800b882:	4681      	mov	r9, r0
 800b884:	2101      	movs	r1, #1
 800b886:	4658      	mov	r0, fp
 800b888:	f000 fc38 	bl	800c0fc <__i2b>
 800b88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b88e:	4604      	mov	r4, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 81cf 	beq.w	800bc34 <_dtoa_r+0xb3c>
 800b896:	461a      	mov	r2, r3
 800b898:	4601      	mov	r1, r0
 800b89a:	4658      	mov	r0, fp
 800b89c:	f000 fcee 	bl	800c27c <__pow5mult>
 800b8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	f300 8095 	bgt.w	800b9d4 <_dtoa_r+0x8dc>
 800b8aa:	9b02      	ldr	r3, [sp, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f040 8087 	bne.w	800b9c0 <_dtoa_r+0x8c8>
 800b8b2:	9b03      	ldr	r3, [sp, #12]
 800b8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f040 8089 	bne.w	800b9d0 <_dtoa_r+0x8d8>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8c4:	0d1b      	lsrs	r3, r3, #20
 800b8c6:	051b      	lsls	r3, r3, #20
 800b8c8:	b12b      	cbz	r3, 800b8d6 <_dtoa_r+0x7de>
 800b8ca:	9b08      	ldr	r3, [sp, #32]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	9308      	str	r3, [sp, #32]
 800b8d0:	f108 0801 	add.w	r8, r8, #1
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 81b0 	beq.w	800bc40 <_dtoa_r+0xb48>
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8e6:	6918      	ldr	r0, [r3, #16]
 800b8e8:	f000 fbbc 	bl	800c064 <__hi0bits>
 800b8ec:	f1c0 0020 	rsb	r0, r0, #32
 800b8f0:	9b08      	ldr	r3, [sp, #32]
 800b8f2:	4418      	add	r0, r3
 800b8f4:	f010 001f 	ands.w	r0, r0, #31
 800b8f8:	d077      	beq.n	800b9ea <_dtoa_r+0x8f2>
 800b8fa:	f1c0 0320 	rsb	r3, r0, #32
 800b8fe:	2b04      	cmp	r3, #4
 800b900:	dd6b      	ble.n	800b9da <_dtoa_r+0x8e2>
 800b902:	9b08      	ldr	r3, [sp, #32]
 800b904:	f1c0 001c 	rsb	r0, r0, #28
 800b908:	4403      	add	r3, r0
 800b90a:	4480      	add	r8, r0
 800b90c:	4406      	add	r6, r0
 800b90e:	9308      	str	r3, [sp, #32]
 800b910:	f1b8 0f00 	cmp.w	r8, #0
 800b914:	dd05      	ble.n	800b922 <_dtoa_r+0x82a>
 800b916:	4649      	mov	r1, r9
 800b918:	4642      	mov	r2, r8
 800b91a:	4658      	mov	r0, fp
 800b91c:	f000 fd08 	bl	800c330 <__lshift>
 800b920:	4681      	mov	r9, r0
 800b922:	9b08      	ldr	r3, [sp, #32]
 800b924:	2b00      	cmp	r3, #0
 800b926:	dd05      	ble.n	800b934 <_dtoa_r+0x83c>
 800b928:	4621      	mov	r1, r4
 800b92a:	461a      	mov	r2, r3
 800b92c:	4658      	mov	r0, fp
 800b92e:	f000 fcff 	bl	800c330 <__lshift>
 800b932:	4604      	mov	r4, r0
 800b934:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b936:	2b00      	cmp	r3, #0
 800b938:	d059      	beq.n	800b9ee <_dtoa_r+0x8f6>
 800b93a:	4621      	mov	r1, r4
 800b93c:	4648      	mov	r0, r9
 800b93e:	f000 fd63 	bl	800c408 <__mcmp>
 800b942:	2800      	cmp	r0, #0
 800b944:	da53      	bge.n	800b9ee <_dtoa_r+0x8f6>
 800b946:	1e7b      	subs	r3, r7, #1
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	4649      	mov	r1, r9
 800b94c:	2300      	movs	r3, #0
 800b94e:	220a      	movs	r2, #10
 800b950:	4658      	mov	r0, fp
 800b952:	f000 faf7 	bl	800bf44 <__multadd>
 800b956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b958:	4681      	mov	r9, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 8172 	beq.w	800bc44 <_dtoa_r+0xb4c>
 800b960:	2300      	movs	r3, #0
 800b962:	4629      	mov	r1, r5
 800b964:	220a      	movs	r2, #10
 800b966:	4658      	mov	r0, fp
 800b968:	f000 faec 	bl	800bf44 <__multadd>
 800b96c:	9b00      	ldr	r3, [sp, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	4605      	mov	r5, r0
 800b972:	dc67      	bgt.n	800ba44 <_dtoa_r+0x94c>
 800b974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b976:	2b02      	cmp	r3, #2
 800b978:	dc41      	bgt.n	800b9fe <_dtoa_r+0x906>
 800b97a:	e063      	b.n	800ba44 <_dtoa_r+0x94c>
 800b97c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b97e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b982:	e746      	b.n	800b812 <_dtoa_r+0x71a>
 800b984:	9b07      	ldr	r3, [sp, #28]
 800b986:	1e5c      	subs	r4, r3, #1
 800b988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b98a:	42a3      	cmp	r3, r4
 800b98c:	bfbf      	itttt	lt
 800b98e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b990:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b992:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b994:	1ae3      	sublt	r3, r4, r3
 800b996:	bfb4      	ite	lt
 800b998:	18d2      	addlt	r2, r2, r3
 800b99a:	1b1c      	subge	r4, r3, r4
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	bfbc      	itt	lt
 800b9a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b9a2:	2400      	movlt	r4, #0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bfb5      	itete	lt
 800b9a8:	eba8 0603 	sublt.w	r6, r8, r3
 800b9ac:	9b07      	ldrge	r3, [sp, #28]
 800b9ae:	2300      	movlt	r3, #0
 800b9b0:	4646      	movge	r6, r8
 800b9b2:	e730      	b.n	800b816 <_dtoa_r+0x71e>
 800b9b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b9b8:	4646      	mov	r6, r8
 800b9ba:	e735      	b.n	800b828 <_dtoa_r+0x730>
 800b9bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9be:	e75c      	b.n	800b87a <_dtoa_r+0x782>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	e788      	b.n	800b8d6 <_dtoa_r+0x7de>
 800b9c4:	3fe00000 	.word	0x3fe00000
 800b9c8:	40240000 	.word	0x40240000
 800b9cc:	40140000 	.word	0x40140000
 800b9d0:	9b02      	ldr	r3, [sp, #8]
 800b9d2:	e780      	b.n	800b8d6 <_dtoa_r+0x7de>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9d8:	e782      	b.n	800b8e0 <_dtoa_r+0x7e8>
 800b9da:	d099      	beq.n	800b910 <_dtoa_r+0x818>
 800b9dc:	9a08      	ldr	r2, [sp, #32]
 800b9de:	331c      	adds	r3, #28
 800b9e0:	441a      	add	r2, r3
 800b9e2:	4498      	add	r8, r3
 800b9e4:	441e      	add	r6, r3
 800b9e6:	9208      	str	r2, [sp, #32]
 800b9e8:	e792      	b.n	800b910 <_dtoa_r+0x818>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	e7f6      	b.n	800b9dc <_dtoa_r+0x8e4>
 800b9ee:	9b07      	ldr	r3, [sp, #28]
 800b9f0:	9704      	str	r7, [sp, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	dc20      	bgt.n	800ba38 <_dtoa_r+0x940>
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	dd1e      	ble.n	800ba3c <_dtoa_r+0x944>
 800b9fe:	9b00      	ldr	r3, [sp, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f47f aec0 	bne.w	800b786 <_dtoa_r+0x68e>
 800ba06:	4621      	mov	r1, r4
 800ba08:	2205      	movs	r2, #5
 800ba0a:	4658      	mov	r0, fp
 800ba0c:	f000 fa9a 	bl	800bf44 <__multadd>
 800ba10:	4601      	mov	r1, r0
 800ba12:	4604      	mov	r4, r0
 800ba14:	4648      	mov	r0, r9
 800ba16:	f000 fcf7 	bl	800c408 <__mcmp>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	f77f aeb3 	ble.w	800b786 <_dtoa_r+0x68e>
 800ba20:	4656      	mov	r6, sl
 800ba22:	2331      	movs	r3, #49	@ 0x31
 800ba24:	f806 3b01 	strb.w	r3, [r6], #1
 800ba28:	9b04      	ldr	r3, [sp, #16]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	9304      	str	r3, [sp, #16]
 800ba2e:	e6ae      	b.n	800b78e <_dtoa_r+0x696>
 800ba30:	9c07      	ldr	r4, [sp, #28]
 800ba32:	9704      	str	r7, [sp, #16]
 800ba34:	4625      	mov	r5, r4
 800ba36:	e7f3      	b.n	800ba20 <_dtoa_r+0x928>
 800ba38:	9b07      	ldr	r3, [sp, #28]
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 8104 	beq.w	800bc4c <_dtoa_r+0xb54>
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	dd05      	ble.n	800ba54 <_dtoa_r+0x95c>
 800ba48:	4629      	mov	r1, r5
 800ba4a:	4632      	mov	r2, r6
 800ba4c:	4658      	mov	r0, fp
 800ba4e:	f000 fc6f 	bl	800c330 <__lshift>
 800ba52:	4605      	mov	r5, r0
 800ba54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d05a      	beq.n	800bb10 <_dtoa_r+0xa18>
 800ba5a:	6869      	ldr	r1, [r5, #4]
 800ba5c:	4658      	mov	r0, fp
 800ba5e:	f000 fa0f 	bl	800be80 <_Balloc>
 800ba62:	4606      	mov	r6, r0
 800ba64:	b928      	cbnz	r0, 800ba72 <_dtoa_r+0x97a>
 800ba66:	4b84      	ldr	r3, [pc, #528]	@ (800bc78 <_dtoa_r+0xb80>)
 800ba68:	4602      	mov	r2, r0
 800ba6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba6e:	f7ff bb5a 	b.w	800b126 <_dtoa_r+0x2e>
 800ba72:	692a      	ldr	r2, [r5, #16]
 800ba74:	3202      	adds	r2, #2
 800ba76:	0092      	lsls	r2, r2, #2
 800ba78:	f105 010c 	add.w	r1, r5, #12
 800ba7c:	300c      	adds	r0, #12
 800ba7e:	f002 f8e1 	bl	800dc44 <memcpy>
 800ba82:	2201      	movs	r2, #1
 800ba84:	4631      	mov	r1, r6
 800ba86:	4658      	mov	r0, fp
 800ba88:	f000 fc52 	bl	800c330 <__lshift>
 800ba8c:	f10a 0301 	add.w	r3, sl, #1
 800ba90:	9307      	str	r3, [sp, #28]
 800ba92:	9b00      	ldr	r3, [sp, #0]
 800ba94:	4453      	add	r3, sl
 800ba96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba98:	9b02      	ldr	r3, [sp, #8]
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	462f      	mov	r7, r5
 800baa0:	930a      	str	r3, [sp, #40]	@ 0x28
 800baa2:	4605      	mov	r5, r0
 800baa4:	9b07      	ldr	r3, [sp, #28]
 800baa6:	4621      	mov	r1, r4
 800baa8:	3b01      	subs	r3, #1
 800baaa:	4648      	mov	r0, r9
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	f7ff fa99 	bl	800afe4 <quorem>
 800bab2:	4639      	mov	r1, r7
 800bab4:	9002      	str	r0, [sp, #8]
 800bab6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800baba:	4648      	mov	r0, r9
 800babc:	f000 fca4 	bl	800c408 <__mcmp>
 800bac0:	462a      	mov	r2, r5
 800bac2:	9008      	str	r0, [sp, #32]
 800bac4:	4621      	mov	r1, r4
 800bac6:	4658      	mov	r0, fp
 800bac8:	f000 fcba 	bl	800c440 <__mdiff>
 800bacc:	68c2      	ldr	r2, [r0, #12]
 800bace:	4606      	mov	r6, r0
 800bad0:	bb02      	cbnz	r2, 800bb14 <_dtoa_r+0xa1c>
 800bad2:	4601      	mov	r1, r0
 800bad4:	4648      	mov	r0, r9
 800bad6:	f000 fc97 	bl	800c408 <__mcmp>
 800bada:	4602      	mov	r2, r0
 800badc:	4631      	mov	r1, r6
 800bade:	4658      	mov	r0, fp
 800bae0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bae2:	f000 fa0d 	bl	800bf00 <_Bfree>
 800bae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800baea:	9e07      	ldr	r6, [sp, #28]
 800baec:	ea43 0102 	orr.w	r1, r3, r2
 800baf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baf2:	4319      	orrs	r1, r3
 800baf4:	d110      	bne.n	800bb18 <_dtoa_r+0xa20>
 800baf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bafa:	d029      	beq.n	800bb50 <_dtoa_r+0xa58>
 800bafc:	9b08      	ldr	r3, [sp, #32]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	dd02      	ble.n	800bb08 <_dtoa_r+0xa10>
 800bb02:	9b02      	ldr	r3, [sp, #8]
 800bb04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb08:	9b00      	ldr	r3, [sp, #0]
 800bb0a:	f883 8000 	strb.w	r8, [r3]
 800bb0e:	e63f      	b.n	800b790 <_dtoa_r+0x698>
 800bb10:	4628      	mov	r0, r5
 800bb12:	e7bb      	b.n	800ba8c <_dtoa_r+0x994>
 800bb14:	2201      	movs	r2, #1
 800bb16:	e7e1      	b.n	800badc <_dtoa_r+0x9e4>
 800bb18:	9b08      	ldr	r3, [sp, #32]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	db04      	blt.n	800bb28 <_dtoa_r+0xa30>
 800bb1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb20:	430b      	orrs	r3, r1
 800bb22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb24:	430b      	orrs	r3, r1
 800bb26:	d120      	bne.n	800bb6a <_dtoa_r+0xa72>
 800bb28:	2a00      	cmp	r2, #0
 800bb2a:	dded      	ble.n	800bb08 <_dtoa_r+0xa10>
 800bb2c:	4649      	mov	r1, r9
 800bb2e:	2201      	movs	r2, #1
 800bb30:	4658      	mov	r0, fp
 800bb32:	f000 fbfd 	bl	800c330 <__lshift>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4681      	mov	r9, r0
 800bb3a:	f000 fc65 	bl	800c408 <__mcmp>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	dc03      	bgt.n	800bb4a <_dtoa_r+0xa52>
 800bb42:	d1e1      	bne.n	800bb08 <_dtoa_r+0xa10>
 800bb44:	f018 0f01 	tst.w	r8, #1
 800bb48:	d0de      	beq.n	800bb08 <_dtoa_r+0xa10>
 800bb4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb4e:	d1d8      	bne.n	800bb02 <_dtoa_r+0xa0a>
 800bb50:	9a00      	ldr	r2, [sp, #0]
 800bb52:	2339      	movs	r3, #57	@ 0x39
 800bb54:	7013      	strb	r3, [r2, #0]
 800bb56:	4633      	mov	r3, r6
 800bb58:	461e      	mov	r6, r3
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb60:	2a39      	cmp	r2, #57	@ 0x39
 800bb62:	d052      	beq.n	800bc0a <_dtoa_r+0xb12>
 800bb64:	3201      	adds	r2, #1
 800bb66:	701a      	strb	r2, [r3, #0]
 800bb68:	e612      	b.n	800b790 <_dtoa_r+0x698>
 800bb6a:	2a00      	cmp	r2, #0
 800bb6c:	dd07      	ble.n	800bb7e <_dtoa_r+0xa86>
 800bb6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb72:	d0ed      	beq.n	800bb50 <_dtoa_r+0xa58>
 800bb74:	9a00      	ldr	r2, [sp, #0]
 800bb76:	f108 0301 	add.w	r3, r8, #1
 800bb7a:	7013      	strb	r3, [r2, #0]
 800bb7c:	e608      	b.n	800b790 <_dtoa_r+0x698>
 800bb7e:	9b07      	ldr	r3, [sp, #28]
 800bb80:	9a07      	ldr	r2, [sp, #28]
 800bb82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d028      	beq.n	800bbde <_dtoa_r+0xae6>
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	2300      	movs	r3, #0
 800bb90:	220a      	movs	r2, #10
 800bb92:	4658      	mov	r0, fp
 800bb94:	f000 f9d6 	bl	800bf44 <__multadd>
 800bb98:	42af      	cmp	r7, r5
 800bb9a:	4681      	mov	r9, r0
 800bb9c:	f04f 0300 	mov.w	r3, #0
 800bba0:	f04f 020a 	mov.w	r2, #10
 800bba4:	4639      	mov	r1, r7
 800bba6:	4658      	mov	r0, fp
 800bba8:	d107      	bne.n	800bbba <_dtoa_r+0xac2>
 800bbaa:	f000 f9cb 	bl	800bf44 <__multadd>
 800bbae:	4607      	mov	r7, r0
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	9307      	str	r3, [sp, #28]
 800bbb8:	e774      	b.n	800baa4 <_dtoa_r+0x9ac>
 800bbba:	f000 f9c3 	bl	800bf44 <__multadd>
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4607      	mov	r7, r0
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	220a      	movs	r2, #10
 800bbc6:	4658      	mov	r0, fp
 800bbc8:	f000 f9bc 	bl	800bf44 <__multadd>
 800bbcc:	4605      	mov	r5, r0
 800bbce:	e7f0      	b.n	800bbb2 <_dtoa_r+0xaba>
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	bfcc      	ite	gt
 800bbd6:	461e      	movgt	r6, r3
 800bbd8:	2601      	movle	r6, #1
 800bbda:	4456      	add	r6, sl
 800bbdc:	2700      	movs	r7, #0
 800bbde:	4649      	mov	r1, r9
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	4658      	mov	r0, fp
 800bbe4:	f000 fba4 	bl	800c330 <__lshift>
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4681      	mov	r9, r0
 800bbec:	f000 fc0c 	bl	800c408 <__mcmp>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	dcb0      	bgt.n	800bb56 <_dtoa_r+0xa5e>
 800bbf4:	d102      	bne.n	800bbfc <_dtoa_r+0xb04>
 800bbf6:	f018 0f01 	tst.w	r8, #1
 800bbfa:	d1ac      	bne.n	800bb56 <_dtoa_r+0xa5e>
 800bbfc:	4633      	mov	r3, r6
 800bbfe:	461e      	mov	r6, r3
 800bc00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc04:	2a30      	cmp	r2, #48	@ 0x30
 800bc06:	d0fa      	beq.n	800bbfe <_dtoa_r+0xb06>
 800bc08:	e5c2      	b.n	800b790 <_dtoa_r+0x698>
 800bc0a:	459a      	cmp	sl, r3
 800bc0c:	d1a4      	bne.n	800bb58 <_dtoa_r+0xa60>
 800bc0e:	9b04      	ldr	r3, [sp, #16]
 800bc10:	3301      	adds	r3, #1
 800bc12:	9304      	str	r3, [sp, #16]
 800bc14:	2331      	movs	r3, #49	@ 0x31
 800bc16:	f88a 3000 	strb.w	r3, [sl]
 800bc1a:	e5b9      	b.n	800b790 <_dtoa_r+0x698>
 800bc1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc7c <_dtoa_r+0xb84>
 800bc22:	b11b      	cbz	r3, 800bc2c <_dtoa_r+0xb34>
 800bc24:	f10a 0308 	add.w	r3, sl, #8
 800bc28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc2a:	6013      	str	r3, [r2, #0]
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	b019      	add	sp, #100	@ 0x64
 800bc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	f77f ae37 	ble.w	800b8aa <_dtoa_r+0x7b2>
 800bc3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc40:	2001      	movs	r0, #1
 800bc42:	e655      	b.n	800b8f0 <_dtoa_r+0x7f8>
 800bc44:	9b00      	ldr	r3, [sp, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f77f aed6 	ble.w	800b9f8 <_dtoa_r+0x900>
 800bc4c:	4656      	mov	r6, sl
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4648      	mov	r0, r9
 800bc52:	f7ff f9c7 	bl	800afe4 <quorem>
 800bc56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc5a:	f806 8b01 	strb.w	r8, [r6], #1
 800bc5e:	9b00      	ldr	r3, [sp, #0]
 800bc60:	eba6 020a 	sub.w	r2, r6, sl
 800bc64:	4293      	cmp	r3, r2
 800bc66:	ddb3      	ble.n	800bbd0 <_dtoa_r+0xad8>
 800bc68:	4649      	mov	r1, r9
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	220a      	movs	r2, #10
 800bc6e:	4658      	mov	r0, fp
 800bc70:	f000 f968 	bl	800bf44 <__multadd>
 800bc74:	4681      	mov	r9, r0
 800bc76:	e7ea      	b.n	800bc4e <_dtoa_r+0xb56>
 800bc78:	0800e880 	.word	0x0800e880
 800bc7c:	0800e81b 	.word	0x0800e81b

0800bc80 <_free_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4605      	mov	r5, r0
 800bc84:	2900      	cmp	r1, #0
 800bc86:	d041      	beq.n	800bd0c <_free_r+0x8c>
 800bc88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc8c:	1f0c      	subs	r4, r1, #4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bfb8      	it	lt
 800bc92:	18e4      	addlt	r4, r4, r3
 800bc94:	f000 f8e8 	bl	800be68 <__malloc_lock>
 800bc98:	4a1d      	ldr	r2, [pc, #116]	@ (800bd10 <_free_r+0x90>)
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	b933      	cbnz	r3, 800bcac <_free_r+0x2c>
 800bc9e:	6063      	str	r3, [r4, #4]
 800bca0:	6014      	str	r4, [r2, #0]
 800bca2:	4628      	mov	r0, r5
 800bca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bca8:	f000 b8e4 	b.w	800be74 <__malloc_unlock>
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	d908      	bls.n	800bcc2 <_free_r+0x42>
 800bcb0:	6820      	ldr	r0, [r4, #0]
 800bcb2:	1821      	adds	r1, r4, r0
 800bcb4:	428b      	cmp	r3, r1
 800bcb6:	bf01      	itttt	eq
 800bcb8:	6819      	ldreq	r1, [r3, #0]
 800bcba:	685b      	ldreq	r3, [r3, #4]
 800bcbc:	1809      	addeq	r1, r1, r0
 800bcbe:	6021      	streq	r1, [r4, #0]
 800bcc0:	e7ed      	b.n	800bc9e <_free_r+0x1e>
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	b10b      	cbz	r3, 800bccc <_free_r+0x4c>
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d9fa      	bls.n	800bcc2 <_free_r+0x42>
 800bccc:	6811      	ldr	r1, [r2, #0]
 800bcce:	1850      	adds	r0, r2, r1
 800bcd0:	42a0      	cmp	r0, r4
 800bcd2:	d10b      	bne.n	800bcec <_free_r+0x6c>
 800bcd4:	6820      	ldr	r0, [r4, #0]
 800bcd6:	4401      	add	r1, r0
 800bcd8:	1850      	adds	r0, r2, r1
 800bcda:	4283      	cmp	r3, r0
 800bcdc:	6011      	str	r1, [r2, #0]
 800bcde:	d1e0      	bne.n	800bca2 <_free_r+0x22>
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	6053      	str	r3, [r2, #4]
 800bce6:	4408      	add	r0, r1
 800bce8:	6010      	str	r0, [r2, #0]
 800bcea:	e7da      	b.n	800bca2 <_free_r+0x22>
 800bcec:	d902      	bls.n	800bcf4 <_free_r+0x74>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	602b      	str	r3, [r5, #0]
 800bcf2:	e7d6      	b.n	800bca2 <_free_r+0x22>
 800bcf4:	6820      	ldr	r0, [r4, #0]
 800bcf6:	1821      	adds	r1, r4, r0
 800bcf8:	428b      	cmp	r3, r1
 800bcfa:	bf04      	itt	eq
 800bcfc:	6819      	ldreq	r1, [r3, #0]
 800bcfe:	685b      	ldreq	r3, [r3, #4]
 800bd00:	6063      	str	r3, [r4, #4]
 800bd02:	bf04      	itt	eq
 800bd04:	1809      	addeq	r1, r1, r0
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	6054      	str	r4, [r2, #4]
 800bd0a:	e7ca      	b.n	800bca2 <_free_r+0x22>
 800bd0c:	bd38      	pop	{r3, r4, r5, pc}
 800bd0e:	bf00      	nop
 800bd10:	2000081c 	.word	0x2000081c

0800bd14 <malloc>:
 800bd14:	4b02      	ldr	r3, [pc, #8]	@ (800bd20 <malloc+0xc>)
 800bd16:	4601      	mov	r1, r0
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	f000 b825 	b.w	800bd68 <_malloc_r>
 800bd1e:	bf00      	nop
 800bd20:	200000e8 	.word	0x200000e8

0800bd24 <sbrk_aligned>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	4e0f      	ldr	r6, [pc, #60]	@ (800bd64 <sbrk_aligned+0x40>)
 800bd28:	460c      	mov	r4, r1
 800bd2a:	6831      	ldr	r1, [r6, #0]
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	b911      	cbnz	r1, 800bd36 <sbrk_aligned+0x12>
 800bd30:	f001 ff78 	bl	800dc24 <_sbrk_r>
 800bd34:	6030      	str	r0, [r6, #0]
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f001 ff73 	bl	800dc24 <_sbrk_r>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d103      	bne.n	800bd4a <sbrk_aligned+0x26>
 800bd42:	f04f 34ff 	mov.w	r4, #4294967295
 800bd46:	4620      	mov	r0, r4
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
 800bd4a:	1cc4      	adds	r4, r0, #3
 800bd4c:	f024 0403 	bic.w	r4, r4, #3
 800bd50:	42a0      	cmp	r0, r4
 800bd52:	d0f8      	beq.n	800bd46 <sbrk_aligned+0x22>
 800bd54:	1a21      	subs	r1, r4, r0
 800bd56:	4628      	mov	r0, r5
 800bd58:	f001 ff64 	bl	800dc24 <_sbrk_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d1f2      	bne.n	800bd46 <sbrk_aligned+0x22>
 800bd60:	e7ef      	b.n	800bd42 <sbrk_aligned+0x1e>
 800bd62:	bf00      	nop
 800bd64:	20000818 	.word	0x20000818

0800bd68 <_malloc_r>:
 800bd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	1ccd      	adds	r5, r1, #3
 800bd6e:	f025 0503 	bic.w	r5, r5, #3
 800bd72:	3508      	adds	r5, #8
 800bd74:	2d0c      	cmp	r5, #12
 800bd76:	bf38      	it	cc
 800bd78:	250c      	movcc	r5, #12
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	db01      	blt.n	800bd84 <_malloc_r+0x1c>
 800bd80:	42a9      	cmp	r1, r5
 800bd82:	d904      	bls.n	800bd8e <_malloc_r+0x26>
 800bd84:	230c      	movs	r3, #12
 800bd86:	6033      	str	r3, [r6, #0]
 800bd88:	2000      	movs	r0, #0
 800bd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be64 <_malloc_r+0xfc>
 800bd92:	f000 f869 	bl	800be68 <__malloc_lock>
 800bd96:	f8d8 3000 	ldr.w	r3, [r8]
 800bd9a:	461c      	mov	r4, r3
 800bd9c:	bb44      	cbnz	r4, 800bdf0 <_malloc_r+0x88>
 800bd9e:	4629      	mov	r1, r5
 800bda0:	4630      	mov	r0, r6
 800bda2:	f7ff ffbf 	bl	800bd24 <sbrk_aligned>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	4604      	mov	r4, r0
 800bdaa:	d158      	bne.n	800be5e <_malloc_r+0xf6>
 800bdac:	f8d8 4000 	ldr.w	r4, [r8]
 800bdb0:	4627      	mov	r7, r4
 800bdb2:	2f00      	cmp	r7, #0
 800bdb4:	d143      	bne.n	800be3e <_malloc_r+0xd6>
 800bdb6:	2c00      	cmp	r4, #0
 800bdb8:	d04b      	beq.n	800be52 <_malloc_r+0xea>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	eb04 0903 	add.w	r9, r4, r3
 800bdc4:	f001 ff2e 	bl	800dc24 <_sbrk_r>
 800bdc8:	4581      	cmp	r9, r0
 800bdca:	d142      	bne.n	800be52 <_malloc_r+0xea>
 800bdcc:	6821      	ldr	r1, [r4, #0]
 800bdce:	1a6d      	subs	r5, r5, r1
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff ffa6 	bl	800bd24 <sbrk_aligned>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	d03a      	beq.n	800be52 <_malloc_r+0xea>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	442b      	add	r3, r5
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	f8d8 3000 	ldr.w	r3, [r8]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	bb62      	cbnz	r2, 800be44 <_malloc_r+0xdc>
 800bdea:	f8c8 7000 	str.w	r7, [r8]
 800bdee:	e00f      	b.n	800be10 <_malloc_r+0xa8>
 800bdf0:	6822      	ldr	r2, [r4, #0]
 800bdf2:	1b52      	subs	r2, r2, r5
 800bdf4:	d420      	bmi.n	800be38 <_malloc_r+0xd0>
 800bdf6:	2a0b      	cmp	r2, #11
 800bdf8:	d917      	bls.n	800be2a <_malloc_r+0xc2>
 800bdfa:	1961      	adds	r1, r4, r5
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	6025      	str	r5, [r4, #0]
 800be00:	bf18      	it	ne
 800be02:	6059      	strne	r1, [r3, #4]
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	bf08      	it	eq
 800be08:	f8c8 1000 	streq.w	r1, [r8]
 800be0c:	5162      	str	r2, [r4, r5]
 800be0e:	604b      	str	r3, [r1, #4]
 800be10:	4630      	mov	r0, r6
 800be12:	f000 f82f 	bl	800be74 <__malloc_unlock>
 800be16:	f104 000b 	add.w	r0, r4, #11
 800be1a:	1d23      	adds	r3, r4, #4
 800be1c:	f020 0007 	bic.w	r0, r0, #7
 800be20:	1ac2      	subs	r2, r0, r3
 800be22:	bf1c      	itt	ne
 800be24:	1a1b      	subne	r3, r3, r0
 800be26:	50a3      	strne	r3, [r4, r2]
 800be28:	e7af      	b.n	800bd8a <_malloc_r+0x22>
 800be2a:	6862      	ldr	r2, [r4, #4]
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	bf0c      	ite	eq
 800be30:	f8c8 2000 	streq.w	r2, [r8]
 800be34:	605a      	strne	r2, [r3, #4]
 800be36:	e7eb      	b.n	800be10 <_malloc_r+0xa8>
 800be38:	4623      	mov	r3, r4
 800be3a:	6864      	ldr	r4, [r4, #4]
 800be3c:	e7ae      	b.n	800bd9c <_malloc_r+0x34>
 800be3e:	463c      	mov	r4, r7
 800be40:	687f      	ldr	r7, [r7, #4]
 800be42:	e7b6      	b.n	800bdb2 <_malloc_r+0x4a>
 800be44:	461a      	mov	r2, r3
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d1fb      	bne.n	800be44 <_malloc_r+0xdc>
 800be4c:	2300      	movs	r3, #0
 800be4e:	6053      	str	r3, [r2, #4]
 800be50:	e7de      	b.n	800be10 <_malloc_r+0xa8>
 800be52:	230c      	movs	r3, #12
 800be54:	6033      	str	r3, [r6, #0]
 800be56:	4630      	mov	r0, r6
 800be58:	f000 f80c 	bl	800be74 <__malloc_unlock>
 800be5c:	e794      	b.n	800bd88 <_malloc_r+0x20>
 800be5e:	6005      	str	r5, [r0, #0]
 800be60:	e7d6      	b.n	800be10 <_malloc_r+0xa8>
 800be62:	bf00      	nop
 800be64:	2000081c 	.word	0x2000081c

0800be68 <__malloc_lock>:
 800be68:	4801      	ldr	r0, [pc, #4]	@ (800be70 <__malloc_lock+0x8>)
 800be6a:	f7ff b894 	b.w	800af96 <__retarget_lock_acquire_recursive>
 800be6e:	bf00      	nop
 800be70:	20000814 	.word	0x20000814

0800be74 <__malloc_unlock>:
 800be74:	4801      	ldr	r0, [pc, #4]	@ (800be7c <__malloc_unlock+0x8>)
 800be76:	f7ff b88f 	b.w	800af98 <__retarget_lock_release_recursive>
 800be7a:	bf00      	nop
 800be7c:	20000814 	.word	0x20000814

0800be80 <_Balloc>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	69c6      	ldr	r6, [r0, #28]
 800be84:	4604      	mov	r4, r0
 800be86:	460d      	mov	r5, r1
 800be88:	b976      	cbnz	r6, 800bea8 <_Balloc+0x28>
 800be8a:	2010      	movs	r0, #16
 800be8c:	f7ff ff42 	bl	800bd14 <malloc>
 800be90:	4602      	mov	r2, r0
 800be92:	61e0      	str	r0, [r4, #28]
 800be94:	b920      	cbnz	r0, 800bea0 <_Balloc+0x20>
 800be96:	4b18      	ldr	r3, [pc, #96]	@ (800bef8 <_Balloc+0x78>)
 800be98:	4818      	ldr	r0, [pc, #96]	@ (800befc <_Balloc+0x7c>)
 800be9a:	216b      	movs	r1, #107	@ 0x6b
 800be9c:	f7ff f884 	bl	800afa8 <__assert_func>
 800bea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bea4:	6006      	str	r6, [r0, #0]
 800bea6:	60c6      	str	r6, [r0, #12]
 800bea8:	69e6      	ldr	r6, [r4, #28]
 800beaa:	68f3      	ldr	r3, [r6, #12]
 800beac:	b183      	cbz	r3, 800bed0 <_Balloc+0x50>
 800beae:	69e3      	ldr	r3, [r4, #28]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800beb6:	b9b8      	cbnz	r0, 800bee8 <_Balloc+0x68>
 800beb8:	2101      	movs	r1, #1
 800beba:	fa01 f605 	lsl.w	r6, r1, r5
 800bebe:	1d72      	adds	r2, r6, #5
 800bec0:	0092      	lsls	r2, r2, #2
 800bec2:	4620      	mov	r0, r4
 800bec4:	f001 fedb 	bl	800dc7e <_calloc_r>
 800bec8:	b160      	cbz	r0, 800bee4 <_Balloc+0x64>
 800beca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bece:	e00e      	b.n	800beee <_Balloc+0x6e>
 800bed0:	2221      	movs	r2, #33	@ 0x21
 800bed2:	2104      	movs	r1, #4
 800bed4:	4620      	mov	r0, r4
 800bed6:	f001 fed2 	bl	800dc7e <_calloc_r>
 800beda:	69e3      	ldr	r3, [r4, #28]
 800bedc:	60f0      	str	r0, [r6, #12]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1e4      	bne.n	800beae <_Balloc+0x2e>
 800bee4:	2000      	movs	r0, #0
 800bee6:	bd70      	pop	{r4, r5, r6, pc}
 800bee8:	6802      	ldr	r2, [r0, #0]
 800beea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beee:	2300      	movs	r3, #0
 800bef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bef4:	e7f7      	b.n	800bee6 <_Balloc+0x66>
 800bef6:	bf00      	nop
 800bef8:	0800e76e 	.word	0x0800e76e
 800befc:	0800e891 	.word	0x0800e891

0800bf00 <_Bfree>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	69c6      	ldr	r6, [r0, #28]
 800bf04:	4605      	mov	r5, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b976      	cbnz	r6, 800bf28 <_Bfree+0x28>
 800bf0a:	2010      	movs	r0, #16
 800bf0c:	f7ff ff02 	bl	800bd14 <malloc>
 800bf10:	4602      	mov	r2, r0
 800bf12:	61e8      	str	r0, [r5, #28]
 800bf14:	b920      	cbnz	r0, 800bf20 <_Bfree+0x20>
 800bf16:	4b09      	ldr	r3, [pc, #36]	@ (800bf3c <_Bfree+0x3c>)
 800bf18:	4809      	ldr	r0, [pc, #36]	@ (800bf40 <_Bfree+0x40>)
 800bf1a:	218f      	movs	r1, #143	@ 0x8f
 800bf1c:	f7ff f844 	bl	800afa8 <__assert_func>
 800bf20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf24:	6006      	str	r6, [r0, #0]
 800bf26:	60c6      	str	r6, [r0, #12]
 800bf28:	b13c      	cbz	r4, 800bf3a <_Bfree+0x3a>
 800bf2a:	69eb      	ldr	r3, [r5, #28]
 800bf2c:	6862      	ldr	r2, [r4, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf34:	6021      	str	r1, [r4, #0]
 800bf36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
 800bf3c:	0800e76e 	.word	0x0800e76e
 800bf40:	0800e891 	.word	0x0800e891

0800bf44 <__multadd>:
 800bf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf48:	690d      	ldr	r5, [r1, #16]
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	461e      	mov	r6, r3
 800bf50:	f101 0c14 	add.w	ip, r1, #20
 800bf54:	2000      	movs	r0, #0
 800bf56:	f8dc 3000 	ldr.w	r3, [ip]
 800bf5a:	b299      	uxth	r1, r3
 800bf5c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf60:	0c1e      	lsrs	r6, r3, #16
 800bf62:	0c0b      	lsrs	r3, r1, #16
 800bf64:	fb02 3306 	mla	r3, r2, r6, r3
 800bf68:	b289      	uxth	r1, r1
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf70:	4285      	cmp	r5, r0
 800bf72:	f84c 1b04 	str.w	r1, [ip], #4
 800bf76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf7a:	dcec      	bgt.n	800bf56 <__multadd+0x12>
 800bf7c:	b30e      	cbz	r6, 800bfc2 <__multadd+0x7e>
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	dc19      	bgt.n	800bfb8 <__multadd+0x74>
 800bf84:	6861      	ldr	r1, [r4, #4]
 800bf86:	4638      	mov	r0, r7
 800bf88:	3101      	adds	r1, #1
 800bf8a:	f7ff ff79 	bl	800be80 <_Balloc>
 800bf8e:	4680      	mov	r8, r0
 800bf90:	b928      	cbnz	r0, 800bf9e <__multadd+0x5a>
 800bf92:	4602      	mov	r2, r0
 800bf94:	4b0c      	ldr	r3, [pc, #48]	@ (800bfc8 <__multadd+0x84>)
 800bf96:	480d      	ldr	r0, [pc, #52]	@ (800bfcc <__multadd+0x88>)
 800bf98:	21ba      	movs	r1, #186	@ 0xba
 800bf9a:	f7ff f805 	bl	800afa8 <__assert_func>
 800bf9e:	6922      	ldr	r2, [r4, #16]
 800bfa0:	3202      	adds	r2, #2
 800bfa2:	f104 010c 	add.w	r1, r4, #12
 800bfa6:	0092      	lsls	r2, r2, #2
 800bfa8:	300c      	adds	r0, #12
 800bfaa:	f001 fe4b 	bl	800dc44 <memcpy>
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	f7ff ffa5 	bl	800bf00 <_Bfree>
 800bfb6:	4644      	mov	r4, r8
 800bfb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfbc:	3501      	adds	r5, #1
 800bfbe:	615e      	str	r6, [r3, #20]
 800bfc0:	6125      	str	r5, [r4, #16]
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc8:	0800e880 	.word	0x0800e880
 800bfcc:	0800e891 	.word	0x0800e891

0800bfd0 <__s2b>:
 800bfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	4615      	mov	r5, r2
 800bfd8:	461f      	mov	r7, r3
 800bfda:	2209      	movs	r2, #9
 800bfdc:	3308      	adds	r3, #8
 800bfde:	4606      	mov	r6, r0
 800bfe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	db09      	blt.n	800c000 <__s2b+0x30>
 800bfec:	4630      	mov	r0, r6
 800bfee:	f7ff ff47 	bl	800be80 <_Balloc>
 800bff2:	b940      	cbnz	r0, 800c006 <__s2b+0x36>
 800bff4:	4602      	mov	r2, r0
 800bff6:	4b19      	ldr	r3, [pc, #100]	@ (800c05c <__s2b+0x8c>)
 800bff8:	4819      	ldr	r0, [pc, #100]	@ (800c060 <__s2b+0x90>)
 800bffa:	21d3      	movs	r1, #211	@ 0xd3
 800bffc:	f7fe ffd4 	bl	800afa8 <__assert_func>
 800c000:	0052      	lsls	r2, r2, #1
 800c002:	3101      	adds	r1, #1
 800c004:	e7f0      	b.n	800bfe8 <__s2b+0x18>
 800c006:	9b08      	ldr	r3, [sp, #32]
 800c008:	6143      	str	r3, [r0, #20]
 800c00a:	2d09      	cmp	r5, #9
 800c00c:	f04f 0301 	mov.w	r3, #1
 800c010:	6103      	str	r3, [r0, #16]
 800c012:	dd16      	ble.n	800c042 <__s2b+0x72>
 800c014:	f104 0909 	add.w	r9, r4, #9
 800c018:	46c8      	mov	r8, r9
 800c01a:	442c      	add	r4, r5
 800c01c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c020:	4601      	mov	r1, r0
 800c022:	3b30      	subs	r3, #48	@ 0x30
 800c024:	220a      	movs	r2, #10
 800c026:	4630      	mov	r0, r6
 800c028:	f7ff ff8c 	bl	800bf44 <__multadd>
 800c02c:	45a0      	cmp	r8, r4
 800c02e:	d1f5      	bne.n	800c01c <__s2b+0x4c>
 800c030:	f1a5 0408 	sub.w	r4, r5, #8
 800c034:	444c      	add	r4, r9
 800c036:	1b2d      	subs	r5, r5, r4
 800c038:	1963      	adds	r3, r4, r5
 800c03a:	42bb      	cmp	r3, r7
 800c03c:	db04      	blt.n	800c048 <__s2b+0x78>
 800c03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c042:	340a      	adds	r4, #10
 800c044:	2509      	movs	r5, #9
 800c046:	e7f6      	b.n	800c036 <__s2b+0x66>
 800c048:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c04c:	4601      	mov	r1, r0
 800c04e:	3b30      	subs	r3, #48	@ 0x30
 800c050:	220a      	movs	r2, #10
 800c052:	4630      	mov	r0, r6
 800c054:	f7ff ff76 	bl	800bf44 <__multadd>
 800c058:	e7ee      	b.n	800c038 <__s2b+0x68>
 800c05a:	bf00      	nop
 800c05c:	0800e880 	.word	0x0800e880
 800c060:	0800e891 	.word	0x0800e891

0800c064 <__hi0bits>:
 800c064:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c068:	4603      	mov	r3, r0
 800c06a:	bf36      	itet	cc
 800c06c:	0403      	lslcc	r3, r0, #16
 800c06e:	2000      	movcs	r0, #0
 800c070:	2010      	movcc	r0, #16
 800c072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c076:	bf3c      	itt	cc
 800c078:	021b      	lslcc	r3, r3, #8
 800c07a:	3008      	addcc	r0, #8
 800c07c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c080:	bf3c      	itt	cc
 800c082:	011b      	lslcc	r3, r3, #4
 800c084:	3004      	addcc	r0, #4
 800c086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c08a:	bf3c      	itt	cc
 800c08c:	009b      	lslcc	r3, r3, #2
 800c08e:	3002      	addcc	r0, #2
 800c090:	2b00      	cmp	r3, #0
 800c092:	db05      	blt.n	800c0a0 <__hi0bits+0x3c>
 800c094:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c098:	f100 0001 	add.w	r0, r0, #1
 800c09c:	bf08      	it	eq
 800c09e:	2020      	moveq	r0, #32
 800c0a0:	4770      	bx	lr

0800c0a2 <__lo0bits>:
 800c0a2:	6803      	ldr	r3, [r0, #0]
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	f013 0007 	ands.w	r0, r3, #7
 800c0aa:	d00b      	beq.n	800c0c4 <__lo0bits+0x22>
 800c0ac:	07d9      	lsls	r1, r3, #31
 800c0ae:	d421      	bmi.n	800c0f4 <__lo0bits+0x52>
 800c0b0:	0798      	lsls	r0, r3, #30
 800c0b2:	bf49      	itett	mi
 800c0b4:	085b      	lsrmi	r3, r3, #1
 800c0b6:	089b      	lsrpl	r3, r3, #2
 800c0b8:	2001      	movmi	r0, #1
 800c0ba:	6013      	strmi	r3, [r2, #0]
 800c0bc:	bf5c      	itt	pl
 800c0be:	6013      	strpl	r3, [r2, #0]
 800c0c0:	2002      	movpl	r0, #2
 800c0c2:	4770      	bx	lr
 800c0c4:	b299      	uxth	r1, r3
 800c0c6:	b909      	cbnz	r1, 800c0cc <__lo0bits+0x2a>
 800c0c8:	0c1b      	lsrs	r3, r3, #16
 800c0ca:	2010      	movs	r0, #16
 800c0cc:	b2d9      	uxtb	r1, r3
 800c0ce:	b909      	cbnz	r1, 800c0d4 <__lo0bits+0x32>
 800c0d0:	3008      	adds	r0, #8
 800c0d2:	0a1b      	lsrs	r3, r3, #8
 800c0d4:	0719      	lsls	r1, r3, #28
 800c0d6:	bf04      	itt	eq
 800c0d8:	091b      	lsreq	r3, r3, #4
 800c0da:	3004      	addeq	r0, #4
 800c0dc:	0799      	lsls	r1, r3, #30
 800c0de:	bf04      	itt	eq
 800c0e0:	089b      	lsreq	r3, r3, #2
 800c0e2:	3002      	addeq	r0, #2
 800c0e4:	07d9      	lsls	r1, r3, #31
 800c0e6:	d403      	bmi.n	800c0f0 <__lo0bits+0x4e>
 800c0e8:	085b      	lsrs	r3, r3, #1
 800c0ea:	f100 0001 	add.w	r0, r0, #1
 800c0ee:	d003      	beq.n	800c0f8 <__lo0bits+0x56>
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	4770      	bx	lr
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	4770      	bx	lr
 800c0f8:	2020      	movs	r0, #32
 800c0fa:	4770      	bx	lr

0800c0fc <__i2b>:
 800c0fc:	b510      	push	{r4, lr}
 800c0fe:	460c      	mov	r4, r1
 800c100:	2101      	movs	r1, #1
 800c102:	f7ff febd 	bl	800be80 <_Balloc>
 800c106:	4602      	mov	r2, r0
 800c108:	b928      	cbnz	r0, 800c116 <__i2b+0x1a>
 800c10a:	4b05      	ldr	r3, [pc, #20]	@ (800c120 <__i2b+0x24>)
 800c10c:	4805      	ldr	r0, [pc, #20]	@ (800c124 <__i2b+0x28>)
 800c10e:	f240 1145 	movw	r1, #325	@ 0x145
 800c112:	f7fe ff49 	bl	800afa8 <__assert_func>
 800c116:	2301      	movs	r3, #1
 800c118:	6144      	str	r4, [r0, #20]
 800c11a:	6103      	str	r3, [r0, #16]
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	bf00      	nop
 800c120:	0800e880 	.word	0x0800e880
 800c124:	0800e891 	.word	0x0800e891

0800c128 <__multiply>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	4614      	mov	r4, r2
 800c12e:	690a      	ldr	r2, [r1, #16]
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	429a      	cmp	r2, r3
 800c134:	bfa8      	it	ge
 800c136:	4623      	movge	r3, r4
 800c138:	460f      	mov	r7, r1
 800c13a:	bfa4      	itt	ge
 800c13c:	460c      	movge	r4, r1
 800c13e:	461f      	movge	r7, r3
 800c140:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c144:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c148:	68a3      	ldr	r3, [r4, #8]
 800c14a:	6861      	ldr	r1, [r4, #4]
 800c14c:	eb0a 0609 	add.w	r6, sl, r9
 800c150:	42b3      	cmp	r3, r6
 800c152:	b085      	sub	sp, #20
 800c154:	bfb8      	it	lt
 800c156:	3101      	addlt	r1, #1
 800c158:	f7ff fe92 	bl	800be80 <_Balloc>
 800c15c:	b930      	cbnz	r0, 800c16c <__multiply+0x44>
 800c15e:	4602      	mov	r2, r0
 800c160:	4b44      	ldr	r3, [pc, #272]	@ (800c274 <__multiply+0x14c>)
 800c162:	4845      	ldr	r0, [pc, #276]	@ (800c278 <__multiply+0x150>)
 800c164:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c168:	f7fe ff1e 	bl	800afa8 <__assert_func>
 800c16c:	f100 0514 	add.w	r5, r0, #20
 800c170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c174:	462b      	mov	r3, r5
 800c176:	2200      	movs	r2, #0
 800c178:	4543      	cmp	r3, r8
 800c17a:	d321      	bcc.n	800c1c0 <__multiply+0x98>
 800c17c:	f107 0114 	add.w	r1, r7, #20
 800c180:	f104 0214 	add.w	r2, r4, #20
 800c184:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c188:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c18c:	9302      	str	r3, [sp, #8]
 800c18e:	1b13      	subs	r3, r2, r4
 800c190:	3b15      	subs	r3, #21
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	3304      	adds	r3, #4
 800c198:	f104 0715 	add.w	r7, r4, #21
 800c19c:	42ba      	cmp	r2, r7
 800c19e:	bf38      	it	cc
 800c1a0:	2304      	movcc	r3, #4
 800c1a2:	9301      	str	r3, [sp, #4]
 800c1a4:	9b02      	ldr	r3, [sp, #8]
 800c1a6:	9103      	str	r1, [sp, #12]
 800c1a8:	428b      	cmp	r3, r1
 800c1aa:	d80c      	bhi.n	800c1c6 <__multiply+0x9e>
 800c1ac:	2e00      	cmp	r6, #0
 800c1ae:	dd03      	ble.n	800c1b8 <__multiply+0x90>
 800c1b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d05b      	beq.n	800c270 <__multiply+0x148>
 800c1b8:	6106      	str	r6, [r0, #16]
 800c1ba:	b005      	add	sp, #20
 800c1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c0:	f843 2b04 	str.w	r2, [r3], #4
 800c1c4:	e7d8      	b.n	800c178 <__multiply+0x50>
 800c1c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1ca:	f1ba 0f00 	cmp.w	sl, #0
 800c1ce:	d024      	beq.n	800c21a <__multiply+0xf2>
 800c1d0:	f104 0e14 	add.w	lr, r4, #20
 800c1d4:	46a9      	mov	r9, r5
 800c1d6:	f04f 0c00 	mov.w	ip, #0
 800c1da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1de:	f8d9 3000 	ldr.w	r3, [r9]
 800c1e2:	fa1f fb87 	uxth.w	fp, r7
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1f0:	f8d9 7000 	ldr.w	r7, [r9]
 800c1f4:	4463      	add	r3, ip
 800c1f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c202:	b29b      	uxth	r3, r3
 800c204:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c208:	4572      	cmp	r2, lr
 800c20a:	f849 3b04 	str.w	r3, [r9], #4
 800c20e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c212:	d8e2      	bhi.n	800c1da <__multiply+0xb2>
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	f845 c003 	str.w	ip, [r5, r3]
 800c21a:	9b03      	ldr	r3, [sp, #12]
 800c21c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c220:	3104      	adds	r1, #4
 800c222:	f1b9 0f00 	cmp.w	r9, #0
 800c226:	d021      	beq.n	800c26c <__multiply+0x144>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	f104 0c14 	add.w	ip, r4, #20
 800c22e:	46ae      	mov	lr, r5
 800c230:	f04f 0a00 	mov.w	sl, #0
 800c234:	f8bc b000 	ldrh.w	fp, [ip]
 800c238:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c23c:	fb09 770b 	mla	r7, r9, fp, r7
 800c240:	4457      	add	r7, sl
 800c242:	b29b      	uxth	r3, r3
 800c244:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c248:	f84e 3b04 	str.w	r3, [lr], #4
 800c24c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c250:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c254:	f8be 3000 	ldrh.w	r3, [lr]
 800c258:	fb09 330a 	mla	r3, r9, sl, r3
 800c25c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c260:	4562      	cmp	r2, ip
 800c262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c266:	d8e5      	bhi.n	800c234 <__multiply+0x10c>
 800c268:	9f01      	ldr	r7, [sp, #4]
 800c26a:	51eb      	str	r3, [r5, r7]
 800c26c:	3504      	adds	r5, #4
 800c26e:	e799      	b.n	800c1a4 <__multiply+0x7c>
 800c270:	3e01      	subs	r6, #1
 800c272:	e79b      	b.n	800c1ac <__multiply+0x84>
 800c274:	0800e880 	.word	0x0800e880
 800c278:	0800e891 	.word	0x0800e891

0800c27c <__pow5mult>:
 800c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c280:	4615      	mov	r5, r2
 800c282:	f012 0203 	ands.w	r2, r2, #3
 800c286:	4607      	mov	r7, r0
 800c288:	460e      	mov	r6, r1
 800c28a:	d007      	beq.n	800c29c <__pow5mult+0x20>
 800c28c:	4c25      	ldr	r4, [pc, #148]	@ (800c324 <__pow5mult+0xa8>)
 800c28e:	3a01      	subs	r2, #1
 800c290:	2300      	movs	r3, #0
 800c292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c296:	f7ff fe55 	bl	800bf44 <__multadd>
 800c29a:	4606      	mov	r6, r0
 800c29c:	10ad      	asrs	r5, r5, #2
 800c29e:	d03d      	beq.n	800c31c <__pow5mult+0xa0>
 800c2a0:	69fc      	ldr	r4, [r7, #28]
 800c2a2:	b97c      	cbnz	r4, 800c2c4 <__pow5mult+0x48>
 800c2a4:	2010      	movs	r0, #16
 800c2a6:	f7ff fd35 	bl	800bd14 <malloc>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	61f8      	str	r0, [r7, #28]
 800c2ae:	b928      	cbnz	r0, 800c2bc <__pow5mult+0x40>
 800c2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c328 <__pow5mult+0xac>)
 800c2b2:	481e      	ldr	r0, [pc, #120]	@ (800c32c <__pow5mult+0xb0>)
 800c2b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2b8:	f7fe fe76 	bl	800afa8 <__assert_func>
 800c2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2c0:	6004      	str	r4, [r0, #0]
 800c2c2:	60c4      	str	r4, [r0, #12]
 800c2c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2cc:	b94c      	cbnz	r4, 800c2e2 <__pow5mult+0x66>
 800c2ce:	f240 2171 	movw	r1, #625	@ 0x271
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f7ff ff12 	bl	800c0fc <__i2b>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2de:	4604      	mov	r4, r0
 800c2e0:	6003      	str	r3, [r0, #0]
 800c2e2:	f04f 0900 	mov.w	r9, #0
 800c2e6:	07eb      	lsls	r3, r5, #31
 800c2e8:	d50a      	bpl.n	800c300 <__pow5mult+0x84>
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	f7ff ff1a 	bl	800c128 <__multiply>
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	4680      	mov	r8, r0
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f7ff fe01 	bl	800bf00 <_Bfree>
 800c2fe:	4646      	mov	r6, r8
 800c300:	106d      	asrs	r5, r5, #1
 800c302:	d00b      	beq.n	800c31c <__pow5mult+0xa0>
 800c304:	6820      	ldr	r0, [r4, #0]
 800c306:	b938      	cbnz	r0, 800c318 <__pow5mult+0x9c>
 800c308:	4622      	mov	r2, r4
 800c30a:	4621      	mov	r1, r4
 800c30c:	4638      	mov	r0, r7
 800c30e:	f7ff ff0b 	bl	800c128 <__multiply>
 800c312:	6020      	str	r0, [r4, #0]
 800c314:	f8c0 9000 	str.w	r9, [r0]
 800c318:	4604      	mov	r4, r0
 800c31a:	e7e4      	b.n	800c2e6 <__pow5mult+0x6a>
 800c31c:	4630      	mov	r0, r6
 800c31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c322:	bf00      	nop
 800c324:	0800e8ec 	.word	0x0800e8ec
 800c328:	0800e76e 	.word	0x0800e76e
 800c32c:	0800e891 	.word	0x0800e891

0800c330 <__lshift>:
 800c330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c334:	460c      	mov	r4, r1
 800c336:	6849      	ldr	r1, [r1, #4]
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	4607      	mov	r7, r0
 800c342:	4691      	mov	r9, r2
 800c344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c348:	f108 0601 	add.w	r6, r8, #1
 800c34c:	42b3      	cmp	r3, r6
 800c34e:	db0b      	blt.n	800c368 <__lshift+0x38>
 800c350:	4638      	mov	r0, r7
 800c352:	f7ff fd95 	bl	800be80 <_Balloc>
 800c356:	4605      	mov	r5, r0
 800c358:	b948      	cbnz	r0, 800c36e <__lshift+0x3e>
 800c35a:	4602      	mov	r2, r0
 800c35c:	4b28      	ldr	r3, [pc, #160]	@ (800c400 <__lshift+0xd0>)
 800c35e:	4829      	ldr	r0, [pc, #164]	@ (800c404 <__lshift+0xd4>)
 800c360:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c364:	f7fe fe20 	bl	800afa8 <__assert_func>
 800c368:	3101      	adds	r1, #1
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	e7ee      	b.n	800c34c <__lshift+0x1c>
 800c36e:	2300      	movs	r3, #0
 800c370:	f100 0114 	add.w	r1, r0, #20
 800c374:	f100 0210 	add.w	r2, r0, #16
 800c378:	4618      	mov	r0, r3
 800c37a:	4553      	cmp	r3, sl
 800c37c:	db33      	blt.n	800c3e6 <__lshift+0xb6>
 800c37e:	6920      	ldr	r0, [r4, #16]
 800c380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c384:	f104 0314 	add.w	r3, r4, #20
 800c388:	f019 091f 	ands.w	r9, r9, #31
 800c38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c394:	d02b      	beq.n	800c3ee <__lshift+0xbe>
 800c396:	f1c9 0e20 	rsb	lr, r9, #32
 800c39a:	468a      	mov	sl, r1
 800c39c:	2200      	movs	r2, #0
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	fa00 f009 	lsl.w	r0, r0, r9
 800c3a4:	4310      	orrs	r0, r2
 800c3a6:	f84a 0b04 	str.w	r0, [sl], #4
 800c3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ae:	459c      	cmp	ip, r3
 800c3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3b4:	d8f3      	bhi.n	800c39e <__lshift+0x6e>
 800c3b6:	ebac 0304 	sub.w	r3, ip, r4
 800c3ba:	3b15      	subs	r3, #21
 800c3bc:	f023 0303 	bic.w	r3, r3, #3
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	f104 0015 	add.w	r0, r4, #21
 800c3c6:	4584      	cmp	ip, r0
 800c3c8:	bf38      	it	cc
 800c3ca:	2304      	movcc	r3, #4
 800c3cc:	50ca      	str	r2, [r1, r3]
 800c3ce:	b10a      	cbz	r2, 800c3d4 <__lshift+0xa4>
 800c3d0:	f108 0602 	add.w	r6, r8, #2
 800c3d4:	3e01      	subs	r6, #1
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	612e      	str	r6, [r5, #16]
 800c3da:	4621      	mov	r1, r4
 800c3dc:	f7ff fd90 	bl	800bf00 <_Bfree>
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	e7c5      	b.n	800c37a <__lshift+0x4a>
 800c3ee:	3904      	subs	r1, #4
 800c3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3f8:	459c      	cmp	ip, r3
 800c3fa:	d8f9      	bhi.n	800c3f0 <__lshift+0xc0>
 800c3fc:	e7ea      	b.n	800c3d4 <__lshift+0xa4>
 800c3fe:	bf00      	nop
 800c400:	0800e880 	.word	0x0800e880
 800c404:	0800e891 	.word	0x0800e891

0800c408 <__mcmp>:
 800c408:	690a      	ldr	r2, [r1, #16]
 800c40a:	4603      	mov	r3, r0
 800c40c:	6900      	ldr	r0, [r0, #16]
 800c40e:	1a80      	subs	r0, r0, r2
 800c410:	b530      	push	{r4, r5, lr}
 800c412:	d10e      	bne.n	800c432 <__mcmp+0x2a>
 800c414:	3314      	adds	r3, #20
 800c416:	3114      	adds	r1, #20
 800c418:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c41c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c428:	4295      	cmp	r5, r2
 800c42a:	d003      	beq.n	800c434 <__mcmp+0x2c>
 800c42c:	d205      	bcs.n	800c43a <__mcmp+0x32>
 800c42e:	f04f 30ff 	mov.w	r0, #4294967295
 800c432:	bd30      	pop	{r4, r5, pc}
 800c434:	42a3      	cmp	r3, r4
 800c436:	d3f3      	bcc.n	800c420 <__mcmp+0x18>
 800c438:	e7fb      	b.n	800c432 <__mcmp+0x2a>
 800c43a:	2001      	movs	r0, #1
 800c43c:	e7f9      	b.n	800c432 <__mcmp+0x2a>
	...

0800c440 <__mdiff>:
 800c440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	4689      	mov	r9, r1
 800c446:	4606      	mov	r6, r0
 800c448:	4611      	mov	r1, r2
 800c44a:	4648      	mov	r0, r9
 800c44c:	4614      	mov	r4, r2
 800c44e:	f7ff ffdb 	bl	800c408 <__mcmp>
 800c452:	1e05      	subs	r5, r0, #0
 800c454:	d112      	bne.n	800c47c <__mdiff+0x3c>
 800c456:	4629      	mov	r1, r5
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff fd11 	bl	800be80 <_Balloc>
 800c45e:	4602      	mov	r2, r0
 800c460:	b928      	cbnz	r0, 800c46e <__mdiff+0x2e>
 800c462:	4b3f      	ldr	r3, [pc, #252]	@ (800c560 <__mdiff+0x120>)
 800c464:	f240 2137 	movw	r1, #567	@ 0x237
 800c468:	483e      	ldr	r0, [pc, #248]	@ (800c564 <__mdiff+0x124>)
 800c46a:	f7fe fd9d 	bl	800afa8 <__assert_func>
 800c46e:	2301      	movs	r3, #1
 800c470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c474:	4610      	mov	r0, r2
 800c476:	b003      	add	sp, #12
 800c478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47c:	bfbc      	itt	lt
 800c47e:	464b      	movlt	r3, r9
 800c480:	46a1      	movlt	r9, r4
 800c482:	4630      	mov	r0, r6
 800c484:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c488:	bfba      	itte	lt
 800c48a:	461c      	movlt	r4, r3
 800c48c:	2501      	movlt	r5, #1
 800c48e:	2500      	movge	r5, #0
 800c490:	f7ff fcf6 	bl	800be80 <_Balloc>
 800c494:	4602      	mov	r2, r0
 800c496:	b918      	cbnz	r0, 800c4a0 <__mdiff+0x60>
 800c498:	4b31      	ldr	r3, [pc, #196]	@ (800c560 <__mdiff+0x120>)
 800c49a:	f240 2145 	movw	r1, #581	@ 0x245
 800c49e:	e7e3      	b.n	800c468 <__mdiff+0x28>
 800c4a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4a4:	6926      	ldr	r6, [r4, #16]
 800c4a6:	60c5      	str	r5, [r0, #12]
 800c4a8:	f109 0310 	add.w	r3, r9, #16
 800c4ac:	f109 0514 	add.w	r5, r9, #20
 800c4b0:	f104 0e14 	add.w	lr, r4, #20
 800c4b4:	f100 0b14 	add.w	fp, r0, #20
 800c4b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4c0:	9301      	str	r3, [sp, #4]
 800c4c2:	46d9      	mov	r9, fp
 800c4c4:	f04f 0c00 	mov.w	ip, #0
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4d2:	9301      	str	r3, [sp, #4]
 800c4d4:	fa1f f38a 	uxth.w	r3, sl
 800c4d8:	4619      	mov	r1, r3
 800c4da:	b283      	uxth	r3, r0
 800c4dc:	1acb      	subs	r3, r1, r3
 800c4de:	0c00      	lsrs	r0, r0, #16
 800c4e0:	4463      	add	r3, ip
 800c4e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4f0:	4576      	cmp	r6, lr
 800c4f2:	f849 3b04 	str.w	r3, [r9], #4
 800c4f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4fa:	d8e5      	bhi.n	800c4c8 <__mdiff+0x88>
 800c4fc:	1b33      	subs	r3, r6, r4
 800c4fe:	3b15      	subs	r3, #21
 800c500:	f023 0303 	bic.w	r3, r3, #3
 800c504:	3415      	adds	r4, #21
 800c506:	3304      	adds	r3, #4
 800c508:	42a6      	cmp	r6, r4
 800c50a:	bf38      	it	cc
 800c50c:	2304      	movcc	r3, #4
 800c50e:	441d      	add	r5, r3
 800c510:	445b      	add	r3, fp
 800c512:	461e      	mov	r6, r3
 800c514:	462c      	mov	r4, r5
 800c516:	4544      	cmp	r4, r8
 800c518:	d30e      	bcc.n	800c538 <__mdiff+0xf8>
 800c51a:	f108 0103 	add.w	r1, r8, #3
 800c51e:	1b49      	subs	r1, r1, r5
 800c520:	f021 0103 	bic.w	r1, r1, #3
 800c524:	3d03      	subs	r5, #3
 800c526:	45a8      	cmp	r8, r5
 800c528:	bf38      	it	cc
 800c52a:	2100      	movcc	r1, #0
 800c52c:	440b      	add	r3, r1
 800c52e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c532:	b191      	cbz	r1, 800c55a <__mdiff+0x11a>
 800c534:	6117      	str	r7, [r2, #16]
 800c536:	e79d      	b.n	800c474 <__mdiff+0x34>
 800c538:	f854 1b04 	ldr.w	r1, [r4], #4
 800c53c:	46e6      	mov	lr, ip
 800c53e:	0c08      	lsrs	r0, r1, #16
 800c540:	fa1c fc81 	uxtah	ip, ip, r1
 800c544:	4471      	add	r1, lr
 800c546:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c54a:	b289      	uxth	r1, r1
 800c54c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c550:	f846 1b04 	str.w	r1, [r6], #4
 800c554:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c558:	e7dd      	b.n	800c516 <__mdiff+0xd6>
 800c55a:	3f01      	subs	r7, #1
 800c55c:	e7e7      	b.n	800c52e <__mdiff+0xee>
 800c55e:	bf00      	nop
 800c560:	0800e880 	.word	0x0800e880
 800c564:	0800e891 	.word	0x0800e891

0800c568 <__ulp>:
 800c568:	b082      	sub	sp, #8
 800c56a:	ed8d 0b00 	vstr	d0, [sp]
 800c56e:	9a01      	ldr	r2, [sp, #4]
 800c570:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b0 <__ulp+0x48>)
 800c572:	4013      	ands	r3, r2
 800c574:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	dc08      	bgt.n	800c58e <__ulp+0x26>
 800c57c:	425b      	negs	r3, r3
 800c57e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c582:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c586:	da04      	bge.n	800c592 <__ulp+0x2a>
 800c588:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c58c:	4113      	asrs	r3, r2
 800c58e:	2200      	movs	r2, #0
 800c590:	e008      	b.n	800c5a4 <__ulp+0x3c>
 800c592:	f1a2 0314 	sub.w	r3, r2, #20
 800c596:	2b1e      	cmp	r3, #30
 800c598:	bfda      	itte	le
 800c59a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c59e:	40da      	lsrle	r2, r3
 800c5a0:	2201      	movgt	r2, #1
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	ec41 0b10 	vmov	d0, r0, r1
 800c5ac:	b002      	add	sp, #8
 800c5ae:	4770      	bx	lr
 800c5b0:	7ff00000 	.word	0x7ff00000

0800c5b4 <__b2d>:
 800c5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b8:	6906      	ldr	r6, [r0, #16]
 800c5ba:	f100 0814 	add.w	r8, r0, #20
 800c5be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c5c2:	1f37      	subs	r7, r6, #4
 800c5c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7ff fd4b 	bl	800c064 <__hi0bits>
 800c5ce:	f1c0 0320 	rsb	r3, r0, #32
 800c5d2:	280a      	cmp	r0, #10
 800c5d4:	600b      	str	r3, [r1, #0]
 800c5d6:	491b      	ldr	r1, [pc, #108]	@ (800c644 <__b2d+0x90>)
 800c5d8:	dc15      	bgt.n	800c606 <__b2d+0x52>
 800c5da:	f1c0 0c0b 	rsb	ip, r0, #11
 800c5de:	fa22 f30c 	lsr.w	r3, r2, ip
 800c5e2:	45b8      	cmp	r8, r7
 800c5e4:	ea43 0501 	orr.w	r5, r3, r1
 800c5e8:	bf34      	ite	cc
 800c5ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5ee:	2300      	movcs	r3, #0
 800c5f0:	3015      	adds	r0, #21
 800c5f2:	fa02 f000 	lsl.w	r0, r2, r0
 800c5f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c5fa:	4303      	orrs	r3, r0
 800c5fc:	461c      	mov	r4, r3
 800c5fe:	ec45 4b10 	vmov	d0, r4, r5
 800c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c606:	45b8      	cmp	r8, r7
 800c608:	bf3a      	itte	cc
 800c60a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c60e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c612:	2300      	movcs	r3, #0
 800c614:	380b      	subs	r0, #11
 800c616:	d012      	beq.n	800c63e <__b2d+0x8a>
 800c618:	f1c0 0120 	rsb	r1, r0, #32
 800c61c:	fa23 f401 	lsr.w	r4, r3, r1
 800c620:	4082      	lsls	r2, r0
 800c622:	4322      	orrs	r2, r4
 800c624:	4547      	cmp	r7, r8
 800c626:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c62a:	bf8c      	ite	hi
 800c62c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c630:	2200      	movls	r2, #0
 800c632:	4083      	lsls	r3, r0
 800c634:	40ca      	lsrs	r2, r1
 800c636:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c63a:	4313      	orrs	r3, r2
 800c63c:	e7de      	b.n	800c5fc <__b2d+0x48>
 800c63e:	ea42 0501 	orr.w	r5, r2, r1
 800c642:	e7db      	b.n	800c5fc <__b2d+0x48>
 800c644:	3ff00000 	.word	0x3ff00000

0800c648 <__d2b>:
 800c648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	460f      	mov	r7, r1
 800c64e:	2101      	movs	r1, #1
 800c650:	ec59 8b10 	vmov	r8, r9, d0
 800c654:	4616      	mov	r6, r2
 800c656:	f7ff fc13 	bl	800be80 <_Balloc>
 800c65a:	4604      	mov	r4, r0
 800c65c:	b930      	cbnz	r0, 800c66c <__d2b+0x24>
 800c65e:	4602      	mov	r2, r0
 800c660:	4b23      	ldr	r3, [pc, #140]	@ (800c6f0 <__d2b+0xa8>)
 800c662:	4824      	ldr	r0, [pc, #144]	@ (800c6f4 <__d2b+0xac>)
 800c664:	f240 310f 	movw	r1, #783	@ 0x30f
 800c668:	f7fe fc9e 	bl	800afa8 <__assert_func>
 800c66c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c674:	b10d      	cbz	r5, 800c67a <__d2b+0x32>
 800c676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c67a:	9301      	str	r3, [sp, #4]
 800c67c:	f1b8 0300 	subs.w	r3, r8, #0
 800c680:	d023      	beq.n	800c6ca <__d2b+0x82>
 800c682:	4668      	mov	r0, sp
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	f7ff fd0c 	bl	800c0a2 <__lo0bits>
 800c68a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c68e:	b1d0      	cbz	r0, 800c6c6 <__d2b+0x7e>
 800c690:	f1c0 0320 	rsb	r3, r0, #32
 800c694:	fa02 f303 	lsl.w	r3, r2, r3
 800c698:	430b      	orrs	r3, r1
 800c69a:	40c2      	lsrs	r2, r0
 800c69c:	6163      	str	r3, [r4, #20]
 800c69e:	9201      	str	r2, [sp, #4]
 800c6a0:	9b01      	ldr	r3, [sp, #4]
 800c6a2:	61a3      	str	r3, [r4, #24]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bf0c      	ite	eq
 800c6a8:	2201      	moveq	r2, #1
 800c6aa:	2202      	movne	r2, #2
 800c6ac:	6122      	str	r2, [r4, #16]
 800c6ae:	b1a5      	cbz	r5, 800c6da <__d2b+0x92>
 800c6b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6b4:	4405      	add	r5, r0
 800c6b6:	603d      	str	r5, [r7, #0]
 800c6b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6bc:	6030      	str	r0, [r6, #0]
 800c6be:	4620      	mov	r0, r4
 800c6c0:	b003      	add	sp, #12
 800c6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6c6:	6161      	str	r1, [r4, #20]
 800c6c8:	e7ea      	b.n	800c6a0 <__d2b+0x58>
 800c6ca:	a801      	add	r0, sp, #4
 800c6cc:	f7ff fce9 	bl	800c0a2 <__lo0bits>
 800c6d0:	9b01      	ldr	r3, [sp, #4]
 800c6d2:	6163      	str	r3, [r4, #20]
 800c6d4:	3020      	adds	r0, #32
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	e7e8      	b.n	800c6ac <__d2b+0x64>
 800c6da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6e2:	6038      	str	r0, [r7, #0]
 800c6e4:	6918      	ldr	r0, [r3, #16]
 800c6e6:	f7ff fcbd 	bl	800c064 <__hi0bits>
 800c6ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6ee:	e7e5      	b.n	800c6bc <__d2b+0x74>
 800c6f0:	0800e880 	.word	0x0800e880
 800c6f4:	0800e891 	.word	0x0800e891

0800c6f8 <__ratio>:
 800c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fc:	b085      	sub	sp, #20
 800c6fe:	e9cd 1000 	strd	r1, r0, [sp]
 800c702:	a902      	add	r1, sp, #8
 800c704:	f7ff ff56 	bl	800c5b4 <__b2d>
 800c708:	9800      	ldr	r0, [sp, #0]
 800c70a:	a903      	add	r1, sp, #12
 800c70c:	ec55 4b10 	vmov	r4, r5, d0
 800c710:	f7ff ff50 	bl	800c5b4 <__b2d>
 800c714:	9b01      	ldr	r3, [sp, #4]
 800c716:	6919      	ldr	r1, [r3, #16]
 800c718:	9b00      	ldr	r3, [sp, #0]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	1ac9      	subs	r1, r1, r3
 800c71e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c722:	1a9b      	subs	r3, r3, r2
 800c724:	ec5b ab10 	vmov	sl, fp, d0
 800c728:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfce      	itee	gt
 800c730:	462a      	movgt	r2, r5
 800c732:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c736:	465a      	movle	r2, fp
 800c738:	462f      	mov	r7, r5
 800c73a:	46d9      	mov	r9, fp
 800c73c:	bfcc      	ite	gt
 800c73e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c742:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c746:	464b      	mov	r3, r9
 800c748:	4652      	mov	r2, sl
 800c74a:	4620      	mov	r0, r4
 800c74c:	4639      	mov	r1, r7
 800c74e:	f7f4 f8b5 	bl	80008bc <__aeabi_ddiv>
 800c752:	ec41 0b10 	vmov	d0, r0, r1
 800c756:	b005      	add	sp, #20
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c75c <__copybits>:
 800c75c:	3901      	subs	r1, #1
 800c75e:	b570      	push	{r4, r5, r6, lr}
 800c760:	1149      	asrs	r1, r1, #5
 800c762:	6914      	ldr	r4, [r2, #16]
 800c764:	3101      	adds	r1, #1
 800c766:	f102 0314 	add.w	r3, r2, #20
 800c76a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c76e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c772:	1f05      	subs	r5, r0, #4
 800c774:	42a3      	cmp	r3, r4
 800c776:	d30c      	bcc.n	800c792 <__copybits+0x36>
 800c778:	1aa3      	subs	r3, r4, r2
 800c77a:	3b11      	subs	r3, #17
 800c77c:	f023 0303 	bic.w	r3, r3, #3
 800c780:	3211      	adds	r2, #17
 800c782:	42a2      	cmp	r2, r4
 800c784:	bf88      	it	hi
 800c786:	2300      	movhi	r3, #0
 800c788:	4418      	add	r0, r3
 800c78a:	2300      	movs	r3, #0
 800c78c:	4288      	cmp	r0, r1
 800c78e:	d305      	bcc.n	800c79c <__copybits+0x40>
 800c790:	bd70      	pop	{r4, r5, r6, pc}
 800c792:	f853 6b04 	ldr.w	r6, [r3], #4
 800c796:	f845 6f04 	str.w	r6, [r5, #4]!
 800c79a:	e7eb      	b.n	800c774 <__copybits+0x18>
 800c79c:	f840 3b04 	str.w	r3, [r0], #4
 800c7a0:	e7f4      	b.n	800c78c <__copybits+0x30>

0800c7a2 <__any_on>:
 800c7a2:	f100 0214 	add.w	r2, r0, #20
 800c7a6:	6900      	ldr	r0, [r0, #16]
 800c7a8:	114b      	asrs	r3, r1, #5
 800c7aa:	4298      	cmp	r0, r3
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	db11      	blt.n	800c7d4 <__any_on+0x32>
 800c7b0:	dd0a      	ble.n	800c7c8 <__any_on+0x26>
 800c7b2:	f011 011f 	ands.w	r1, r1, #31
 800c7b6:	d007      	beq.n	800c7c8 <__any_on+0x26>
 800c7b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7bc:	fa24 f001 	lsr.w	r0, r4, r1
 800c7c0:	fa00 f101 	lsl.w	r1, r0, r1
 800c7c4:	428c      	cmp	r4, r1
 800c7c6:	d10b      	bne.n	800c7e0 <__any_on+0x3e>
 800c7c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d803      	bhi.n	800c7d8 <__any_on+0x36>
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	bd10      	pop	{r4, pc}
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	e7f7      	b.n	800c7c8 <__any_on+0x26>
 800c7d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	d0f5      	beq.n	800c7cc <__any_on+0x2a>
 800c7e0:	2001      	movs	r0, #1
 800c7e2:	e7f6      	b.n	800c7d2 <__any_on+0x30>

0800c7e4 <sulp>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	460d      	mov	r5, r1
 800c7ea:	ec45 4b10 	vmov	d0, r4, r5
 800c7ee:	4616      	mov	r6, r2
 800c7f0:	f7ff feba 	bl	800c568 <__ulp>
 800c7f4:	ec51 0b10 	vmov	r0, r1, d0
 800c7f8:	b17e      	cbz	r6, 800c81a <sulp+0x36>
 800c7fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c7fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c802:	2b00      	cmp	r3, #0
 800c804:	dd09      	ble.n	800c81a <sulp+0x36>
 800c806:	051b      	lsls	r3, r3, #20
 800c808:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c80c:	2400      	movs	r4, #0
 800c80e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c812:	4622      	mov	r2, r4
 800c814:	462b      	mov	r3, r5
 800c816:	f7f3 ff27 	bl	8000668 <__aeabi_dmul>
 800c81a:	ec41 0b10 	vmov	d0, r0, r1
 800c81e:	bd70      	pop	{r4, r5, r6, pc}

0800c820 <_strtod_l>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	b09f      	sub	sp, #124	@ 0x7c
 800c826:	460c      	mov	r4, r1
 800c828:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c82a:	2200      	movs	r2, #0
 800c82c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c82e:	9005      	str	r0, [sp, #20]
 800c830:	f04f 0a00 	mov.w	sl, #0
 800c834:	f04f 0b00 	mov.w	fp, #0
 800c838:	460a      	mov	r2, r1
 800c83a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c83c:	7811      	ldrb	r1, [r2, #0]
 800c83e:	292b      	cmp	r1, #43	@ 0x2b
 800c840:	d04a      	beq.n	800c8d8 <_strtod_l+0xb8>
 800c842:	d838      	bhi.n	800c8b6 <_strtod_l+0x96>
 800c844:	290d      	cmp	r1, #13
 800c846:	d832      	bhi.n	800c8ae <_strtod_l+0x8e>
 800c848:	2908      	cmp	r1, #8
 800c84a:	d832      	bhi.n	800c8b2 <_strtod_l+0x92>
 800c84c:	2900      	cmp	r1, #0
 800c84e:	d03b      	beq.n	800c8c8 <_strtod_l+0xa8>
 800c850:	2200      	movs	r2, #0
 800c852:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c854:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c856:	782a      	ldrb	r2, [r5, #0]
 800c858:	2a30      	cmp	r2, #48	@ 0x30
 800c85a:	f040 80b3 	bne.w	800c9c4 <_strtod_l+0x1a4>
 800c85e:	786a      	ldrb	r2, [r5, #1]
 800c860:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c864:	2a58      	cmp	r2, #88	@ 0x58
 800c866:	d16e      	bne.n	800c946 <_strtod_l+0x126>
 800c868:	9302      	str	r3, [sp, #8]
 800c86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c86c:	9301      	str	r3, [sp, #4]
 800c86e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	4a8e      	ldr	r2, [pc, #568]	@ (800caac <_strtod_l+0x28c>)
 800c874:	9805      	ldr	r0, [sp, #20]
 800c876:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c878:	a919      	add	r1, sp, #100	@ 0x64
 800c87a:	f001 fa7b 	bl	800dd74 <__gethex>
 800c87e:	f010 060f 	ands.w	r6, r0, #15
 800c882:	4604      	mov	r4, r0
 800c884:	d005      	beq.n	800c892 <_strtod_l+0x72>
 800c886:	2e06      	cmp	r6, #6
 800c888:	d128      	bne.n	800c8dc <_strtod_l+0xbc>
 800c88a:	3501      	adds	r5, #1
 800c88c:	2300      	movs	r3, #0
 800c88e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c890:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c894:	2b00      	cmp	r3, #0
 800c896:	f040 858e 	bne.w	800d3b6 <_strtod_l+0xb96>
 800c89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c89c:	b1cb      	cbz	r3, 800c8d2 <_strtod_l+0xb2>
 800c89e:	4652      	mov	r2, sl
 800c8a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c8a4:	ec43 2b10 	vmov	d0, r2, r3
 800c8a8:	b01f      	add	sp, #124	@ 0x7c
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ae:	2920      	cmp	r1, #32
 800c8b0:	d1ce      	bne.n	800c850 <_strtod_l+0x30>
 800c8b2:	3201      	adds	r2, #1
 800c8b4:	e7c1      	b.n	800c83a <_strtod_l+0x1a>
 800c8b6:	292d      	cmp	r1, #45	@ 0x2d
 800c8b8:	d1ca      	bne.n	800c850 <_strtod_l+0x30>
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c8be:	1c51      	adds	r1, r2, #1
 800c8c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8c2:	7852      	ldrb	r2, [r2, #1]
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	d1c5      	bne.n	800c854 <_strtod_l+0x34>
 800c8c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f040 8570 	bne.w	800d3b2 <_strtod_l+0xb92>
 800c8d2:	4652      	mov	r2, sl
 800c8d4:	465b      	mov	r3, fp
 800c8d6:	e7e5      	b.n	800c8a4 <_strtod_l+0x84>
 800c8d8:	2100      	movs	r1, #0
 800c8da:	e7ef      	b.n	800c8bc <_strtod_l+0x9c>
 800c8dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c8de:	b13a      	cbz	r2, 800c8f0 <_strtod_l+0xd0>
 800c8e0:	2135      	movs	r1, #53	@ 0x35
 800c8e2:	a81c      	add	r0, sp, #112	@ 0x70
 800c8e4:	f7ff ff3a 	bl	800c75c <__copybits>
 800c8e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8ea:	9805      	ldr	r0, [sp, #20]
 800c8ec:	f7ff fb08 	bl	800bf00 <_Bfree>
 800c8f0:	3e01      	subs	r6, #1
 800c8f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c8f4:	2e04      	cmp	r6, #4
 800c8f6:	d806      	bhi.n	800c906 <_strtod_l+0xe6>
 800c8f8:	e8df f006 	tbb	[pc, r6]
 800c8fc:	201d0314 	.word	0x201d0314
 800c900:	14          	.byte	0x14
 800c901:	00          	.byte	0x00
 800c902:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c906:	05e1      	lsls	r1, r4, #23
 800c908:	bf48      	it	mi
 800c90a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c90e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c912:	0d1b      	lsrs	r3, r3, #20
 800c914:	051b      	lsls	r3, r3, #20
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1bb      	bne.n	800c892 <_strtod_l+0x72>
 800c91a:	f7fe fb11 	bl	800af40 <__errno>
 800c91e:	2322      	movs	r3, #34	@ 0x22
 800c920:	6003      	str	r3, [r0, #0]
 800c922:	e7b6      	b.n	800c892 <_strtod_l+0x72>
 800c924:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c928:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c92c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c930:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c934:	e7e7      	b.n	800c906 <_strtod_l+0xe6>
 800c936:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cab4 <_strtod_l+0x294>
 800c93a:	e7e4      	b.n	800c906 <_strtod_l+0xe6>
 800c93c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c940:	f04f 3aff 	mov.w	sl, #4294967295
 800c944:	e7df      	b.n	800c906 <_strtod_l+0xe6>
 800c946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c94c:	785b      	ldrb	r3, [r3, #1]
 800c94e:	2b30      	cmp	r3, #48	@ 0x30
 800c950:	d0f9      	beq.n	800c946 <_strtod_l+0x126>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d09d      	beq.n	800c892 <_strtod_l+0x72>
 800c956:	2301      	movs	r3, #1
 800c958:	9309      	str	r3, [sp, #36]	@ 0x24
 800c95a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c95c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c95e:	2300      	movs	r3, #0
 800c960:	9308      	str	r3, [sp, #32]
 800c962:	930a      	str	r3, [sp, #40]	@ 0x28
 800c964:	461f      	mov	r7, r3
 800c966:	220a      	movs	r2, #10
 800c968:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c96a:	7805      	ldrb	r5, [r0, #0]
 800c96c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c970:	b2d9      	uxtb	r1, r3
 800c972:	2909      	cmp	r1, #9
 800c974:	d928      	bls.n	800c9c8 <_strtod_l+0x1a8>
 800c976:	494e      	ldr	r1, [pc, #312]	@ (800cab0 <_strtod_l+0x290>)
 800c978:	2201      	movs	r2, #1
 800c97a:	f001 f941 	bl	800dc00 <strncmp>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d032      	beq.n	800c9e8 <_strtod_l+0x1c8>
 800c982:	2000      	movs	r0, #0
 800c984:	462a      	mov	r2, r5
 800c986:	4681      	mov	r9, r0
 800c988:	463d      	mov	r5, r7
 800c98a:	4603      	mov	r3, r0
 800c98c:	2a65      	cmp	r2, #101	@ 0x65
 800c98e:	d001      	beq.n	800c994 <_strtod_l+0x174>
 800c990:	2a45      	cmp	r2, #69	@ 0x45
 800c992:	d114      	bne.n	800c9be <_strtod_l+0x19e>
 800c994:	b91d      	cbnz	r5, 800c99e <_strtod_l+0x17e>
 800c996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c998:	4302      	orrs	r2, r0
 800c99a:	d095      	beq.n	800c8c8 <_strtod_l+0xa8>
 800c99c:	2500      	movs	r5, #0
 800c99e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c9a0:	1c62      	adds	r2, r4, #1
 800c9a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9a4:	7862      	ldrb	r2, [r4, #1]
 800c9a6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c9a8:	d077      	beq.n	800ca9a <_strtod_l+0x27a>
 800c9aa:	2a2d      	cmp	r2, #45	@ 0x2d
 800c9ac:	d07b      	beq.n	800caa6 <_strtod_l+0x286>
 800c9ae:	f04f 0c00 	mov.w	ip, #0
 800c9b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c9b6:	2909      	cmp	r1, #9
 800c9b8:	f240 8082 	bls.w	800cac0 <_strtod_l+0x2a0>
 800c9bc:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9be:	f04f 0800 	mov.w	r8, #0
 800c9c2:	e0a2      	b.n	800cb0a <_strtod_l+0x2ea>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e7c7      	b.n	800c958 <_strtod_l+0x138>
 800c9c8:	2f08      	cmp	r7, #8
 800c9ca:	bfd5      	itete	le
 800c9cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c9ce:	9908      	ldrgt	r1, [sp, #32]
 800c9d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c9d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c9d8:	f100 0001 	add.w	r0, r0, #1
 800c9dc:	bfd4      	ite	le
 800c9de:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c9e0:	9308      	strgt	r3, [sp, #32]
 800c9e2:	3701      	adds	r7, #1
 800c9e4:	9019      	str	r0, [sp, #100]	@ 0x64
 800c9e6:	e7bf      	b.n	800c968 <_strtod_l+0x148>
 800c9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ee:	785a      	ldrb	r2, [r3, #1]
 800c9f0:	b37f      	cbz	r7, 800ca52 <_strtod_l+0x232>
 800c9f2:	4681      	mov	r9, r0
 800c9f4:	463d      	mov	r5, r7
 800c9f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c9fa:	2b09      	cmp	r3, #9
 800c9fc:	d912      	bls.n	800ca24 <_strtod_l+0x204>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e7c4      	b.n	800c98c <_strtod_l+0x16c>
 800ca02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca08:	785a      	ldrb	r2, [r3, #1]
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	2a30      	cmp	r2, #48	@ 0x30
 800ca0e:	d0f8      	beq.n	800ca02 <_strtod_l+0x1e2>
 800ca10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ca14:	2b08      	cmp	r3, #8
 800ca16:	f200 84d3 	bhi.w	800d3c0 <_strtod_l+0xba0>
 800ca1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca1e:	4681      	mov	r9, r0
 800ca20:	2000      	movs	r0, #0
 800ca22:	4605      	mov	r5, r0
 800ca24:	3a30      	subs	r2, #48	@ 0x30
 800ca26:	f100 0301 	add.w	r3, r0, #1
 800ca2a:	d02a      	beq.n	800ca82 <_strtod_l+0x262>
 800ca2c:	4499      	add	r9, r3
 800ca2e:	eb00 0c05 	add.w	ip, r0, r5
 800ca32:	462b      	mov	r3, r5
 800ca34:	210a      	movs	r1, #10
 800ca36:	4563      	cmp	r3, ip
 800ca38:	d10d      	bne.n	800ca56 <_strtod_l+0x236>
 800ca3a:	1c69      	adds	r1, r5, #1
 800ca3c:	4401      	add	r1, r0
 800ca3e:	4428      	add	r0, r5
 800ca40:	2808      	cmp	r0, #8
 800ca42:	dc16      	bgt.n	800ca72 <_strtod_l+0x252>
 800ca44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ca46:	230a      	movs	r3, #10
 800ca48:	fb03 2300 	mla	r3, r3, r0, r2
 800ca4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e018      	b.n	800ca84 <_strtod_l+0x264>
 800ca52:	4638      	mov	r0, r7
 800ca54:	e7da      	b.n	800ca0c <_strtod_l+0x1ec>
 800ca56:	2b08      	cmp	r3, #8
 800ca58:	f103 0301 	add.w	r3, r3, #1
 800ca5c:	dc03      	bgt.n	800ca66 <_strtod_l+0x246>
 800ca5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ca60:	434e      	muls	r6, r1
 800ca62:	960a      	str	r6, [sp, #40]	@ 0x28
 800ca64:	e7e7      	b.n	800ca36 <_strtod_l+0x216>
 800ca66:	2b10      	cmp	r3, #16
 800ca68:	bfde      	ittt	le
 800ca6a:	9e08      	ldrle	r6, [sp, #32]
 800ca6c:	434e      	mulle	r6, r1
 800ca6e:	9608      	strle	r6, [sp, #32]
 800ca70:	e7e1      	b.n	800ca36 <_strtod_l+0x216>
 800ca72:	280f      	cmp	r0, #15
 800ca74:	dceb      	bgt.n	800ca4e <_strtod_l+0x22e>
 800ca76:	9808      	ldr	r0, [sp, #32]
 800ca78:	230a      	movs	r3, #10
 800ca7a:	fb03 2300 	mla	r3, r3, r0, r2
 800ca7e:	9308      	str	r3, [sp, #32]
 800ca80:	e7e5      	b.n	800ca4e <_strtod_l+0x22e>
 800ca82:	4629      	mov	r1, r5
 800ca84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca86:	1c50      	adds	r0, r2, #1
 800ca88:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca8a:	7852      	ldrb	r2, [r2, #1]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	460d      	mov	r5, r1
 800ca90:	e7b1      	b.n	800c9f6 <_strtod_l+0x1d6>
 800ca92:	f04f 0900 	mov.w	r9, #0
 800ca96:	2301      	movs	r3, #1
 800ca98:	e77d      	b.n	800c996 <_strtod_l+0x176>
 800ca9a:	f04f 0c00 	mov.w	ip, #0
 800ca9e:	1ca2      	adds	r2, r4, #2
 800caa0:	9219      	str	r2, [sp, #100]	@ 0x64
 800caa2:	78a2      	ldrb	r2, [r4, #2]
 800caa4:	e785      	b.n	800c9b2 <_strtod_l+0x192>
 800caa6:	f04f 0c01 	mov.w	ip, #1
 800caaa:	e7f8      	b.n	800ca9e <_strtod_l+0x27e>
 800caac:	0800ea00 	.word	0x0800ea00
 800cab0:	0800e9e8 	.word	0x0800e9e8
 800cab4:	7ff00000 	.word	0x7ff00000
 800cab8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800caba:	1c51      	adds	r1, r2, #1
 800cabc:	9119      	str	r1, [sp, #100]	@ 0x64
 800cabe:	7852      	ldrb	r2, [r2, #1]
 800cac0:	2a30      	cmp	r2, #48	@ 0x30
 800cac2:	d0f9      	beq.n	800cab8 <_strtod_l+0x298>
 800cac4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cac8:	2908      	cmp	r1, #8
 800caca:	f63f af78 	bhi.w	800c9be <_strtod_l+0x19e>
 800cace:	3a30      	subs	r2, #48	@ 0x30
 800cad0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cad2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cad4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cad6:	f04f 080a 	mov.w	r8, #10
 800cada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cadc:	1c56      	adds	r6, r2, #1
 800cade:	9619      	str	r6, [sp, #100]	@ 0x64
 800cae0:	7852      	ldrb	r2, [r2, #1]
 800cae2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cae6:	f1be 0f09 	cmp.w	lr, #9
 800caea:	d939      	bls.n	800cb60 <_strtod_l+0x340>
 800caec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800caee:	1a76      	subs	r6, r6, r1
 800caf0:	2e08      	cmp	r6, #8
 800caf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800caf6:	dc03      	bgt.n	800cb00 <_strtod_l+0x2e0>
 800caf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cafa:	4588      	cmp	r8, r1
 800cafc:	bfa8      	it	ge
 800cafe:	4688      	movge	r8, r1
 800cb00:	f1bc 0f00 	cmp.w	ip, #0
 800cb04:	d001      	beq.n	800cb0a <_strtod_l+0x2ea>
 800cb06:	f1c8 0800 	rsb	r8, r8, #0
 800cb0a:	2d00      	cmp	r5, #0
 800cb0c:	d14e      	bne.n	800cbac <_strtod_l+0x38c>
 800cb0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb10:	4308      	orrs	r0, r1
 800cb12:	f47f aebe 	bne.w	800c892 <_strtod_l+0x72>
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f47f aed6 	bne.w	800c8c8 <_strtod_l+0xa8>
 800cb1c:	2a69      	cmp	r2, #105	@ 0x69
 800cb1e:	d028      	beq.n	800cb72 <_strtod_l+0x352>
 800cb20:	dc25      	bgt.n	800cb6e <_strtod_l+0x34e>
 800cb22:	2a49      	cmp	r2, #73	@ 0x49
 800cb24:	d025      	beq.n	800cb72 <_strtod_l+0x352>
 800cb26:	2a4e      	cmp	r2, #78	@ 0x4e
 800cb28:	f47f aece 	bne.w	800c8c8 <_strtod_l+0xa8>
 800cb2c:	499b      	ldr	r1, [pc, #620]	@ (800cd9c <_strtod_l+0x57c>)
 800cb2e:	a819      	add	r0, sp, #100	@ 0x64
 800cb30:	f001 fb42 	bl	800e1b8 <__match>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	f43f aec7 	beq.w	800c8c8 <_strtod_l+0xa8>
 800cb3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	2b28      	cmp	r3, #40	@ 0x28
 800cb40:	d12e      	bne.n	800cba0 <_strtod_l+0x380>
 800cb42:	4997      	ldr	r1, [pc, #604]	@ (800cda0 <_strtod_l+0x580>)
 800cb44:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb46:	a819      	add	r0, sp, #100	@ 0x64
 800cb48:	f001 fb4a 	bl	800e1e0 <__hexnan>
 800cb4c:	2805      	cmp	r0, #5
 800cb4e:	d127      	bne.n	800cba0 <_strtod_l+0x380>
 800cb50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cb56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cb5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cb5e:	e698      	b.n	800c892 <_strtod_l+0x72>
 800cb60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb62:	fb08 2101 	mla	r1, r8, r1, r2
 800cb66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cb6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb6c:	e7b5      	b.n	800cada <_strtod_l+0x2ba>
 800cb6e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cb70:	e7da      	b.n	800cb28 <_strtod_l+0x308>
 800cb72:	498c      	ldr	r1, [pc, #560]	@ (800cda4 <_strtod_l+0x584>)
 800cb74:	a819      	add	r0, sp, #100	@ 0x64
 800cb76:	f001 fb1f 	bl	800e1b8 <__match>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	f43f aea4 	beq.w	800c8c8 <_strtod_l+0xa8>
 800cb80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb82:	4989      	ldr	r1, [pc, #548]	@ (800cda8 <_strtod_l+0x588>)
 800cb84:	3b01      	subs	r3, #1
 800cb86:	a819      	add	r0, sp, #100	@ 0x64
 800cb88:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb8a:	f001 fb15 	bl	800e1b8 <__match>
 800cb8e:	b910      	cbnz	r0, 800cb96 <_strtod_l+0x376>
 800cb90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb92:	3301      	adds	r3, #1
 800cb94:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cdb8 <_strtod_l+0x598>
 800cb9a:	f04f 0a00 	mov.w	sl, #0
 800cb9e:	e678      	b.n	800c892 <_strtod_l+0x72>
 800cba0:	4882      	ldr	r0, [pc, #520]	@ (800cdac <_strtod_l+0x58c>)
 800cba2:	f001 f85d 	bl	800dc60 <nan>
 800cba6:	ec5b ab10 	vmov	sl, fp, d0
 800cbaa:	e672      	b.n	800c892 <_strtod_l+0x72>
 800cbac:	eba8 0309 	sub.w	r3, r8, r9
 800cbb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbb4:	2f00      	cmp	r7, #0
 800cbb6:	bf08      	it	eq
 800cbb8:	462f      	moveq	r7, r5
 800cbba:	2d10      	cmp	r5, #16
 800cbbc:	462c      	mov	r4, r5
 800cbbe:	bfa8      	it	ge
 800cbc0:	2410      	movge	r4, #16
 800cbc2:	f7f3 fcd7 	bl	8000574 <__aeabi_ui2d>
 800cbc6:	2d09      	cmp	r5, #9
 800cbc8:	4682      	mov	sl, r0
 800cbca:	468b      	mov	fp, r1
 800cbcc:	dc13      	bgt.n	800cbf6 <_strtod_l+0x3d6>
 800cbce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f43f ae5e 	beq.w	800c892 <_strtod_l+0x72>
 800cbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd8:	dd78      	ble.n	800cccc <_strtod_l+0x4ac>
 800cbda:	2b16      	cmp	r3, #22
 800cbdc:	dc5f      	bgt.n	800cc9e <_strtod_l+0x47e>
 800cbde:	4974      	ldr	r1, [pc, #464]	@ (800cdb0 <_strtod_l+0x590>)
 800cbe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe8:	4652      	mov	r2, sl
 800cbea:	465b      	mov	r3, fp
 800cbec:	f7f3 fd3c 	bl	8000668 <__aeabi_dmul>
 800cbf0:	4682      	mov	sl, r0
 800cbf2:	468b      	mov	fp, r1
 800cbf4:	e64d      	b.n	800c892 <_strtod_l+0x72>
 800cbf6:	4b6e      	ldr	r3, [pc, #440]	@ (800cdb0 <_strtod_l+0x590>)
 800cbf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cc00:	f7f3 fd32 	bl	8000668 <__aeabi_dmul>
 800cc04:	4682      	mov	sl, r0
 800cc06:	9808      	ldr	r0, [sp, #32]
 800cc08:	468b      	mov	fp, r1
 800cc0a:	f7f3 fcb3 	bl	8000574 <__aeabi_ui2d>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4650      	mov	r0, sl
 800cc14:	4659      	mov	r1, fp
 800cc16:	f7f3 fb71 	bl	80002fc <__adddf3>
 800cc1a:	2d0f      	cmp	r5, #15
 800cc1c:	4682      	mov	sl, r0
 800cc1e:	468b      	mov	fp, r1
 800cc20:	ddd5      	ble.n	800cbce <_strtod_l+0x3ae>
 800cc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc24:	1b2c      	subs	r4, r5, r4
 800cc26:	441c      	add	r4, r3
 800cc28:	2c00      	cmp	r4, #0
 800cc2a:	f340 8096 	ble.w	800cd5a <_strtod_l+0x53a>
 800cc2e:	f014 030f 	ands.w	r3, r4, #15
 800cc32:	d00a      	beq.n	800cc4a <_strtod_l+0x42a>
 800cc34:	495e      	ldr	r1, [pc, #376]	@ (800cdb0 <_strtod_l+0x590>)
 800cc36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	465b      	mov	r3, fp
 800cc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc42:	f7f3 fd11 	bl	8000668 <__aeabi_dmul>
 800cc46:	4682      	mov	sl, r0
 800cc48:	468b      	mov	fp, r1
 800cc4a:	f034 040f 	bics.w	r4, r4, #15
 800cc4e:	d073      	beq.n	800cd38 <_strtod_l+0x518>
 800cc50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cc54:	dd48      	ble.n	800cce8 <_strtod_l+0x4c8>
 800cc56:	2400      	movs	r4, #0
 800cc58:	46a0      	mov	r8, r4
 800cc5a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc5c:	46a1      	mov	r9, r4
 800cc5e:	9a05      	ldr	r2, [sp, #20]
 800cc60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cdb8 <_strtod_l+0x598>
 800cc64:	2322      	movs	r3, #34	@ 0x22
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	f04f 0a00 	mov.w	sl, #0
 800cc6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f43f ae0f 	beq.w	800c892 <_strtod_l+0x72>
 800cc74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc76:	9805      	ldr	r0, [sp, #20]
 800cc78:	f7ff f942 	bl	800bf00 <_Bfree>
 800cc7c:	9805      	ldr	r0, [sp, #20]
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f7ff f93e 	bl	800bf00 <_Bfree>
 800cc84:	9805      	ldr	r0, [sp, #20]
 800cc86:	4641      	mov	r1, r8
 800cc88:	f7ff f93a 	bl	800bf00 <_Bfree>
 800cc8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc8e:	9805      	ldr	r0, [sp, #20]
 800cc90:	f7ff f936 	bl	800bf00 <_Bfree>
 800cc94:	9805      	ldr	r0, [sp, #20]
 800cc96:	4621      	mov	r1, r4
 800cc98:	f7ff f932 	bl	800bf00 <_Bfree>
 800cc9c:	e5f9      	b.n	800c892 <_strtod_l+0x72>
 800cc9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cca0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cca4:	4293      	cmp	r3, r2
 800cca6:	dbbc      	blt.n	800cc22 <_strtod_l+0x402>
 800cca8:	4c41      	ldr	r4, [pc, #260]	@ (800cdb0 <_strtod_l+0x590>)
 800ccaa:	f1c5 050f 	rsb	r5, r5, #15
 800ccae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ccb2:	4652      	mov	r2, sl
 800ccb4:	465b      	mov	r3, fp
 800ccb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccba:	f7f3 fcd5 	bl	8000668 <__aeabi_dmul>
 800ccbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc0:	1b5d      	subs	r5, r3, r5
 800ccc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ccc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ccca:	e78f      	b.n	800cbec <_strtod_l+0x3cc>
 800cccc:	3316      	adds	r3, #22
 800ccce:	dba8      	blt.n	800cc22 <_strtod_l+0x402>
 800ccd0:	4b37      	ldr	r3, [pc, #220]	@ (800cdb0 <_strtod_l+0x590>)
 800ccd2:	eba9 0808 	sub.w	r8, r9, r8
 800ccd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ccda:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ccde:	4650      	mov	r0, sl
 800cce0:	4659      	mov	r1, fp
 800cce2:	f7f3 fdeb 	bl	80008bc <__aeabi_ddiv>
 800cce6:	e783      	b.n	800cbf0 <_strtod_l+0x3d0>
 800cce8:	4b32      	ldr	r3, [pc, #200]	@ (800cdb4 <_strtod_l+0x594>)
 800ccea:	9308      	str	r3, [sp, #32]
 800ccec:	2300      	movs	r3, #0
 800ccee:	1124      	asrs	r4, r4, #4
 800ccf0:	4650      	mov	r0, sl
 800ccf2:	4659      	mov	r1, fp
 800ccf4:	461e      	mov	r6, r3
 800ccf6:	2c01      	cmp	r4, #1
 800ccf8:	dc21      	bgt.n	800cd3e <_strtod_l+0x51e>
 800ccfa:	b10b      	cbz	r3, 800cd00 <_strtod_l+0x4e0>
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	468b      	mov	fp, r1
 800cd00:	492c      	ldr	r1, [pc, #176]	@ (800cdb4 <_strtod_l+0x594>)
 800cd02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cd06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd0a:	4652      	mov	r2, sl
 800cd0c:	465b      	mov	r3, fp
 800cd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd12:	f7f3 fca9 	bl	8000668 <__aeabi_dmul>
 800cd16:	4b28      	ldr	r3, [pc, #160]	@ (800cdb8 <_strtod_l+0x598>)
 800cd18:	460a      	mov	r2, r1
 800cd1a:	400b      	ands	r3, r1
 800cd1c:	4927      	ldr	r1, [pc, #156]	@ (800cdbc <_strtod_l+0x59c>)
 800cd1e:	428b      	cmp	r3, r1
 800cd20:	4682      	mov	sl, r0
 800cd22:	d898      	bhi.n	800cc56 <_strtod_l+0x436>
 800cd24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cd28:	428b      	cmp	r3, r1
 800cd2a:	bf86      	itte	hi
 800cd2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cdc0 <_strtod_l+0x5a0>
 800cd30:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9308      	str	r3, [sp, #32]
 800cd3c:	e07a      	b.n	800ce34 <_strtod_l+0x614>
 800cd3e:	07e2      	lsls	r2, r4, #31
 800cd40:	d505      	bpl.n	800cd4e <_strtod_l+0x52e>
 800cd42:	9b08      	ldr	r3, [sp, #32]
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	f7f3 fc8e 	bl	8000668 <__aeabi_dmul>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	9a08      	ldr	r2, [sp, #32]
 800cd50:	3208      	adds	r2, #8
 800cd52:	3601      	adds	r6, #1
 800cd54:	1064      	asrs	r4, r4, #1
 800cd56:	9208      	str	r2, [sp, #32]
 800cd58:	e7cd      	b.n	800ccf6 <_strtod_l+0x4d6>
 800cd5a:	d0ed      	beq.n	800cd38 <_strtod_l+0x518>
 800cd5c:	4264      	negs	r4, r4
 800cd5e:	f014 020f 	ands.w	r2, r4, #15
 800cd62:	d00a      	beq.n	800cd7a <_strtod_l+0x55a>
 800cd64:	4b12      	ldr	r3, [pc, #72]	@ (800cdb0 <_strtod_l+0x590>)
 800cd66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd6a:	4650      	mov	r0, sl
 800cd6c:	4659      	mov	r1, fp
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	f7f3 fda3 	bl	80008bc <__aeabi_ddiv>
 800cd76:	4682      	mov	sl, r0
 800cd78:	468b      	mov	fp, r1
 800cd7a:	1124      	asrs	r4, r4, #4
 800cd7c:	d0dc      	beq.n	800cd38 <_strtod_l+0x518>
 800cd7e:	2c1f      	cmp	r4, #31
 800cd80:	dd20      	ble.n	800cdc4 <_strtod_l+0x5a4>
 800cd82:	2400      	movs	r4, #0
 800cd84:	46a0      	mov	r8, r4
 800cd86:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd88:	46a1      	mov	r9, r4
 800cd8a:	9a05      	ldr	r2, [sp, #20]
 800cd8c:	2322      	movs	r3, #34	@ 0x22
 800cd8e:	f04f 0a00 	mov.w	sl, #0
 800cd92:	f04f 0b00 	mov.w	fp, #0
 800cd96:	6013      	str	r3, [r2, #0]
 800cd98:	e768      	b.n	800cc6c <_strtod_l+0x44c>
 800cd9a:	bf00      	nop
 800cd9c:	0800e742 	.word	0x0800e742
 800cda0:	0800e9ec 	.word	0x0800e9ec
 800cda4:	0800e73a 	.word	0x0800e73a
 800cda8:	0800e81e 	.word	0x0800e81e
 800cdac:	0800e81a 	.word	0x0800e81a
 800cdb0:	0800e920 	.word	0x0800e920
 800cdb4:	0800e8f8 	.word	0x0800e8f8
 800cdb8:	7ff00000 	.word	0x7ff00000
 800cdbc:	7ca00000 	.word	0x7ca00000
 800cdc0:	7fefffff 	.word	0x7fefffff
 800cdc4:	f014 0310 	ands.w	r3, r4, #16
 800cdc8:	bf18      	it	ne
 800cdca:	236a      	movne	r3, #106	@ 0x6a
 800cdcc:	4ea9      	ldr	r6, [pc, #676]	@ (800d074 <_strtod_l+0x854>)
 800cdce:	9308      	str	r3, [sp, #32]
 800cdd0:	4650      	mov	r0, sl
 800cdd2:	4659      	mov	r1, fp
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	07e2      	lsls	r2, r4, #31
 800cdd8:	d504      	bpl.n	800cde4 <_strtod_l+0x5c4>
 800cdda:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cdde:	f7f3 fc43 	bl	8000668 <__aeabi_dmul>
 800cde2:	2301      	movs	r3, #1
 800cde4:	1064      	asrs	r4, r4, #1
 800cde6:	f106 0608 	add.w	r6, r6, #8
 800cdea:	d1f4      	bne.n	800cdd6 <_strtod_l+0x5b6>
 800cdec:	b10b      	cbz	r3, 800cdf2 <_strtod_l+0x5d2>
 800cdee:	4682      	mov	sl, r0
 800cdf0:	468b      	mov	fp, r1
 800cdf2:	9b08      	ldr	r3, [sp, #32]
 800cdf4:	b1b3      	cbz	r3, 800ce24 <_strtod_l+0x604>
 800cdf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cdfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	4659      	mov	r1, fp
 800ce02:	dd0f      	ble.n	800ce24 <_strtod_l+0x604>
 800ce04:	2b1f      	cmp	r3, #31
 800ce06:	dd55      	ble.n	800ceb4 <_strtod_l+0x694>
 800ce08:	2b34      	cmp	r3, #52	@ 0x34
 800ce0a:	bfde      	ittt	le
 800ce0c:	f04f 33ff 	movle.w	r3, #4294967295
 800ce10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ce14:	4093      	lslle	r3, r2
 800ce16:	f04f 0a00 	mov.w	sl, #0
 800ce1a:	bfcc      	ite	gt
 800ce1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ce20:	ea03 0b01 	andle.w	fp, r3, r1
 800ce24:	2200      	movs	r2, #0
 800ce26:	2300      	movs	r3, #0
 800ce28:	4650      	mov	r0, sl
 800ce2a:	4659      	mov	r1, fp
 800ce2c:	f7f3 fe84 	bl	8000b38 <__aeabi_dcmpeq>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d1a6      	bne.n	800cd82 <_strtod_l+0x562>
 800ce34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce3a:	9805      	ldr	r0, [sp, #20]
 800ce3c:	462b      	mov	r3, r5
 800ce3e:	463a      	mov	r2, r7
 800ce40:	f7ff f8c6 	bl	800bfd0 <__s2b>
 800ce44:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f43f af05 	beq.w	800cc56 <_strtod_l+0x436>
 800ce4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	eba9 0308 	sub.w	r3, r9, r8
 800ce54:	bfa8      	it	ge
 800ce56:	2300      	movge	r3, #0
 800ce58:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce5a:	2400      	movs	r4, #0
 800ce5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce60:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce62:	46a0      	mov	r8, r4
 800ce64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce66:	9805      	ldr	r0, [sp, #20]
 800ce68:	6859      	ldr	r1, [r3, #4]
 800ce6a:	f7ff f809 	bl	800be80 <_Balloc>
 800ce6e:	4681      	mov	r9, r0
 800ce70:	2800      	cmp	r0, #0
 800ce72:	f43f aef4 	beq.w	800cc5e <_strtod_l+0x43e>
 800ce76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce78:	691a      	ldr	r2, [r3, #16]
 800ce7a:	3202      	adds	r2, #2
 800ce7c:	f103 010c 	add.w	r1, r3, #12
 800ce80:	0092      	lsls	r2, r2, #2
 800ce82:	300c      	adds	r0, #12
 800ce84:	f000 fede 	bl	800dc44 <memcpy>
 800ce88:	ec4b ab10 	vmov	d0, sl, fp
 800ce8c:	9805      	ldr	r0, [sp, #20]
 800ce8e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce90:	a91b      	add	r1, sp, #108	@ 0x6c
 800ce92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ce96:	f7ff fbd7 	bl	800c648 <__d2b>
 800ce9a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	f43f aede 	beq.w	800cc5e <_strtod_l+0x43e>
 800cea2:	9805      	ldr	r0, [sp, #20]
 800cea4:	2101      	movs	r1, #1
 800cea6:	f7ff f929 	bl	800c0fc <__i2b>
 800ceaa:	4680      	mov	r8, r0
 800ceac:	b948      	cbnz	r0, 800cec2 <_strtod_l+0x6a2>
 800ceae:	f04f 0800 	mov.w	r8, #0
 800ceb2:	e6d4      	b.n	800cc5e <_strtod_l+0x43e>
 800ceb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cebc:	ea03 0a0a 	and.w	sl, r3, sl
 800cec0:	e7b0      	b.n	800ce24 <_strtod_l+0x604>
 800cec2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cec4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	bfab      	itete	ge
 800ceca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cecc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cece:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ced0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ced2:	bfac      	ite	ge
 800ced4:	18ef      	addge	r7, r5, r3
 800ced6:	1b5e      	sublt	r6, r3, r5
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	1aed      	subs	r5, r5, r3
 800cedc:	4415      	add	r5, r2
 800cede:	4b66      	ldr	r3, [pc, #408]	@ (800d078 <_strtod_l+0x858>)
 800cee0:	3d01      	subs	r5, #1
 800cee2:	429d      	cmp	r5, r3
 800cee4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cee8:	da50      	bge.n	800cf8c <_strtod_l+0x76c>
 800ceea:	1b5b      	subs	r3, r3, r5
 800ceec:	2b1f      	cmp	r3, #31
 800ceee:	eba2 0203 	sub.w	r2, r2, r3
 800cef2:	f04f 0101 	mov.w	r1, #1
 800cef6:	dc3d      	bgt.n	800cf74 <_strtod_l+0x754>
 800cef8:	fa01 f303 	lsl.w	r3, r1, r3
 800cefc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cefe:	2300      	movs	r3, #0
 800cf00:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf02:	18bd      	adds	r5, r7, r2
 800cf04:	9b08      	ldr	r3, [sp, #32]
 800cf06:	42af      	cmp	r7, r5
 800cf08:	4416      	add	r6, r2
 800cf0a:	441e      	add	r6, r3
 800cf0c:	463b      	mov	r3, r7
 800cf0e:	bfa8      	it	ge
 800cf10:	462b      	movge	r3, r5
 800cf12:	42b3      	cmp	r3, r6
 800cf14:	bfa8      	it	ge
 800cf16:	4633      	movge	r3, r6
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	bfc2      	ittt	gt
 800cf1c:	1aed      	subgt	r5, r5, r3
 800cf1e:	1af6      	subgt	r6, r6, r3
 800cf20:	1aff      	subgt	r7, r7, r3
 800cf22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	dd16      	ble.n	800cf56 <_strtod_l+0x736>
 800cf28:	4641      	mov	r1, r8
 800cf2a:	9805      	ldr	r0, [sp, #20]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	f7ff f9a5 	bl	800c27c <__pow5mult>
 800cf32:	4680      	mov	r8, r0
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d0ba      	beq.n	800ceae <_strtod_l+0x68e>
 800cf38:	4601      	mov	r1, r0
 800cf3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf3c:	9805      	ldr	r0, [sp, #20]
 800cf3e:	f7ff f8f3 	bl	800c128 <__multiply>
 800cf42:	900e      	str	r0, [sp, #56]	@ 0x38
 800cf44:	2800      	cmp	r0, #0
 800cf46:	f43f ae8a 	beq.w	800cc5e <_strtod_l+0x43e>
 800cf4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf4c:	9805      	ldr	r0, [sp, #20]
 800cf4e:	f7fe ffd7 	bl	800bf00 <_Bfree>
 800cf52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf54:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf56:	2d00      	cmp	r5, #0
 800cf58:	dc1d      	bgt.n	800cf96 <_strtod_l+0x776>
 800cf5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dd23      	ble.n	800cfa8 <_strtod_l+0x788>
 800cf60:	4649      	mov	r1, r9
 800cf62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf64:	9805      	ldr	r0, [sp, #20]
 800cf66:	f7ff f989 	bl	800c27c <__pow5mult>
 800cf6a:	4681      	mov	r9, r0
 800cf6c:	b9e0      	cbnz	r0, 800cfa8 <_strtod_l+0x788>
 800cf6e:	f04f 0900 	mov.w	r9, #0
 800cf72:	e674      	b.n	800cc5e <_strtod_l+0x43e>
 800cf74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cf78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cf7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cf80:	35e2      	adds	r5, #226	@ 0xe2
 800cf82:	fa01 f305 	lsl.w	r3, r1, r5
 800cf86:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf88:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cf8a:	e7ba      	b.n	800cf02 <_strtod_l+0x6e2>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf90:	2301      	movs	r3, #1
 800cf92:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf94:	e7b5      	b.n	800cf02 <_strtod_l+0x6e2>
 800cf96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf98:	9805      	ldr	r0, [sp, #20]
 800cf9a:	462a      	mov	r2, r5
 800cf9c:	f7ff f9c8 	bl	800c330 <__lshift>
 800cfa0:	901a      	str	r0, [sp, #104]	@ 0x68
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	d1d9      	bne.n	800cf5a <_strtod_l+0x73a>
 800cfa6:	e65a      	b.n	800cc5e <_strtod_l+0x43e>
 800cfa8:	2e00      	cmp	r6, #0
 800cfaa:	dd07      	ble.n	800cfbc <_strtod_l+0x79c>
 800cfac:	4649      	mov	r1, r9
 800cfae:	9805      	ldr	r0, [sp, #20]
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	f7ff f9bd 	bl	800c330 <__lshift>
 800cfb6:	4681      	mov	r9, r0
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d0d8      	beq.n	800cf6e <_strtod_l+0x74e>
 800cfbc:	2f00      	cmp	r7, #0
 800cfbe:	dd08      	ble.n	800cfd2 <_strtod_l+0x7b2>
 800cfc0:	4641      	mov	r1, r8
 800cfc2:	9805      	ldr	r0, [sp, #20]
 800cfc4:	463a      	mov	r2, r7
 800cfc6:	f7ff f9b3 	bl	800c330 <__lshift>
 800cfca:	4680      	mov	r8, r0
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f43f ae46 	beq.w	800cc5e <_strtod_l+0x43e>
 800cfd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfd4:	9805      	ldr	r0, [sp, #20]
 800cfd6:	464a      	mov	r2, r9
 800cfd8:	f7ff fa32 	bl	800c440 <__mdiff>
 800cfdc:	4604      	mov	r4, r0
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	f43f ae3d 	beq.w	800cc5e <_strtod_l+0x43e>
 800cfe4:	68c3      	ldr	r3, [r0, #12]
 800cfe6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cfe8:	2300      	movs	r3, #0
 800cfea:	60c3      	str	r3, [r0, #12]
 800cfec:	4641      	mov	r1, r8
 800cfee:	f7ff fa0b 	bl	800c408 <__mcmp>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	da46      	bge.n	800d084 <_strtod_l+0x864>
 800cff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cff8:	ea53 030a 	orrs.w	r3, r3, sl
 800cffc:	d16c      	bne.n	800d0d8 <_strtod_l+0x8b8>
 800cffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d002:	2b00      	cmp	r3, #0
 800d004:	d168      	bne.n	800d0d8 <_strtod_l+0x8b8>
 800d006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d00a:	0d1b      	lsrs	r3, r3, #20
 800d00c:	051b      	lsls	r3, r3, #20
 800d00e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d012:	d961      	bls.n	800d0d8 <_strtod_l+0x8b8>
 800d014:	6963      	ldr	r3, [r4, #20]
 800d016:	b913      	cbnz	r3, 800d01e <_strtod_l+0x7fe>
 800d018:	6923      	ldr	r3, [r4, #16]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	dd5c      	ble.n	800d0d8 <_strtod_l+0x8b8>
 800d01e:	4621      	mov	r1, r4
 800d020:	2201      	movs	r2, #1
 800d022:	9805      	ldr	r0, [sp, #20]
 800d024:	f7ff f984 	bl	800c330 <__lshift>
 800d028:	4641      	mov	r1, r8
 800d02a:	4604      	mov	r4, r0
 800d02c:	f7ff f9ec 	bl	800c408 <__mcmp>
 800d030:	2800      	cmp	r0, #0
 800d032:	dd51      	ble.n	800d0d8 <_strtod_l+0x8b8>
 800d034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d038:	9a08      	ldr	r2, [sp, #32]
 800d03a:	0d1b      	lsrs	r3, r3, #20
 800d03c:	051b      	lsls	r3, r3, #20
 800d03e:	2a00      	cmp	r2, #0
 800d040:	d06b      	beq.n	800d11a <_strtod_l+0x8fa>
 800d042:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d046:	d868      	bhi.n	800d11a <_strtod_l+0x8fa>
 800d048:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d04c:	f67f ae9d 	bls.w	800cd8a <_strtod_l+0x56a>
 800d050:	4b0a      	ldr	r3, [pc, #40]	@ (800d07c <_strtod_l+0x85c>)
 800d052:	4650      	mov	r0, sl
 800d054:	4659      	mov	r1, fp
 800d056:	2200      	movs	r2, #0
 800d058:	f7f3 fb06 	bl	8000668 <__aeabi_dmul>
 800d05c:	4b08      	ldr	r3, [pc, #32]	@ (800d080 <_strtod_l+0x860>)
 800d05e:	400b      	ands	r3, r1
 800d060:	4682      	mov	sl, r0
 800d062:	468b      	mov	fp, r1
 800d064:	2b00      	cmp	r3, #0
 800d066:	f47f ae05 	bne.w	800cc74 <_strtod_l+0x454>
 800d06a:	9a05      	ldr	r2, [sp, #20]
 800d06c:	2322      	movs	r3, #34	@ 0x22
 800d06e:	6013      	str	r3, [r2, #0]
 800d070:	e600      	b.n	800cc74 <_strtod_l+0x454>
 800d072:	bf00      	nop
 800d074:	0800ea18 	.word	0x0800ea18
 800d078:	fffffc02 	.word	0xfffffc02
 800d07c:	39500000 	.word	0x39500000
 800d080:	7ff00000 	.word	0x7ff00000
 800d084:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d088:	d165      	bne.n	800d156 <_strtod_l+0x936>
 800d08a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d08c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d090:	b35a      	cbz	r2, 800d0ea <_strtod_l+0x8ca>
 800d092:	4a9f      	ldr	r2, [pc, #636]	@ (800d310 <_strtod_l+0xaf0>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d12b      	bne.n	800d0f0 <_strtod_l+0x8d0>
 800d098:	9b08      	ldr	r3, [sp, #32]
 800d09a:	4651      	mov	r1, sl
 800d09c:	b303      	cbz	r3, 800d0e0 <_strtod_l+0x8c0>
 800d09e:	4b9d      	ldr	r3, [pc, #628]	@ (800d314 <_strtod_l+0xaf4>)
 800d0a0:	465a      	mov	r2, fp
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ac:	d81b      	bhi.n	800d0e6 <_strtod_l+0x8c6>
 800d0ae:	0d1b      	lsrs	r3, r3, #20
 800d0b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b8:	4299      	cmp	r1, r3
 800d0ba:	d119      	bne.n	800d0f0 <_strtod_l+0x8d0>
 800d0bc:	4b96      	ldr	r3, [pc, #600]	@ (800d318 <_strtod_l+0xaf8>)
 800d0be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d102      	bne.n	800d0ca <_strtod_l+0x8aa>
 800d0c4:	3101      	adds	r1, #1
 800d0c6:	f43f adca 	beq.w	800cc5e <_strtod_l+0x43e>
 800d0ca:	4b92      	ldr	r3, [pc, #584]	@ (800d314 <_strtod_l+0xaf4>)
 800d0cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0ce:	401a      	ands	r2, r3
 800d0d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d0d4:	f04f 0a00 	mov.w	sl, #0
 800d0d8:	9b08      	ldr	r3, [sp, #32]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1b8      	bne.n	800d050 <_strtod_l+0x830>
 800d0de:	e5c9      	b.n	800cc74 <_strtod_l+0x454>
 800d0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e4:	e7e8      	b.n	800d0b8 <_strtod_l+0x898>
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	e7e6      	b.n	800d0b8 <_strtod_l+0x898>
 800d0ea:	ea53 030a 	orrs.w	r3, r3, sl
 800d0ee:	d0a1      	beq.n	800d034 <_strtod_l+0x814>
 800d0f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0f2:	b1db      	cbz	r3, 800d12c <_strtod_l+0x90c>
 800d0f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0f6:	4213      	tst	r3, r2
 800d0f8:	d0ee      	beq.n	800d0d8 <_strtod_l+0x8b8>
 800d0fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fc:	9a08      	ldr	r2, [sp, #32]
 800d0fe:	4650      	mov	r0, sl
 800d100:	4659      	mov	r1, fp
 800d102:	b1bb      	cbz	r3, 800d134 <_strtod_l+0x914>
 800d104:	f7ff fb6e 	bl	800c7e4 <sulp>
 800d108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d10c:	ec53 2b10 	vmov	r2, r3, d0
 800d110:	f7f3 f8f4 	bl	80002fc <__adddf3>
 800d114:	4682      	mov	sl, r0
 800d116:	468b      	mov	fp, r1
 800d118:	e7de      	b.n	800d0d8 <_strtod_l+0x8b8>
 800d11a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d11e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d122:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d126:	f04f 3aff 	mov.w	sl, #4294967295
 800d12a:	e7d5      	b.n	800d0d8 <_strtod_l+0x8b8>
 800d12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d12e:	ea13 0f0a 	tst.w	r3, sl
 800d132:	e7e1      	b.n	800d0f8 <_strtod_l+0x8d8>
 800d134:	f7ff fb56 	bl	800c7e4 <sulp>
 800d138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d13c:	ec53 2b10 	vmov	r2, r3, d0
 800d140:	f7f3 f8da 	bl	80002f8 <__aeabi_dsub>
 800d144:	2200      	movs	r2, #0
 800d146:	2300      	movs	r3, #0
 800d148:	4682      	mov	sl, r0
 800d14a:	468b      	mov	fp, r1
 800d14c:	f7f3 fcf4 	bl	8000b38 <__aeabi_dcmpeq>
 800d150:	2800      	cmp	r0, #0
 800d152:	d0c1      	beq.n	800d0d8 <_strtod_l+0x8b8>
 800d154:	e619      	b.n	800cd8a <_strtod_l+0x56a>
 800d156:	4641      	mov	r1, r8
 800d158:	4620      	mov	r0, r4
 800d15a:	f7ff facd 	bl	800c6f8 <__ratio>
 800d15e:	ec57 6b10 	vmov	r6, r7, d0
 800d162:	2200      	movs	r2, #0
 800d164:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d168:	4630      	mov	r0, r6
 800d16a:	4639      	mov	r1, r7
 800d16c:	f7f3 fcf8 	bl	8000b60 <__aeabi_dcmple>
 800d170:	2800      	cmp	r0, #0
 800d172:	d06f      	beq.n	800d254 <_strtod_l+0xa34>
 800d174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d176:	2b00      	cmp	r3, #0
 800d178:	d17a      	bne.n	800d270 <_strtod_l+0xa50>
 800d17a:	f1ba 0f00 	cmp.w	sl, #0
 800d17e:	d158      	bne.n	800d232 <_strtod_l+0xa12>
 800d180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d186:	2b00      	cmp	r3, #0
 800d188:	d15a      	bne.n	800d240 <_strtod_l+0xa20>
 800d18a:	4b64      	ldr	r3, [pc, #400]	@ (800d31c <_strtod_l+0xafc>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	4630      	mov	r0, r6
 800d190:	4639      	mov	r1, r7
 800d192:	f7f3 fcdb 	bl	8000b4c <__aeabi_dcmplt>
 800d196:	2800      	cmp	r0, #0
 800d198:	d159      	bne.n	800d24e <_strtod_l+0xa2e>
 800d19a:	4630      	mov	r0, r6
 800d19c:	4639      	mov	r1, r7
 800d19e:	4b60      	ldr	r3, [pc, #384]	@ (800d320 <_strtod_l+0xb00>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f7f3 fa61 	bl	8000668 <__aeabi_dmul>
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	460f      	mov	r7, r1
 800d1aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d1ae:	9606      	str	r6, [sp, #24]
 800d1b0:	9307      	str	r3, [sp, #28]
 800d1b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1b6:	4d57      	ldr	r5, [pc, #348]	@ (800d314 <_strtod_l+0xaf4>)
 800d1b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d1bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1be:	401d      	ands	r5, r3
 800d1c0:	4b58      	ldr	r3, [pc, #352]	@ (800d324 <_strtod_l+0xb04>)
 800d1c2:	429d      	cmp	r5, r3
 800d1c4:	f040 80b2 	bne.w	800d32c <_strtod_l+0xb0c>
 800d1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d1ce:	ec4b ab10 	vmov	d0, sl, fp
 800d1d2:	f7ff f9c9 	bl	800c568 <__ulp>
 800d1d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1da:	ec51 0b10 	vmov	r0, r1, d0
 800d1de:	f7f3 fa43 	bl	8000668 <__aeabi_dmul>
 800d1e2:	4652      	mov	r2, sl
 800d1e4:	465b      	mov	r3, fp
 800d1e6:	f7f3 f889 	bl	80002fc <__adddf3>
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4949      	ldr	r1, [pc, #292]	@ (800d314 <_strtod_l+0xaf4>)
 800d1ee:	4a4e      	ldr	r2, [pc, #312]	@ (800d328 <_strtod_l+0xb08>)
 800d1f0:	4019      	ands	r1, r3
 800d1f2:	4291      	cmp	r1, r2
 800d1f4:	4682      	mov	sl, r0
 800d1f6:	d942      	bls.n	800d27e <_strtod_l+0xa5e>
 800d1f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1fa:	4b47      	ldr	r3, [pc, #284]	@ (800d318 <_strtod_l+0xaf8>)
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d103      	bne.n	800d208 <_strtod_l+0x9e8>
 800d200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d202:	3301      	adds	r3, #1
 800d204:	f43f ad2b 	beq.w	800cc5e <_strtod_l+0x43e>
 800d208:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d318 <_strtod_l+0xaf8>
 800d20c:	f04f 3aff 	mov.w	sl, #4294967295
 800d210:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d212:	9805      	ldr	r0, [sp, #20]
 800d214:	f7fe fe74 	bl	800bf00 <_Bfree>
 800d218:	9805      	ldr	r0, [sp, #20]
 800d21a:	4649      	mov	r1, r9
 800d21c:	f7fe fe70 	bl	800bf00 <_Bfree>
 800d220:	9805      	ldr	r0, [sp, #20]
 800d222:	4641      	mov	r1, r8
 800d224:	f7fe fe6c 	bl	800bf00 <_Bfree>
 800d228:	9805      	ldr	r0, [sp, #20]
 800d22a:	4621      	mov	r1, r4
 800d22c:	f7fe fe68 	bl	800bf00 <_Bfree>
 800d230:	e618      	b.n	800ce64 <_strtod_l+0x644>
 800d232:	f1ba 0f01 	cmp.w	sl, #1
 800d236:	d103      	bne.n	800d240 <_strtod_l+0xa20>
 800d238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f43f ada5 	beq.w	800cd8a <_strtod_l+0x56a>
 800d240:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d2f0 <_strtod_l+0xad0>
 800d244:	4f35      	ldr	r7, [pc, #212]	@ (800d31c <_strtod_l+0xafc>)
 800d246:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d24a:	2600      	movs	r6, #0
 800d24c:	e7b1      	b.n	800d1b2 <_strtod_l+0x992>
 800d24e:	4f34      	ldr	r7, [pc, #208]	@ (800d320 <_strtod_l+0xb00>)
 800d250:	2600      	movs	r6, #0
 800d252:	e7aa      	b.n	800d1aa <_strtod_l+0x98a>
 800d254:	4b32      	ldr	r3, [pc, #200]	@ (800d320 <_strtod_l+0xb00>)
 800d256:	4630      	mov	r0, r6
 800d258:	4639      	mov	r1, r7
 800d25a:	2200      	movs	r2, #0
 800d25c:	f7f3 fa04 	bl	8000668 <__aeabi_dmul>
 800d260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d262:	4606      	mov	r6, r0
 800d264:	460f      	mov	r7, r1
 800d266:	2b00      	cmp	r3, #0
 800d268:	d09f      	beq.n	800d1aa <_strtod_l+0x98a>
 800d26a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d26e:	e7a0      	b.n	800d1b2 <_strtod_l+0x992>
 800d270:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d2f8 <_strtod_l+0xad8>
 800d274:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d278:	ec57 6b17 	vmov	r6, r7, d7
 800d27c:	e799      	b.n	800d1b2 <_strtod_l+0x992>
 800d27e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d282:	9b08      	ldr	r3, [sp, #32]
 800d284:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1c1      	bne.n	800d210 <_strtod_l+0x9f0>
 800d28c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d290:	0d1b      	lsrs	r3, r3, #20
 800d292:	051b      	lsls	r3, r3, #20
 800d294:	429d      	cmp	r5, r3
 800d296:	d1bb      	bne.n	800d210 <_strtod_l+0x9f0>
 800d298:	4630      	mov	r0, r6
 800d29a:	4639      	mov	r1, r7
 800d29c:	f7f3 fd44 	bl	8000d28 <__aeabi_d2lz>
 800d2a0:	f7f3 f9b4 	bl	800060c <__aeabi_l2d>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	f7f3 f824 	bl	80002f8 <__aeabi_dsub>
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d2b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2be:	ea46 060a 	orr.w	r6, r6, sl
 800d2c2:	431e      	orrs	r6, r3
 800d2c4:	d06f      	beq.n	800d3a6 <_strtod_l+0xb86>
 800d2c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d300 <_strtod_l+0xae0>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	f7f3 fc3e 	bl	8000b4c <__aeabi_dcmplt>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	f47f accf 	bne.w	800cc74 <_strtod_l+0x454>
 800d2d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d308 <_strtod_l+0xae8>)
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2e0:	f7f3 fc52 	bl	8000b88 <__aeabi_dcmpgt>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d093      	beq.n	800d210 <_strtod_l+0x9f0>
 800d2e8:	e4c4      	b.n	800cc74 <_strtod_l+0x454>
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w
 800d2f0:	00000000 	.word	0x00000000
 800d2f4:	bff00000 	.word	0xbff00000
 800d2f8:	00000000 	.word	0x00000000
 800d2fc:	3ff00000 	.word	0x3ff00000
 800d300:	94a03595 	.word	0x94a03595
 800d304:	3fdfffff 	.word	0x3fdfffff
 800d308:	35afe535 	.word	0x35afe535
 800d30c:	3fe00000 	.word	0x3fe00000
 800d310:	000fffff 	.word	0x000fffff
 800d314:	7ff00000 	.word	0x7ff00000
 800d318:	7fefffff 	.word	0x7fefffff
 800d31c:	3ff00000 	.word	0x3ff00000
 800d320:	3fe00000 	.word	0x3fe00000
 800d324:	7fe00000 	.word	0x7fe00000
 800d328:	7c9fffff 	.word	0x7c9fffff
 800d32c:	9b08      	ldr	r3, [sp, #32]
 800d32e:	b323      	cbz	r3, 800d37a <_strtod_l+0xb5a>
 800d330:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d334:	d821      	bhi.n	800d37a <_strtod_l+0xb5a>
 800d336:	a328      	add	r3, pc, #160	@ (adr r3, 800d3d8 <_strtod_l+0xbb8>)
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	4630      	mov	r0, r6
 800d33e:	4639      	mov	r1, r7
 800d340:	f7f3 fc0e 	bl	8000b60 <__aeabi_dcmple>
 800d344:	b1a0      	cbz	r0, 800d370 <_strtod_l+0xb50>
 800d346:	4639      	mov	r1, r7
 800d348:	4630      	mov	r0, r6
 800d34a:	f7f3 fc65 	bl	8000c18 <__aeabi_d2uiz>
 800d34e:	2801      	cmp	r0, #1
 800d350:	bf38      	it	cc
 800d352:	2001      	movcc	r0, #1
 800d354:	f7f3 f90e 	bl	8000574 <__aeabi_ui2d>
 800d358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d35a:	4606      	mov	r6, r0
 800d35c:	460f      	mov	r7, r1
 800d35e:	b9fb      	cbnz	r3, 800d3a0 <_strtod_l+0xb80>
 800d360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d364:	9014      	str	r0, [sp, #80]	@ 0x50
 800d366:	9315      	str	r3, [sp, #84]	@ 0x54
 800d368:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d36c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d370:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d372:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d376:	1b5b      	subs	r3, r3, r5
 800d378:	9311      	str	r3, [sp, #68]	@ 0x44
 800d37a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d37e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d382:	f7ff f8f1 	bl	800c568 <__ulp>
 800d386:	4650      	mov	r0, sl
 800d388:	ec53 2b10 	vmov	r2, r3, d0
 800d38c:	4659      	mov	r1, fp
 800d38e:	f7f3 f96b 	bl	8000668 <__aeabi_dmul>
 800d392:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d396:	f7f2 ffb1 	bl	80002fc <__adddf3>
 800d39a:	4682      	mov	sl, r0
 800d39c:	468b      	mov	fp, r1
 800d39e:	e770      	b.n	800d282 <_strtod_l+0xa62>
 800d3a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d3a4:	e7e0      	b.n	800d368 <_strtod_l+0xb48>
 800d3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3e0 <_strtod_l+0xbc0>)
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	f7f3 fbce 	bl	8000b4c <__aeabi_dcmplt>
 800d3b0:	e798      	b.n	800d2e4 <_strtod_l+0xac4>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d3b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3ba:	6013      	str	r3, [r2, #0]
 800d3bc:	f7ff ba6d 	b.w	800c89a <_strtod_l+0x7a>
 800d3c0:	2a65      	cmp	r2, #101	@ 0x65
 800d3c2:	f43f ab66 	beq.w	800ca92 <_strtod_l+0x272>
 800d3c6:	2a45      	cmp	r2, #69	@ 0x45
 800d3c8:	f43f ab63 	beq.w	800ca92 <_strtod_l+0x272>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f7ff bb9e 	b.w	800cb0e <_strtod_l+0x2ee>
 800d3d2:	bf00      	nop
 800d3d4:	f3af 8000 	nop.w
 800d3d8:	ffc00000 	.word	0xffc00000
 800d3dc:	41dfffff 	.word	0x41dfffff
 800d3e0:	94a03595 	.word	0x94a03595
 800d3e4:	3fcfffff 	.word	0x3fcfffff

0800d3e8 <_strtod_r>:
 800d3e8:	4b01      	ldr	r3, [pc, #4]	@ (800d3f0 <_strtod_r+0x8>)
 800d3ea:	f7ff ba19 	b.w	800c820 <_strtod_l>
 800d3ee:	bf00      	nop
 800d3f0:	20000138 	.word	0x20000138

0800d3f4 <__ssputs_r>:
 800d3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f8:	688e      	ldr	r6, [r1, #8]
 800d3fa:	461f      	mov	r7, r3
 800d3fc:	42be      	cmp	r6, r7
 800d3fe:	680b      	ldr	r3, [r1, #0]
 800d400:	4682      	mov	sl, r0
 800d402:	460c      	mov	r4, r1
 800d404:	4690      	mov	r8, r2
 800d406:	d82d      	bhi.n	800d464 <__ssputs_r+0x70>
 800d408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d40c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d410:	d026      	beq.n	800d460 <__ssputs_r+0x6c>
 800d412:	6965      	ldr	r5, [r4, #20]
 800d414:	6909      	ldr	r1, [r1, #16]
 800d416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d41a:	eba3 0901 	sub.w	r9, r3, r1
 800d41e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d422:	1c7b      	adds	r3, r7, #1
 800d424:	444b      	add	r3, r9
 800d426:	106d      	asrs	r5, r5, #1
 800d428:	429d      	cmp	r5, r3
 800d42a:	bf38      	it	cc
 800d42c:	461d      	movcc	r5, r3
 800d42e:	0553      	lsls	r3, r2, #21
 800d430:	d527      	bpl.n	800d482 <__ssputs_r+0x8e>
 800d432:	4629      	mov	r1, r5
 800d434:	f7fe fc98 	bl	800bd68 <_malloc_r>
 800d438:	4606      	mov	r6, r0
 800d43a:	b360      	cbz	r0, 800d496 <__ssputs_r+0xa2>
 800d43c:	6921      	ldr	r1, [r4, #16]
 800d43e:	464a      	mov	r2, r9
 800d440:	f000 fc00 	bl	800dc44 <memcpy>
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d44e:	81a3      	strh	r3, [r4, #12]
 800d450:	6126      	str	r6, [r4, #16]
 800d452:	6165      	str	r5, [r4, #20]
 800d454:	444e      	add	r6, r9
 800d456:	eba5 0509 	sub.w	r5, r5, r9
 800d45a:	6026      	str	r6, [r4, #0]
 800d45c:	60a5      	str	r5, [r4, #8]
 800d45e:	463e      	mov	r6, r7
 800d460:	42be      	cmp	r6, r7
 800d462:	d900      	bls.n	800d466 <__ssputs_r+0x72>
 800d464:	463e      	mov	r6, r7
 800d466:	6820      	ldr	r0, [r4, #0]
 800d468:	4632      	mov	r2, r6
 800d46a:	4641      	mov	r1, r8
 800d46c:	f000 fbae 	bl	800dbcc <memmove>
 800d470:	68a3      	ldr	r3, [r4, #8]
 800d472:	1b9b      	subs	r3, r3, r6
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	4433      	add	r3, r6
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	2000      	movs	r0, #0
 800d47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d482:	462a      	mov	r2, r5
 800d484:	f000 ff59 	bl	800e33a <_realloc_r>
 800d488:	4606      	mov	r6, r0
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d1e0      	bne.n	800d450 <__ssputs_r+0x5c>
 800d48e:	6921      	ldr	r1, [r4, #16]
 800d490:	4650      	mov	r0, sl
 800d492:	f7fe fbf5 	bl	800bc80 <_free_r>
 800d496:	230c      	movs	r3, #12
 800d498:	f8ca 3000 	str.w	r3, [sl]
 800d49c:	89a3      	ldrh	r3, [r4, #12]
 800d49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4a2:	81a3      	strh	r3, [r4, #12]
 800d4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a8:	e7e9      	b.n	800d47e <__ssputs_r+0x8a>
	...

0800d4ac <_svfiprintf_r>:
 800d4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b0:	4698      	mov	r8, r3
 800d4b2:	898b      	ldrh	r3, [r1, #12]
 800d4b4:	061b      	lsls	r3, r3, #24
 800d4b6:	b09d      	sub	sp, #116	@ 0x74
 800d4b8:	4607      	mov	r7, r0
 800d4ba:	460d      	mov	r5, r1
 800d4bc:	4614      	mov	r4, r2
 800d4be:	d510      	bpl.n	800d4e2 <_svfiprintf_r+0x36>
 800d4c0:	690b      	ldr	r3, [r1, #16]
 800d4c2:	b973      	cbnz	r3, 800d4e2 <_svfiprintf_r+0x36>
 800d4c4:	2140      	movs	r1, #64	@ 0x40
 800d4c6:	f7fe fc4f 	bl	800bd68 <_malloc_r>
 800d4ca:	6028      	str	r0, [r5, #0]
 800d4cc:	6128      	str	r0, [r5, #16]
 800d4ce:	b930      	cbnz	r0, 800d4de <_svfiprintf_r+0x32>
 800d4d0:	230c      	movs	r3, #12
 800d4d2:	603b      	str	r3, [r7, #0]
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d8:	b01d      	add	sp, #116	@ 0x74
 800d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4de:	2340      	movs	r3, #64	@ 0x40
 800d4e0:	616b      	str	r3, [r5, #20]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4e6:	2320      	movs	r3, #32
 800d4e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f0:	2330      	movs	r3, #48	@ 0x30
 800d4f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d690 <_svfiprintf_r+0x1e4>
 800d4f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4fa:	f04f 0901 	mov.w	r9, #1
 800d4fe:	4623      	mov	r3, r4
 800d500:	469a      	mov	sl, r3
 800d502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d506:	b10a      	cbz	r2, 800d50c <_svfiprintf_r+0x60>
 800d508:	2a25      	cmp	r2, #37	@ 0x25
 800d50a:	d1f9      	bne.n	800d500 <_svfiprintf_r+0x54>
 800d50c:	ebba 0b04 	subs.w	fp, sl, r4
 800d510:	d00b      	beq.n	800d52a <_svfiprintf_r+0x7e>
 800d512:	465b      	mov	r3, fp
 800d514:	4622      	mov	r2, r4
 800d516:	4629      	mov	r1, r5
 800d518:	4638      	mov	r0, r7
 800d51a:	f7ff ff6b 	bl	800d3f4 <__ssputs_r>
 800d51e:	3001      	adds	r0, #1
 800d520:	f000 80a7 	beq.w	800d672 <_svfiprintf_r+0x1c6>
 800d524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d526:	445a      	add	r2, fp
 800d528:	9209      	str	r2, [sp, #36]	@ 0x24
 800d52a:	f89a 3000 	ldrb.w	r3, [sl]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 809f 	beq.w	800d672 <_svfiprintf_r+0x1c6>
 800d534:	2300      	movs	r3, #0
 800d536:	f04f 32ff 	mov.w	r2, #4294967295
 800d53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d53e:	f10a 0a01 	add.w	sl, sl, #1
 800d542:	9304      	str	r3, [sp, #16]
 800d544:	9307      	str	r3, [sp, #28]
 800d546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d54a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d54c:	4654      	mov	r4, sl
 800d54e:	2205      	movs	r2, #5
 800d550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d554:	484e      	ldr	r0, [pc, #312]	@ (800d690 <_svfiprintf_r+0x1e4>)
 800d556:	f7f2 fe73 	bl	8000240 <memchr>
 800d55a:	9a04      	ldr	r2, [sp, #16]
 800d55c:	b9d8      	cbnz	r0, 800d596 <_svfiprintf_r+0xea>
 800d55e:	06d0      	lsls	r0, r2, #27
 800d560:	bf44      	itt	mi
 800d562:	2320      	movmi	r3, #32
 800d564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d568:	0711      	lsls	r1, r2, #28
 800d56a:	bf44      	itt	mi
 800d56c:	232b      	movmi	r3, #43	@ 0x2b
 800d56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d572:	f89a 3000 	ldrb.w	r3, [sl]
 800d576:	2b2a      	cmp	r3, #42	@ 0x2a
 800d578:	d015      	beq.n	800d5a6 <_svfiprintf_r+0xfa>
 800d57a:	9a07      	ldr	r2, [sp, #28]
 800d57c:	4654      	mov	r4, sl
 800d57e:	2000      	movs	r0, #0
 800d580:	f04f 0c0a 	mov.w	ip, #10
 800d584:	4621      	mov	r1, r4
 800d586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d58a:	3b30      	subs	r3, #48	@ 0x30
 800d58c:	2b09      	cmp	r3, #9
 800d58e:	d94b      	bls.n	800d628 <_svfiprintf_r+0x17c>
 800d590:	b1b0      	cbz	r0, 800d5c0 <_svfiprintf_r+0x114>
 800d592:	9207      	str	r2, [sp, #28]
 800d594:	e014      	b.n	800d5c0 <_svfiprintf_r+0x114>
 800d596:	eba0 0308 	sub.w	r3, r0, r8
 800d59a:	fa09 f303 	lsl.w	r3, r9, r3
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	9304      	str	r3, [sp, #16]
 800d5a2:	46a2      	mov	sl, r4
 800d5a4:	e7d2      	b.n	800d54c <_svfiprintf_r+0xa0>
 800d5a6:	9b03      	ldr	r3, [sp, #12]
 800d5a8:	1d19      	adds	r1, r3, #4
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	9103      	str	r1, [sp, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	bfbb      	ittet	lt
 800d5b2:	425b      	neglt	r3, r3
 800d5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5b8:	9307      	strge	r3, [sp, #28]
 800d5ba:	9307      	strlt	r3, [sp, #28]
 800d5bc:	bfb8      	it	lt
 800d5be:	9204      	strlt	r2, [sp, #16]
 800d5c0:	7823      	ldrb	r3, [r4, #0]
 800d5c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5c4:	d10a      	bne.n	800d5dc <_svfiprintf_r+0x130>
 800d5c6:	7863      	ldrb	r3, [r4, #1]
 800d5c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ca:	d132      	bne.n	800d632 <_svfiprintf_r+0x186>
 800d5cc:	9b03      	ldr	r3, [sp, #12]
 800d5ce:	1d1a      	adds	r2, r3, #4
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	9203      	str	r2, [sp, #12]
 800d5d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5d8:	3402      	adds	r4, #2
 800d5da:	9305      	str	r3, [sp, #20]
 800d5dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6a0 <_svfiprintf_r+0x1f4>
 800d5e0:	7821      	ldrb	r1, [r4, #0]
 800d5e2:	2203      	movs	r2, #3
 800d5e4:	4650      	mov	r0, sl
 800d5e6:	f7f2 fe2b 	bl	8000240 <memchr>
 800d5ea:	b138      	cbz	r0, 800d5fc <_svfiprintf_r+0x150>
 800d5ec:	9b04      	ldr	r3, [sp, #16]
 800d5ee:	eba0 000a 	sub.w	r0, r0, sl
 800d5f2:	2240      	movs	r2, #64	@ 0x40
 800d5f4:	4082      	lsls	r2, r0
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	3401      	adds	r4, #1
 800d5fa:	9304      	str	r3, [sp, #16]
 800d5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d600:	4824      	ldr	r0, [pc, #144]	@ (800d694 <_svfiprintf_r+0x1e8>)
 800d602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d606:	2206      	movs	r2, #6
 800d608:	f7f2 fe1a 	bl	8000240 <memchr>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d036      	beq.n	800d67e <_svfiprintf_r+0x1d2>
 800d610:	4b21      	ldr	r3, [pc, #132]	@ (800d698 <_svfiprintf_r+0x1ec>)
 800d612:	bb1b      	cbnz	r3, 800d65c <_svfiprintf_r+0x1b0>
 800d614:	9b03      	ldr	r3, [sp, #12]
 800d616:	3307      	adds	r3, #7
 800d618:	f023 0307 	bic.w	r3, r3, #7
 800d61c:	3308      	adds	r3, #8
 800d61e:	9303      	str	r3, [sp, #12]
 800d620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d622:	4433      	add	r3, r6
 800d624:	9309      	str	r3, [sp, #36]	@ 0x24
 800d626:	e76a      	b.n	800d4fe <_svfiprintf_r+0x52>
 800d628:	fb0c 3202 	mla	r2, ip, r2, r3
 800d62c:	460c      	mov	r4, r1
 800d62e:	2001      	movs	r0, #1
 800d630:	e7a8      	b.n	800d584 <_svfiprintf_r+0xd8>
 800d632:	2300      	movs	r3, #0
 800d634:	3401      	adds	r4, #1
 800d636:	9305      	str	r3, [sp, #20]
 800d638:	4619      	mov	r1, r3
 800d63a:	f04f 0c0a 	mov.w	ip, #10
 800d63e:	4620      	mov	r0, r4
 800d640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d644:	3a30      	subs	r2, #48	@ 0x30
 800d646:	2a09      	cmp	r2, #9
 800d648:	d903      	bls.n	800d652 <_svfiprintf_r+0x1a6>
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d0c6      	beq.n	800d5dc <_svfiprintf_r+0x130>
 800d64e:	9105      	str	r1, [sp, #20]
 800d650:	e7c4      	b.n	800d5dc <_svfiprintf_r+0x130>
 800d652:	fb0c 2101 	mla	r1, ip, r1, r2
 800d656:	4604      	mov	r4, r0
 800d658:	2301      	movs	r3, #1
 800d65a:	e7f0      	b.n	800d63e <_svfiprintf_r+0x192>
 800d65c:	ab03      	add	r3, sp, #12
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	462a      	mov	r2, r5
 800d662:	4b0e      	ldr	r3, [pc, #56]	@ (800d69c <_svfiprintf_r+0x1f0>)
 800d664:	a904      	add	r1, sp, #16
 800d666:	4638      	mov	r0, r7
 800d668:	f7fc fc84 	bl	8009f74 <_printf_float>
 800d66c:	1c42      	adds	r2, r0, #1
 800d66e:	4606      	mov	r6, r0
 800d670:	d1d6      	bne.n	800d620 <_svfiprintf_r+0x174>
 800d672:	89ab      	ldrh	r3, [r5, #12]
 800d674:	065b      	lsls	r3, r3, #25
 800d676:	f53f af2d 	bmi.w	800d4d4 <_svfiprintf_r+0x28>
 800d67a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d67c:	e72c      	b.n	800d4d8 <_svfiprintf_r+0x2c>
 800d67e:	ab03      	add	r3, sp, #12
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	462a      	mov	r2, r5
 800d684:	4b05      	ldr	r3, [pc, #20]	@ (800d69c <_svfiprintf_r+0x1f0>)
 800d686:	a904      	add	r1, sp, #16
 800d688:	4638      	mov	r0, r7
 800d68a:	f7fc ff0b 	bl	800a4a4 <_printf_i>
 800d68e:	e7ed      	b.n	800d66c <_svfiprintf_r+0x1c0>
 800d690:	0800ea40 	.word	0x0800ea40
 800d694:	0800ea4a 	.word	0x0800ea4a
 800d698:	08009f75 	.word	0x08009f75
 800d69c:	0800d3f5 	.word	0x0800d3f5
 800d6a0:	0800ea46 	.word	0x0800ea46

0800d6a4 <__sfputc_r>:
 800d6a4:	6893      	ldr	r3, [r2, #8]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	b410      	push	{r4}
 800d6ac:	6093      	str	r3, [r2, #8]
 800d6ae:	da08      	bge.n	800d6c2 <__sfputc_r+0x1e>
 800d6b0:	6994      	ldr	r4, [r2, #24]
 800d6b2:	42a3      	cmp	r3, r4
 800d6b4:	db01      	blt.n	800d6ba <__sfputc_r+0x16>
 800d6b6:	290a      	cmp	r1, #10
 800d6b8:	d103      	bne.n	800d6c2 <__sfputc_r+0x1e>
 800d6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6be:	f000 b9f1 	b.w	800daa4 <__swbuf_r>
 800d6c2:	6813      	ldr	r3, [r2, #0]
 800d6c4:	1c58      	adds	r0, r3, #1
 800d6c6:	6010      	str	r0, [r2, #0]
 800d6c8:	7019      	strb	r1, [r3, #0]
 800d6ca:	4608      	mov	r0, r1
 800d6cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <__sfputs_r>:
 800d6d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	460f      	mov	r7, r1
 800d6d8:	4614      	mov	r4, r2
 800d6da:	18d5      	adds	r5, r2, r3
 800d6dc:	42ac      	cmp	r4, r5
 800d6de:	d101      	bne.n	800d6e4 <__sfputs_r+0x12>
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	e007      	b.n	800d6f4 <__sfputs_r+0x22>
 800d6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e8:	463a      	mov	r2, r7
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f7ff ffda 	bl	800d6a4 <__sfputc_r>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d1f3      	bne.n	800d6dc <__sfputs_r+0xa>
 800d6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6f8 <_vfiprintf_r>:
 800d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fc:	460d      	mov	r5, r1
 800d6fe:	b09d      	sub	sp, #116	@ 0x74
 800d700:	4614      	mov	r4, r2
 800d702:	4698      	mov	r8, r3
 800d704:	4606      	mov	r6, r0
 800d706:	b118      	cbz	r0, 800d710 <_vfiprintf_r+0x18>
 800d708:	6a03      	ldr	r3, [r0, #32]
 800d70a:	b90b      	cbnz	r3, 800d710 <_vfiprintf_r+0x18>
 800d70c:	f7fd fa8a 	bl	800ac24 <__sinit>
 800d710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d712:	07d9      	lsls	r1, r3, #31
 800d714:	d405      	bmi.n	800d722 <_vfiprintf_r+0x2a>
 800d716:	89ab      	ldrh	r3, [r5, #12]
 800d718:	059a      	lsls	r2, r3, #22
 800d71a:	d402      	bmi.n	800d722 <_vfiprintf_r+0x2a>
 800d71c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d71e:	f7fd fc3a 	bl	800af96 <__retarget_lock_acquire_recursive>
 800d722:	89ab      	ldrh	r3, [r5, #12]
 800d724:	071b      	lsls	r3, r3, #28
 800d726:	d501      	bpl.n	800d72c <_vfiprintf_r+0x34>
 800d728:	692b      	ldr	r3, [r5, #16]
 800d72a:	b99b      	cbnz	r3, 800d754 <_vfiprintf_r+0x5c>
 800d72c:	4629      	mov	r1, r5
 800d72e:	4630      	mov	r0, r6
 800d730:	f000 f9f6 	bl	800db20 <__swsetup_r>
 800d734:	b170      	cbz	r0, 800d754 <_vfiprintf_r+0x5c>
 800d736:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d738:	07dc      	lsls	r4, r3, #31
 800d73a:	d504      	bpl.n	800d746 <_vfiprintf_r+0x4e>
 800d73c:	f04f 30ff 	mov.w	r0, #4294967295
 800d740:	b01d      	add	sp, #116	@ 0x74
 800d742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d746:	89ab      	ldrh	r3, [r5, #12]
 800d748:	0598      	lsls	r0, r3, #22
 800d74a:	d4f7      	bmi.n	800d73c <_vfiprintf_r+0x44>
 800d74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d74e:	f7fd fc23 	bl	800af98 <__retarget_lock_release_recursive>
 800d752:	e7f3      	b.n	800d73c <_vfiprintf_r+0x44>
 800d754:	2300      	movs	r3, #0
 800d756:	9309      	str	r3, [sp, #36]	@ 0x24
 800d758:	2320      	movs	r3, #32
 800d75a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d75e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d762:	2330      	movs	r3, #48	@ 0x30
 800d764:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d914 <_vfiprintf_r+0x21c>
 800d768:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d76c:	f04f 0901 	mov.w	r9, #1
 800d770:	4623      	mov	r3, r4
 800d772:	469a      	mov	sl, r3
 800d774:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d778:	b10a      	cbz	r2, 800d77e <_vfiprintf_r+0x86>
 800d77a:	2a25      	cmp	r2, #37	@ 0x25
 800d77c:	d1f9      	bne.n	800d772 <_vfiprintf_r+0x7a>
 800d77e:	ebba 0b04 	subs.w	fp, sl, r4
 800d782:	d00b      	beq.n	800d79c <_vfiprintf_r+0xa4>
 800d784:	465b      	mov	r3, fp
 800d786:	4622      	mov	r2, r4
 800d788:	4629      	mov	r1, r5
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7ff ffa1 	bl	800d6d2 <__sfputs_r>
 800d790:	3001      	adds	r0, #1
 800d792:	f000 80a7 	beq.w	800d8e4 <_vfiprintf_r+0x1ec>
 800d796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d798:	445a      	add	r2, fp
 800d79a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d79c:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 809f 	beq.w	800d8e4 <_vfiprintf_r+0x1ec>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7b0:	f10a 0a01 	add.w	sl, sl, #1
 800d7b4:	9304      	str	r3, [sp, #16]
 800d7b6:	9307      	str	r3, [sp, #28]
 800d7b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7be:	4654      	mov	r4, sl
 800d7c0:	2205      	movs	r2, #5
 800d7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c6:	4853      	ldr	r0, [pc, #332]	@ (800d914 <_vfiprintf_r+0x21c>)
 800d7c8:	f7f2 fd3a 	bl	8000240 <memchr>
 800d7cc:	9a04      	ldr	r2, [sp, #16]
 800d7ce:	b9d8      	cbnz	r0, 800d808 <_vfiprintf_r+0x110>
 800d7d0:	06d1      	lsls	r1, r2, #27
 800d7d2:	bf44      	itt	mi
 800d7d4:	2320      	movmi	r3, #32
 800d7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7da:	0713      	lsls	r3, r2, #28
 800d7dc:	bf44      	itt	mi
 800d7de:	232b      	movmi	r3, #43	@ 0x2b
 800d7e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ea:	d015      	beq.n	800d818 <_vfiprintf_r+0x120>
 800d7ec:	9a07      	ldr	r2, [sp, #28]
 800d7ee:	4654      	mov	r4, sl
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	f04f 0c0a 	mov.w	ip, #10
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7fc:	3b30      	subs	r3, #48	@ 0x30
 800d7fe:	2b09      	cmp	r3, #9
 800d800:	d94b      	bls.n	800d89a <_vfiprintf_r+0x1a2>
 800d802:	b1b0      	cbz	r0, 800d832 <_vfiprintf_r+0x13a>
 800d804:	9207      	str	r2, [sp, #28]
 800d806:	e014      	b.n	800d832 <_vfiprintf_r+0x13a>
 800d808:	eba0 0308 	sub.w	r3, r0, r8
 800d80c:	fa09 f303 	lsl.w	r3, r9, r3
 800d810:	4313      	orrs	r3, r2
 800d812:	9304      	str	r3, [sp, #16]
 800d814:	46a2      	mov	sl, r4
 800d816:	e7d2      	b.n	800d7be <_vfiprintf_r+0xc6>
 800d818:	9b03      	ldr	r3, [sp, #12]
 800d81a:	1d19      	adds	r1, r3, #4
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	9103      	str	r1, [sp, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	bfbb      	ittet	lt
 800d824:	425b      	neglt	r3, r3
 800d826:	f042 0202 	orrlt.w	r2, r2, #2
 800d82a:	9307      	strge	r3, [sp, #28]
 800d82c:	9307      	strlt	r3, [sp, #28]
 800d82e:	bfb8      	it	lt
 800d830:	9204      	strlt	r2, [sp, #16]
 800d832:	7823      	ldrb	r3, [r4, #0]
 800d834:	2b2e      	cmp	r3, #46	@ 0x2e
 800d836:	d10a      	bne.n	800d84e <_vfiprintf_r+0x156>
 800d838:	7863      	ldrb	r3, [r4, #1]
 800d83a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d83c:	d132      	bne.n	800d8a4 <_vfiprintf_r+0x1ac>
 800d83e:	9b03      	ldr	r3, [sp, #12]
 800d840:	1d1a      	adds	r2, r3, #4
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	9203      	str	r2, [sp, #12]
 800d846:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d84a:	3402      	adds	r4, #2
 800d84c:	9305      	str	r3, [sp, #20]
 800d84e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d924 <_vfiprintf_r+0x22c>
 800d852:	7821      	ldrb	r1, [r4, #0]
 800d854:	2203      	movs	r2, #3
 800d856:	4650      	mov	r0, sl
 800d858:	f7f2 fcf2 	bl	8000240 <memchr>
 800d85c:	b138      	cbz	r0, 800d86e <_vfiprintf_r+0x176>
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	eba0 000a 	sub.w	r0, r0, sl
 800d864:	2240      	movs	r2, #64	@ 0x40
 800d866:	4082      	lsls	r2, r0
 800d868:	4313      	orrs	r3, r2
 800d86a:	3401      	adds	r4, #1
 800d86c:	9304      	str	r3, [sp, #16]
 800d86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d872:	4829      	ldr	r0, [pc, #164]	@ (800d918 <_vfiprintf_r+0x220>)
 800d874:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d878:	2206      	movs	r2, #6
 800d87a:	f7f2 fce1 	bl	8000240 <memchr>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d03f      	beq.n	800d902 <_vfiprintf_r+0x20a>
 800d882:	4b26      	ldr	r3, [pc, #152]	@ (800d91c <_vfiprintf_r+0x224>)
 800d884:	bb1b      	cbnz	r3, 800d8ce <_vfiprintf_r+0x1d6>
 800d886:	9b03      	ldr	r3, [sp, #12]
 800d888:	3307      	adds	r3, #7
 800d88a:	f023 0307 	bic.w	r3, r3, #7
 800d88e:	3308      	adds	r3, #8
 800d890:	9303      	str	r3, [sp, #12]
 800d892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d894:	443b      	add	r3, r7
 800d896:	9309      	str	r3, [sp, #36]	@ 0x24
 800d898:	e76a      	b.n	800d770 <_vfiprintf_r+0x78>
 800d89a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d89e:	460c      	mov	r4, r1
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	e7a8      	b.n	800d7f6 <_vfiprintf_r+0xfe>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	3401      	adds	r4, #1
 800d8a8:	9305      	str	r3, [sp, #20]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	f04f 0c0a 	mov.w	ip, #10
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b6:	3a30      	subs	r2, #48	@ 0x30
 800d8b8:	2a09      	cmp	r2, #9
 800d8ba:	d903      	bls.n	800d8c4 <_vfiprintf_r+0x1cc>
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d0c6      	beq.n	800d84e <_vfiprintf_r+0x156>
 800d8c0:	9105      	str	r1, [sp, #20]
 800d8c2:	e7c4      	b.n	800d84e <_vfiprintf_r+0x156>
 800d8c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e7f0      	b.n	800d8b0 <_vfiprintf_r+0x1b8>
 800d8ce:	ab03      	add	r3, sp, #12
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	462a      	mov	r2, r5
 800d8d4:	4b12      	ldr	r3, [pc, #72]	@ (800d920 <_vfiprintf_r+0x228>)
 800d8d6:	a904      	add	r1, sp, #16
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f7fc fb4b 	bl	8009f74 <_printf_float>
 800d8de:	4607      	mov	r7, r0
 800d8e0:	1c78      	adds	r0, r7, #1
 800d8e2:	d1d6      	bne.n	800d892 <_vfiprintf_r+0x19a>
 800d8e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8e6:	07d9      	lsls	r1, r3, #31
 800d8e8:	d405      	bmi.n	800d8f6 <_vfiprintf_r+0x1fe>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	059a      	lsls	r2, r3, #22
 800d8ee:	d402      	bmi.n	800d8f6 <_vfiprintf_r+0x1fe>
 800d8f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8f2:	f7fd fb51 	bl	800af98 <__retarget_lock_release_recursive>
 800d8f6:	89ab      	ldrh	r3, [r5, #12]
 800d8f8:	065b      	lsls	r3, r3, #25
 800d8fa:	f53f af1f 	bmi.w	800d73c <_vfiprintf_r+0x44>
 800d8fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d900:	e71e      	b.n	800d740 <_vfiprintf_r+0x48>
 800d902:	ab03      	add	r3, sp, #12
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	462a      	mov	r2, r5
 800d908:	4b05      	ldr	r3, [pc, #20]	@ (800d920 <_vfiprintf_r+0x228>)
 800d90a:	a904      	add	r1, sp, #16
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7fc fdc9 	bl	800a4a4 <_printf_i>
 800d912:	e7e4      	b.n	800d8de <_vfiprintf_r+0x1e6>
 800d914:	0800ea40 	.word	0x0800ea40
 800d918:	0800ea4a 	.word	0x0800ea4a
 800d91c:	08009f75 	.word	0x08009f75
 800d920:	0800d6d3 	.word	0x0800d6d3
 800d924:	0800ea46 	.word	0x0800ea46

0800d928 <__sflush_r>:
 800d928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d930:	0716      	lsls	r6, r2, #28
 800d932:	4605      	mov	r5, r0
 800d934:	460c      	mov	r4, r1
 800d936:	d454      	bmi.n	800d9e2 <__sflush_r+0xba>
 800d938:	684b      	ldr	r3, [r1, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	dc02      	bgt.n	800d944 <__sflush_r+0x1c>
 800d93e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d940:	2b00      	cmp	r3, #0
 800d942:	dd48      	ble.n	800d9d6 <__sflush_r+0xae>
 800d944:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d946:	2e00      	cmp	r6, #0
 800d948:	d045      	beq.n	800d9d6 <__sflush_r+0xae>
 800d94a:	2300      	movs	r3, #0
 800d94c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d950:	682f      	ldr	r7, [r5, #0]
 800d952:	6a21      	ldr	r1, [r4, #32]
 800d954:	602b      	str	r3, [r5, #0]
 800d956:	d030      	beq.n	800d9ba <__sflush_r+0x92>
 800d958:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	0759      	lsls	r1, r3, #29
 800d95e:	d505      	bpl.n	800d96c <__sflush_r+0x44>
 800d960:	6863      	ldr	r3, [r4, #4]
 800d962:	1ad2      	subs	r2, r2, r3
 800d964:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d966:	b10b      	cbz	r3, 800d96c <__sflush_r+0x44>
 800d968:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d96a:	1ad2      	subs	r2, r2, r3
 800d96c:	2300      	movs	r3, #0
 800d96e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d970:	6a21      	ldr	r1, [r4, #32]
 800d972:	4628      	mov	r0, r5
 800d974:	47b0      	blx	r6
 800d976:	1c43      	adds	r3, r0, #1
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	d106      	bne.n	800d98a <__sflush_r+0x62>
 800d97c:	6829      	ldr	r1, [r5, #0]
 800d97e:	291d      	cmp	r1, #29
 800d980:	d82b      	bhi.n	800d9da <__sflush_r+0xb2>
 800d982:	4a2a      	ldr	r2, [pc, #168]	@ (800da2c <__sflush_r+0x104>)
 800d984:	410a      	asrs	r2, r1
 800d986:	07d6      	lsls	r6, r2, #31
 800d988:	d427      	bmi.n	800d9da <__sflush_r+0xb2>
 800d98a:	2200      	movs	r2, #0
 800d98c:	6062      	str	r2, [r4, #4]
 800d98e:	04d9      	lsls	r1, r3, #19
 800d990:	6922      	ldr	r2, [r4, #16]
 800d992:	6022      	str	r2, [r4, #0]
 800d994:	d504      	bpl.n	800d9a0 <__sflush_r+0x78>
 800d996:	1c42      	adds	r2, r0, #1
 800d998:	d101      	bne.n	800d99e <__sflush_r+0x76>
 800d99a:	682b      	ldr	r3, [r5, #0]
 800d99c:	b903      	cbnz	r3, 800d9a0 <__sflush_r+0x78>
 800d99e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9a2:	602f      	str	r7, [r5, #0]
 800d9a4:	b1b9      	cbz	r1, 800d9d6 <__sflush_r+0xae>
 800d9a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9aa:	4299      	cmp	r1, r3
 800d9ac:	d002      	beq.n	800d9b4 <__sflush_r+0x8c>
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f7fe f966 	bl	800bc80 <_free_r>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9b8:	e00d      	b.n	800d9d6 <__sflush_r+0xae>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	4628      	mov	r0, r5
 800d9be:	47b0      	blx	r6
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	1c50      	adds	r0, r2, #1
 800d9c4:	d1c9      	bne.n	800d95a <__sflush_r+0x32>
 800d9c6:	682b      	ldr	r3, [r5, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0c6      	beq.n	800d95a <__sflush_r+0x32>
 800d9cc:	2b1d      	cmp	r3, #29
 800d9ce:	d001      	beq.n	800d9d4 <__sflush_r+0xac>
 800d9d0:	2b16      	cmp	r3, #22
 800d9d2:	d11e      	bne.n	800da12 <__sflush_r+0xea>
 800d9d4:	602f      	str	r7, [r5, #0]
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	e022      	b.n	800da20 <__sflush_r+0xf8>
 800d9da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9de:	b21b      	sxth	r3, r3
 800d9e0:	e01b      	b.n	800da1a <__sflush_r+0xf2>
 800d9e2:	690f      	ldr	r7, [r1, #16]
 800d9e4:	2f00      	cmp	r7, #0
 800d9e6:	d0f6      	beq.n	800d9d6 <__sflush_r+0xae>
 800d9e8:	0793      	lsls	r3, r2, #30
 800d9ea:	680e      	ldr	r6, [r1, #0]
 800d9ec:	bf08      	it	eq
 800d9ee:	694b      	ldreq	r3, [r1, #20]
 800d9f0:	600f      	str	r7, [r1, #0]
 800d9f2:	bf18      	it	ne
 800d9f4:	2300      	movne	r3, #0
 800d9f6:	eba6 0807 	sub.w	r8, r6, r7
 800d9fa:	608b      	str	r3, [r1, #8]
 800d9fc:	f1b8 0f00 	cmp.w	r8, #0
 800da00:	dde9      	ble.n	800d9d6 <__sflush_r+0xae>
 800da02:	6a21      	ldr	r1, [r4, #32]
 800da04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da06:	4643      	mov	r3, r8
 800da08:	463a      	mov	r2, r7
 800da0a:	4628      	mov	r0, r5
 800da0c:	47b0      	blx	r6
 800da0e:	2800      	cmp	r0, #0
 800da10:	dc08      	bgt.n	800da24 <__sflush_r+0xfc>
 800da12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da1a:	81a3      	strh	r3, [r4, #12]
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da24:	4407      	add	r7, r0
 800da26:	eba8 0800 	sub.w	r8, r8, r0
 800da2a:	e7e7      	b.n	800d9fc <__sflush_r+0xd4>
 800da2c:	dfbffffe 	.word	0xdfbffffe

0800da30 <_fflush_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	690b      	ldr	r3, [r1, #16]
 800da34:	4605      	mov	r5, r0
 800da36:	460c      	mov	r4, r1
 800da38:	b913      	cbnz	r3, 800da40 <_fflush_r+0x10>
 800da3a:	2500      	movs	r5, #0
 800da3c:	4628      	mov	r0, r5
 800da3e:	bd38      	pop	{r3, r4, r5, pc}
 800da40:	b118      	cbz	r0, 800da4a <_fflush_r+0x1a>
 800da42:	6a03      	ldr	r3, [r0, #32]
 800da44:	b90b      	cbnz	r3, 800da4a <_fflush_r+0x1a>
 800da46:	f7fd f8ed 	bl	800ac24 <__sinit>
 800da4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0f3      	beq.n	800da3a <_fflush_r+0xa>
 800da52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da54:	07d0      	lsls	r0, r2, #31
 800da56:	d404      	bmi.n	800da62 <_fflush_r+0x32>
 800da58:	0599      	lsls	r1, r3, #22
 800da5a:	d402      	bmi.n	800da62 <_fflush_r+0x32>
 800da5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da5e:	f7fd fa9a 	bl	800af96 <__retarget_lock_acquire_recursive>
 800da62:	4628      	mov	r0, r5
 800da64:	4621      	mov	r1, r4
 800da66:	f7ff ff5f 	bl	800d928 <__sflush_r>
 800da6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da6c:	07da      	lsls	r2, r3, #31
 800da6e:	4605      	mov	r5, r0
 800da70:	d4e4      	bmi.n	800da3c <_fflush_r+0xc>
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	059b      	lsls	r3, r3, #22
 800da76:	d4e1      	bmi.n	800da3c <_fflush_r+0xc>
 800da78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da7a:	f7fd fa8d 	bl	800af98 <__retarget_lock_release_recursive>
 800da7e:	e7dd      	b.n	800da3c <_fflush_r+0xc>

0800da80 <fiprintf>:
 800da80:	b40e      	push	{r1, r2, r3}
 800da82:	b503      	push	{r0, r1, lr}
 800da84:	4601      	mov	r1, r0
 800da86:	ab03      	add	r3, sp, #12
 800da88:	4805      	ldr	r0, [pc, #20]	@ (800daa0 <fiprintf+0x20>)
 800da8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da8e:	6800      	ldr	r0, [r0, #0]
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	f7ff fe31 	bl	800d6f8 <_vfiprintf_r>
 800da96:	b002      	add	sp, #8
 800da98:	f85d eb04 	ldr.w	lr, [sp], #4
 800da9c:	b003      	add	sp, #12
 800da9e:	4770      	bx	lr
 800daa0:	200000e8 	.word	0x200000e8

0800daa4 <__swbuf_r>:
 800daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa6:	460e      	mov	r6, r1
 800daa8:	4614      	mov	r4, r2
 800daaa:	4605      	mov	r5, r0
 800daac:	b118      	cbz	r0, 800dab6 <__swbuf_r+0x12>
 800daae:	6a03      	ldr	r3, [r0, #32]
 800dab0:	b90b      	cbnz	r3, 800dab6 <__swbuf_r+0x12>
 800dab2:	f7fd f8b7 	bl	800ac24 <__sinit>
 800dab6:	69a3      	ldr	r3, [r4, #24]
 800dab8:	60a3      	str	r3, [r4, #8]
 800daba:	89a3      	ldrh	r3, [r4, #12]
 800dabc:	071a      	lsls	r2, r3, #28
 800dabe:	d501      	bpl.n	800dac4 <__swbuf_r+0x20>
 800dac0:	6923      	ldr	r3, [r4, #16]
 800dac2:	b943      	cbnz	r3, 800dad6 <__swbuf_r+0x32>
 800dac4:	4621      	mov	r1, r4
 800dac6:	4628      	mov	r0, r5
 800dac8:	f000 f82a 	bl	800db20 <__swsetup_r>
 800dacc:	b118      	cbz	r0, 800dad6 <__swbuf_r+0x32>
 800dace:	f04f 37ff 	mov.w	r7, #4294967295
 800dad2:	4638      	mov	r0, r7
 800dad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	6922      	ldr	r2, [r4, #16]
 800dada:	1a98      	subs	r0, r3, r2
 800dadc:	6963      	ldr	r3, [r4, #20]
 800dade:	b2f6      	uxtb	r6, r6
 800dae0:	4283      	cmp	r3, r0
 800dae2:	4637      	mov	r7, r6
 800dae4:	dc05      	bgt.n	800daf2 <__swbuf_r+0x4e>
 800dae6:	4621      	mov	r1, r4
 800dae8:	4628      	mov	r0, r5
 800daea:	f7ff ffa1 	bl	800da30 <_fflush_r>
 800daee:	2800      	cmp	r0, #0
 800daf0:	d1ed      	bne.n	800dace <__swbuf_r+0x2a>
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	3b01      	subs	r3, #1
 800daf6:	60a3      	str	r3, [r4, #8]
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	1c5a      	adds	r2, r3, #1
 800dafc:	6022      	str	r2, [r4, #0]
 800dafe:	701e      	strb	r6, [r3, #0]
 800db00:	6962      	ldr	r2, [r4, #20]
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	429a      	cmp	r2, r3
 800db06:	d004      	beq.n	800db12 <__swbuf_r+0x6e>
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	07db      	lsls	r3, r3, #31
 800db0c:	d5e1      	bpl.n	800dad2 <__swbuf_r+0x2e>
 800db0e:	2e0a      	cmp	r6, #10
 800db10:	d1df      	bne.n	800dad2 <__swbuf_r+0x2e>
 800db12:	4621      	mov	r1, r4
 800db14:	4628      	mov	r0, r5
 800db16:	f7ff ff8b 	bl	800da30 <_fflush_r>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d0d9      	beq.n	800dad2 <__swbuf_r+0x2e>
 800db1e:	e7d6      	b.n	800dace <__swbuf_r+0x2a>

0800db20 <__swsetup_r>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4b29      	ldr	r3, [pc, #164]	@ (800dbc8 <__swsetup_r+0xa8>)
 800db24:	4605      	mov	r5, r0
 800db26:	6818      	ldr	r0, [r3, #0]
 800db28:	460c      	mov	r4, r1
 800db2a:	b118      	cbz	r0, 800db34 <__swsetup_r+0x14>
 800db2c:	6a03      	ldr	r3, [r0, #32]
 800db2e:	b90b      	cbnz	r3, 800db34 <__swsetup_r+0x14>
 800db30:	f7fd f878 	bl	800ac24 <__sinit>
 800db34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db38:	0719      	lsls	r1, r3, #28
 800db3a:	d422      	bmi.n	800db82 <__swsetup_r+0x62>
 800db3c:	06da      	lsls	r2, r3, #27
 800db3e:	d407      	bmi.n	800db50 <__swsetup_r+0x30>
 800db40:	2209      	movs	r2, #9
 800db42:	602a      	str	r2, [r5, #0]
 800db44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db48:	81a3      	strh	r3, [r4, #12]
 800db4a:	f04f 30ff 	mov.w	r0, #4294967295
 800db4e:	e033      	b.n	800dbb8 <__swsetup_r+0x98>
 800db50:	0758      	lsls	r0, r3, #29
 800db52:	d512      	bpl.n	800db7a <__swsetup_r+0x5a>
 800db54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db56:	b141      	cbz	r1, 800db6a <__swsetup_r+0x4a>
 800db58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db5c:	4299      	cmp	r1, r3
 800db5e:	d002      	beq.n	800db66 <__swsetup_r+0x46>
 800db60:	4628      	mov	r0, r5
 800db62:	f7fe f88d 	bl	800bc80 <_free_r>
 800db66:	2300      	movs	r3, #0
 800db68:	6363      	str	r3, [r4, #52]	@ 0x34
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db70:	81a3      	strh	r3, [r4, #12]
 800db72:	2300      	movs	r3, #0
 800db74:	6063      	str	r3, [r4, #4]
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	f043 0308 	orr.w	r3, r3, #8
 800db80:	81a3      	strh	r3, [r4, #12]
 800db82:	6923      	ldr	r3, [r4, #16]
 800db84:	b94b      	cbnz	r3, 800db9a <__swsetup_r+0x7a>
 800db86:	89a3      	ldrh	r3, [r4, #12]
 800db88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db90:	d003      	beq.n	800db9a <__swsetup_r+0x7a>
 800db92:	4621      	mov	r1, r4
 800db94:	4628      	mov	r0, r5
 800db96:	f000 fc31 	bl	800e3fc <__smakebuf_r>
 800db9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db9e:	f013 0201 	ands.w	r2, r3, #1
 800dba2:	d00a      	beq.n	800dbba <__swsetup_r+0x9a>
 800dba4:	2200      	movs	r2, #0
 800dba6:	60a2      	str	r2, [r4, #8]
 800dba8:	6962      	ldr	r2, [r4, #20]
 800dbaa:	4252      	negs	r2, r2
 800dbac:	61a2      	str	r2, [r4, #24]
 800dbae:	6922      	ldr	r2, [r4, #16]
 800dbb0:	b942      	cbnz	r2, 800dbc4 <__swsetup_r+0xa4>
 800dbb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dbb6:	d1c5      	bne.n	800db44 <__swsetup_r+0x24>
 800dbb8:	bd38      	pop	{r3, r4, r5, pc}
 800dbba:	0799      	lsls	r1, r3, #30
 800dbbc:	bf58      	it	pl
 800dbbe:	6962      	ldrpl	r2, [r4, #20]
 800dbc0:	60a2      	str	r2, [r4, #8]
 800dbc2:	e7f4      	b.n	800dbae <__swsetup_r+0x8e>
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	e7f7      	b.n	800dbb8 <__swsetup_r+0x98>
 800dbc8:	200000e8 	.word	0x200000e8

0800dbcc <memmove>:
 800dbcc:	4288      	cmp	r0, r1
 800dbce:	b510      	push	{r4, lr}
 800dbd0:	eb01 0402 	add.w	r4, r1, r2
 800dbd4:	d902      	bls.n	800dbdc <memmove+0x10>
 800dbd6:	4284      	cmp	r4, r0
 800dbd8:	4623      	mov	r3, r4
 800dbda:	d807      	bhi.n	800dbec <memmove+0x20>
 800dbdc:	1e43      	subs	r3, r0, #1
 800dbde:	42a1      	cmp	r1, r4
 800dbe0:	d008      	beq.n	800dbf4 <memmove+0x28>
 800dbe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbea:	e7f8      	b.n	800dbde <memmove+0x12>
 800dbec:	4402      	add	r2, r0
 800dbee:	4601      	mov	r1, r0
 800dbf0:	428a      	cmp	r2, r1
 800dbf2:	d100      	bne.n	800dbf6 <memmove+0x2a>
 800dbf4:	bd10      	pop	{r4, pc}
 800dbf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbfe:	e7f7      	b.n	800dbf0 <memmove+0x24>

0800dc00 <strncmp>:
 800dc00:	b510      	push	{r4, lr}
 800dc02:	b16a      	cbz	r2, 800dc20 <strncmp+0x20>
 800dc04:	3901      	subs	r1, #1
 800dc06:	1884      	adds	r4, r0, r2
 800dc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d103      	bne.n	800dc1c <strncmp+0x1c>
 800dc14:	42a0      	cmp	r0, r4
 800dc16:	d001      	beq.n	800dc1c <strncmp+0x1c>
 800dc18:	2a00      	cmp	r2, #0
 800dc1a:	d1f5      	bne.n	800dc08 <strncmp+0x8>
 800dc1c:	1ad0      	subs	r0, r2, r3
 800dc1e:	bd10      	pop	{r4, pc}
 800dc20:	4610      	mov	r0, r2
 800dc22:	e7fc      	b.n	800dc1e <strncmp+0x1e>

0800dc24 <_sbrk_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4d06      	ldr	r5, [pc, #24]	@ (800dc40 <_sbrk_r+0x1c>)
 800dc28:	2300      	movs	r3, #0
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	4608      	mov	r0, r1
 800dc2e:	602b      	str	r3, [r5, #0]
 800dc30:	f7f3 fec8 	bl	80019c4 <_sbrk>
 800dc34:	1c43      	adds	r3, r0, #1
 800dc36:	d102      	bne.n	800dc3e <_sbrk_r+0x1a>
 800dc38:	682b      	ldr	r3, [r5, #0]
 800dc3a:	b103      	cbz	r3, 800dc3e <_sbrk_r+0x1a>
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	bd38      	pop	{r3, r4, r5, pc}
 800dc40:	20000810 	.word	0x20000810

0800dc44 <memcpy>:
 800dc44:	440a      	add	r2, r1
 800dc46:	4291      	cmp	r1, r2
 800dc48:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc4c:	d100      	bne.n	800dc50 <memcpy+0xc>
 800dc4e:	4770      	bx	lr
 800dc50:	b510      	push	{r4, lr}
 800dc52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc5a:	4291      	cmp	r1, r2
 800dc5c:	d1f9      	bne.n	800dc52 <memcpy+0xe>
 800dc5e:	bd10      	pop	{r4, pc}

0800dc60 <nan>:
 800dc60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dc68 <nan+0x8>
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	00000000 	.word	0x00000000
 800dc6c:	7ff80000 	.word	0x7ff80000

0800dc70 <abort>:
 800dc70:	b508      	push	{r3, lr}
 800dc72:	2006      	movs	r0, #6
 800dc74:	f000 fc26 	bl	800e4c4 <raise>
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f7f3 fe2b 	bl	80018d4 <_exit>

0800dc7e <_calloc_r>:
 800dc7e:	b570      	push	{r4, r5, r6, lr}
 800dc80:	fba1 5402 	umull	r5, r4, r1, r2
 800dc84:	b93c      	cbnz	r4, 800dc96 <_calloc_r+0x18>
 800dc86:	4629      	mov	r1, r5
 800dc88:	f7fe f86e 	bl	800bd68 <_malloc_r>
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	b928      	cbnz	r0, 800dc9c <_calloc_r+0x1e>
 800dc90:	2600      	movs	r6, #0
 800dc92:	4630      	mov	r0, r6
 800dc94:	bd70      	pop	{r4, r5, r6, pc}
 800dc96:	220c      	movs	r2, #12
 800dc98:	6002      	str	r2, [r0, #0]
 800dc9a:	e7f9      	b.n	800dc90 <_calloc_r+0x12>
 800dc9c:	462a      	mov	r2, r5
 800dc9e:	4621      	mov	r1, r4
 800dca0:	f7fd f89f 	bl	800ade2 <memset>
 800dca4:	e7f5      	b.n	800dc92 <_calloc_r+0x14>

0800dca6 <rshift>:
 800dca6:	6903      	ldr	r3, [r0, #16]
 800dca8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dcac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcb0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dcb4:	f100 0414 	add.w	r4, r0, #20
 800dcb8:	dd45      	ble.n	800dd46 <rshift+0xa0>
 800dcba:	f011 011f 	ands.w	r1, r1, #31
 800dcbe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dcc2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dcc6:	d10c      	bne.n	800dce2 <rshift+0x3c>
 800dcc8:	f100 0710 	add.w	r7, r0, #16
 800dccc:	4629      	mov	r1, r5
 800dcce:	42b1      	cmp	r1, r6
 800dcd0:	d334      	bcc.n	800dd3c <rshift+0x96>
 800dcd2:	1a9b      	subs	r3, r3, r2
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	1eea      	subs	r2, r5, #3
 800dcd8:	4296      	cmp	r6, r2
 800dcda:	bf38      	it	cc
 800dcdc:	2300      	movcc	r3, #0
 800dcde:	4423      	add	r3, r4
 800dce0:	e015      	b.n	800dd0e <rshift+0x68>
 800dce2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dce6:	f1c1 0820 	rsb	r8, r1, #32
 800dcea:	40cf      	lsrs	r7, r1
 800dcec:	f105 0e04 	add.w	lr, r5, #4
 800dcf0:	46a1      	mov	r9, r4
 800dcf2:	4576      	cmp	r6, lr
 800dcf4:	46f4      	mov	ip, lr
 800dcf6:	d815      	bhi.n	800dd24 <rshift+0x7e>
 800dcf8:	1a9a      	subs	r2, r3, r2
 800dcfa:	0092      	lsls	r2, r2, #2
 800dcfc:	3a04      	subs	r2, #4
 800dcfe:	3501      	adds	r5, #1
 800dd00:	42ae      	cmp	r6, r5
 800dd02:	bf38      	it	cc
 800dd04:	2200      	movcc	r2, #0
 800dd06:	18a3      	adds	r3, r4, r2
 800dd08:	50a7      	str	r7, [r4, r2]
 800dd0a:	b107      	cbz	r7, 800dd0e <rshift+0x68>
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	1b1a      	subs	r2, r3, r4
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd16:	bf08      	it	eq
 800dd18:	2300      	moveq	r3, #0
 800dd1a:	6102      	str	r2, [r0, #16]
 800dd1c:	bf08      	it	eq
 800dd1e:	6143      	streq	r3, [r0, #20]
 800dd20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd24:	f8dc c000 	ldr.w	ip, [ip]
 800dd28:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd2c:	ea4c 0707 	orr.w	r7, ip, r7
 800dd30:	f849 7b04 	str.w	r7, [r9], #4
 800dd34:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd38:	40cf      	lsrs	r7, r1
 800dd3a:	e7da      	b.n	800dcf2 <rshift+0x4c>
 800dd3c:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd40:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd44:	e7c3      	b.n	800dcce <rshift+0x28>
 800dd46:	4623      	mov	r3, r4
 800dd48:	e7e1      	b.n	800dd0e <rshift+0x68>

0800dd4a <__hexdig_fun>:
 800dd4a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dd4e:	2b09      	cmp	r3, #9
 800dd50:	d802      	bhi.n	800dd58 <__hexdig_fun+0xe>
 800dd52:	3820      	subs	r0, #32
 800dd54:	b2c0      	uxtb	r0, r0
 800dd56:	4770      	bx	lr
 800dd58:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dd5c:	2b05      	cmp	r3, #5
 800dd5e:	d801      	bhi.n	800dd64 <__hexdig_fun+0x1a>
 800dd60:	3847      	subs	r0, #71	@ 0x47
 800dd62:	e7f7      	b.n	800dd54 <__hexdig_fun+0xa>
 800dd64:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dd68:	2b05      	cmp	r3, #5
 800dd6a:	d801      	bhi.n	800dd70 <__hexdig_fun+0x26>
 800dd6c:	3827      	subs	r0, #39	@ 0x27
 800dd6e:	e7f1      	b.n	800dd54 <__hexdig_fun+0xa>
 800dd70:	2000      	movs	r0, #0
 800dd72:	4770      	bx	lr

0800dd74 <__gethex>:
 800dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	468a      	mov	sl, r1
 800dd7c:	9302      	str	r3, [sp, #8]
 800dd7e:	680b      	ldr	r3, [r1, #0]
 800dd80:	9001      	str	r0, [sp, #4]
 800dd82:	4690      	mov	r8, r2
 800dd84:	1c9c      	adds	r4, r3, #2
 800dd86:	46a1      	mov	r9, r4
 800dd88:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dd8c:	2830      	cmp	r0, #48	@ 0x30
 800dd8e:	d0fa      	beq.n	800dd86 <__gethex+0x12>
 800dd90:	eba9 0303 	sub.w	r3, r9, r3
 800dd94:	f1a3 0b02 	sub.w	fp, r3, #2
 800dd98:	f7ff ffd7 	bl	800dd4a <__hexdig_fun>
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d168      	bne.n	800de74 <__gethex+0x100>
 800dda2:	49a0      	ldr	r1, [pc, #640]	@ (800e024 <__gethex+0x2b0>)
 800dda4:	2201      	movs	r2, #1
 800dda6:	4648      	mov	r0, r9
 800dda8:	f7ff ff2a 	bl	800dc00 <strncmp>
 800ddac:	4607      	mov	r7, r0
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d167      	bne.n	800de82 <__gethex+0x10e>
 800ddb2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ddb6:	4626      	mov	r6, r4
 800ddb8:	f7ff ffc7 	bl	800dd4a <__hexdig_fun>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d062      	beq.n	800de86 <__gethex+0x112>
 800ddc0:	4623      	mov	r3, r4
 800ddc2:	7818      	ldrb	r0, [r3, #0]
 800ddc4:	2830      	cmp	r0, #48	@ 0x30
 800ddc6:	4699      	mov	r9, r3
 800ddc8:	f103 0301 	add.w	r3, r3, #1
 800ddcc:	d0f9      	beq.n	800ddc2 <__gethex+0x4e>
 800ddce:	f7ff ffbc 	bl	800dd4a <__hexdig_fun>
 800ddd2:	fab0 f580 	clz	r5, r0
 800ddd6:	096d      	lsrs	r5, r5, #5
 800ddd8:	f04f 0b01 	mov.w	fp, #1
 800dddc:	464a      	mov	r2, r9
 800ddde:	4616      	mov	r6, r2
 800dde0:	3201      	adds	r2, #1
 800dde2:	7830      	ldrb	r0, [r6, #0]
 800dde4:	f7ff ffb1 	bl	800dd4a <__hexdig_fun>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d1f8      	bne.n	800ddde <__gethex+0x6a>
 800ddec:	498d      	ldr	r1, [pc, #564]	@ (800e024 <__gethex+0x2b0>)
 800ddee:	2201      	movs	r2, #1
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	f7ff ff05 	bl	800dc00 <strncmp>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d13f      	bne.n	800de7a <__gethex+0x106>
 800ddfa:	b944      	cbnz	r4, 800de0e <__gethex+0x9a>
 800ddfc:	1c74      	adds	r4, r6, #1
 800ddfe:	4622      	mov	r2, r4
 800de00:	4616      	mov	r6, r2
 800de02:	3201      	adds	r2, #1
 800de04:	7830      	ldrb	r0, [r6, #0]
 800de06:	f7ff ffa0 	bl	800dd4a <__hexdig_fun>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d1f8      	bne.n	800de00 <__gethex+0x8c>
 800de0e:	1ba4      	subs	r4, r4, r6
 800de10:	00a7      	lsls	r7, r4, #2
 800de12:	7833      	ldrb	r3, [r6, #0]
 800de14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800de18:	2b50      	cmp	r3, #80	@ 0x50
 800de1a:	d13e      	bne.n	800de9a <__gethex+0x126>
 800de1c:	7873      	ldrb	r3, [r6, #1]
 800de1e:	2b2b      	cmp	r3, #43	@ 0x2b
 800de20:	d033      	beq.n	800de8a <__gethex+0x116>
 800de22:	2b2d      	cmp	r3, #45	@ 0x2d
 800de24:	d034      	beq.n	800de90 <__gethex+0x11c>
 800de26:	1c71      	adds	r1, r6, #1
 800de28:	2400      	movs	r4, #0
 800de2a:	7808      	ldrb	r0, [r1, #0]
 800de2c:	f7ff ff8d 	bl	800dd4a <__hexdig_fun>
 800de30:	1e43      	subs	r3, r0, #1
 800de32:	b2db      	uxtb	r3, r3
 800de34:	2b18      	cmp	r3, #24
 800de36:	d830      	bhi.n	800de9a <__gethex+0x126>
 800de38:	f1a0 0210 	sub.w	r2, r0, #16
 800de3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de40:	f7ff ff83 	bl	800dd4a <__hexdig_fun>
 800de44:	f100 3cff 	add.w	ip, r0, #4294967295
 800de48:	fa5f fc8c 	uxtb.w	ip, ip
 800de4c:	f1bc 0f18 	cmp.w	ip, #24
 800de50:	f04f 030a 	mov.w	r3, #10
 800de54:	d91e      	bls.n	800de94 <__gethex+0x120>
 800de56:	b104      	cbz	r4, 800de5a <__gethex+0xe6>
 800de58:	4252      	negs	r2, r2
 800de5a:	4417      	add	r7, r2
 800de5c:	f8ca 1000 	str.w	r1, [sl]
 800de60:	b1ed      	cbz	r5, 800de9e <__gethex+0x12a>
 800de62:	f1bb 0f00 	cmp.w	fp, #0
 800de66:	bf0c      	ite	eq
 800de68:	2506      	moveq	r5, #6
 800de6a:	2500      	movne	r5, #0
 800de6c:	4628      	mov	r0, r5
 800de6e:	b005      	add	sp, #20
 800de70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de74:	2500      	movs	r5, #0
 800de76:	462c      	mov	r4, r5
 800de78:	e7b0      	b.n	800dddc <__gethex+0x68>
 800de7a:	2c00      	cmp	r4, #0
 800de7c:	d1c7      	bne.n	800de0e <__gethex+0x9a>
 800de7e:	4627      	mov	r7, r4
 800de80:	e7c7      	b.n	800de12 <__gethex+0x9e>
 800de82:	464e      	mov	r6, r9
 800de84:	462f      	mov	r7, r5
 800de86:	2501      	movs	r5, #1
 800de88:	e7c3      	b.n	800de12 <__gethex+0x9e>
 800de8a:	2400      	movs	r4, #0
 800de8c:	1cb1      	adds	r1, r6, #2
 800de8e:	e7cc      	b.n	800de2a <__gethex+0xb6>
 800de90:	2401      	movs	r4, #1
 800de92:	e7fb      	b.n	800de8c <__gethex+0x118>
 800de94:	fb03 0002 	mla	r0, r3, r2, r0
 800de98:	e7ce      	b.n	800de38 <__gethex+0xc4>
 800de9a:	4631      	mov	r1, r6
 800de9c:	e7de      	b.n	800de5c <__gethex+0xe8>
 800de9e:	eba6 0309 	sub.w	r3, r6, r9
 800dea2:	3b01      	subs	r3, #1
 800dea4:	4629      	mov	r1, r5
 800dea6:	2b07      	cmp	r3, #7
 800dea8:	dc0a      	bgt.n	800dec0 <__gethex+0x14c>
 800deaa:	9801      	ldr	r0, [sp, #4]
 800deac:	f7fd ffe8 	bl	800be80 <_Balloc>
 800deb0:	4604      	mov	r4, r0
 800deb2:	b940      	cbnz	r0, 800dec6 <__gethex+0x152>
 800deb4:	4b5c      	ldr	r3, [pc, #368]	@ (800e028 <__gethex+0x2b4>)
 800deb6:	4602      	mov	r2, r0
 800deb8:	21e4      	movs	r1, #228	@ 0xe4
 800deba:	485c      	ldr	r0, [pc, #368]	@ (800e02c <__gethex+0x2b8>)
 800debc:	f7fd f874 	bl	800afa8 <__assert_func>
 800dec0:	3101      	adds	r1, #1
 800dec2:	105b      	asrs	r3, r3, #1
 800dec4:	e7ef      	b.n	800dea6 <__gethex+0x132>
 800dec6:	f100 0a14 	add.w	sl, r0, #20
 800deca:	2300      	movs	r3, #0
 800decc:	4655      	mov	r5, sl
 800dece:	469b      	mov	fp, r3
 800ded0:	45b1      	cmp	r9, r6
 800ded2:	d337      	bcc.n	800df44 <__gethex+0x1d0>
 800ded4:	f845 bb04 	str.w	fp, [r5], #4
 800ded8:	eba5 050a 	sub.w	r5, r5, sl
 800dedc:	10ad      	asrs	r5, r5, #2
 800dede:	6125      	str	r5, [r4, #16]
 800dee0:	4658      	mov	r0, fp
 800dee2:	f7fe f8bf 	bl	800c064 <__hi0bits>
 800dee6:	016d      	lsls	r5, r5, #5
 800dee8:	f8d8 6000 	ldr.w	r6, [r8]
 800deec:	1a2d      	subs	r5, r5, r0
 800deee:	42b5      	cmp	r5, r6
 800def0:	dd54      	ble.n	800df9c <__gethex+0x228>
 800def2:	1bad      	subs	r5, r5, r6
 800def4:	4629      	mov	r1, r5
 800def6:	4620      	mov	r0, r4
 800def8:	f7fe fc53 	bl	800c7a2 <__any_on>
 800defc:	4681      	mov	r9, r0
 800defe:	b178      	cbz	r0, 800df20 <__gethex+0x1ac>
 800df00:	1e6b      	subs	r3, r5, #1
 800df02:	1159      	asrs	r1, r3, #5
 800df04:	f003 021f 	and.w	r2, r3, #31
 800df08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800df0c:	f04f 0901 	mov.w	r9, #1
 800df10:	fa09 f202 	lsl.w	r2, r9, r2
 800df14:	420a      	tst	r2, r1
 800df16:	d003      	beq.n	800df20 <__gethex+0x1ac>
 800df18:	454b      	cmp	r3, r9
 800df1a:	dc36      	bgt.n	800df8a <__gethex+0x216>
 800df1c:	f04f 0902 	mov.w	r9, #2
 800df20:	4629      	mov	r1, r5
 800df22:	4620      	mov	r0, r4
 800df24:	f7ff febf 	bl	800dca6 <rshift>
 800df28:	442f      	add	r7, r5
 800df2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df2e:	42bb      	cmp	r3, r7
 800df30:	da42      	bge.n	800dfb8 <__gethex+0x244>
 800df32:	9801      	ldr	r0, [sp, #4]
 800df34:	4621      	mov	r1, r4
 800df36:	f7fd ffe3 	bl	800bf00 <_Bfree>
 800df3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df3c:	2300      	movs	r3, #0
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	25a3      	movs	r5, #163	@ 0xa3
 800df42:	e793      	b.n	800de6c <__gethex+0xf8>
 800df44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800df48:	2a2e      	cmp	r2, #46	@ 0x2e
 800df4a:	d012      	beq.n	800df72 <__gethex+0x1fe>
 800df4c:	2b20      	cmp	r3, #32
 800df4e:	d104      	bne.n	800df5a <__gethex+0x1e6>
 800df50:	f845 bb04 	str.w	fp, [r5], #4
 800df54:	f04f 0b00 	mov.w	fp, #0
 800df58:	465b      	mov	r3, fp
 800df5a:	7830      	ldrb	r0, [r6, #0]
 800df5c:	9303      	str	r3, [sp, #12]
 800df5e:	f7ff fef4 	bl	800dd4a <__hexdig_fun>
 800df62:	9b03      	ldr	r3, [sp, #12]
 800df64:	f000 000f 	and.w	r0, r0, #15
 800df68:	4098      	lsls	r0, r3
 800df6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800df6e:	3304      	adds	r3, #4
 800df70:	e7ae      	b.n	800ded0 <__gethex+0x15c>
 800df72:	45b1      	cmp	r9, r6
 800df74:	d8ea      	bhi.n	800df4c <__gethex+0x1d8>
 800df76:	492b      	ldr	r1, [pc, #172]	@ (800e024 <__gethex+0x2b0>)
 800df78:	9303      	str	r3, [sp, #12]
 800df7a:	2201      	movs	r2, #1
 800df7c:	4630      	mov	r0, r6
 800df7e:	f7ff fe3f 	bl	800dc00 <strncmp>
 800df82:	9b03      	ldr	r3, [sp, #12]
 800df84:	2800      	cmp	r0, #0
 800df86:	d1e1      	bne.n	800df4c <__gethex+0x1d8>
 800df88:	e7a2      	b.n	800ded0 <__gethex+0x15c>
 800df8a:	1ea9      	subs	r1, r5, #2
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7fe fc08 	bl	800c7a2 <__any_on>
 800df92:	2800      	cmp	r0, #0
 800df94:	d0c2      	beq.n	800df1c <__gethex+0x1a8>
 800df96:	f04f 0903 	mov.w	r9, #3
 800df9a:	e7c1      	b.n	800df20 <__gethex+0x1ac>
 800df9c:	da09      	bge.n	800dfb2 <__gethex+0x23e>
 800df9e:	1b75      	subs	r5, r6, r5
 800dfa0:	4621      	mov	r1, r4
 800dfa2:	9801      	ldr	r0, [sp, #4]
 800dfa4:	462a      	mov	r2, r5
 800dfa6:	f7fe f9c3 	bl	800c330 <__lshift>
 800dfaa:	1b7f      	subs	r7, r7, r5
 800dfac:	4604      	mov	r4, r0
 800dfae:	f100 0a14 	add.w	sl, r0, #20
 800dfb2:	f04f 0900 	mov.w	r9, #0
 800dfb6:	e7b8      	b.n	800df2a <__gethex+0x1b6>
 800dfb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dfbc:	42bd      	cmp	r5, r7
 800dfbe:	dd6f      	ble.n	800e0a0 <__gethex+0x32c>
 800dfc0:	1bed      	subs	r5, r5, r7
 800dfc2:	42ae      	cmp	r6, r5
 800dfc4:	dc34      	bgt.n	800e030 <__gethex+0x2bc>
 800dfc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d022      	beq.n	800e014 <__gethex+0x2a0>
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d024      	beq.n	800e01c <__gethex+0x2a8>
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d115      	bne.n	800e002 <__gethex+0x28e>
 800dfd6:	42ae      	cmp	r6, r5
 800dfd8:	d113      	bne.n	800e002 <__gethex+0x28e>
 800dfda:	2e01      	cmp	r6, #1
 800dfdc:	d10b      	bne.n	800dff6 <__gethex+0x282>
 800dfde:	9a02      	ldr	r2, [sp, #8]
 800dfe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dfe4:	6013      	str	r3, [r2, #0]
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	6123      	str	r3, [r4, #16]
 800dfea:	f8ca 3000 	str.w	r3, [sl]
 800dfee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dff0:	2562      	movs	r5, #98	@ 0x62
 800dff2:	601c      	str	r4, [r3, #0]
 800dff4:	e73a      	b.n	800de6c <__gethex+0xf8>
 800dff6:	1e71      	subs	r1, r6, #1
 800dff8:	4620      	mov	r0, r4
 800dffa:	f7fe fbd2 	bl	800c7a2 <__any_on>
 800dffe:	2800      	cmp	r0, #0
 800e000:	d1ed      	bne.n	800dfde <__gethex+0x26a>
 800e002:	9801      	ldr	r0, [sp, #4]
 800e004:	4621      	mov	r1, r4
 800e006:	f7fd ff7b 	bl	800bf00 <_Bfree>
 800e00a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e00c:	2300      	movs	r3, #0
 800e00e:	6013      	str	r3, [r2, #0]
 800e010:	2550      	movs	r5, #80	@ 0x50
 800e012:	e72b      	b.n	800de6c <__gethex+0xf8>
 800e014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1f3      	bne.n	800e002 <__gethex+0x28e>
 800e01a:	e7e0      	b.n	800dfde <__gethex+0x26a>
 800e01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1dd      	bne.n	800dfde <__gethex+0x26a>
 800e022:	e7ee      	b.n	800e002 <__gethex+0x28e>
 800e024:	0800e9e8 	.word	0x0800e9e8
 800e028:	0800e880 	.word	0x0800e880
 800e02c:	0800ea59 	.word	0x0800ea59
 800e030:	1e6f      	subs	r7, r5, #1
 800e032:	f1b9 0f00 	cmp.w	r9, #0
 800e036:	d130      	bne.n	800e09a <__gethex+0x326>
 800e038:	b127      	cbz	r7, 800e044 <__gethex+0x2d0>
 800e03a:	4639      	mov	r1, r7
 800e03c:	4620      	mov	r0, r4
 800e03e:	f7fe fbb0 	bl	800c7a2 <__any_on>
 800e042:	4681      	mov	r9, r0
 800e044:	117a      	asrs	r2, r7, #5
 800e046:	2301      	movs	r3, #1
 800e048:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e04c:	f007 071f 	and.w	r7, r7, #31
 800e050:	40bb      	lsls	r3, r7
 800e052:	4213      	tst	r3, r2
 800e054:	4629      	mov	r1, r5
 800e056:	4620      	mov	r0, r4
 800e058:	bf18      	it	ne
 800e05a:	f049 0902 	orrne.w	r9, r9, #2
 800e05e:	f7ff fe22 	bl	800dca6 <rshift>
 800e062:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e066:	1b76      	subs	r6, r6, r5
 800e068:	2502      	movs	r5, #2
 800e06a:	f1b9 0f00 	cmp.w	r9, #0
 800e06e:	d047      	beq.n	800e100 <__gethex+0x38c>
 800e070:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e074:	2b02      	cmp	r3, #2
 800e076:	d015      	beq.n	800e0a4 <__gethex+0x330>
 800e078:	2b03      	cmp	r3, #3
 800e07a:	d017      	beq.n	800e0ac <__gethex+0x338>
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d109      	bne.n	800e094 <__gethex+0x320>
 800e080:	f019 0f02 	tst.w	r9, #2
 800e084:	d006      	beq.n	800e094 <__gethex+0x320>
 800e086:	f8da 3000 	ldr.w	r3, [sl]
 800e08a:	ea49 0903 	orr.w	r9, r9, r3
 800e08e:	f019 0f01 	tst.w	r9, #1
 800e092:	d10e      	bne.n	800e0b2 <__gethex+0x33e>
 800e094:	f045 0510 	orr.w	r5, r5, #16
 800e098:	e032      	b.n	800e100 <__gethex+0x38c>
 800e09a:	f04f 0901 	mov.w	r9, #1
 800e09e:	e7d1      	b.n	800e044 <__gethex+0x2d0>
 800e0a0:	2501      	movs	r5, #1
 800e0a2:	e7e2      	b.n	800e06a <__gethex+0x2f6>
 800e0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0a6:	f1c3 0301 	rsb	r3, r3, #1
 800e0aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0f0      	beq.n	800e094 <__gethex+0x320>
 800e0b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e0b6:	f104 0314 	add.w	r3, r4, #20
 800e0ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e0be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e0c2:	f04f 0c00 	mov.w	ip, #0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e0d0:	d01b      	beq.n	800e10a <__gethex+0x396>
 800e0d2:	3201      	adds	r2, #1
 800e0d4:	6002      	str	r2, [r0, #0]
 800e0d6:	2d02      	cmp	r5, #2
 800e0d8:	f104 0314 	add.w	r3, r4, #20
 800e0dc:	d13c      	bne.n	800e158 <__gethex+0x3e4>
 800e0de:	f8d8 2000 	ldr.w	r2, [r8]
 800e0e2:	3a01      	subs	r2, #1
 800e0e4:	42b2      	cmp	r2, r6
 800e0e6:	d109      	bne.n	800e0fc <__gethex+0x388>
 800e0e8:	1171      	asrs	r1, r6, #5
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0f0:	f006 061f 	and.w	r6, r6, #31
 800e0f4:	fa02 f606 	lsl.w	r6, r2, r6
 800e0f8:	421e      	tst	r6, r3
 800e0fa:	d13a      	bne.n	800e172 <__gethex+0x3fe>
 800e0fc:	f045 0520 	orr.w	r5, r5, #32
 800e100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e102:	601c      	str	r4, [r3, #0]
 800e104:	9b02      	ldr	r3, [sp, #8]
 800e106:	601f      	str	r7, [r3, #0]
 800e108:	e6b0      	b.n	800de6c <__gethex+0xf8>
 800e10a:	4299      	cmp	r1, r3
 800e10c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e110:	d8d9      	bhi.n	800e0c6 <__gethex+0x352>
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	459b      	cmp	fp, r3
 800e116:	db17      	blt.n	800e148 <__gethex+0x3d4>
 800e118:	6861      	ldr	r1, [r4, #4]
 800e11a:	9801      	ldr	r0, [sp, #4]
 800e11c:	3101      	adds	r1, #1
 800e11e:	f7fd feaf 	bl	800be80 <_Balloc>
 800e122:	4681      	mov	r9, r0
 800e124:	b918      	cbnz	r0, 800e12e <__gethex+0x3ba>
 800e126:	4b1a      	ldr	r3, [pc, #104]	@ (800e190 <__gethex+0x41c>)
 800e128:	4602      	mov	r2, r0
 800e12a:	2184      	movs	r1, #132	@ 0x84
 800e12c:	e6c5      	b.n	800deba <__gethex+0x146>
 800e12e:	6922      	ldr	r2, [r4, #16]
 800e130:	3202      	adds	r2, #2
 800e132:	f104 010c 	add.w	r1, r4, #12
 800e136:	0092      	lsls	r2, r2, #2
 800e138:	300c      	adds	r0, #12
 800e13a:	f7ff fd83 	bl	800dc44 <memcpy>
 800e13e:	4621      	mov	r1, r4
 800e140:	9801      	ldr	r0, [sp, #4]
 800e142:	f7fd fedd 	bl	800bf00 <_Bfree>
 800e146:	464c      	mov	r4, r9
 800e148:	6923      	ldr	r3, [r4, #16]
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e150:	6122      	str	r2, [r4, #16]
 800e152:	2201      	movs	r2, #1
 800e154:	615a      	str	r2, [r3, #20]
 800e156:	e7be      	b.n	800e0d6 <__gethex+0x362>
 800e158:	6922      	ldr	r2, [r4, #16]
 800e15a:	455a      	cmp	r2, fp
 800e15c:	dd0b      	ble.n	800e176 <__gethex+0x402>
 800e15e:	2101      	movs	r1, #1
 800e160:	4620      	mov	r0, r4
 800e162:	f7ff fda0 	bl	800dca6 <rshift>
 800e166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e16a:	3701      	adds	r7, #1
 800e16c:	42bb      	cmp	r3, r7
 800e16e:	f6ff aee0 	blt.w	800df32 <__gethex+0x1be>
 800e172:	2501      	movs	r5, #1
 800e174:	e7c2      	b.n	800e0fc <__gethex+0x388>
 800e176:	f016 061f 	ands.w	r6, r6, #31
 800e17a:	d0fa      	beq.n	800e172 <__gethex+0x3fe>
 800e17c:	4453      	add	r3, sl
 800e17e:	f1c6 0620 	rsb	r6, r6, #32
 800e182:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e186:	f7fd ff6d 	bl	800c064 <__hi0bits>
 800e18a:	42b0      	cmp	r0, r6
 800e18c:	dbe7      	blt.n	800e15e <__gethex+0x3ea>
 800e18e:	e7f0      	b.n	800e172 <__gethex+0x3fe>
 800e190:	0800e880 	.word	0x0800e880

0800e194 <L_shift>:
 800e194:	f1c2 0208 	rsb	r2, r2, #8
 800e198:	0092      	lsls	r2, r2, #2
 800e19a:	b570      	push	{r4, r5, r6, lr}
 800e19c:	f1c2 0620 	rsb	r6, r2, #32
 800e1a0:	6843      	ldr	r3, [r0, #4]
 800e1a2:	6804      	ldr	r4, [r0, #0]
 800e1a4:	fa03 f506 	lsl.w	r5, r3, r6
 800e1a8:	432c      	orrs	r4, r5
 800e1aa:	40d3      	lsrs	r3, r2
 800e1ac:	6004      	str	r4, [r0, #0]
 800e1ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800e1b2:	4288      	cmp	r0, r1
 800e1b4:	d3f4      	bcc.n	800e1a0 <L_shift+0xc>
 800e1b6:	bd70      	pop	{r4, r5, r6, pc}

0800e1b8 <__match>:
 800e1b8:	b530      	push	{r4, r5, lr}
 800e1ba:	6803      	ldr	r3, [r0, #0]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1c2:	b914      	cbnz	r4, 800e1ca <__match+0x12>
 800e1c4:	6003      	str	r3, [r0, #0]
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	bd30      	pop	{r4, r5, pc}
 800e1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e1d2:	2d19      	cmp	r5, #25
 800e1d4:	bf98      	it	ls
 800e1d6:	3220      	addls	r2, #32
 800e1d8:	42a2      	cmp	r2, r4
 800e1da:	d0f0      	beq.n	800e1be <__match+0x6>
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e7f3      	b.n	800e1c8 <__match+0x10>

0800e1e0 <__hexnan>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	680b      	ldr	r3, [r1, #0]
 800e1e6:	6801      	ldr	r1, [r0, #0]
 800e1e8:	115e      	asrs	r6, r3, #5
 800e1ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e1ee:	f013 031f 	ands.w	r3, r3, #31
 800e1f2:	b087      	sub	sp, #28
 800e1f4:	bf18      	it	ne
 800e1f6:	3604      	addne	r6, #4
 800e1f8:	2500      	movs	r5, #0
 800e1fa:	1f37      	subs	r7, r6, #4
 800e1fc:	4682      	mov	sl, r0
 800e1fe:	4690      	mov	r8, r2
 800e200:	9301      	str	r3, [sp, #4]
 800e202:	f846 5c04 	str.w	r5, [r6, #-4]
 800e206:	46b9      	mov	r9, r7
 800e208:	463c      	mov	r4, r7
 800e20a:	9502      	str	r5, [sp, #8]
 800e20c:	46ab      	mov	fp, r5
 800e20e:	784a      	ldrb	r2, [r1, #1]
 800e210:	1c4b      	adds	r3, r1, #1
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	b342      	cbz	r2, 800e268 <__hexnan+0x88>
 800e216:	4610      	mov	r0, r2
 800e218:	9105      	str	r1, [sp, #20]
 800e21a:	9204      	str	r2, [sp, #16]
 800e21c:	f7ff fd95 	bl	800dd4a <__hexdig_fun>
 800e220:	2800      	cmp	r0, #0
 800e222:	d151      	bne.n	800e2c8 <__hexnan+0xe8>
 800e224:	9a04      	ldr	r2, [sp, #16]
 800e226:	9905      	ldr	r1, [sp, #20]
 800e228:	2a20      	cmp	r2, #32
 800e22a:	d818      	bhi.n	800e25e <__hexnan+0x7e>
 800e22c:	9b02      	ldr	r3, [sp, #8]
 800e22e:	459b      	cmp	fp, r3
 800e230:	dd13      	ble.n	800e25a <__hexnan+0x7a>
 800e232:	454c      	cmp	r4, r9
 800e234:	d206      	bcs.n	800e244 <__hexnan+0x64>
 800e236:	2d07      	cmp	r5, #7
 800e238:	dc04      	bgt.n	800e244 <__hexnan+0x64>
 800e23a:	462a      	mov	r2, r5
 800e23c:	4649      	mov	r1, r9
 800e23e:	4620      	mov	r0, r4
 800e240:	f7ff ffa8 	bl	800e194 <L_shift>
 800e244:	4544      	cmp	r4, r8
 800e246:	d952      	bls.n	800e2ee <__hexnan+0x10e>
 800e248:	2300      	movs	r3, #0
 800e24a:	f1a4 0904 	sub.w	r9, r4, #4
 800e24e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e252:	f8cd b008 	str.w	fp, [sp, #8]
 800e256:	464c      	mov	r4, r9
 800e258:	461d      	mov	r5, r3
 800e25a:	9903      	ldr	r1, [sp, #12]
 800e25c:	e7d7      	b.n	800e20e <__hexnan+0x2e>
 800e25e:	2a29      	cmp	r2, #41	@ 0x29
 800e260:	d157      	bne.n	800e312 <__hexnan+0x132>
 800e262:	3102      	adds	r1, #2
 800e264:	f8ca 1000 	str.w	r1, [sl]
 800e268:	f1bb 0f00 	cmp.w	fp, #0
 800e26c:	d051      	beq.n	800e312 <__hexnan+0x132>
 800e26e:	454c      	cmp	r4, r9
 800e270:	d206      	bcs.n	800e280 <__hexnan+0xa0>
 800e272:	2d07      	cmp	r5, #7
 800e274:	dc04      	bgt.n	800e280 <__hexnan+0xa0>
 800e276:	462a      	mov	r2, r5
 800e278:	4649      	mov	r1, r9
 800e27a:	4620      	mov	r0, r4
 800e27c:	f7ff ff8a 	bl	800e194 <L_shift>
 800e280:	4544      	cmp	r4, r8
 800e282:	d936      	bls.n	800e2f2 <__hexnan+0x112>
 800e284:	f1a8 0204 	sub.w	r2, r8, #4
 800e288:	4623      	mov	r3, r4
 800e28a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e28e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e292:	429f      	cmp	r7, r3
 800e294:	d2f9      	bcs.n	800e28a <__hexnan+0xaa>
 800e296:	1b3b      	subs	r3, r7, r4
 800e298:	f023 0303 	bic.w	r3, r3, #3
 800e29c:	3304      	adds	r3, #4
 800e29e:	3401      	adds	r4, #1
 800e2a0:	3e03      	subs	r6, #3
 800e2a2:	42b4      	cmp	r4, r6
 800e2a4:	bf88      	it	hi
 800e2a6:	2304      	movhi	r3, #4
 800e2a8:	4443      	add	r3, r8
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f843 2b04 	str.w	r2, [r3], #4
 800e2b0:	429f      	cmp	r7, r3
 800e2b2:	d2fb      	bcs.n	800e2ac <__hexnan+0xcc>
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	b91b      	cbnz	r3, 800e2c0 <__hexnan+0xe0>
 800e2b8:	4547      	cmp	r7, r8
 800e2ba:	d128      	bne.n	800e30e <__hexnan+0x12e>
 800e2bc:	2301      	movs	r3, #1
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	2005      	movs	r0, #5
 800e2c2:	b007      	add	sp, #28
 800e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	2d08      	cmp	r5, #8
 800e2cc:	f10b 0b01 	add.w	fp, fp, #1
 800e2d0:	dd06      	ble.n	800e2e0 <__hexnan+0x100>
 800e2d2:	4544      	cmp	r4, r8
 800e2d4:	d9c1      	bls.n	800e25a <__hexnan+0x7a>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2dc:	2501      	movs	r5, #1
 800e2de:	3c04      	subs	r4, #4
 800e2e0:	6822      	ldr	r2, [r4, #0]
 800e2e2:	f000 000f 	and.w	r0, r0, #15
 800e2e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e2ea:	6020      	str	r0, [r4, #0]
 800e2ec:	e7b5      	b.n	800e25a <__hexnan+0x7a>
 800e2ee:	2508      	movs	r5, #8
 800e2f0:	e7b3      	b.n	800e25a <__hexnan+0x7a>
 800e2f2:	9b01      	ldr	r3, [sp, #4]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d0dd      	beq.n	800e2b4 <__hexnan+0xd4>
 800e2f8:	f1c3 0320 	rsb	r3, r3, #32
 800e2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e300:	40da      	lsrs	r2, r3
 800e302:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e306:	4013      	ands	r3, r2
 800e308:	f846 3c04 	str.w	r3, [r6, #-4]
 800e30c:	e7d2      	b.n	800e2b4 <__hexnan+0xd4>
 800e30e:	3f04      	subs	r7, #4
 800e310:	e7d0      	b.n	800e2b4 <__hexnan+0xd4>
 800e312:	2004      	movs	r0, #4
 800e314:	e7d5      	b.n	800e2c2 <__hexnan+0xe2>

0800e316 <__ascii_mbtowc>:
 800e316:	b082      	sub	sp, #8
 800e318:	b901      	cbnz	r1, 800e31c <__ascii_mbtowc+0x6>
 800e31a:	a901      	add	r1, sp, #4
 800e31c:	b142      	cbz	r2, 800e330 <__ascii_mbtowc+0x1a>
 800e31e:	b14b      	cbz	r3, 800e334 <__ascii_mbtowc+0x1e>
 800e320:	7813      	ldrb	r3, [r2, #0]
 800e322:	600b      	str	r3, [r1, #0]
 800e324:	7812      	ldrb	r2, [r2, #0]
 800e326:	1e10      	subs	r0, r2, #0
 800e328:	bf18      	it	ne
 800e32a:	2001      	movne	r0, #1
 800e32c:	b002      	add	sp, #8
 800e32e:	4770      	bx	lr
 800e330:	4610      	mov	r0, r2
 800e332:	e7fb      	b.n	800e32c <__ascii_mbtowc+0x16>
 800e334:	f06f 0001 	mvn.w	r0, #1
 800e338:	e7f8      	b.n	800e32c <__ascii_mbtowc+0x16>

0800e33a <_realloc_r>:
 800e33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33e:	4680      	mov	r8, r0
 800e340:	4615      	mov	r5, r2
 800e342:	460c      	mov	r4, r1
 800e344:	b921      	cbnz	r1, 800e350 <_realloc_r+0x16>
 800e346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e34a:	4611      	mov	r1, r2
 800e34c:	f7fd bd0c 	b.w	800bd68 <_malloc_r>
 800e350:	b92a      	cbnz	r2, 800e35e <_realloc_r+0x24>
 800e352:	f7fd fc95 	bl	800bc80 <_free_r>
 800e356:	2400      	movs	r4, #0
 800e358:	4620      	mov	r0, r4
 800e35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e35e:	f000 f8ef 	bl	800e540 <_malloc_usable_size_r>
 800e362:	4285      	cmp	r5, r0
 800e364:	4606      	mov	r6, r0
 800e366:	d802      	bhi.n	800e36e <_realloc_r+0x34>
 800e368:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e36c:	d8f4      	bhi.n	800e358 <_realloc_r+0x1e>
 800e36e:	4629      	mov	r1, r5
 800e370:	4640      	mov	r0, r8
 800e372:	f7fd fcf9 	bl	800bd68 <_malloc_r>
 800e376:	4607      	mov	r7, r0
 800e378:	2800      	cmp	r0, #0
 800e37a:	d0ec      	beq.n	800e356 <_realloc_r+0x1c>
 800e37c:	42b5      	cmp	r5, r6
 800e37e:	462a      	mov	r2, r5
 800e380:	4621      	mov	r1, r4
 800e382:	bf28      	it	cs
 800e384:	4632      	movcs	r2, r6
 800e386:	f7ff fc5d 	bl	800dc44 <memcpy>
 800e38a:	4621      	mov	r1, r4
 800e38c:	4640      	mov	r0, r8
 800e38e:	f7fd fc77 	bl	800bc80 <_free_r>
 800e392:	463c      	mov	r4, r7
 800e394:	e7e0      	b.n	800e358 <_realloc_r+0x1e>

0800e396 <__ascii_wctomb>:
 800e396:	4603      	mov	r3, r0
 800e398:	4608      	mov	r0, r1
 800e39a:	b141      	cbz	r1, 800e3ae <__ascii_wctomb+0x18>
 800e39c:	2aff      	cmp	r2, #255	@ 0xff
 800e39e:	d904      	bls.n	800e3aa <__ascii_wctomb+0x14>
 800e3a0:	228a      	movs	r2, #138	@ 0x8a
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	4770      	bx	lr
 800e3aa:	700a      	strb	r2, [r1, #0]
 800e3ac:	2001      	movs	r0, #1
 800e3ae:	4770      	bx	lr

0800e3b0 <__swhatbuf_r>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b8:	2900      	cmp	r1, #0
 800e3ba:	b096      	sub	sp, #88	@ 0x58
 800e3bc:	4615      	mov	r5, r2
 800e3be:	461e      	mov	r6, r3
 800e3c0:	da0d      	bge.n	800e3de <__swhatbuf_r+0x2e>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3c8:	f04f 0100 	mov.w	r1, #0
 800e3cc:	bf14      	ite	ne
 800e3ce:	2340      	movne	r3, #64	@ 0x40
 800e3d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	6031      	str	r1, [r6, #0]
 800e3d8:	602b      	str	r3, [r5, #0]
 800e3da:	b016      	add	sp, #88	@ 0x58
 800e3dc:	bd70      	pop	{r4, r5, r6, pc}
 800e3de:	466a      	mov	r2, sp
 800e3e0:	f000 f878 	bl	800e4d4 <_fstat_r>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	dbec      	blt.n	800e3c2 <__swhatbuf_r+0x12>
 800e3e8:	9901      	ldr	r1, [sp, #4]
 800e3ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3f2:	4259      	negs	r1, r3
 800e3f4:	4159      	adcs	r1, r3
 800e3f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3fa:	e7eb      	b.n	800e3d4 <__swhatbuf_r+0x24>

0800e3fc <__smakebuf_r>:
 800e3fc:	898b      	ldrh	r3, [r1, #12]
 800e3fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e400:	079d      	lsls	r5, r3, #30
 800e402:	4606      	mov	r6, r0
 800e404:	460c      	mov	r4, r1
 800e406:	d507      	bpl.n	800e418 <__smakebuf_r+0x1c>
 800e408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	6123      	str	r3, [r4, #16]
 800e410:	2301      	movs	r3, #1
 800e412:	6163      	str	r3, [r4, #20]
 800e414:	b003      	add	sp, #12
 800e416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e418:	ab01      	add	r3, sp, #4
 800e41a:	466a      	mov	r2, sp
 800e41c:	f7ff ffc8 	bl	800e3b0 <__swhatbuf_r>
 800e420:	9f00      	ldr	r7, [sp, #0]
 800e422:	4605      	mov	r5, r0
 800e424:	4639      	mov	r1, r7
 800e426:	4630      	mov	r0, r6
 800e428:	f7fd fc9e 	bl	800bd68 <_malloc_r>
 800e42c:	b948      	cbnz	r0, 800e442 <__smakebuf_r+0x46>
 800e42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e432:	059a      	lsls	r2, r3, #22
 800e434:	d4ee      	bmi.n	800e414 <__smakebuf_r+0x18>
 800e436:	f023 0303 	bic.w	r3, r3, #3
 800e43a:	f043 0302 	orr.w	r3, r3, #2
 800e43e:	81a3      	strh	r3, [r4, #12]
 800e440:	e7e2      	b.n	800e408 <__smakebuf_r+0xc>
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	6020      	str	r0, [r4, #0]
 800e446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e44a:	81a3      	strh	r3, [r4, #12]
 800e44c:	9b01      	ldr	r3, [sp, #4]
 800e44e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e452:	b15b      	cbz	r3, 800e46c <__smakebuf_r+0x70>
 800e454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e458:	4630      	mov	r0, r6
 800e45a:	f000 f84d 	bl	800e4f8 <_isatty_r>
 800e45e:	b128      	cbz	r0, 800e46c <__smakebuf_r+0x70>
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	f023 0303 	bic.w	r3, r3, #3
 800e466:	f043 0301 	orr.w	r3, r3, #1
 800e46a:	81a3      	strh	r3, [r4, #12]
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	431d      	orrs	r5, r3
 800e470:	81a5      	strh	r5, [r4, #12]
 800e472:	e7cf      	b.n	800e414 <__smakebuf_r+0x18>

0800e474 <_raise_r>:
 800e474:	291f      	cmp	r1, #31
 800e476:	b538      	push	{r3, r4, r5, lr}
 800e478:	4605      	mov	r5, r0
 800e47a:	460c      	mov	r4, r1
 800e47c:	d904      	bls.n	800e488 <_raise_r+0x14>
 800e47e:	2316      	movs	r3, #22
 800e480:	6003      	str	r3, [r0, #0]
 800e482:	f04f 30ff 	mov.w	r0, #4294967295
 800e486:	bd38      	pop	{r3, r4, r5, pc}
 800e488:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e48a:	b112      	cbz	r2, 800e492 <_raise_r+0x1e>
 800e48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e490:	b94b      	cbnz	r3, 800e4a6 <_raise_r+0x32>
 800e492:	4628      	mov	r0, r5
 800e494:	f000 f852 	bl	800e53c <_getpid_r>
 800e498:	4622      	mov	r2, r4
 800e49a:	4601      	mov	r1, r0
 800e49c:	4628      	mov	r0, r5
 800e49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4a2:	f000 b839 	b.w	800e518 <_kill_r>
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d00a      	beq.n	800e4c0 <_raise_r+0x4c>
 800e4aa:	1c59      	adds	r1, r3, #1
 800e4ac:	d103      	bne.n	800e4b6 <_raise_r+0x42>
 800e4ae:	2316      	movs	r3, #22
 800e4b0:	6003      	str	r3, [r0, #0]
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	e7e7      	b.n	800e486 <_raise_r+0x12>
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4bc:	4620      	mov	r0, r4
 800e4be:	4798      	blx	r3
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	e7e0      	b.n	800e486 <_raise_r+0x12>

0800e4c4 <raise>:
 800e4c4:	4b02      	ldr	r3, [pc, #8]	@ (800e4d0 <raise+0xc>)
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	6818      	ldr	r0, [r3, #0]
 800e4ca:	f7ff bfd3 	b.w	800e474 <_raise_r>
 800e4ce:	bf00      	nop
 800e4d0:	200000e8 	.word	0x200000e8

0800e4d4 <_fstat_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4d07      	ldr	r5, [pc, #28]	@ (800e4f4 <_fstat_r+0x20>)
 800e4d8:	2300      	movs	r3, #0
 800e4da:	4604      	mov	r4, r0
 800e4dc:	4608      	mov	r0, r1
 800e4de:	4611      	mov	r1, r2
 800e4e0:	602b      	str	r3, [r5, #0]
 800e4e2:	f7f3 fa47 	bl	8001974 <_fstat>
 800e4e6:	1c43      	adds	r3, r0, #1
 800e4e8:	d102      	bne.n	800e4f0 <_fstat_r+0x1c>
 800e4ea:	682b      	ldr	r3, [r5, #0]
 800e4ec:	b103      	cbz	r3, 800e4f0 <_fstat_r+0x1c>
 800e4ee:	6023      	str	r3, [r4, #0]
 800e4f0:	bd38      	pop	{r3, r4, r5, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000810 	.word	0x20000810

0800e4f8 <_isatty_r>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4d06      	ldr	r5, [pc, #24]	@ (800e514 <_isatty_r+0x1c>)
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4604      	mov	r4, r0
 800e500:	4608      	mov	r0, r1
 800e502:	602b      	str	r3, [r5, #0]
 800e504:	f7f3 fa46 	bl	8001994 <_isatty>
 800e508:	1c43      	adds	r3, r0, #1
 800e50a:	d102      	bne.n	800e512 <_isatty_r+0x1a>
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	b103      	cbz	r3, 800e512 <_isatty_r+0x1a>
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	bd38      	pop	{r3, r4, r5, pc}
 800e514:	20000810 	.word	0x20000810

0800e518 <_kill_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4d07      	ldr	r5, [pc, #28]	@ (800e538 <_kill_r+0x20>)
 800e51c:	2300      	movs	r3, #0
 800e51e:	4604      	mov	r4, r0
 800e520:	4608      	mov	r0, r1
 800e522:	4611      	mov	r1, r2
 800e524:	602b      	str	r3, [r5, #0]
 800e526:	f7f3 f9c5 	bl	80018b4 <_kill>
 800e52a:	1c43      	adds	r3, r0, #1
 800e52c:	d102      	bne.n	800e534 <_kill_r+0x1c>
 800e52e:	682b      	ldr	r3, [r5, #0]
 800e530:	b103      	cbz	r3, 800e534 <_kill_r+0x1c>
 800e532:	6023      	str	r3, [r4, #0]
 800e534:	bd38      	pop	{r3, r4, r5, pc}
 800e536:	bf00      	nop
 800e538:	20000810 	.word	0x20000810

0800e53c <_getpid_r>:
 800e53c:	f7f3 b9b2 	b.w	80018a4 <_getpid>

0800e540 <_malloc_usable_size_r>:
 800e540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e544:	1f18      	subs	r0, r3, #4
 800e546:	2b00      	cmp	r3, #0
 800e548:	bfbc      	itt	lt
 800e54a:	580b      	ldrlt	r3, [r1, r0]
 800e54c:	18c0      	addlt	r0, r0, r3
 800e54e:	4770      	bx	lr

0800e550 <_init>:
 800e550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e552:	bf00      	nop
 800e554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e556:	bc08      	pop	{r3}
 800e558:	469e      	mov	lr, r3
 800e55a:	4770      	bx	lr

0800e55c <_fini>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	bf00      	nop
 800e560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e562:	bc08      	pop	{r3}
 800e564:	469e      	mov	lr, r3
 800e566:	4770      	bx	lr
