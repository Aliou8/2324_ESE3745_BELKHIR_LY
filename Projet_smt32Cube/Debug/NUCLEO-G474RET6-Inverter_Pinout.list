
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d08  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a14c  0800a14c  0000c124  2**0
                  CONTENTS
  4 .ARM          00000008  0800a14c  0800a14c  0000b14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a154  0800a154  0000c124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a154  0800a154  0000b154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a158  0800a158  0000b158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800a15c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000124  0800a280  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800a280  0000c630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a359  00000000  00000000  0000c154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003688  00000000  00000000  000264ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00029b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001103  00000000  00000000  0002b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a200  00000000  00000000  0002c23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b38e  00000000  00000000  0005643b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001145d6  00000000  00000000  000717c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185d9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aec  00000000  00000000  00185de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ed0 	.word	0x08009ed0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	08009ed0 	.word	0x08009ed0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2iz>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d215      	bcs.n	8000bd2 <__aeabi_d2iz+0x36>
 8000ba6:	d511      	bpl.n	8000bcc <__aeabi_d2iz+0x30>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d912      	bls.n	8000bd8 <__aeabi_d2iz+0x3c>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	4770      	bx	lr
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd6:	d105      	bne.n	8000be4 <__aeabi_d2iz+0x48>
 8000bd8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	bf08      	it	eq
 8000bde:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b96a 	b.w	8000ed8 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	460c      	mov	r4, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14e      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c28:	4694      	mov	ip, r2
 8000c2a:	458c      	cmp	ip, r1
 8000c2c:	4686      	mov	lr, r0
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	d962      	bls.n	8000cfa <__udivmoddi4+0xde>
 8000c34:	b14a      	cbz	r2, 8000c4a <__udivmoddi4+0x2e>
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	4319      	orrs	r1, r3
 8000c46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4e:	fa1f f68c 	uxth.w	r6, ip
 8000c52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb04 f106 	mul.w	r1, r4, r6
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c72:	f080 8112 	bcs.w	8000e9a <__udivmoddi4+0x27e>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 810f 	bls.w	8000e9a <__udivmoddi4+0x27e>
 8000c7c:	3c02      	subs	r4, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	fa1f f38e 	uxth.w	r3, lr
 8000c86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	fb00 f606 	mul.w	r6, r0, r6
 8000c96:	429e      	cmp	r6, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x94>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca2:	f080 80fc 	bcs.w	8000e9e <__udivmoddi4+0x282>
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	f240 80f9 	bls.w	8000e9e <__udivmoddi4+0x282>
 8000cac:	4463      	add	r3, ip
 8000cae:	3802      	subs	r0, #2
 8000cb0:	1b9b      	subs	r3, r3, r6
 8000cb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	b11d      	cbz	r5, 8000cc2 <__udivmoddi4+0xa6>
 8000cba:	40d3      	lsrs	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d905      	bls.n	8000cd6 <__udivmoddi4+0xba>
 8000cca:	b10d      	cbz	r5, 8000cd0 <__udivmoddi4+0xb4>
 8000ccc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e7f5      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d146      	bne.n	8000d6c <__udivmoddi4+0x150>
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xcc>
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	f0c0 80f0 	bcc.w	8000ec8 <__udivmoddi4+0x2ac>
 8000ce8:	1a86      	subs	r6, r0, r2
 8000cea:	eb64 0303 	sbc.w	r3, r4, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d0e6      	beq.n	8000cc2 <__udivmoddi4+0xa6>
 8000cf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf8:	e7e3      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x204>
 8000d00:	eba1 040c 	sub.w	r4, r1, ip
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa1f f78c 	uxth.w	r7, ip
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	fb07 f006 	mul.w	r0, r7, r6
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x11c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x11a>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	f200 80cd 	bhi.w	8000ed0 <__udivmoddi4+0x2b4>
 8000d36:	4626      	mov	r6, r4
 8000d38:	1a1c      	subs	r4, r3, r0
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d42:	fb08 4410 	mls	r4, r8, r0, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb00 f707 	mul.w	r7, r0, r7
 8000d4e:	429f      	cmp	r7, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x148>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x146>
 8000d5c:	429f      	cmp	r7, r3
 8000d5e:	f200 80b0 	bhi.w	8000ec2 <__udivmoddi4+0x2a6>
 8000d62:	4620      	mov	r0, r4
 8000d64:	1bdb      	subs	r3, r3, r7
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0x9c>
 8000d6c:	f1c1 0620 	rsb	r6, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 f706 	lsr.w	r7, r2, r6
 8000d76:	431f      	orrs	r7, r3
 8000d78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	40f4      	lsrs	r4, r6
 8000d86:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8a:	0c38      	lsrs	r0, r7, #16
 8000d8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d90:	fbb4 fef0 	udiv	lr, r4, r0
 8000d94:	fa1f fc87 	uxth.w	ip, r7
 8000d98:	fb00 441e 	mls	r4, r0, lr, r4
 8000d9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da0:	fb0e f90c 	mul.w	r9, lr, ip
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	d90a      	bls.n	8000dc2 <__udivmoddi4+0x1a6>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000db2:	f080 8084 	bcs.w	8000ebe <__udivmoddi4+0x2a2>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f240 8081 	bls.w	8000ebe <__udivmoddi4+0x2a2>
 8000dbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	eba4 0409 	sub.w	r4, r4, r9
 8000dc6:	fa1f f983 	uxth.w	r9, r3
 8000dca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dce:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1d2>
 8000dde:	193c      	adds	r4, r7, r4
 8000de0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de4:	d267      	bcs.n	8000eb6 <__udivmoddi4+0x29a>
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0x29a>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df2:	fba0 9302 	umull	r9, r3, r0, r2
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	46ce      	mov	lr, r9
 8000dfe:	469c      	mov	ip, r3
 8000e00:	d351      	bcc.n	8000ea6 <__udivmoddi4+0x28a>
 8000e02:	d04e      	beq.n	8000ea2 <__udivmoddi4+0x286>
 8000e04:	b155      	cbz	r5, 8000e1c <__udivmoddi4+0x200>
 8000e06:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e12:	40cb      	lsrs	r3, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e750      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f103 	lsr.w	r1, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e30:	4094      	lsls	r4, r2
 8000e32:	430c      	orrs	r4, r1
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e3c:	fa1f f78c 	uxth.w	r7, ip
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3110 	mls	r1, r8, r0, r3
 8000e48:	0c23      	lsrs	r3, r4, #16
 8000e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4e:	fb00 f107 	mul.w	r1, r0, r7
 8000e52:	4299      	cmp	r1, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x24c>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5e:	d22c      	bcs.n	8000eba <__udivmoddi4+0x29e>
 8000e60:	4299      	cmp	r1, r3
 8000e62:	d92a      	bls.n	8000eba <__udivmoddi4+0x29e>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e70:	fb08 3311 	mls	r3, r8, r1, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb01 f307 	mul.w	r3, r1, r7
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x276>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e88:	d213      	bcs.n	8000eb2 <__udivmoddi4+0x296>
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	d911      	bls.n	8000eb2 <__udivmoddi4+0x296>
 8000e8e:	3902      	subs	r1, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	1ae4      	subs	r4, r4, r3
 8000e94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e98:	e739      	b.n	8000d0e <__udivmoddi4+0xf2>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	e6f0      	b.n	8000c80 <__udivmoddi4+0x64>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e706      	b.n	8000cb0 <__udivmoddi4+0x94>
 8000ea2:	45c8      	cmp	r8, r9
 8000ea4:	d2ae      	bcs.n	8000e04 <__udivmoddi4+0x1e8>
 8000ea6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eaa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eae:	3801      	subs	r0, #1
 8000eb0:	e7a8      	b.n	8000e04 <__udivmoddi4+0x1e8>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	e7ed      	b.n	8000e92 <__udivmoddi4+0x276>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e799      	b.n	8000dee <__udivmoddi4+0x1d2>
 8000eba:	4630      	mov	r0, r6
 8000ebc:	e7d4      	b.n	8000e68 <__udivmoddi4+0x24c>
 8000ebe:	46d6      	mov	lr, sl
 8000ec0:	e77f      	b.n	8000dc2 <__udivmoddi4+0x1a6>
 8000ec2:	4463      	add	r3, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e74d      	b.n	8000d64 <__udivmoddi4+0x148>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	4623      	mov	r3, r4
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e70f      	b.n	8000cf0 <__udivmoddi4+0xd4>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	e730      	b.n	8000d38 <__udivmoddi4+0x11c>
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	@ 0x30
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 ff3e 	bl	8008d76 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000efa:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000efc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f02:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f04:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f10:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f16:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f1c:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f22:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f28:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f2e:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f34:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f42:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f64:	4817      	ldr	r0, [pc, #92]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f66:	f001 fb97 	bl	8002698 <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f70:	f000 faa4 	bl	80014bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000f80:	f002 f9b2 	bl	80032e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f8a:	f000 fa97 	bl	80014bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_ADC1_Init+0xec>)
 8000f90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f92:	2306      	movs	r3, #6
 8000f94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9a:	237f      	movs	r3, #127	@ 0x7f
 8000f9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <MX_ADC1_Init+0xe8>)
 8000fac:	f001 fd36 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fb6:	f000 fa81 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3730      	adds	r7, #48	@ 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000140 	.word	0x20000140
 8000fc8:	21800100 	.word	0x21800100

08000fcc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f007 fecc 	bl	8008d76 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <MX_ADC2_Init+0xc0>)
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8001090 <MX_ADC2_Init+0xc4>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	@ (800108c <MX_ADC2_Init+0xc0>)
 8000fe6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <MX_ADC2_Init+0xc0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	@ (800108c <MX_ADC2_Init+0xc0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <MX_ADC2_Init+0xc0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001006:	2204      	movs	r2, #4
 8001008:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <MX_ADC2_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001018:	2201      	movs	r2, #1
 800101a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_ADC2_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_ADC2_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_ADC2_Init+0xc0>)
 800103a:	2200      	movs	r2, #0
 800103c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001046:	4811      	ldr	r0, [pc, #68]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001048:	f001 fb26 	bl	8002698 <HAL_ADC_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001052:	f000 fa33 	bl	80014bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_ADC2_Init+0xc8>)
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001062:	237f      	movs	r3, #127	@ 0x7f
 8001064:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001066:	2304      	movs	r3, #4
 8001068:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_ADC2_Init+0xc0>)
 8001074:	f001 fcd2 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800107e:	f000 fa1d 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001ac 	.word	0x200001ac
 8001090:	50000100 	.word	0x50000100
 8001094:	19200040 	.word	0x19200040

08001098 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0a4      	sub	sp, #144	@ 0x90
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b4:	2254      	movs	r2, #84	@ 0x54
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f007 fe5c 	bl	8008d76 <memset>
  if(adcHandle->Instance==ADC1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010c6:	d174      	bne.n	80011b2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fb85 	bl	80047e8 <HAL_RCCEx_PeriphCLKConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010e4:	f000 f9ea 	bl	80014bc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010e8:	4b63      	ldr	r3, [pc, #396]	@ (8001278 <HAL_ADC_MspInit+0x1e0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a62      	ldr	r2, [pc, #392]	@ (8001278 <HAL_ADC_MspInit+0x1e0>)
 80010f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010f2:	4b61      	ldr	r3, [pc, #388]	@ (8001278 <HAL_ADC_MspInit+0x1e0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10b      	bne.n	8001112 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010fa:	4b60      	ldr	r3, [pc, #384]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a5f      	ldr	r2, [pc, #380]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001100:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b5a      	ldr	r3, [pc, #360]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a59      	ldr	r2, [pc, #356]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b54      	ldr	r3, [pc, #336]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a53      	ldr	r2, [pc, #332]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b51      	ldr	r3, [pc, #324]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b4e      	ldr	r3, [pc, #312]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a4d      	ldr	r2, [pc, #308]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800115a:	2304      	movs	r3, #4
 800115c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800116e:	4619      	mov	r1, r3
 8001170:	4843      	ldr	r0, [pc, #268]	@ (8001280 <HAL_ADC_MspInit+0x1e8>)
 8001172:	f002 fb61 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001176:	2302      	movs	r3, #2
 8001178:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f002 fb52 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001194:	2303      	movs	r3, #3
 8001196:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011a8:	4619      	mov	r1, r3
 80011aa:	4836      	ldr	r0, [pc, #216]	@ (8001284 <HAL_ADC_MspInit+0x1ec>)
 80011ac:	f002 fb44 	bl	8003838 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011b0:	e05e      	b.n	8001270 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a34      	ldr	r2, [pc, #208]	@ (8001288 <HAL_ADC_MspInit+0x1f0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d159      	bne.n	8001270 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fb0b 	bl	80047e8 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80011d8:	f000 f970 	bl	80014bc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <HAL_ADC_MspInit+0x1e0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a25      	ldr	r2, [pc, #148]	@ (8001278 <HAL_ADC_MspInit+0x1e0>)
 80011e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011e6:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <HAL_ADC_MspInit+0x1e0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10b      	bne.n	8001206 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a22      	ldr	r2, [pc, #136]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 80011f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_ADC_MspInit+0x1e4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001236:	230b      	movs	r3, #11
 8001238:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001246:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <HAL_ADC_MspInit+0x1e8>)
 800124e:	f002 faf3 	bl	8003838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001252:	2301      	movs	r3, #1
 8001254:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126c:	f002 fae4 	bl	8003838 <HAL_GPIO_Init>
}
 8001270:	bf00      	nop
 8001272:	3790      	adds	r7, #144	@ 0x90
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000218 	.word	0x20000218
 800127c:	40021000 	.word	0x40021000
 8001280:	48000800 	.word	0x48000800
 8001284:	48000400 	.word	0x48000400
 8001288:	50000100 	.word	0x50000100

0800128c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a3e      	ldr	r2, [pc, #248]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b3c      	ldr	r3, [pc, #240]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a38      	ldr	r2, [pc, #224]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a2c      	ldr	r2, [pc, #176]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <MX_GPIO_Init+0x114>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <MX_GPIO_Init+0x114>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a26      	ldr	r2, [pc, #152]	@ (80013a0 <MX_GPIO_Init+0x114>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <MX_GPIO_Init+0x114>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2120      	movs	r1, #32
 800131e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001322:	f002 fc0b 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
 800132a:	481e      	ldr	r0, [pc, #120]	@ (80013a4 <MX_GPIO_Init+0x118>)
 800132c:	f002 fc06 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001330:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001336:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <MX_GPIO_Init+0x11c>)
 8001348:	f002 fa76 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800134c:	2320      	movs	r3, #32
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f002 fa67 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800136a:	2304      	movs	r3, #4
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <MX_GPIO_Init+0x118>)
 8001382:	f002 fa59 	bl	8003838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2028      	movs	r0, #40	@ 0x28
 800138c:	f002 f96c 	bl	8003668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001390:	2028      	movs	r0, #40	@ 0x28
 8001392:	f002 f983 	bl	800369c <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000c00 	.word	0x48000c00
 80013a8:	48000800 	.word	0x48000800

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f000 ff61 	bl	8002276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f826 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f7ff ff68 	bl	800128c <MX_GPIO_Init>
  MX_ADC2_Init();
 80013bc:	f7ff fe06 	bl	8000fcc <MX_ADC2_Init>
  MX_ADC1_Init();
 80013c0:	f7ff fd8c 	bl	8000edc <MX_ADC1_Init>
  MX_TIM1_Init();
 80013c4:	f000 fa3e 	bl	8001844 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013c8:	f000 fb0a 	bl	80019e0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80013cc:	f000 fc3e 	bl	8001c4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013d0:	f000 fc88 	bl	8001ce4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80013d4:	2100      	movs	r1, #0
 80013d6:	480a      	ldr	r0, [pc, #40]	@ (8001400 <main+0x54>)
 80013d8:	f003 fd86 	bl	8004ee8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80013dc:	2100      	movs	r1, #0
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <main+0x54>)
 80013e0:	f005 f81c 	bl	800641c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80013e4:	2104      	movs	r1, #4
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <main+0x54>)
 80013e8:	f003 fd7e 	bl	8004ee8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80013ec:	2104      	movs	r1, #4
 80013ee:	4804      	ldr	r0, [pc, #16]	@ (8001400 <main+0x54>)
 80013f0:	f005 f814 	bl	800641c <HAL_TIMEx_PWMN_Start>

	Shell_Init();
 80013f4:	f000 fd6a 	bl	8001ecc <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80013f8:	f000 fda8 	bl	8001f4c <Shell_Loop>
 80013fc:	e7fc      	b.n	80013f8 <main+0x4c>
 80013fe:	bf00      	nop
 8001400:	2000026c 	.word	0x2000026c

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	@ 0x50
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	2238      	movs	r2, #56	@ 0x38
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f007 fcaf 	bl	8008d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001426:	2000      	movs	r0, #0
 8001428:	f002 fbc4 	bl	8003bb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001434:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	2303      	movs	r3, #3
 800143c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800143e:	2306      	movs	r3, #6
 8001440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001442:	2355      	movs	r3, #85	@ 0x55
 8001444:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144e:	2302      	movs	r3, #2
 8001450:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fc60 	bl	8003d1c <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001462:	f000 f82b 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2303      	movs	r3, #3
 800146c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2104      	movs	r1, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f002 ff64 	bl	800434c <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800148a:	f000 f817 	bl	80014bc <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	@ 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014aa:	f000 fefd 	bl	80022a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40001000 	.word	0x40001000

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_MspInit+0x44>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_MspInit+0x44>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_MspInit+0x44>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_MspInit+0x44>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	4a08      	ldr	r2, [pc, #32]	@ (800150c <HAL_MspInit+0x44>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_MspInit+0x44>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014fe:	f002 fbfd 	bl	8003cfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	@ 0x30
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001520:	4b2c      	ldr	r3, [pc, #176]	@ (80015d4 <HAL_InitTick+0xc4>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a2b      	ldr	r2, [pc, #172]	@ (80015d4 <HAL_InitTick+0xc4>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
 800152c:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <HAL_InitTick+0xc4>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f8d8 	bl	80046f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001548:	f003 f8aa 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 800154c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <HAL_InitTick+0xc8>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3b01      	subs	r3, #1
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_InitTick+0xcc>)
 800155e:	4a20      	ldr	r2, [pc, #128]	@ (80015e0 <HAL_InitTick+0xd0>)
 8001560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <HAL_InitTick+0xcc>)
 8001564:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <HAL_InitTick+0xcc>)
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_InitTick+0xcc>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_InitTick+0xcc>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800157c:	4817      	ldr	r0, [pc, #92]	@ (80015dc <HAL_InitTick+0xcc>)
 800157e:	f003 fb81 	bl	8004c84 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001590:	4812      	ldr	r0, [pc, #72]	@ (80015dc <HAL_InitTick+0xcc>)
 8001592:	f003 fbcf 	bl	8004d34 <HAL_TIM_Base_Start_IT>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800159c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d111      	bne.n	80015c8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a4:	2036      	movs	r0, #54	@ 0x36
 80015a6:	f002 f879 	bl	800369c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d808      	bhi.n	80015c2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	2036      	movs	r0, #54	@ 0x36
 80015b6:	f002 f857 	bl	8003668 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_InitTick+0xd4>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e002      	b.n	80015c8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3730      	adds	r7, #48	@ 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	2000021c 	.word	0x2000021c
 80015e0:	40001000 	.word	0x40001000
 80015e4:	200000c0 	.word	0x200000c0

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <NMI_Handler+0x4>

080015f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <MemManage_Handler+0x4>

08001600 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <UsageFault_Handler+0x4>

08001610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <USART2_IRQHandler+0x10>)
 800164e:	f005 fa97 	bl	8006b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000304 	.word	0x20000304

0800165c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <USART3_IRQHandler+0x10>)
 8001662:	f005 fa8d 	bl	8006b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000394 	.word	0x20000394

08001670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001674:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001678:	f002 fa78 	bl	8003b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <TIM6_DAC_IRQHandler+0x10>)
 8001686:	f003 fd41 	bl	800510c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000021c 	.word	0x2000021c

08001694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_kill>:

int _kill(int pid, int sig)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ae:	f007 fc0d 	bl	8008ecc <__errno>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2216      	movs	r2, #22
 80016b6:	601a      	str	r2, [r3, #0]
  return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_exit>:

void _exit (int status)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ffe7 	bl	80016a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d6:	bf00      	nop
 80016d8:	e7fd      	b.n	80016d6 <_exit+0x12>

080016da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e00a      	b.n	8001702 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ec:	f3af 8000 	nop.w
 80016f0:	4601      	mov	r1, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	60ba      	str	r2, [r7, #8]
 80016f8:	b2ca      	uxtb	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	dbf0      	blt.n	80016ec <_read+0x12>
  }

  return len;
 800170a:	687b      	ldr	r3, [r7, #4]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	e009      	b.n	800173a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	60ba      	str	r2, [r7, #8]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	dbf1      	blt.n	8001726 <_write+0x12>
  }
  return len;
 8001742:	687b      	ldr	r3, [r7, #4]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_close>:

int _close(int file)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001774:	605a      	str	r2, [r3, #4]
  return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_isatty>:

int _isatty(int file)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800178c:	2301      	movs	r3, #1
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f007 fb72 	bl	8008ecc <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20020000 	.word	0x20020000
 8001814:	00000400 	.word	0x00000400
 8001818:	20000268 	.word	0x20000268
 800181c:	20000630 	.word	0x20000630

08001820 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <SystemInit+0x20>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <SystemInit+0x20>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b09c      	sub	sp, #112	@ 0x70
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2234      	movs	r2, #52	@ 0x34
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f007 fa79 	bl	8008d76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001884:	4b54      	ldr	r3, [pc, #336]	@ (80019d8 <MX_TIM1_Init+0x194>)
 8001886:	4a55      	ldr	r2, [pc, #340]	@ (80019dc <MX_TIM1_Init+0x198>)
 8001888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17-1;
 800188a:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <MX_TIM1_Init+0x194>)
 800188c:	2210      	movs	r2, #16
 800188e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001890:	4b51      	ldr	r3, [pc, #324]	@ (80019d8 <MX_TIM1_Init+0x194>)
 8001892:	2220      	movs	r2, #32
 8001894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001896:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <MX_TIM1_Init+0x194>)
 8001898:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800189c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b4e      	ldr	r3, [pc, #312]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a4:	4b4c      	ldr	r3, [pc, #304]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018aa:	4b4b      	ldr	r3, [pc, #300]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b0:	4849      	ldr	r0, [pc, #292]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80018b2:	f003 f9e7 	bl	8004c84 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018bc:	f7ff fdfe 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018ca:	4619      	mov	r1, r3
 80018cc:	4842      	ldr	r0, [pc, #264]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80018ce:	f003 feb1 	bl	8005634 <HAL_TIM_ConfigClockSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018d8:	f7ff fdf0 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018dc:	483e      	ldr	r0, [pc, #248]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80018de:	f003 faa1 	bl	8004e24 <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018e8:	f7ff fde8 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018fc:	4619      	mov	r1, r3
 80018fe:	4836      	ldr	r0, [pc, #216]	@ (80019d8 <MX_TIM1_Init+0x194>)
 8001900:	f004 fe4e 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800190a:	f7ff fdd7 	bl	80014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190e:	2360      	movs	r3, #96	@ 0x60
 8001910:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 100;
 8001912:	2364      	movs	r3, #100	@ 0x64
 8001914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	2300      	movs	r3, #0
 8001918:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	4829      	ldr	r0, [pc, #164]	@ (80019d8 <MX_TIM1_Init+0x194>)
 8001934:	f003 fd6a 	bl	800540c <HAL_TIM_PWM_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800193e:	f7ff fdbd 	bl	80014bc <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8001942:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001948:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800194c:	2204      	movs	r2, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4821      	ldr	r0, [pc, #132]	@ (80019d8 <MX_TIM1_Init+0x194>)
 8001952:	f003 fd5b 	bl	800540c <HAL_TIM_PWM_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 800195c:	f7ff fdae 	bl	80014bc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001964:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001968:	2208      	movs	r2, #8
 800196a:	4619      	mov	r1, r3
 800196c:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <MX_TIM1_Init+0x194>)
 800196e:	f003 fd4d 	bl	800540c <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001978:	f7ff fda0 	bl	80014bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001990:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001994:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80019ba:	f004 fe87 	bl	80066cc <HAL_TIMEx_ConfigBreakDeadTime>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80019c4:	f7ff fd7a 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019c8:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <MX_TIM1_Init+0x194>)
 80019ca:	f000 f8d7 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 80019ce:	bf00      	nop
 80019d0:	3770      	adds	r7, #112	@ 0x70
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000026c 	.word	0x2000026c
 80019dc:	40012c00 	.word	0x40012c00

080019e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a00:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <MX_TIM3_Init+0x94>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a3c:	f004 fc3f 	bl	80062be <HAL_TIMEx_HallSensor_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001a46:	f7ff fd39 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001a4a:	2350      	movs	r3, #80	@ 0x50
 8001a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <MX_TIM3_Init+0x90>)
 8001a58:	f004 fda2 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001a62:	f7ff fd2b 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200002b8 	.word	0x200002b8
 8001a74:	40000400 	.word	0x40000400

08001a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x38>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10b      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x3c>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x3c>)
 8001a90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <HAL_TIM_Base_MspInit+0x3c>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a26      	ldr	r2, [pc, #152]	@ (8001b70 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d145      	bne.n	8001b66 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	4a25      	ldr	r2, [pc, #148]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae6:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001b22:	2350      	movs	r3, #80	@ 0x50
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b32:	2302      	movs	r3, #2
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b40:	f001 fe7a 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b56:	2302      	movs	r3, #2
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001b62:	f001 fe69 	bl	8003838 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000800 	.word	0x48000800

08001b7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_TIM_MspPostInit+0xc4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d14b      	bne.n	8001c36 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <HAL_TIM_MspPostInit+0xc8>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <HAL_TIM_MspPostInit+0xc8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <HAL_TIM_MspPostInit+0xc8>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_TIM_MspPostInit+0xc8>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	4a22      	ldr	r2, [pc, #136]	@ (8001c44 <HAL_TIM_MspPostInit+0xc8>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc2:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <HAL_TIM_MspPostInit+0xc8>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001bce:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001be0:	2306      	movs	r3, #6
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4817      	ldr	r0, [pc, #92]	@ (8001c48 <HAL_TIM_MspPostInit+0xcc>)
 8001bec:	f001 fe24 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001c02:	2304      	movs	r3, #4
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480e      	ldr	r0, [pc, #56]	@ (8001c48 <HAL_TIM_MspPostInit+0xcc>)
 8001c0e:	f001 fe13 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001c12:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c24:	2306      	movs	r3, #6
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c32:	f001 fe01 	bl	8003838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	@ 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000400 	.word	0x48000400

08001c4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c52:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <MX_USART2_UART_Init+0x94>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c94:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001c96:	f004 fe36 	bl	8006906 <HAL_UART_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ca0:	f7ff fc0c 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001ca8:	f006 fdd9 	bl	800885e <HAL_UARTEx_SetTxFifoThreshold>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f7ff fc03 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001cba:	f006 fe0e 	bl	80088da <HAL_UARTEx_SetRxFifoThreshold>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f7ff fbfa 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_USART2_UART_Init+0x90>)
 8001cca:	f006 fd8f 	bl	80087ec <HAL_UARTEx_DisableFifoMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd4:	f7ff fbf2 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000304 	.word	0x20000304
 8001ce0:	40004400 	.word	0x40004400

08001ce4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ce8:	4b22      	ldr	r3, [pc, #136]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001cea:	4a23      	ldr	r2, [pc, #140]	@ (8001d78 <MX_USART3_UART_Init+0x94>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cee:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b1c      	ldr	r3, [pc, #112]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b17      	ldr	r3, [pc, #92]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d26:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d2c:	4811      	ldr	r0, [pc, #68]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d2e:	f004 fdea 	bl	8006906 <HAL_UART_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d38:	f7ff fbc0 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d40:	f006 fd8d 	bl	800885e <HAL_UARTEx_SetTxFifoThreshold>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d4a:	f7ff fbb7 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4808      	ldr	r0, [pc, #32]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d52:	f006 fdc2 	bl	80088da <HAL_UARTEx_SetRxFifoThreshold>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d5c:	f7ff fbae 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d60:	4804      	ldr	r0, [pc, #16]	@ (8001d74 <MX_USART3_UART_Init+0x90>)
 8001d62:	f006 fd43 	bl	80087ec <HAL_UARTEx_DisableFifoMode>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d6c:	f7ff fba6 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000394 	.word	0x20000394
 8001d78:	40004800 	.word	0x40004800

08001d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0a0      	sub	sp, #128	@ 0x80
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	2254      	movs	r2, #84	@ 0x54
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f006 ffea 	bl	8008d76 <memset>
  if(uartHandle->Instance==USART2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a45      	ldr	r2, [pc, #276]	@ (8001ebc <HAL_UART_MspInit+0x140>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d13f      	bne.n	8001e2c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fd15 	bl	80047e8 <HAL_RCCEx_PeriphCLKConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc4:	f7ff fb7a 	bl	80014bc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b37      	ldr	r3, [pc, #220]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de4:	4a36      	ldr	r2, [pc, #216]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dec:	4b34      	ldr	r3, [pc, #208]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001df8:	230c      	movs	r3, #12
 8001dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e16:	f001 fd0f 	bl	8003838 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2026      	movs	r0, #38	@ 0x26
 8001e20:	f001 fc22 	bl	8003668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e24:	2026      	movs	r0, #38	@ 0x26
 8001e26:	f001 fc39 	bl	800369c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e2a:	e043      	b.n	8001eb4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a24      	ldr	r2, [pc, #144]	@ (8001ec4 <HAL_UART_MspInit+0x148>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d13e      	bne.n	8001eb4 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e36:	2304      	movs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3e:	f107 0318 	add.w	r3, r7, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fcd0 	bl	80047e8 <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001e4e:	f7ff fb35 	bl	80014bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_UART_MspInit+0x144>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e94:	2307      	movs	r3, #7
 8001e96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480a      	ldr	r0, [pc, #40]	@ (8001ec8 <HAL_UART_MspInit+0x14c>)
 8001ea0:	f001 fcca 	bl	8003838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2027      	movs	r0, #39	@ 0x27
 8001eaa:	f001 fbdd 	bl	8003668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eae:	2027      	movs	r0, #39	@ 0x27
 8001eb0:	f001 fbf4 	bl	800369c <HAL_NVIC_EnableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3780      	adds	r7, #128	@ 0x80
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40004400 	.word	0x40004400
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40004800 	.word	0x40004800
 8001ec8:	48000800 	.word	0x48000800

08001ecc <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0

	memset(argv, (int)NULL, MAX_ARGS*sizeof(char*));
 8001ed0:	2224      	movs	r2, #36	@ 0x24
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4816      	ldr	r0, [pc, #88]	@ (8001f30 <Shell_Init+0x64>)
 8001ed6:	f006 ff4e 	bl	8008d76 <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001eda:	2240      	movs	r2, #64	@ 0x40
 8001edc:	2100      	movs	r1, #0
 8001ede:	4815      	ldr	r0, [pc, #84]	@ (8001f34 <Shell_Init+0x68>)
 8001ee0:	f006 ff49 	bl	8008d76 <memset>
	memset(uartRxBuffer, (int)NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <Shell_Init+0x6c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, (int)NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	2100      	movs	r1, #0
 8001eee:	4813      	ldr	r0, [pc, #76]	@ (8001f3c <Shell_Init+0x70>)
 8001ef0:	f006 ff41 	bl	8008d76 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4910      	ldr	r1, [pc, #64]	@ (8001f38 <Shell_Init+0x6c>)
 8001ef8:	4811      	ldr	r0, [pc, #68]	@ (8001f40 <Shell_Init+0x74>)
 8001efa:	f004 fdeb 	bl	8006ad4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001efe:	4811      	ldr	r0, [pc, #68]	@ (8001f44 <Shell_Init+0x78>)
 8001f00:	f7fe f998 	bl	8000234 <strlen>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	490d      	ldr	r1, [pc, #52]	@ (8001f44 <Shell_Init+0x78>)
 8001f0e:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <Shell_Init+0x74>)
 8001f10:	f004 fd49 	bl	80069a6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <Shell_Init+0x7c>)
 8001f16:	f7fe f98d 	bl	8000234 <strlen>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	4909      	ldr	r1, [pc, #36]	@ (8001f48 <Shell_Init+0x7c>)
 8001f24:	4806      	ldr	r0, [pc, #24]	@ (8001f40 <Shell_Init+0x74>)
 8001f26:	f004 fd3e 	bl	80069a6 <HAL_UART_Transmit>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200004b0 	.word	0x200004b0
 8001f34:	2000046c 	.word	0x2000046c
 8001f38:	20000428 	.word	0x20000428
 8001f3c:	2000042c 	.word	0x2000042c
 8001f40:	20000304 	.word	0x20000304
 8001f44:	20000020 	.word	0x20000020
 8001f48:	20000004 	.word	0x20000004

08001f4c <Shell_Loop>:

void Shell_Loop(void){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001f52:	4b58      	ldr	r3, [pc, #352]	@ (80020b4 <Shell_Loop+0x168>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d05b      	beq.n	8002012 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001f5a:	4b57      	ldr	r3, [pc, #348]	@ (80020b8 <Shell_Loop+0x16c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d034      	beq.n	8001fcc <Shell_Loop+0x80>
 8001f62:	2b0d      	cmp	r3, #13
 8001f64:	d142      	bne.n	8001fec <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	4953      	ldr	r1, [pc, #332]	@ (80020bc <Shell_Loop+0x170>)
 8001f6e:	4854      	ldr	r0, [pc, #336]	@ (80020c0 <Shell_Loop+0x174>)
 8001f70:	f004 fd19 	bl	80069a6 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001f74:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <Shell_Loop+0x178>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a53      	ldr	r2, [pc, #332]	@ (80020c8 <Shell_Loop+0x17c>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <Shell_Loop+0x180>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001f84:	4952      	ldr	r1, [pc, #328]	@ (80020d0 <Shell_Loop+0x184>)
 8001f86:	4850      	ldr	r0, [pc, #320]	@ (80020c8 <Shell_Loop+0x17c>)
 8001f88:	f006 fefe 	bl	8008d88 <strtok>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a51      	ldr	r2, [pc, #324]	@ (80020d4 <Shell_Loop+0x188>)
 8001f90:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001f92:	e010      	b.n	8001fb6 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001f94:	4b4d      	ldr	r3, [pc, #308]	@ (80020cc <Shell_Loop+0x180>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	494c      	ldr	r1, [pc, #304]	@ (80020cc <Shell_Loop+0x180>)
 8001f9c:	600a      	str	r2, [r1, #0]
 8001f9e:	4a4d      	ldr	r2, [pc, #308]	@ (80020d4 <Shell_Loop+0x188>)
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	494d      	ldr	r1, [pc, #308]	@ (80020d8 <Shell_Loop+0x18c>)
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001fa8:	4949      	ldr	r1, [pc, #292]	@ (80020d0 <Shell_Loop+0x184>)
 8001faa:	2000      	movs	r0, #0
 8001fac:	f006 feec 	bl	8008d88 <strtok>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4a48      	ldr	r2, [pc, #288]	@ (80020d4 <Shell_Loop+0x188>)
 8001fb4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001fb6:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <Shell_Loop+0x188>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ea      	bne.n	8001f94 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001fbe:	4b41      	ldr	r3, [pc, #260]	@ (80020c4 <Shell_Loop+0x178>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001fc4:	4b45      	ldr	r3, [pc, #276]	@ (80020dc <Shell_Loop+0x190>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
			break;
 8001fca:	e01f      	b.n	800200c <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80020c4 <Shell_Loop+0x178>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	493c      	ldr	r1, [pc, #240]	@ (80020c4 <Shell_Loop+0x178>)
 8001fd4:	600a      	str	r2, [r1, #0]
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	@ (80020c8 <Shell_Loop+0x17c>)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	493f      	ldr	r1, [pc, #252]	@ (80020e0 <Shell_Loop+0x194>)
 8001fe4:	4836      	ldr	r0, [pc, #216]	@ (80020c0 <Shell_Loop+0x174>)
 8001fe6:	f004 fcde 	bl	80069a6 <HAL_UART_Transmit>
			break;
 8001fea:	e00f      	b.n	800200c <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001fec:	4b35      	ldr	r3, [pc, #212]	@ (80020c4 <Shell_Loop+0x178>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	4934      	ldr	r1, [pc, #208]	@ (80020c4 <Shell_Loop+0x178>)
 8001ff4:	600a      	str	r2, [r1, #0]
 8001ff6:	4a30      	ldr	r2, [pc, #192]	@ (80020b8 <Shell_Loop+0x16c>)
 8001ff8:	7811      	ldrb	r1, [r2, #0]
 8001ffa:	4a33      	ldr	r2, [pc, #204]	@ (80020c8 <Shell_Loop+0x17c>)
 8001ffc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	2201      	movs	r2, #1
 8002004:	492c      	ldr	r1, [pc, #176]	@ (80020b8 <Shell_Loop+0x16c>)
 8002006:	482e      	ldr	r0, [pc, #184]	@ (80020c0 <Shell_Loop+0x174>)
 8002008:	f004 fccd 	bl	80069a6 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800200c:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <Shell_Loop+0x168>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002012:	4b32      	ldr	r3, [pc, #200]	@ (80020dc <Shell_Loop+0x190>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d048      	beq.n	80020ac <Shell_Loop+0x160>
		if(strcmp(argv[1],"baa")==0){
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <Shell_Loop+0x18c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4931      	ldr	r1, [pc, #196]	@ (80020e4 <Shell_Loop+0x198>)
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f8fd 	bl	8000220 <strcmp>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	221a      	movs	r2, #26
 8002032:	492d      	ldr	r1, [pc, #180]	@ (80020e8 <Shell_Loop+0x19c>)
 8002034:	4822      	ldr	r0, [pc, #136]	@ (80020c0 <Shell_Loop+0x174>)
 8002036:	f004 fcb6 	bl	80069a6 <HAL_UART_Transmit>
 800203a:	e02d      	b.n	8002098 <Shell_Loop+0x14c>
		}
		else if(strcmp(argv[0],"help")==0){
 800203c:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <Shell_Loop+0x18c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	492a      	ldr	r1, [pc, #168]	@ (80020ec <Shell_Loop+0x1a0>)
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe f8ec 	bl	8000220 <strcmp>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800204e:	4a28      	ldr	r2, [pc, #160]	@ (80020f0 <Shell_Loop+0x1a4>)
 8002050:	2140      	movs	r1, #64	@ 0x40
 8002052:	4828      	ldr	r0, [pc, #160]	@ (80020f4 <Shell_Loop+0x1a8>)
 8002054:	f006 fe18 	bl	8008c88 <sniprintf>
 8002058:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	b29a      	uxth	r2, r3
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	4924      	ldr	r1, [pc, #144]	@ (80020f4 <Shell_Loop+0x1a8>)
 8002064:	4816      	ldr	r0, [pc, #88]	@ (80020c0 <Shell_Loop+0x174>)
 8002066:	f004 fc9e 	bl	80069a6 <HAL_UART_Transmit>
 800206a:	e015      	b.n	8002098 <Shell_Loop+0x14c>
		}
		else if (strcmp(argv[0],"speed")==0){
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <Shell_Loop+0x18c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4921      	ldr	r1, [pc, #132]	@ (80020f8 <Shell_Loop+0x1ac>)
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f8d4 	bl	8000220 <strcmp>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <Shell_Loop+0x13e>
			motor_speed(argv[1]);
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <Shell_Loop+0x18c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f854 	bl	8002130 <motor_speed>
 8002088:	e006      	b.n	8002098 <Shell_Loop+0x14c>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	2214      	movs	r2, #20
 8002090:	491a      	ldr	r1, [pc, #104]	@ (80020fc <Shell_Loop+0x1b0>)
 8002092:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <Shell_Loop+0x174>)
 8002094:	f004 fc87 	bl	80069a6 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	221c      	movs	r2, #28
 800209e:	4918      	ldr	r1, [pc, #96]	@ (8002100 <Shell_Loop+0x1b4>)
 80020a0:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <Shell_Loop+0x174>)
 80020a2:	f004 fc80 	bl	80069a6 <HAL_UART_Transmit>
		newCmdReady = 0;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <Shell_Loop+0x190>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
	}
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000424 	.word	0x20000424
 80020b8:	20000428 	.word	0x20000428
 80020bc:	20000088 	.word	0x20000088
 80020c0:	20000304 	.word	0x20000304
 80020c4:	200004ac 	.word	0x200004ac
 80020c8:	2000046c 	.word	0x2000046c
 80020cc:	200004d4 	.word	0x200004d4
 80020d0:	08009ee8 	.word	0x08009ee8
 80020d4:	200004d8 	.word	0x200004d8
 80020d8:	200004b0 	.word	0x200004b0
 80020dc:	200004dc 	.word	0x200004dc
 80020e0:	2000008c 	.word	0x2000008c
 80020e4:	08009eec 	.word	0x08009eec
 80020e8:	200000a4 	.word	0x200000a4
 80020ec:	08009ef0 	.word	0x08009ef0
 80020f0:	08009ef8 	.word	0x08009ef8
 80020f4:	2000042c 	.word	0x2000042c
 80020f8:	08009f20 	.word	0x08009f20
 80020fc:	20000090 	.word	0x20000090
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_UART_RxCpltCallback+0x20>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002112:	2201      	movs	r2, #1
 8002114:	4904      	ldr	r1, [pc, #16]	@ (8002128 <HAL_UART_RxCpltCallback+0x24>)
 8002116:	4805      	ldr	r0, [pc, #20]	@ (800212c <HAL_UART_RxCpltCallback+0x28>)
 8002118:	f004 fcdc 	bl	8006ad4 <HAL_UART_Receive_IT>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000424 	.word	0x20000424
 8002128:	20000428 	.word	0x20000428
 800212c:	20000304 	.word	0x20000304

08002130 <motor_speed>:

void motor_speed(char* cmd){
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	char speed[3]; //buffer pour récupérer la valeur pour la vitesse. On choisit de prendre 3 digits correspondant au rapport cyclique
	speed[0] = cmd[8];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7a1b      	ldrb	r3, [r3, #8]
 800213c:	733b      	strb	r3, [r7, #12]
	speed[1] = cmd[9];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7a5b      	ldrb	r3, [r3, #9]
 8002142:	737b      	strb	r3, [r7, #13]
	speed[2] = cmd[10];
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7a9b      	ldrb	r3, [r3, #10]
 8002148:	73bb      	strb	r3, [r7, #14]
	double alpha = atoi(speed);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f006 fc50 	bl	80089f4 <atoi>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa1c 	bl	8000594 <__aeabi_i2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (alpha > 100){ // on teste si notre valeur désirée est plus grande que la vitessse maximale
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <motor_speed+0xe4>)
 800216a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800216e:	f7fe fd0b 	bl	8000b88 <__aeabi_dcmpgt>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <motor_speed+0x52>
		alpha = 100;
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <motor_speed+0xe4>)
 800217e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	if (alpha < 0){ // on teste si notre valeur désirée est plus grande en valeur absolue que la vitessse maximale
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218e:	f7fe fcdd 	bl	8000b4c <__aeabi_dcmplt>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <motor_speed+0x74>
		alpha = 0;
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	alpha = alpha/100;
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <motor_speed+0xe4>)
 80021aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ae:	f7fe fb85 	bl	80008bc <__aeabi_ddiv>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//HAL_UART_Transmit(&huart2, speed, sizeof(speed), HAL_MAX_DELAY); //ligne de code pour débuguer

	//on modifie les registres CCR1 et CCR2 pour mettre à jour le rapport cyclique:
	TIM1->CCR1 = (int)(alpha*500);
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <motor_speed+0xe8>)
 80021c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021c4:	f7fe fa50 	bl	8000668 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fce4 	bl	8000b9c <__aeabi_d2iz>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <motor_speed+0xec>)
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = (int)((1-alpha)*500);
 80021da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	490f      	ldr	r1, [pc, #60]	@ (8002220 <motor_speed+0xf0>)
 80021e4:	f7fe f888 	bl	80002f8 <__aeabi_dsub>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <motor_speed+0xe8>)
 80021f6:	f7fe fa37 	bl	8000668 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fccb 	bl	8000b9c <__aeabi_d2iz>
 8002206:	4602      	mov	r2, r0
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <motor_speed+0xec>)
 800220a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800220c:	bf00      	nop
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40590000 	.word	0x40590000
 8002218:	407f4000 	.word	0x407f4000
 800221c:	40012c00 	.word	0x40012c00
 8002220:	3ff00000 	.word	0x3ff00000

08002224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002224:	480d      	ldr	r0, [pc, #52]	@ (800225c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002226:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480d      	ldr	r0, [pc, #52]	@ (8002260 <LoopForever+0x6>)
  ldr r1, =_edata
 800222a:	490e      	ldr	r1, [pc, #56]	@ (8002264 <LoopForever+0xa>)
  ldr r2, =_sidata
 800222c:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <LoopForever+0xe>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002240:	4c0b      	ldr	r4, [pc, #44]	@ (8002270 <LoopForever+0x16>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800224e:	f7ff fae7 	bl	8001820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f006 fe41 	bl	8008ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002256:	f7ff f8a9 	bl	80013ac <main>

0800225a <LoopForever>:

LoopForever:
    b LoopForever
 800225a:	e7fe      	b.n	800225a <LoopForever>
  ldr   r0, =_estack
 800225c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8002268:	0800a15c 	.word	0x0800a15c
  ldr r2, =_sbss
 800226c:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8002270:	20000630 	.word	0x20000630

08002274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_2_IRQHandler>

08002276 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f001 f9e6 	bl	8003652 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002286:	200f      	movs	r0, #15
 8002288:	f7ff f942 	bl	8001510 <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	e001      	b.n	800229c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002298:	f7ff f916 	bl	80014c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229c:	79fb      	ldrb	r3, [r7, #7]

}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_IncTick+0x1c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_IncTick+0x20>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a03      	ldr	r2, [pc, #12]	@ (80022c4 <HAL_IncTick+0x1c>)
 80022b8:	6013      	str	r3, [r2, #0]
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	200004e0 	.word	0x200004e0
 80022c8:	200000c4 	.word	0x200000c4

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200004e0 	.word	0x200004e0

080022e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	609a      	str	r2, [r3, #8]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3360      	adds	r3, #96	@ 0x60
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <LL_ADC_SetOffset+0x44>)
 800236e:	4013      	ands	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	4313      	orrs	r3, r2
 800237c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	03fff000 	.word	0x03fff000

08002394 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3360      	adds	r3, #96	@ 0x60
 80023a2:	461a      	mov	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3360      	adds	r3, #96	@ 0x60
 80023d0:	461a      	mov	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b087      	sub	sp, #28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3360      	adds	r3, #96	@ 0x60
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	431a      	orrs	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002420:	bf00      	nop
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3360      	adds	r3, #96	@ 0x60
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	615a      	str	r2, [r3, #20]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3330      	adds	r3, #48	@ 0x30
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	4413      	add	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	211f      	movs	r1, #31
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	f003 011f 	and.w	r1, r3, #31
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	431a      	orrs	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3314      	adds	r3, #20
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	0e5b      	lsrs	r3, r3, #25
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	0d1b      	lsrs	r3, r3, #20
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2107      	movs	r1, #7
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	401a      	ands	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	0d1b      	lsrs	r3, r3, #20
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	431a      	orrs	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0f      	ldr	r2, [pc, #60]	@ (8002584 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10a      	bne.n	8002562 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002560:	e00a      	b.n	8002578 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	407f0000 	.word	0x407f0000

08002588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6093      	str	r3, [r2, #8]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <LL_ADC_IsEnabled+0x18>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_ADC_IsEnabled+0x1a>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d101      	bne.n	8002662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b08      	cmp	r3, #8
 8002682:	d101      	bne.n	8002688 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b089      	sub	sp, #36	@ 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1af      	b.n	8002a12 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fe fce9 	bl	8001098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff67 	bl	80025ac <LL_ADC_IsDeepPowerDownEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff4d 	bl	8002588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff82 	bl	80025fc <LL_ADC_IsInternalRegulatorEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff66 	bl	80025d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002708:	4b9f      	ldr	r3, [pc, #636]	@ (8002988 <HAL_ADC_Init+0x2f0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	099b      	lsrs	r3, r3, #6
 800270e:	4a9f      	ldr	r2, [pc, #636]	@ (800298c <HAL_ADC_Init+0x2f4>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800271c:	e002      	b.n	8002724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3b01      	subs	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f9      	bne.n	800271e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff64 	bl	80025fc <LL_ADC_IsInternalRegulatorEnabled>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	f043 0210 	orr.w	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff75 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 8002760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 8148 	bne.w	8002a00 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 8144 	bne.w	8002a00 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002780:	f043 0202 	orr.w	r2, r3, #2
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff49 	bl	8002624 <LL_ADC_IsEnabled>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d141      	bne.n	800281c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_Init+0x114>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7a      	ldr	r2, [pc, #488]	@ (8002990 <HAL_ADC_Init+0x2f8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10f      	bne.n	80027cc <HAL_ADC_Init+0x134>
 80027ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80027b0:	f7ff ff38 	bl	8002624 <LL_ADC_IsEnabled>
 80027b4:	4604      	mov	r4, r0
 80027b6:	4876      	ldr	r0, [pc, #472]	@ (8002990 <HAL_ADC_Init+0x2f8>)
 80027b8:	f7ff ff34 	bl	8002624 <LL_ADC_IsEnabled>
 80027bc:	4603      	mov	r3, r0
 80027be:	4323      	orrs	r3, r4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e012      	b.n	80027f2 <HAL_ADC_Init+0x15a>
 80027cc:	4871      	ldr	r0, [pc, #452]	@ (8002994 <HAL_ADC_Init+0x2fc>)
 80027ce:	f7ff ff29 	bl	8002624 <LL_ADC_IsEnabled>
 80027d2:	4604      	mov	r4, r0
 80027d4:	4870      	ldr	r0, [pc, #448]	@ (8002998 <HAL_ADC_Init+0x300>)
 80027d6:	f7ff ff25 	bl	8002624 <LL_ADC_IsEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	431c      	orrs	r4, r3
 80027de:	486f      	ldr	r0, [pc, #444]	@ (800299c <HAL_ADC_Init+0x304>)
 80027e0:	f7ff ff20 	bl	8002624 <LL_ADC_IsEnabled>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4323      	orrs	r3, r4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d012      	beq.n	800281c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027fe:	d004      	beq.n	800280a <HAL_ADC_Init+0x172>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a62      	ldr	r2, [pc, #392]	@ (8002990 <HAL_ADC_Init+0x2f8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x176>
 800280a:	4a65      	ldr	r2, [pc, #404]	@ (80029a0 <HAL_ADC_Init+0x308>)
 800280c:	e000      	b.n	8002810 <HAL_ADC_Init+0x178>
 800280e:	4a65      	ldr	r2, [pc, #404]	@ (80029a4 <HAL_ADC_Init+0x30c>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7ff fd64 	bl	80022e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7f5b      	ldrb	r3, [r3, #29]
 8002820:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002826:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800282c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002832:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800283a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002846:	2b01      	cmp	r3, #1
 8002848:	d106      	bne.n	8002858 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	045b      	lsls	r3, r3, #17
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <HAL_ADC_Init+0x310>)
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	430b      	orrs	r3, r1
 8002886:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fed1 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 80028a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fede 	bl	8002670 <LL_ADC_INJ_IsConversionOngoing>
 80028b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d17f      	bne.n	80029bc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d17c      	bne.n	80029bc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028de:	f023 0302 	bic.w	r3, r3, #2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002902:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800290c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002910:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6911      	ldr	r1, [r2, #16]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002922:	e013      	b.n	800294c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002932:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002948:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12a      	bne.n	80029ac <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800296c:	4311      	orrs	r1, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002978:	430a      	orrs	r2, r1
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	e019      	b.n	80029bc <HAL_ADC_Init+0x324>
 8002988:	20000000 	.word	0x20000000
 800298c:	053e2d63 	.word	0x053e2d63
 8002990:	50000100 	.word	0x50000100
 8002994:	50000400 	.word	0x50000400
 8002998:	50000500 	.word	0x50000500
 800299c:	50000600 	.word	0x50000600
 80029a0:	50000300 	.word	0x50000300
 80029a4:	50000700 	.word	0x50000700
 80029a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10c      	bne.n	80029de <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f023 010f 	bic.w	r1, r3, #15
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
 80029dc:	e007      	b.n	80029ee <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 020f 	bic.w	r2, r2, #15
 80029ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029fe:	e007      	b.n	8002a10 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	f043 0210 	orr.w	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}
 8002a1a:	bf00      	nop

08002a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0b6      	sub	sp, #216	@ 0xd8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d102      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x24>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	f000 bc13 	b.w	8003266 <HAL_ADC_ConfigChannel+0x84a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fdfc 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 83f3 	bne.w	8003240 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff fd0e 	bl	8002488 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fdea 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 8002a76:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fdf6 	bl	8002670 <LL_ADC_INJ_IsConversionOngoing>
 8002a84:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 81d9 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 81d4 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7ff fd15 	bl	80024e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fccf 	bl	8002462 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ac4:	e00e      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f7ff fd04 	bl	80024e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fcbf 	bl	8002462 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d022      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6919      	ldr	r1, [r3, #16]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b16:	f7ff fc19 	bl	800234c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f7ff fc65 	bl	80023f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6919      	ldr	r1, [r3, #16]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	7f1b      	ldrb	r3, [r3, #28]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x126>
 8002b3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x128>
 8002b42:	2300      	movs	r3, #0
 8002b44:	461a      	mov	r2, r3
 8002b46:	f7ff fc71 	bl	800242c <LL_ADC_SetOffsetSaturation>
 8002b4a:	e17b      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fc1e 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x15c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fc13 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	f003 021f 	and.w	r2, r3, #31
 8002b76:	e01e      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x19a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fc08 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e004      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x1b2>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	e018      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x1e4>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e004      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002bf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d106      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fbd7 	bl	80023c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fbbb 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x222>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fbb0 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	e01e      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x260>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fba5 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002c5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e004      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x278>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	e018      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x2aa>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002ca8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e004      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d106      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fb74 	bl	80023c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fb58 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x2e8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fb4d 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	f003 021f 	and.w	r2, r3, #31
 8002d02:	e01e      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x326>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fb42 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e004      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x33e>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	e016      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x36c>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002d6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e004      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d106      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fb13 	bl	80023c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2103      	movs	r1, #3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff faf7 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x3aa>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2103      	movs	r1, #3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff faec 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	e017      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x3da>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2103      	movs	r1, #3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fae1 	bl	8002394 <LL_ADC_GetOffsetChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002dde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002de0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x3f2>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	e011      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x416>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fabe 	bl	80023c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fbeb 	bl	8002624 <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f040 813d 	bne.w	80030d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f7ff fb68 	bl	8002538 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4aa2      	ldr	r2, [pc, #648]	@ (80030f8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	f040 812e 	bne.w	80030d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x480>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e019      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x4b4>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002eaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002eae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e003      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002eb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	bf94      	ite	ls
 8002eca:	2301      	movls	r3, #1
 8002ecc:	2300      	movhi	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d079      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x4d4>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	069b      	lsls	r3, r3, #26
 8002eea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eee:	e015      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x500>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e003      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	069b      	lsls	r3, r3, #26
 8002f18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x520>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	e017      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x550>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e003      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	ea42 0103 	orr.w	r1, r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x576>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	051b      	lsls	r3, r3, #20
 8002f90:	e018      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x5a8>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	e07e      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5c8>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	069b      	lsls	r3, r3, #26
 8002fde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fe2:	e015      	b.n	8003010 <HAL_ADC_ConfigChannel+0x5f4>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	069b      	lsls	r3, r3, #26
 800300c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x614>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	3301      	adds	r3, #1
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	e017      	b.n	8003060 <HAL_ADC_ConfigChannel+0x644>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	61fb      	str	r3, [r7, #28]
  return result;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e003      	b.n	8003054 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	ea42 0103 	orr.w	r1, r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_ADC_ConfigChannel+0x670>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	3b1e      	subs	r3, #30
 8003084:	051b      	lsls	r3, r3, #20
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800308a:	e01b      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x6a8>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	613b      	str	r3, [r7, #16]
  return result;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e003      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f003 021f 	and.w	r2, r3, #31
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	3b1e      	subs	r3, #30
 80030be:	051b      	lsls	r3, r3, #20
 80030c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c4:	430b      	orrs	r3, r1
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	6892      	ldr	r2, [r2, #8]
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7ff fa08 	bl	80024e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <HAL_ADC_ConfigChannel+0x6e0>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80be 	beq.w	800325a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e6:	d004      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x6d6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <HAL_ADC_ConfigChannel+0x6e4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10a      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x6ec>
 80030f2:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <HAL_ADC_ConfigChannel+0x6e8>)
 80030f4:	e009      	b.n	800310a <HAL_ADC_ConfigChannel+0x6ee>
 80030f6:	bf00      	nop
 80030f8:	407f0000 	.word	0x407f0000
 80030fc:	80080000 	.word	0x80080000
 8003100:	50000100 	.word	0x50000100
 8003104:	50000300 	.word	0x50000300
 8003108:	4b59      	ldr	r3, [pc, #356]	@ (8003270 <HAL_ADC_ConfigChannel+0x854>)
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f910 	bl	8002330 <LL_ADC_GetCommonPathInternalCh>
 8003110:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <HAL_ADC_ConfigChannel+0x858>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x70c>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a55      	ldr	r2, [pc, #340]	@ (8003278 <HAL_ADC_ConfigChannel+0x85c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d13a      	bne.n	800319e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800312c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d134      	bne.n	800319e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800313c:	d005      	beq.n	800314a <HAL_ADC_ConfigChannel+0x72e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a4e      	ldr	r2, [pc, #312]	@ (800327c <HAL_ADC_ConfigChannel+0x860>)
 8003144:	4293      	cmp	r3, r2
 8003146:	f040 8085 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003152:	d004      	beq.n	800315e <HAL_ADC_ConfigChannel+0x742>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a49      	ldr	r2, [pc, #292]	@ (8003280 <HAL_ADC_ConfigChannel+0x864>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x746>
 800315e:	4a49      	ldr	r2, [pc, #292]	@ (8003284 <HAL_ADC_ConfigChannel+0x868>)
 8003160:	e000      	b.n	8003164 <HAL_ADC_ConfigChannel+0x748>
 8003162:	4a43      	ldr	r2, [pc, #268]	@ (8003270 <HAL_ADC_ConfigChannel+0x854>)
 8003164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003168:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f7ff f8cb 	bl	800230a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003174:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <HAL_ADC_ConfigChannel+0x86c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	4a44      	ldr	r2, [pc, #272]	@ (800328c <HAL_ADC_ConfigChannel+0x870>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800318e:	e002      	b.n	8003196 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3b01      	subs	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f9      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800319c:	e05a      	b.n	8003254 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003290 <HAL_ADC_ConfigChannel+0x874>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d125      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x7d8>
 80031a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11f      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a31      	ldr	r2, [pc, #196]	@ (8003280 <HAL_ADC_ConfigChannel+0x864>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d104      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x7ac>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a34      	ldr	r2, [pc, #208]	@ (8003294 <HAL_ADC_ConfigChannel+0x878>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d047      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d0:	d004      	beq.n	80031dc <HAL_ADC_ConfigChannel+0x7c0>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_ADC_ConfigChannel+0x864>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x7c4>
 80031dc:	4a29      	ldr	r2, [pc, #164]	@ (8003284 <HAL_ADC_ConfigChannel+0x868>)
 80031de:	e000      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x7c6>
 80031e0:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <HAL_ADC_ConfigChannel+0x854>)
 80031e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7ff f88c 	bl	800230a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f2:	e031      	b.n	8003258 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a27      	ldr	r2, [pc, #156]	@ (8003298 <HAL_ADC_ConfigChannel+0x87c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12d      	bne.n	800325a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d127      	bne.n	800325a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <HAL_ADC_ConfigChannel+0x864>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800321c:	d004      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x80c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a17      	ldr	r2, [pc, #92]	@ (8003280 <HAL_ADC_ConfigChannel+0x864>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x810>
 8003228:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <HAL_ADC_ConfigChannel+0x868>)
 800322a:	e000      	b.n	800322e <HAL_ADC_ConfigChannel+0x812>
 800322c:	4a10      	ldr	r2, [pc, #64]	@ (8003270 <HAL_ADC_ConfigChannel+0x854>)
 800322e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003232:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f7ff f866 	bl	800230a <LL_ADC_SetCommonPathInternalCh>
 800323e:	e00c      	b.n	800325a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003252:	e002      	b.n	800325a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003254:	bf00      	nop
 8003256:	e000      	b.n	800325a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003258:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003262:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003266:	4618      	mov	r0, r3
 8003268:	37d8      	adds	r7, #216	@ 0xd8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	50000700 	.word	0x50000700
 8003274:	c3210000 	.word	0xc3210000
 8003278:	90c00010 	.word	0x90c00010
 800327c:	50000600 	.word	0x50000600
 8003280:	50000100 	.word	0x50000100
 8003284:	50000300 	.word	0x50000300
 8003288:	20000000 	.word	0x20000000
 800328c:	053e2d63 	.word	0x053e2d63
 8003290:	c7520000 	.word	0xc7520000
 8003294:	50000500 	.word	0x50000500
 8003298:	cb840000 	.word	0xcb840000

0800329c <LL_ADC_IsEnabled>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <LL_ADC_IsEnabled+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_ADC_IsEnabled+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d101      	bne.n	80032da <LL_ADC_REG_IsConversionOngoing+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b0a1      	sub	sp, #132	@ 0x84
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003302:	2302      	movs	r3, #2
 8003304:	e0e7      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800330e:	2300      	movs	r3, #0
 8003310:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003312:	2300      	movs	r3, #0
 8003314:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800331e:	d102      	bne.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003320:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	e009      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6e      	ldr	r2, [pc, #440]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003330:	4b6d      	ldr	r3, [pc, #436]	@ (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	e001      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0be      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffb1 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 8003360:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ffab 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 80a0 	bne.w	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 809c 	bne.w	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003384:	d004      	beq.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a55      	ldr	r2, [pc, #340]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003390:	4b56      	ldr	r3, [pc, #344]	@ (80034ec <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003392:	e000      	b.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003394:	4b56      	ldr	r3, [pc, #344]	@ (80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003396:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d04b      	beq.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033b2:	035b      	lsls	r3, r3, #13
 80033b4:	430b      	orrs	r3, r1
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033c4:	d004      	beq.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a45      	ldr	r2, [pc, #276]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10f      	bne.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80033d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033d4:	f7ff ff62 	bl	800329c <LL_ADC_IsEnabled>
 80033d8:	4604      	mov	r4, r0
 80033da:	4841      	ldr	r0, [pc, #260]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033dc:	f7ff ff5e 	bl	800329c <LL_ADC_IsEnabled>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4323      	orrs	r3, r4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033f0:	483c      	ldr	r0, [pc, #240]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033f2:	f7ff ff53 	bl	800329c <LL_ADC_IsEnabled>
 80033f6:	4604      	mov	r4, r0
 80033f8:	483b      	ldr	r0, [pc, #236]	@ (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033fa:	f7ff ff4f 	bl	800329c <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	431c      	orrs	r4, r3
 8003402:	483c      	ldr	r0, [pc, #240]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003404:	f7ff ff4a 	bl	800329c <LL_ADC_IsEnabled>
 8003408:	4603      	mov	r3, r0
 800340a:	4323      	orrs	r3, r4
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d056      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800341a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003422:	f023 030f 	bic.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	6811      	ldr	r1, [r2, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6892      	ldr	r2, [r2, #8]
 800342e:	430a      	orrs	r2, r1
 8003430:	431a      	orrs	r2, r3
 8003432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003434:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003436:	e047      	b.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003442:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800344c:	d004      	beq.n	8003458 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a23      	ldr	r2, [pc, #140]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10f      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003458:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800345c:	f7ff ff1e 	bl	800329c <LL_ADC_IsEnabled>
 8003460:	4604      	mov	r4, r0
 8003462:	481f      	ldr	r0, [pc, #124]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003464:	f7ff ff1a 	bl	800329c <LL_ADC_IsEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	4323      	orrs	r3, r4
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e012      	b.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003478:	481a      	ldr	r0, [pc, #104]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800347a:	f7ff ff0f 	bl	800329c <LL_ADC_IsEnabled>
 800347e:	4604      	mov	r4, r0
 8003480:	4819      	ldr	r0, [pc, #100]	@ (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003482:	f7ff ff0b 	bl	800329c <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	431c      	orrs	r4, r3
 800348a:	481a      	ldr	r0, [pc, #104]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800348c:	f7ff ff06 	bl	800329c <LL_ADC_IsEnabled>
 8003490:	4603      	mov	r3, r0
 8003492:	4323      	orrs	r3, r4
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034aa:	f023 030f 	bic.w	r3, r3, #15
 80034ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b2:	e009      	b.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80034c6:	e000      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3784      	adds	r7, #132	@ 0x84
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd90      	pop	{r4, r7, pc}
 80034de:	bf00      	nop
 80034e0:	50000100 	.word	0x50000100
 80034e4:	50000400 	.word	0x50000400
 80034e8:	50000500 	.word	0x50000500
 80034ec:	50000300 	.word	0x50000300
 80034f0:	50000700 	.word	0x50000700
 80034f4:	50000600 	.word	0x50000600

080034f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352a:	4a04      	ldr	r2, [pc, #16]	@ (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	60d3      	str	r3, [r2, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003544:	4b04      	ldr	r3, [pc, #16]	@ (8003558 <__NVIC_GetPriorityGrouping+0x18>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0307 	and.w	r3, r3, #7
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db0b      	blt.n	8003586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4907      	ldr	r1, [pc, #28]	@ (8003594 <__NVIC_EnableIRQ+0x38>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	@ (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	@ (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	@ 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ff4c 	bl	80034f8 <__NVIC_SetPriorityGrouping>
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003676:	f7ff ff63 	bl	8003540 <__NVIC_GetPriorityGrouping>
 800367a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	f7ff ffb3 	bl	80035ec <NVIC_EncodePriority>
 8003686:	4602      	mov	r2, r0
 8003688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff82 	bl	8003598 <__NVIC_SetPriority>
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ff56 	bl	800355c <__NVIC_EnableIRQ>
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d005      	beq.n	80036dc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2204      	movs	r2, #4
 80036d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e037      	b.n	800374c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 020e 	bic.w	r2, r2, #14
 80036ea:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036fa:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003710:	f003 021f 	and.w	r2, r3, #31
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	2101      	movs	r1, #1
 800371a:	fa01 f202 	lsl.w	r2, r1, r2
 800371e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003728:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003740:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800374a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d00d      	beq.n	800379e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2204      	movs	r2, #4
 8003786:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e047      	b.n	800382e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 020e 	bic.w	r2, r2, #14
 80037ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00c      	beq.n	800380e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003802:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800380c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
    }
  }
  return status;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003846:	e15a      	b.n	8003afe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 814c 	beq.w	8003af8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d005      	beq.n	8003878 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003874:	2b02      	cmp	r3, #2
 8003876:	d130      	bne.n	80038da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ae:	2201      	movs	r2, #1
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 0201 	and.w	r2, r3, #1
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d017      	beq.n	8003916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	2203      	movs	r2, #3
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d123      	bne.n	800396a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	08da      	lsrs	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3208      	adds	r2, #8
 800392a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	6939      	ldr	r1, [r7, #16]
 8003966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0203 	and.w	r2, r3, #3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80a6 	beq.w	8003af8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ac:	4b5b      	ldr	r3, [pc, #364]	@ (8003b1c <HAL_GPIO_Init+0x2e4>)
 80039ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b1c <HAL_GPIO_Init+0x2e4>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80039b8:	4b58      	ldr	r3, [pc, #352]	@ (8003b1c <HAL_GPIO_Init+0x2e4>)
 80039ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c4:	4a56      	ldr	r2, [pc, #344]	@ (8003b20 <HAL_GPIO_Init+0x2e8>)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	3302      	adds	r3, #2
 80039cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039ee:	d01f      	beq.n	8003a30 <HAL_GPIO_Init+0x1f8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003b24 <HAL_GPIO_Init+0x2ec>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d019      	beq.n	8003a2c <HAL_GPIO_Init+0x1f4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003b28 <HAL_GPIO_Init+0x2f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_GPIO_Init+0x1f0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a4a      	ldr	r2, [pc, #296]	@ (8003b2c <HAL_GPIO_Init+0x2f4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00d      	beq.n	8003a24 <HAL_GPIO_Init+0x1ec>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a49      	ldr	r2, [pc, #292]	@ (8003b30 <HAL_GPIO_Init+0x2f8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <HAL_GPIO_Init+0x1e8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a48      	ldr	r2, [pc, #288]	@ (8003b34 <HAL_GPIO_Init+0x2fc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_GPIO_Init+0x1e4>
 8003a18:	2305      	movs	r3, #5
 8003a1a:	e00a      	b.n	8003a32 <HAL_GPIO_Init+0x1fa>
 8003a1c:	2306      	movs	r3, #6
 8003a1e:	e008      	b.n	8003a32 <HAL_GPIO_Init+0x1fa>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e006      	b.n	8003a32 <HAL_GPIO_Init+0x1fa>
 8003a24:	2303      	movs	r3, #3
 8003a26:	e004      	b.n	8003a32 <HAL_GPIO_Init+0x1fa>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e002      	b.n	8003a32 <HAL_GPIO_Init+0x1fa>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_GPIO_Init+0x1fa>
 8003a30:	2300      	movs	r3, #0
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	f002 0203 	and.w	r2, r2, #3
 8003a38:	0092      	lsls	r2, r2, #2
 8003a3a:	4093      	lsls	r3, r2
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a42:	4937      	ldr	r1, [pc, #220]	@ (8003b20 <HAL_GPIO_Init+0x2e8>)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a50:	4b39      	ldr	r3, [pc, #228]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a74:	4a30      	ldr	r2, [pc, #192]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a9e:	4a26      	ldr	r2, [pc, #152]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003aa4:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ace:	4b1a      	ldr	r3, [pc, #104]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003af2:	4a11      	ldr	r2, [pc, #68]	@ (8003b38 <HAL_GPIO_Init+0x300>)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3301      	adds	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f47f ae9d 	bne.w	8003848 <HAL_GPIO_Init+0x10>
  }
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40010000 	.word	0x40010000
 8003b24:	48000400 	.word	0x48000400
 8003b28:	48000800 	.word	0x48000800
 8003b2c:	48000c00 	.word	0x48000c00
 8003b30:	48001000 	.word	0x48001000
 8003b34:	48001400 	.word	0x48001400
 8003b38:	40010400 	.word	0x40010400

08003b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b4c:	787b      	ldrb	r3, [r7, #1]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b76:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b82:	4a05      	ldr	r2, [pc, #20]	@ (8003b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f806 	bl	8003b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d141      	bne.n	8003c46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bce:	d131      	bne.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd0:	4b47      	ldr	r3, [pc, #284]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bd6:	4a46      	ldr	r2, [pc, #280]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be0:	4b43      	ldr	r3, [pc, #268]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003be8:	4a41      	ldr	r2, [pc, #260]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bf0:	4b40      	ldr	r3, [pc, #256]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2232      	movs	r2, #50	@ 0x32
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	0c9b      	lsrs	r3, r3, #18
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c06:	e002      	b.n	8003c0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0e:	4b38      	ldr	r3, [pc, #224]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d102      	bne.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f2      	bne.n	8003c08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c22:	4b33      	ldr	r3, [pc, #204]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2e:	d158      	bne.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e057      	b.n	8003ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c34:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c44:	e04d      	b.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4c:	d141      	bne.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c4e:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5a:	d131      	bne.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c5c:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c62:	4a23      	ldr	r2, [pc, #140]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c6c:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c74:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2232      	movs	r2, #50	@ 0x32
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	0c9b      	lsrs	r3, r3, #18
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c92:	e002      	b.n	8003c9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c9a:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d102      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f2      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cae:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cba:	d112      	bne.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e011      	b.n	8003ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cd0:	e007      	b.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cda:	4a05      	ldr	r2, [pc, #20]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ce0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	431bde83 	.word	0x431bde83

08003cfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d0a:	6093      	str	r3, [r2, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40007000 	.word	0x40007000

08003d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e306      	b.n	800433c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d075      	beq.n	8003e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3a:	4b97      	ldr	r3, [pc, #604]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d44:	4b94      	ldr	r3, [pc, #592]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_OscConfig+0x3e>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d002      	beq.n	8003d60 <HAL_RCC_OscConfig+0x44>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	4b8d      	ldr	r3, [pc, #564]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05b      	beq.n	8003e24 <HAL_RCC_OscConfig+0x108>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d157      	bne.n	8003e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e2e1      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x74>
 8003d82:	4b85      	ldr	r3, [pc, #532]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a84      	ldr	r2, [pc, #528]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e01d      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x98>
 8003d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b7c      	ldr	r3, [pc, #496]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7b      	ldr	r2, [pc, #492]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003db4:	4b78      	ldr	r3, [pc, #480]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a77      	ldr	r2, [pc, #476]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b75      	ldr	r3, [pc, #468]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a74      	ldr	r2, [pc, #464]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fa7a 	bl	80022cc <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe fa76 	bl	80022cc <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	@ 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e2a6      	b.n	800433c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dee:	4b6a      	ldr	r3, [pc, #424]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0xc0>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fa66 	bl	80022cc <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fe fa62 	bl	80022cc <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	@ 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e292      	b.n	800433c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e16:	4b60      	ldr	r3, [pc, #384]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0xe8>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d075      	beq.n	8003f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e32:	4b59      	ldr	r3, [pc, #356]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e3c:	4b56      	ldr	r3, [pc, #344]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_OscConfig+0x136>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_OscConfig+0x13c>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d11f      	bne.n	8003e98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e58:	4b4f      	ldr	r3, [pc, #316]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_OscConfig+0x154>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e265      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b49      	ldr	r3, [pc, #292]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	061b      	lsls	r3, r3, #24
 8003e7e:	4946      	ldr	r1, [pc, #280]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e84:	4b45      	ldr	r3, [pc, #276]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fd fb41 	bl	8001510 <HAL_InitTick>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d043      	beq.n	8003f1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e251      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d023      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe fa0e 	bl	80022cc <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fa0a 	bl	80022cc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e23a      	b.n	800433c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec6:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed2:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	492d      	ldr	r1, [pc, #180]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
 8003ee6:	e01a      	b.n	8003f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe f9ea 	bl	80022cc <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fe f9e6 	bl	80022cc <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e216      	b.n	800433c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f0e:	4b22      	ldr	r3, [pc, #136]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1e0>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d041      	beq.n	8003fae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f32:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe f9c3 	bl	80022cc <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe f9bf 	bl	80022cc <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e1ef      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ef      	beq.n	8003f4a <HAL_RCC_OscConfig+0x22e>
 8003f6a:	e020      	b.n	8003fae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f72:	4a09      	ldr	r2, [pc, #36]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fe f9a6 	bl	80022cc <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f82:	e00d      	b.n	8003fa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe f9a2 	bl	80022cc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d906      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1d2      	b.n	800433c <HAL_RCC_OscConfig+0x620>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1ea      	bne.n	8003f84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80a6 	beq.w	8004108 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fc0:	4b84      	ldr	r3, [pc, #528]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x2b4>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x2b6>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	4a7e      	ldr	r2, [pc, #504]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff2:	4b79      	ldr	r3, [pc, #484]	@ (80041d8 <HAL_RCC_OscConfig+0x4bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d118      	bne.n	8004030 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffe:	4b76      	ldr	r3, [pc, #472]	@ (80041d8 <HAL_RCC_OscConfig+0x4bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a75      	ldr	r2, [pc, #468]	@ (80041d8 <HAL_RCC_OscConfig+0x4bc>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400a:	f7fe f95f 	bl	80022cc <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004012:	f7fe f95b 	bl	80022cc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e18b      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004024:	4b6c      	ldr	r3, [pc, #432]	@ (80041d8 <HAL_RCC_OscConfig+0x4bc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d108      	bne.n	800404a <HAL_RCC_OscConfig+0x32e>
 8004038:	4b66      	ldr	r3, [pc, #408]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403e:	4a65      	ldr	r2, [pc, #404]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004048:	e024      	b.n	8004094 <HAL_RCC_OscConfig+0x378>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d110      	bne.n	8004074 <HAL_RCC_OscConfig+0x358>
 8004052:	4b60      	ldr	r3, [pc, #384]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	4a5e      	ldr	r2, [pc, #376]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004062:	4b5c      	ldr	r3, [pc, #368]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	4a5a      	ldr	r2, [pc, #360]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004072:	e00f      	b.n	8004094 <HAL_RCC_OscConfig+0x378>
 8004074:	4b57      	ldr	r3, [pc, #348]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	4a56      	ldr	r2, [pc, #344]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800407c:	f023 0301 	bic.w	r3, r3, #1
 8004080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004084:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	4a52      	ldr	r2, [pc, #328]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d016      	beq.n	80040ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fe f916 	bl	80022cc <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fe f912 	bl	80022cc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e140      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ba:	4b46      	ldr	r3, [pc, #280]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ed      	beq.n	80040a4 <HAL_RCC_OscConfig+0x388>
 80040c8:	e015      	b.n	80040f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fe f8ff 	bl	80022cc <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fe f8fb 	bl	80022cc <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e129      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e8:	4b3a      	ldr	r3, [pc, #232]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ed      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d105      	bne.n	8004108 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fc:	4b35      	ldr	r3, [pc, #212]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004100:	4a34      	ldr	r2, [pc, #208]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004106:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d03c      	beq.n	800418e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01c      	beq.n	8004156 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800411c:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004122:	4a2c      	ldr	r2, [pc, #176]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe f8ce 	bl	80022cc <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004134:	f7fe f8ca 	bl	80022cc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0fa      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004146:	4b23      	ldr	r3, [pc, #140]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004148:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <HAL_RCC_OscConfig+0x418>
 8004154:	e01b      	b.n	800418e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004156:	4b1f      	ldr	r3, [pc, #124]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800415c:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fe f8b1 	bl	80022cc <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800416e:	f7fe f8ad 	bl	80022cc <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0dd      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004180:	4b14      	ldr	r3, [pc, #80]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 8004182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ef      	bne.n	800416e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80d1 	beq.w	800433a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	f000 808b 	beq.w	80042bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d15e      	bne.n	800426c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a08      	ldr	r2, [pc, #32]	@ (80041d4 <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fe f887 	bl	80022cc <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c0:	e00c      	b.n	80041dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fe f883 	bl	80022cc <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d905      	bls.n	80041dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e0b3      	b.n	800433c <HAL_RCC_OscConfig+0x620>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041dc:	4b59      	ldr	r3, [pc, #356]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ec      	bne.n	80041c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e8:	4b56      	ldr	r3, [pc, #344]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b56      	ldr	r3, [pc, #344]	@ (8004348 <HAL_RCC_OscConfig+0x62c>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6a11      	ldr	r1, [r2, #32]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004202:	0212      	lsls	r2, r2, #8
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800420a:	0852      	lsrs	r2, r2, #1
 800420c:	3a01      	subs	r2, #1
 800420e:	0552      	lsls	r2, r2, #21
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004216:	0852      	lsrs	r2, r2, #1
 8004218:	3a01      	subs	r2, #1
 800421a:	0652      	lsls	r2, r2, #25
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004222:	06d2      	lsls	r2, r2, #27
 8004224:	430a      	orrs	r2, r1
 8004226:	4947      	ldr	r1, [pc, #284]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 8004228:	4313      	orrs	r3, r2
 800422a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800422c:	4b45      	ldr	r3, [pc, #276]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a44      	ldr	r2, [pc, #272]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004236:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004238:	4b42      	ldr	r3, [pc, #264]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a41      	ldr	r2, [pc, #260]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 800423e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004242:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fe f842 	bl	80022cc <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe f83e 	bl	80022cc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e06e      	b.n	800433c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425e:	4b39      	ldr	r3, [pc, #228]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x530>
 800426a:	e066      	b.n	800433a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426c:	4b35      	ldr	r3, [pc, #212]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a34      	ldr	r2, [pc, #208]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 8004272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004276:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004278:	4b32      	ldr	r3, [pc, #200]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a31      	ldr	r2, [pc, #196]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004284:	4b2f      	ldr	r3, [pc, #188]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a2e      	ldr	r2, [pc, #184]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 800428a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800428e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004292:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f81a 	bl	80022cc <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fe f816 	bl	80022cc <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e046      	b.n	800433c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ae:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x580>
 80042ba:	e03e      	b.n	800433a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e039      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004344 <HAL_RCC_OscConfig+0x628>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0203 	and.w	r2, r3, #3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d12c      	bne.n	8004336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	3b01      	subs	r3, #1
 80042e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d123      	bne.n	8004336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d11b      	bne.n	8004336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d113      	bne.n	8004336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	3b01      	subs	r3, #1
 800431c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d109      	bne.n	8004336 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	3b01      	subs	r3, #1
 8004330:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40021000 	.word	0x40021000
 8004348:	019f800c 	.word	0x019f800c

0800434c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e11e      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004364:	4b91      	ldr	r3, [pc, #580]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d910      	bls.n	8004394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b8e      	ldr	r3, [pc, #568]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 020f 	bic.w	r2, r3, #15
 800437a:	498c      	ldr	r1, [pc, #560]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b8a      	ldr	r3, [pc, #552]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e106      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d073      	beq.n	8004488 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d129      	bne.n	80043fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a8:	4b81      	ldr	r3, [pc, #516]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0f4      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043b8:	f000 f9d0 	bl	800475c <RCC_GetSysClockFreqFromPLLSource>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4a7c      	ldr	r2, [pc, #496]	@ (80045b4 <HAL_RCC_ClockConfig+0x268>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d93f      	bls.n	8004446 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043c6:	4b7a      	ldr	r3, [pc, #488]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d033      	beq.n	8004446 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d12f      	bne.n	8004446 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043e6:	4b72      	ldr	r3, [pc, #456]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043ee:	4a70      	ldr	r2, [pc, #448]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80043f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043f6:	2380      	movs	r3, #128	@ 0x80
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e024      	b.n	8004446 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d107      	bne.n	8004414 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004404:	4b6a      	ldr	r3, [pc, #424]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d109      	bne.n	8004424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0c6      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004414:	4b66      	ldr	r3, [pc, #408]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0be      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004424:	f000 f8ce 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4a61      	ldr	r2, [pc, #388]	@ (80045b4 <HAL_RCC_ClockConfig+0x268>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d909      	bls.n	8004446 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004432:	4b5f      	ldr	r3, [pc, #380]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800443a:	4a5d      	ldr	r2, [pc, #372]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 800443c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004440:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004442:	2380      	movs	r3, #128	@ 0x80
 8004444:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004446:	4b5a      	ldr	r3, [pc, #360]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4957      	ldr	r1, [pc, #348]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fd ff38 	bl	80022cc <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	e00a      	b.n	8004476 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f7fd ff34 	bl	80022cc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e095      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	4b4e      	ldr	r3, [pc, #312]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 020c 	and.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	429a      	cmp	r2, r3
 8004486:	d1eb      	bne.n	8004460 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d023      	beq.n	80044dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a0:	4b43      	ldr	r3, [pc, #268]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a42      	ldr	r2, [pc, #264]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044b8:	4b3d      	ldr	r3, [pc, #244]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044c0:	4a3b      	ldr	r2, [pc, #236]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c8:	4b39      	ldr	r3, [pc, #228]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4936      	ldr	r1, [pc, #216]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
 80044da:	e008      	b.n	80044ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b80      	cmp	r3, #128	@ 0x80
 80044e0:	d105      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044e2:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	4a32      	ldr	r2, [pc, #200]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 80044e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ee:	4b2f      	ldr	r3, [pc, #188]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d21d      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fc:	4b2b      	ldr	r3, [pc, #172]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 020f 	bic.w	r2, r3, #15
 8004504:	4929      	ldr	r1, [pc, #164]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800450c:	f7fd fede 	bl	80022cc <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	e00a      	b.n	800452a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7fd feda 	bl	80022cc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e03b      	b.n	80045a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b20      	ldr	r3, [pc, #128]	@ (80045ac <HAL_RCC_ClockConfig+0x260>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d1ed      	bne.n	8004514 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4917      	ldr	r1, [pc, #92]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004562:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	490f      	ldr	r1, [pc, #60]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004576:	f000 f825 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800457a:	4602      	mov	r2, r0
 800457c:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <HAL_RCC_ClockConfig+0x264>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	490c      	ldr	r1, [pc, #48]	@ (80045b8 <HAL_RCC_ClockConfig+0x26c>)
 8004588:	5ccb      	ldrb	r3, [r1, r3]
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	fa22 f303 	lsr.w	r3, r2, r3
 8004592:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <HAL_RCC_ClockConfig+0x270>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <HAL_RCC_ClockConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc ffb8 	bl	8001510 <HAL_InitTick>
 80045a0:	4603      	mov	r3, r0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40021000 	.word	0x40021000
 80045b4:	04c4b400 	.word	0x04c4b400
 80045b8:	08009f28 	.word	0x08009f28
 80045bc:	20000000 	.word	0x20000000
 80045c0:	200000c0 	.word	0x200000c0

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045ca:	4b2c      	ldr	r3, [pc, #176]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d102      	bne.n	80045dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e047      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045dc:	4b27      	ldr	r3, [pc, #156]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d102      	bne.n	80045ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045e8:	4b26      	ldr	r3, [pc, #152]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e03e      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ee:	4b23      	ldr	r3, [pc, #140]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d136      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fa:	4b20      	ldr	r3, [pc, #128]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004604:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3301      	adds	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d10c      	bne.n	8004632 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004618:	4a1a      	ldr	r2, [pc, #104]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xc0>)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	68d2      	ldr	r2, [r2, #12]
 8004624:	0a12      	lsrs	r2, r2, #8
 8004626:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
      break;
 8004630:	e00c      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004632:	4a13      	ldr	r2, [pc, #76]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	4a10      	ldr	r2, [pc, #64]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	68d2      	ldr	r2, [r2, #12]
 800463e:	0a12      	lsrs	r2, r2, #8
 8004640:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
      break;
 800464a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800464c:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <HAL_RCC_GetSysClockFreq+0xb8>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0e5b      	lsrs	r3, r3, #25
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e001      	b.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800466c:	693b      	ldr	r3, [r7, #16]
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	00f42400 	.word	0x00f42400
 8004684:	016e3600 	.word	0x016e3600

08004688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	@ (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000000 	.word	0x20000000

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4904      	ldr	r1, [pc, #16]	@ (80046c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	08009f38 	.word	0x08009f38

080046cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046d0:	f7ff ffda 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0adb      	lsrs	r3, r3, #11
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08009f38 	.word	0x08009f38

080046f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	220f      	movs	r2, #15
 8004706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0203 	and.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004714:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800472c:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800473a:	4b07      	ldr	r3, [pc, #28]	@ (8004758 <HAL_RCC_GetClockConfig+0x60>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 020f 	and.w	r2, r3, #15
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	40022000 	.word	0x40022000

0800475c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004762:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800476c:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	3301      	adds	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d10c      	bne.n	800479a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004780:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800478a:	68d2      	ldr	r2, [r2, #12]
 800478c:	0a12      	lsrs	r2, r2, #8
 800478e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	617b      	str	r3, [r7, #20]
    break;
 8004798:	e00c      	b.n	80047b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800479a:	4a12      	ldr	r2, [pc, #72]	@ (80047e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	4a0e      	ldr	r2, [pc, #56]	@ (80047dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047a4:	68d2      	ldr	r2, [r2, #12]
 80047a6:	0a12      	lsrs	r2, r2, #8
 80047a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
    break;
 80047b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	0e5b      	lsrs	r3, r3, #25
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	3301      	adds	r3, #1
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047ce:	687b      	ldr	r3, [r7, #4]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40021000 	.word	0x40021000
 80047e0:	016e3600 	.word	0x016e3600
 80047e4:	00f42400 	.word	0x00f42400

080047e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047f0:	2300      	movs	r3, #0
 80047f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f4:	2300      	movs	r3, #0
 80047f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8098 	beq.w	8004936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b43      	ldr	r3, [pc, #268]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	4b40      	ldr	r3, [pc, #256]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	4a3f      	ldr	r2, [pc, #252]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004820:	6593      	str	r3, [r2, #88]	@ 0x58
 8004822:	4b3d      	ldr	r3, [pc, #244]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482e:	2301      	movs	r3, #1
 8004830:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004832:	4b3a      	ldr	r3, [pc, #232]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a39      	ldr	r2, [pc, #228]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800483c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800483e:	f7fd fd45 	bl	80022cc <HAL_GetTick>
 8004842:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004844:	e009      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004846:	f7fd fd41 	bl	80022cc <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d902      	bls.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	74fb      	strb	r3, [r7, #19]
        break;
 8004858:	e005      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800485a:	4b30      	ldr	r3, [pc, #192]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ef      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d159      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800486c:	4b2a      	ldr	r3, [pc, #168]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004876:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01e      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	429a      	cmp	r2, r3
 8004886:	d019      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004888:	4b23      	ldr	r3, [pc, #140]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004892:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004894:	4b20      	ldr	r3, [pc, #128]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489a:	4a1f      	ldr	r2, [pc, #124]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048b4:	4a18      	ldr	r2, [pc, #96]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d016      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fd fd01 	bl	80022cc <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048cc:	e00b      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fd fcfd 	bl	80022cc <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d902      	bls.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	74fb      	strb	r3, [r7, #19]
            break;
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ec      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fa:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	4903      	ldr	r1, [pc, #12]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004910:	e008      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	74bb      	strb	r3, [r7, #18]
 8004916:	e005      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004918:	40021000 	.word	0x40021000
 800491c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004924:	7c7b      	ldrb	r3, [r7, #17]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800492a:	4ba7      	ldr	r3, [pc, #668]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492e:	4aa6      	ldr	r2, [pc, #664]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004934:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004942:	4ba1      	ldr	r3, [pc, #644]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004948:	f023 0203 	bic.w	r2, r3, #3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	499d      	ldr	r1, [pc, #628]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004964:	4b98      	ldr	r3, [pc, #608]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496a:	f023 020c 	bic.w	r2, r3, #12
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4995      	ldr	r1, [pc, #596]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004986:	4b90      	ldr	r3, [pc, #576]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	498c      	ldr	r1, [pc, #560]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049a8:	4b87      	ldr	r3, [pc, #540]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4984      	ldr	r1, [pc, #528]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049ca:	4b7f      	ldr	r3, [pc, #508]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	497b      	ldr	r1, [pc, #492]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049ec:	4b76      	ldr	r3, [pc, #472]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	4973      	ldr	r1, [pc, #460]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	496a      	ldr	r1, [pc, #424]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a30:	4b65      	ldr	r3, [pc, #404]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4962      	ldr	r1, [pc, #392]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a52:	4b5d      	ldr	r3, [pc, #372]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	4959      	ldr	r1, [pc, #356]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a74:	4b54      	ldr	r3, [pc, #336]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a82:	4951      	ldr	r1, [pc, #324]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a96:	4b4c      	ldr	r3, [pc, #304]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	4948      	ldr	r1, [pc, #288]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d015      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ab8:	4b43      	ldr	r3, [pc, #268]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	4940      	ldr	r1, [pc, #256]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4a3a      	ldr	r2, [pc, #232]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ae2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004af0:	4b35      	ldr	r3, [pc, #212]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afe:	4932      	ldr	r1, [pc, #200]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b10:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d015      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b28:	4b27      	ldr	r3, [pc, #156]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	4924      	ldr	r1, [pc, #144]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b46:	d105      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b48:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d015      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6e:	4916      	ldr	r1, [pc, #88]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b80:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a10      	ldr	r2, [pc, #64]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	4908      	ldr	r1, [pc, #32]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb8:	4b03      	ldr	r3, [pc, #12]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4a02      	ldr	r2, [pc, #8]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc2:	60d3      	str	r3, [r2, #12]
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d015      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bd8:	4b29      	ldr	r3, [pc, #164]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	4926      	ldr	r1, [pc, #152]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bf8:	4b21      	ldr	r3, [pc, #132]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a20      	ldr	r2, [pc, #128]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c10:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1e:	4918      	ldr	r1, [pc, #96]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c30:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c48:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c56:	490a      	ldr	r1, [pc, #40]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c66:	d105      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c68:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c74:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000

08004c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e049      	b.n	8004d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fee4 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f000 fdf4 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e054      	b.n	8004df6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a26      	ldr	r2, [pc, #152]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d76:	d01d      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a21      	ldr	r2, [pc, #132]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1f      	ldr	r2, [pc, #124]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xe4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1b      	ldr	r2, [pc, #108]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xe8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d115      	bne.n	8004de0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	4b19      	ldr	r3, [pc, #100]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xec>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d015      	beq.n	8004df2 <HAL_TIM_Base_Start_IT+0xbe>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d011      	beq.n	8004df2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e008      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e000      	b.n	8004df4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800
 8004e10:	40000c00 	.word	0x40000c00
 8004e14:	40013400 	.word	0x40013400
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40015000 	.word	0x40015000
 8004e20:	00010007 	.word	0x00010007

08004e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e049      	b.n	8004eca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f841 	bl	8004ed2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fd24 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <HAL_TIM_PWM_Start+0x24>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e03c      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d109      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x3e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	bf14      	ite	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	2300      	moveq	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e02f      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d109      	bne.n	8004f40 <HAL_TIM_PWM_Start+0x58>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e022      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d109      	bne.n	8004f5a <HAL_TIM_PWM_Start+0x72>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e015      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_PWM_Start+0x8c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e008      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0a6      	b.n	80050dc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xb6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f9c:	e023      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0xc6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fac:	e01b      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start+0xd6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fbc:	e013      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Start+0xe6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fcc:	e00b      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_PWM_Start+0xf6>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fdc:	e003      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 f940 	bl	8006274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80050e4 <HAL_TIM_PWM_Start+0x1fc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_TIM_PWM_Start+0x148>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a39      	ldr	r2, [pc, #228]	@ (80050e8 <HAL_TIM_PWM_Start+0x200>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_TIM_PWM_Start+0x148>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a37      	ldr	r2, [pc, #220]	@ (80050ec <HAL_TIM_PWM_Start+0x204>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_TIM_PWM_Start+0x148>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a36      	ldr	r2, [pc, #216]	@ (80050f0 <HAL_TIM_PWM_Start+0x208>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_TIM_PWM_Start+0x148>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a34      	ldr	r2, [pc, #208]	@ (80050f4 <HAL_TIM_PWM_Start+0x20c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_TIM_PWM_Start+0x148>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a33      	ldr	r2, [pc, #204]	@ (80050f8 <HAL_TIM_PWM_Start+0x210>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d101      	bne.n	8005034 <HAL_TIM_PWM_Start+0x14c>
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <HAL_TIM_PWM_Start+0x14e>
 8005034:	2300      	movs	r3, #0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a25      	ldr	r2, [pc, #148]	@ (80050e4 <HAL_TIM_PWM_Start+0x1fc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d022      	beq.n	800509a <HAL_TIM_PWM_Start+0x1b2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505c:	d01d      	beq.n	800509a <HAL_TIM_PWM_Start+0x1b2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a26      	ldr	r2, [pc, #152]	@ (80050fc <HAL_TIM_PWM_Start+0x214>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_TIM_PWM_Start+0x1b2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a24      	ldr	r2, [pc, #144]	@ (8005100 <HAL_TIM_PWM_Start+0x218>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_TIM_PWM_Start+0x1b2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a23      	ldr	r2, [pc, #140]	@ (8005104 <HAL_TIM_PWM_Start+0x21c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_TIM_PWM_Start+0x1b2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <HAL_TIM_PWM_Start+0x200>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_TIM_PWM_Start+0x1b2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <HAL_TIM_PWM_Start+0x204>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIM_PWM_Start+0x1b2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_TIM_PWM_Start+0x210>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d115      	bne.n	80050c6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	4b19      	ldr	r3, [pc, #100]	@ (8005108 <HAL_TIM_PWM_Start+0x220>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d015      	beq.n	80050d8 <HAL_TIM_PWM_Start+0x1f0>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b2:	d011      	beq.n	80050d8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	e008      	b.n	80050d8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e000      	b.n	80050da <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40013400 	.word	0x40013400
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800
 80050f8:	40015000 	.word	0x40015000
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	00010007 	.word	0x00010007

0800510c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b02      	cmp	r3, #2
 8005120:	d122      	bne.n	8005168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d11b      	bne.n	8005168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0202 	mvn.w	r2, #2
 8005138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fb90 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fb82 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb93 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b04      	cmp	r3, #4
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b04      	cmp	r3, #4
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0204 	mvn.w	r2, #4
 800518c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fb66 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fb58 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fb69 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0208 	mvn.w	r2, #8
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2204      	movs	r2, #4
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fb3c 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fb2e 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fb3f 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b10      	cmp	r3, #16
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0210 	mvn.w	r2, #16
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2208      	movs	r2, #8
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fb12 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb04 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fb15 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d10e      	bne.n	8005290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d107      	bne.n	8005290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0201 	mvn.w	r2, #1
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc f904 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529a:	2b80      	cmp	r3, #128	@ 0x80
 800529c:	d10e      	bne.n	80052bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a8:	2b80      	cmp	r3, #128	@ 0x80
 80052aa:	d107      	bne.n	80052bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fac4 	bl	8006844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ca:	d10e      	bne.n	80052ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d6:	2b80      	cmp	r3, #128	@ 0x80
 80052d8:	d107      	bne.n	80052ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 fab7 	bl	8006858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b40      	cmp	r3, #64	@ 0x40
 80052f6:	d10e      	bne.n	8005316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b40      	cmp	r3, #64	@ 0x40
 8005304:	d107      	bne.n	8005316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800530e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fac3 	bl	800589c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b20      	cmp	r3, #32
 8005322:	d10e      	bne.n	8005342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b20      	cmp	r3, #32
 8005330:	d107      	bne.n	8005342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f06f 0220 	mvn.w	r2, #32
 800533a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fa77 	bl	8006830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800534c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005350:	d10f      	bne.n	8005372 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800535c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fa7d 	bl	800686c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800537c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005380:	d10f      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800538c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fa6f 	bl	8006880 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b0:	d10f      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fa61 	bl	8006894 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053e0:	d10f      	bne.n	8005402 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 fa53 	bl	80068a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005426:	2302      	movs	r3, #2
 8005428:	e0ff      	b.n	800562a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b14      	cmp	r3, #20
 8005436:	f200 80f0 	bhi.w	800561a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800543a:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005495 	.word	0x08005495
 8005444:	0800561b 	.word	0x0800561b
 8005448:	0800561b 	.word	0x0800561b
 800544c:	0800561b 	.word	0x0800561b
 8005450:	080054d5 	.word	0x080054d5
 8005454:	0800561b 	.word	0x0800561b
 8005458:	0800561b 	.word	0x0800561b
 800545c:	0800561b 	.word	0x0800561b
 8005460:	08005517 	.word	0x08005517
 8005464:	0800561b 	.word	0x0800561b
 8005468:	0800561b 	.word	0x0800561b
 800546c:	0800561b 	.word	0x0800561b
 8005470:	08005557 	.word	0x08005557
 8005474:	0800561b 	.word	0x0800561b
 8005478:	0800561b 	.word	0x0800561b
 800547c:	0800561b 	.word	0x0800561b
 8005480:	08005599 	.word	0x08005599
 8005484:	0800561b 	.word	0x0800561b
 8005488:	0800561b 	.word	0x0800561b
 800548c:	0800561b 	.word	0x0800561b
 8005490:	080055d9 	.word	0x080055d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fab0 	bl	8005a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	619a      	str	r2, [r3, #24]
      break;
 80054d2:	e0a5      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fb2a 	bl	8005b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6999      	ldr	r1, [r3, #24]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	619a      	str	r2, [r3, #24]
      break;
 8005514:	e084      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb9d 	bl	8005c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0208 	orr.w	r2, r2, #8
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0204 	bic.w	r2, r2, #4
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	61da      	str	r2, [r3, #28]
      break;
 8005554:	e064      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fc0f 	bl	8005d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69d9      	ldr	r1, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	021a      	lsls	r2, r3, #8
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	61da      	str	r2, [r3, #28]
      break;
 8005596:	e043      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fc82 	bl	8005ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0208 	orr.w	r2, r2, #8
 80055b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055d6:	e023      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fccc 	bl	8005f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005602:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005618:	e002      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
      break;
 800561e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop

08005634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIM_ConfigClockSource+0x1c>
 800564c:	2302      	movs	r3, #2
 800564e:	e0f6      	b.n	800583e <HAL_TIM_ConfigClockSource+0x20a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800566e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800567a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a6f      	ldr	r2, [pc, #444]	@ (8005848 <HAL_TIM_ConfigClockSource+0x214>)
 800568a:	4293      	cmp	r3, r2
 800568c:	f000 80c1 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 8005690:	4a6d      	ldr	r2, [pc, #436]	@ (8005848 <HAL_TIM_ConfigClockSource+0x214>)
 8005692:	4293      	cmp	r3, r2
 8005694:	f200 80c6 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 8005698:	4a6c      	ldr	r2, [pc, #432]	@ (800584c <HAL_TIM_ConfigClockSource+0x218>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f000 80b9 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 80056a0:	4a6a      	ldr	r2, [pc, #424]	@ (800584c <HAL_TIM_ConfigClockSource+0x218>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f200 80be 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 80056a8:	4a69      	ldr	r2, [pc, #420]	@ (8005850 <HAL_TIM_ConfigClockSource+0x21c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	f000 80b1 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 80056b0:	4a67      	ldr	r2, [pc, #412]	@ (8005850 <HAL_TIM_ConfigClockSource+0x21c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f200 80b6 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 80056b8:	4a66      	ldr	r2, [pc, #408]	@ (8005854 <HAL_TIM_ConfigClockSource+0x220>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f000 80a9 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 80056c0:	4a64      	ldr	r2, [pc, #400]	@ (8005854 <HAL_TIM_ConfigClockSource+0x220>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f200 80ae 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 80056c8:	4a63      	ldr	r2, [pc, #396]	@ (8005858 <HAL_TIM_ConfigClockSource+0x224>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	f000 80a1 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 80056d0:	4a61      	ldr	r2, [pc, #388]	@ (8005858 <HAL_TIM_ConfigClockSource+0x224>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	f200 80a6 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 80056d8:	4a60      	ldr	r2, [pc, #384]	@ (800585c <HAL_TIM_ConfigClockSource+0x228>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	f000 8099 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 80056e0:	4a5e      	ldr	r2, [pc, #376]	@ (800585c <HAL_TIM_ConfigClockSource+0x228>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	f200 809e 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 80056e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80056ec:	f000 8091 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 80056f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80056f4:	f200 8096 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 80056f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fc:	f000 8089 	beq.w	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 8005700:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005704:	f200 808e 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570c:	d03e      	beq.n	800578c <HAL_TIM_ConfigClockSource+0x158>
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005712:	f200 8087 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571a:	f000 8086 	beq.w	800582a <HAL_TIM_ConfigClockSource+0x1f6>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005722:	d87f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 8005724:	2b70      	cmp	r3, #112	@ 0x70
 8005726:	d01a      	beq.n	800575e <HAL_TIM_ConfigClockSource+0x12a>
 8005728:	2b70      	cmp	r3, #112	@ 0x70
 800572a:	d87b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 800572c:	2b60      	cmp	r3, #96	@ 0x60
 800572e:	d050      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x19e>
 8005730:	2b60      	cmp	r3, #96	@ 0x60
 8005732:	d877      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 8005734:	2b50      	cmp	r3, #80	@ 0x50
 8005736:	d03c      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x17e>
 8005738:	2b50      	cmp	r3, #80	@ 0x50
 800573a:	d873      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 800573c:	2b40      	cmp	r3, #64	@ 0x40
 800573e:	d058      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x1be>
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	d86f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 8005744:	2b30      	cmp	r3, #48	@ 0x30
 8005746:	d064      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 8005748:	2b30      	cmp	r3, #48	@ 0x30
 800574a:	d86b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d060      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 8005750:	2b20      	cmp	r3, #32
 8005752:	d867      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d05c      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 8005758:	2b10      	cmp	r3, #16
 800575a:	d05a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x1de>
 800575c:	e062      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6899      	ldr	r1, [r3, #8]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f000 fd61 	bl	8006234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	609a      	str	r2, [r3, #8]
      break;
 800578a:	e04f      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6899      	ldr	r1, [r3, #8]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f000 fd4a 	bl	8006234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ae:	609a      	str	r2, [r3, #8]
      break;
 80057b0:	e03c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 fcbc 	bl	800613c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2150      	movs	r1, #80	@ 0x50
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fd15 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 80057d0:	e02c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 fcdb 	bl	800619a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2160      	movs	r1, #96	@ 0x60
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fd05 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 80057f0:	e01c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 fc9c 	bl	800613c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2140      	movs	r1, #64	@ 0x40
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fcf5 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005810:	e00c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f000 fcec 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005822:	e003      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	e000      	b.n	800582c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800582a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	00100070 	.word	0x00100070
 800584c:	00100060 	.word	0x00100060
 8005850:	00100050 	.word	0x00100050
 8005854:	00100040 	.word	0x00100040
 8005858:	00100030 	.word	0x00100030
 800585c:	00100020 	.word	0x00100020

08005860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a46      	ldr	r2, [pc, #280]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d017      	beq.n	80058f8 <TIM_Base_SetConfig+0x48>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ce:	d013      	beq.n	80058f8 <TIM_Base_SetConfig+0x48>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a43      	ldr	r2, [pc, #268]	@ (80059e0 <TIM_Base_SetConfig+0x130>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0x48>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a42      	ldr	r2, [pc, #264]	@ (80059e4 <TIM_Base_SetConfig+0x134>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0x48>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a41      	ldr	r2, [pc, #260]	@ (80059e8 <TIM_Base_SetConfig+0x138>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0x48>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a40      	ldr	r2, [pc, #256]	@ (80059ec <TIM_Base_SetConfig+0x13c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0x48>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3f      	ldr	r2, [pc, #252]	@ (80059f0 <TIM_Base_SetConfig+0x140>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d108      	bne.n	800590a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a33      	ldr	r2, [pc, #204]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d023      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005918:	d01f      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a30      	ldr	r2, [pc, #192]	@ (80059e0 <TIM_Base_SetConfig+0x130>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2f      	ldr	r2, [pc, #188]	@ (80059e4 <TIM_Base_SetConfig+0x134>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2e      	ldr	r2, [pc, #184]	@ (80059e8 <TIM_Base_SetConfig+0x138>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2d      	ldr	r2, [pc, #180]	@ (80059ec <TIM_Base_SetConfig+0x13c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2d      	ldr	r2, [pc, #180]	@ (80059f4 <TIM_Base_SetConfig+0x144>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2c      	ldr	r2, [pc, #176]	@ (80059f8 <TIM_Base_SetConfig+0x148>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2b      	ldr	r2, [pc, #172]	@ (80059fc <TIM_Base_SetConfig+0x14c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a26      	ldr	r2, [pc, #152]	@ (80059f0 <TIM_Base_SetConfig+0x140>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a12      	ldr	r2, [pc, #72]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d013      	beq.n	80059c0 <TIM_Base_SetConfig+0x110>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a14      	ldr	r2, [pc, #80]	@ (80059ec <TIM_Base_SetConfig+0x13c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_Base_SetConfig+0x110>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a14      	ldr	r2, [pc, #80]	@ (80059f4 <TIM_Base_SetConfig+0x144>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_Base_SetConfig+0x110>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <TIM_Base_SetConfig+0x148>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_Base_SetConfig+0x110>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <TIM_Base_SetConfig+0x14c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_Base_SetConfig+0x110>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a0d      	ldr	r2, [pc, #52]	@ (80059f0 <TIM_Base_SetConfig+0x140>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d103      	bne.n	80059c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	615a      	str	r2, [r3, #20]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40013400 	.word	0x40013400
 80059f0:	40015000 	.word	0x40015000
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0302 	bic.w	r3, r3, #2
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a30      	ldr	r2, [pc, #192]	@ (8005b1c <TIM_OC1_SetConfig+0x11c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a2f      	ldr	r2, [pc, #188]	@ (8005b20 <TIM_OC1_SetConfig+0x120>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00f      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b24 <TIM_OC1_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	@ (8005b28 <TIM_OC1_SetConfig+0x128>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b2c <TIM_OC1_SetConfig+0x12c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC1_SetConfig+0x88>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a2b      	ldr	r2, [pc, #172]	@ (8005b30 <TIM_OC1_SetConfig+0x130>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10c      	bne.n	8005aa2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0308 	bic.w	r3, r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b1c <TIM_OC1_SetConfig+0x11c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	@ (8005b20 <TIM_OC1_SetConfig+0x120>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b24 <TIM_OC1_SetConfig+0x124>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1a      	ldr	r2, [pc, #104]	@ (8005b28 <TIM_OC1_SetConfig+0x128>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	@ (8005b2c <TIM_OC1_SetConfig+0x12c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC1_SetConfig+0xd2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a18      	ldr	r2, [pc, #96]	@ (8005b30 <TIM_OC1_SetConfig+0x130>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d111      	bne.n	8005af6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	bf00      	nop
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800
 8005b30:	40015000 	.word	0x40015000

08005b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0210 	bic.w	r2, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0320 	bic.w	r3, r3, #32
 8005b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	@ (8005c44 <TIM_OC2_SetConfig+0x110>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x74>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c48 <TIM_OC2_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x74>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c4c <TIM_OC2_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10d      	bne.n	8005bc4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c44 <TIM_OC2_SetConfig+0x110>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	@ (8005c48 <TIM_OC2_SetConfig+0x114>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00f      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <TIM_OC2_SetConfig+0x11c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	@ (8005c54 <TIM_OC2_SetConfig+0x120>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c58 <TIM_OC2_SetConfig+0x124>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xc0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a17      	ldr	r2, [pc, #92]	@ (8005c4c <TIM_OC2_SetConfig+0x118>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d113      	bne.n	8005c1c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40015000 	.word	0x40015000
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d68 <TIM_OC3_SetConfig+0x10c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_OC3_SetConfig+0x72>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <TIM_OC3_SetConfig+0x110>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC3_SetConfig+0x72>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a29      	ldr	r2, [pc, #164]	@ (8005d70 <TIM_OC3_SetConfig+0x114>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10d      	bne.n	8005cea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <TIM_OC3_SetConfig+0x10c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <TIM_OC3_SetConfig+0x110>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d74 <TIM_OC3_SetConfig+0x118>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <TIM_OC3_SetConfig+0x11c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <TIM_OC3_SetConfig+0x120>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_OC3_SetConfig+0xbe>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a16      	ldr	r2, [pc, #88]	@ (8005d70 <TIM_OC3_SetConfig+0x114>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d113      	bne.n	8005d42 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40015000 	.word	0x40015000
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800

08005d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	031b      	lsls	r3, r3, #12
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a2c      	ldr	r2, [pc, #176]	@ (8005e90 <TIM_OC4_SetConfig+0x110>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_OC4_SetConfig+0x74>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a2b      	ldr	r2, [pc, #172]	@ (8005e94 <TIM_OC4_SetConfig+0x114>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC4_SetConfig+0x74>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <TIM_OC4_SetConfig+0x118>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d10d      	bne.n	8005e10 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <TIM_OC4_SetConfig+0x110>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e94 <TIM_OC4_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00f      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a1e      	ldr	r2, [pc, #120]	@ (8005e9c <TIM_OC4_SetConfig+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00b      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea0 <TIM_OC4_SetConfig+0x120>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d007      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <TIM_OC4_SetConfig+0x124>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC4_SetConfig+0xc0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a17      	ldr	r2, [pc, #92]	@ (8005e98 <TIM_OC4_SetConfig+0x118>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d113      	bne.n	8005e68 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	019b      	lsls	r3, r3, #6
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40015000 	.word	0x40015000
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800

08005ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a19      	ldr	r2, [pc, #100]	@ (8005f64 <TIM_OC5_SetConfig+0xbc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a18      	ldr	r2, [pc, #96]	@ (8005f68 <TIM_OC5_SetConfig+0xc0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00f      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a17      	ldr	r2, [pc, #92]	@ (8005f6c <TIM_OC5_SetConfig+0xc4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a16      	ldr	r2, [pc, #88]	@ (8005f70 <TIM_OC5_SetConfig+0xc8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d007      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a15      	ldr	r2, [pc, #84]	@ (8005f74 <TIM_OC5_SetConfig+0xcc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_OC5_SetConfig+0x82>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a14      	ldr	r2, [pc, #80]	@ (8005f78 <TIM_OC5_SetConfig+0xd0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d109      	bne.n	8005f3e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	40015000 	.word	0x40015000

08005f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	051b      	lsls	r3, r3, #20
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800603c <TIM_OC6_SetConfig+0xc0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a19      	ldr	r2, [pc, #100]	@ (8006040 <TIM_OC6_SetConfig+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00f      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a18      	ldr	r2, [pc, #96]	@ (8006044 <TIM_OC6_SetConfig+0xc8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a17      	ldr	r2, [pc, #92]	@ (8006048 <TIM_OC6_SetConfig+0xcc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a16      	ldr	r2, [pc, #88]	@ (800604c <TIM_OC6_SetConfig+0xd0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC6_SetConfig+0x84>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a15      	ldr	r2, [pc, #84]	@ (8006050 <TIM_OC6_SetConfig+0xd4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d109      	bne.n	8006014 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40013400 	.word	0x40013400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800
 8006050:	40015000 	.word	0x40015000

08006054 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f023 0201 	bic.w	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a28      	ldr	r2, [pc, #160]	@ (8006120 <TIM_TI1_SetConfig+0xcc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01b      	beq.n	80060ba <TIM_TI1_SetConfig+0x66>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006088:	d017      	beq.n	80060ba <TIM_TI1_SetConfig+0x66>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a25      	ldr	r2, [pc, #148]	@ (8006124 <TIM_TI1_SetConfig+0xd0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d013      	beq.n	80060ba <TIM_TI1_SetConfig+0x66>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a24      	ldr	r2, [pc, #144]	@ (8006128 <TIM_TI1_SetConfig+0xd4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00f      	beq.n	80060ba <TIM_TI1_SetConfig+0x66>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a23      	ldr	r2, [pc, #140]	@ (800612c <TIM_TI1_SetConfig+0xd8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00b      	beq.n	80060ba <TIM_TI1_SetConfig+0x66>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a22      	ldr	r2, [pc, #136]	@ (8006130 <TIM_TI1_SetConfig+0xdc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d007      	beq.n	80060ba <TIM_TI1_SetConfig+0x66>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a21      	ldr	r2, [pc, #132]	@ (8006134 <TIM_TI1_SetConfig+0xe0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_TI1_SetConfig+0x66>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a20      	ldr	r2, [pc, #128]	@ (8006138 <TIM_TI1_SetConfig+0xe4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d101      	bne.n	80060be <TIM_TI1_SetConfig+0x6a>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <TIM_TI1_SetConfig+0x6c>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e003      	b.n	80060de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f023 030a 	bic.w	r3, r3, #10
 80060f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f003 030a 	and.w	r3, r3, #10
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40013400 	.word	0x40013400
 8006134:	40014000 	.word	0x40014000
 8006138:	40015000 	.word	0x40015000

0800613c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 030a 	bic.w	r3, r3, #10
 8006178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0210 	bic.w	r2, r3, #16
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	f043 0307 	orr.w	r3, r3, #7
 8006220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	609a      	str	r2, [r3, #8]
}
 8006228:	bf00      	nop
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800624e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	021a      	lsls	r2, r3, #8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	431a      	orrs	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	609a      	str	r2, [r3, #8]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	2201      	movs	r2, #1
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	43db      	mvns	r3, r3
 8006296:	401a      	ands	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b08a      	sub	sp, #40	@ 0x28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e0a0      	b.n	8006414 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fb fbe6 	bl	8001ab8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7ff fad6 	bl	80058b0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6819      	ldr	r1, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2203      	movs	r2, #3
 8006312:	f7ff fe9f 	bl	8006054 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 020c 	bic.w	r2, r2, #12
 8006324:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6999      	ldr	r1, [r3, #24]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006346:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800636a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637a:	f023 0307 	bic.w	r3, r3, #7
 800637e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0204 	orr.w	r2, r2, #4
 800638e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006394:	2300      	movs	r3, #0
 8006396:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006398:	2370      	movs	r3, #112	@ 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800639c:	2300      	movs	r3, #0
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f107 020c 	add.w	r2, r7, #12
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fbbb 	bl	8005b34 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80063e0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3728      	adds	r7, #40	@ 0x28
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_TIMEx_PWMN_Start+0x24>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e022      	b.n	8006486 <HAL_TIMEx_PWMN_Start+0x6a>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b04      	cmp	r3, #4
 8006444:	d109      	bne.n	800645a <HAL_TIMEx_PWMN_Start+0x3e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	bf14      	ite	ne
 8006452:	2301      	movne	r3, #1
 8006454:	2300      	moveq	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	e015      	b.n	8006486 <HAL_TIMEx_PWMN_Start+0x6a>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d109      	bne.n	8006474 <HAL_TIMEx_PWMN_Start+0x58>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e008      	b.n	8006486 <HAL_TIMEx_PWMN_Start+0x6a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b01      	cmp	r3, #1
 800647e:	bf14      	ite	ne
 8006480:	2301      	movne	r3, #1
 8006482:	2300      	moveq	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e073      	b.n	8006576 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <HAL_TIMEx_PWMN_Start+0x82>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649c:	e013      	b.n	80064c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d104      	bne.n	80064ae <HAL_TIMEx_PWMN_Start+0x92>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064ac:	e00b      	b.n	80064c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d104      	bne.n	80064be <HAL_TIMEx_PWMN_Start+0xa2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064bc:	e003      	b.n	80064c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2202      	movs	r2, #2
 80064c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2204      	movs	r2, #4
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f9f4 	bl	80068bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a25      	ldr	r2, [pc, #148]	@ (8006580 <HAL_TIMEx_PWMN_Start+0x164>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <HAL_TIMEx_PWMN_Start+0x118>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f6:	d01d      	beq.n	8006534 <HAL_TIMEx_PWMN_Start+0x118>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a21      	ldr	r2, [pc, #132]	@ (8006584 <HAL_TIMEx_PWMN_Start+0x168>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_TIMEx_PWMN_Start+0x118>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a20      	ldr	r2, [pc, #128]	@ (8006588 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <HAL_TIMEx_PWMN_Start+0x118>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1e      	ldr	r2, [pc, #120]	@ (800658c <HAL_TIMEx_PWMN_Start+0x170>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_TIMEx_PWMN_Start+0x118>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <HAL_TIMEx_PWMN_Start+0x174>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_TIMEx_PWMN_Start+0x118>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1b      	ldr	r2, [pc, #108]	@ (8006594 <HAL_TIMEx_PWMN_Start+0x178>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_TIMEx_PWMN_Start+0x118>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1a      	ldr	r2, [pc, #104]	@ (8006598 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d115      	bne.n	8006560 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	4b18      	ldr	r3, [pc, #96]	@ (800659c <HAL_TIMEx_PWMN_Start+0x180>)
 800653c:	4013      	ands	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b06      	cmp	r3, #6
 8006544:	d015      	beq.n	8006572 <HAL_TIMEx_PWMN_Start+0x156>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800654c:	d011      	beq.n	8006572 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655e:	e008      	b.n	8006572 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	e000      	b.n	8006574 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	40013400 	.word	0x40013400
 8006594:	40014000 	.word	0x40014000
 8006598:	40015000 	.word	0x40015000
 800659c:	00010007 	.word	0x00010007

080065a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e074      	b.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a34      	ldr	r2, [pc, #208]	@ (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a33      	ldr	r2, [pc, #204]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a31      	ldr	r2, [pc, #196]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800660e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a21      	ldr	r2, [pc, #132]	@ (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d022      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006638:	d01d      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1f      	ldr	r2, [pc, #124]	@ (80066bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d018      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1d      	ldr	r2, [pc, #116]	@ (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d013      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1c      	ldr	r2, [pc, #112]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00e      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a18      	ldr	r2, [pc, #96]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d004      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a11      	ldr	r2, [pc, #68]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10c      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800667c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4313      	orrs	r3, r2
 8006686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400
 80066b8:	40015000 	.word	0x40015000
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40014000 	.word	0x40014000

080066cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e096      	b.n	8006816 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	041b      	lsls	r3, r3, #16
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a2f      	ldr	r2, [pc, #188]	@ (8006824 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2d      	ldr	r2, [pc, #180]	@ (8006828 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2c      	ldr	r2, [pc, #176]	@ (800682c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d106      	bne.n	800678e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a24      	ldr	r2, [pc, #144]	@ (8006824 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d009      	beq.n	80067ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a22      	ldr	r2, [pc, #136]	@ (8006828 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a21      	ldr	r2, [pc, #132]	@ (800682c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d12b      	bne.n	8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	051b      	lsls	r3, r3, #20
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a11      	ldr	r2, [pc, #68]	@ (8006824 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a10      	ldr	r2, [pc, #64]	@ (8006828 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0e      	ldr	r2, [pc, #56]	@ (800682c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d106      	bne.n	8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40013400 	.word	0x40013400
 800682c:	40015000 	.word	0x40015000

08006830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2204      	movs	r2, #4
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1a      	ldr	r2, [r3, #32]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e042      	b.n	800699e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fb fa26 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2224      	movs	r2, #36	@ 0x24
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc51 	bl	80071f0 <UART_SetConfig>
 800694e:	4603      	mov	r3, r0
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e022      	b.n	800699e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 ff41 	bl	80077e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006974:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006984:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 ffc8 	bl	800792c <UART_CheckIdleState>
 800699c:	4603      	mov	r3, r0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b08a      	sub	sp, #40	@ 0x28
 80069aa:	af02      	add	r7, sp, #8
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069bc:	2b20      	cmp	r3, #32
 80069be:	f040 8083 	bne.w	8006ac8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_UART_Transmit+0x28>
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e07b      	b.n	8006aca <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_UART_Transmit+0x3a>
 80069dc:	2302      	movs	r3, #2
 80069de:	e074      	b.n	8006aca <HAL_UART_Transmit+0x124>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2221      	movs	r2, #33	@ 0x21
 80069f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069f8:	f7fb fc68 	bl	80022cc <HAL_GetTick>
 80069fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a16:	d108      	bne.n	8006a2a <HAL_UART_Transmit+0x84>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e003      	b.n	8006a32 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8006a3a:	e02c      	b.n	8006a96 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2180      	movs	r1, #128	@ 0x80
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 ffbb 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e039      	b.n	8006aca <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	3302      	adds	r3, #2
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e007      	b.n	8006a84 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	781a      	ldrb	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3301      	adds	r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1cc      	bne.n	8006a3c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2140      	movs	r1, #64	@ 0x40
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 ff88 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e006      	b.n	8006aca <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e000      	b.n	8006aca <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006ac8:	2302      	movs	r3, #2
  }
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	@ 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d142      	bne.n	8006b72 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_UART_Receive_IT+0x24>
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e03b      	b.n	8006b74 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Receive_IT+0x36>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e034      	b.n	8006b74 <HAL_UART_Receive_IT+0xa0>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a17      	ldr	r2, [pc, #92]	@ (8006b7c <HAL_UART_Receive_IT+0xa8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01f      	beq.n	8006b62 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d018      	beq.n	8006b62 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	623b      	str	r3, [r7, #32]
 8006b50:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	69f9      	ldr	r1, [r7, #28]
 8006b54:	6a3a      	ldr	r2, [r7, #32]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e6      	bne.n	8006b30 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	461a      	mov	r2, r3
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fff3 	bl	8007b54 <UART_Start_Receive_IT>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	e000      	b.n	8006b74 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b72:	2302      	movs	r3, #2
  }
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	@ 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40008000 	.word	0x40008000

08006b80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b0ba      	sub	sp, #232	@ 0xe8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ba6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006baa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006bae:	4013      	ands	r3, r2
 8006bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d11b      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d015      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 82d6 	beq.w	8007196 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
      }
      return;
 8006bf2:	e2d0      	b.n	8007196 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 811f 	beq.w	8006e3c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006bfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c02:	4b8b      	ldr	r3, [pc, #556]	@ (8006e30 <HAL_UART_IRQHandler+0x2b0>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c0e:	4b89      	ldr	r3, [pc, #548]	@ (8006e34 <HAL_UART_IRQHandler+0x2b4>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8112 	beq.w	8006e3c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d011      	beq.n	8006c48 <HAL_UART_IRQHandler+0xc8>
 8006c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2201      	movs	r2, #1
 8006c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c3e:	f043 0201 	orr.w	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d011      	beq.n	8006c78 <HAL_UART_IRQHandler+0xf8>
 8006c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2202      	movs	r2, #2
 8006c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c6e:	f043 0204 	orr.w	r2, r3, #4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d011      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x128>
 8006c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2204      	movs	r2, #4
 8006c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c9e:	f043 0202 	orr.w	r2, r3, #2
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d017      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006cc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8006e30 <HAL_UART_IRQHandler+0x2b0>)
 8006cc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cda:	f043 0208 	orr.w	r2, r3, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d012      	beq.n	8006d16 <HAL_UART_IRQHandler+0x196>
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00c      	beq.n	8006d16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d0c:	f043 0220 	orr.w	r2, r3, #32
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 823c 	beq.w	800719a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d013      	beq.n	8006d56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6a:	2b40      	cmp	r3, #64	@ 0x40
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d04f      	beq.n	8006e1a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f814 	bl	8007da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b40      	cmp	r3, #64	@ 0x40
 8006d8c:	d141      	bne.n	8006e12 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1d9      	bne.n	8006d8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d013      	beq.n	8006e0a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006de6:	4a14      	ldr	r2, [pc, #80]	@ (8006e38 <HAL_UART_IRQHandler+0x2b8>)
 8006de8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fc fcbb 	bl	800376a <HAL_DMA_Abort_IT>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d017      	beq.n	8006e2a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e08:	e00f      	b.n	8006e2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9da 	bl	80071c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e10:	e00b      	b.n	8006e2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9d6 	bl	80071c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	e007      	b.n	8006e2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9d2 	bl	80071c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8006e28:	e1b7      	b.n	800719a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2a:	bf00      	nop
    return;
 8006e2c:	e1b5      	b.n	800719a <HAL_UART_IRQHandler+0x61a>
 8006e2e:	bf00      	nop
 8006e30:	10000001 	.word	0x10000001
 8006e34:	04000120 	.word	0x04000120
 8006e38:	08007e75 	.word	0x08007e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	f040 814a 	bne.w	80070da <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 8143 	beq.w	80070da <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 813c 	beq.w	80070da <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2210      	movs	r2, #16
 8006e68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e74:	2b40      	cmp	r3, #64	@ 0x40
 8006e76:	f040 80b5 	bne.w	8006fe4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 8187 	beq.w	800719e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f080 817f 	bcs.w	800719e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 8086 	bne.w	8006fc8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1da      	bne.n	8006ebc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e1      	bne.n	8006f06 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e3      	bne.n	8006f42 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f98:	f023 0310 	bic.w	r3, r3, #16
 8006f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006faa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e4      	bne.n	8006f88 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fc fb78 	bl	80036b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f8fb 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fe2:	e0dc      	b.n	800719e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 80ce 	beq.w	80071a2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007006:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80c9 	beq.w	80071a2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800701e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007032:	647b      	str	r3, [r7, #68]	@ 0x44
 8007034:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e4      	bne.n	8007010 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	623b      	str	r3, [r7, #32]
   return(result);
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800706e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e1      	bne.n	8007046 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0310 	bic.w	r3, r3, #16
 80070aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e4      	bne.n	8007096 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f880 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070d8:	e063      	b.n	80071a2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <HAL_UART_IRQHandler+0x584>
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80070fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 fb57 	bl	80087b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007102:	e051      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710c:	2b00      	cmp	r3, #0
 800710e:	d014      	beq.n	800713a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007118:	2b00      	cmp	r3, #0
 800711a:	d105      	bne.n	8007128 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800711c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800712c:	2b00      	cmp	r3, #0
 800712e:	d03a      	beq.n	80071a6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
    }
    return;
 8007138:	e035      	b.n	80071a6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_UART_IRQHandler+0x5da>
 8007146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fea4 	bl	8007ea0 <UART_EndTransmit_IT>
    return;
 8007158:	e026      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <HAL_UART_IRQHandler+0x5fa>
 8007166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800716a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fb30 	bl	80087d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007178:	e016      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d010      	beq.n	80071a8 <HAL_UART_IRQHandler+0x628>
 8007186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800718a:	2b00      	cmp	r3, #0
 800718c:	da0c      	bge.n	80071a8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fb18 	bl	80087c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007194:	e008      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
      return;
 8007196:	bf00      	nop
 8007198:	e006      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
    return;
 800719a:	bf00      	nop
 800719c:	e004      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
      return;
 800719e:	bf00      	nop
 80071a0:	e002      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
      return;
 80071a2:	bf00      	nop
 80071a4:	e000      	b.n	80071a8 <HAL_UART_IRQHandler+0x628>
    return;
 80071a6:	bf00      	nop
  }
}
 80071a8:	37e8      	adds	r7, #232	@ 0xe8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop

080071b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f4:	b08c      	sub	sp, #48	@ 0x30
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	431a      	orrs	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	431a      	orrs	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	4313      	orrs	r3, r2
 8007216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4baa      	ldr	r3, [pc, #680]	@ (80074c8 <UART_SetConfig+0x2d8>)
 8007220:	4013      	ands	r3, r2
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007228:	430b      	orrs	r3, r1
 800722a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a9f      	ldr	r2, [pc, #636]	@ (80074cc <UART_SetConfig+0x2dc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007258:	4313      	orrs	r3, r2
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007266:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007270:	430b      	orrs	r3, r1
 8007272:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	f023 010f 	bic.w	r1, r3, #15
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a90      	ldr	r2, [pc, #576]	@ (80074d0 <UART_SetConfig+0x2e0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d125      	bne.n	80072e0 <UART_SetConfig+0xf0>
 8007294:	4b8f      	ldr	r3, [pc, #572]	@ (80074d4 <UART_SetConfig+0x2e4>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d81a      	bhi.n	80072d8 <UART_SetConfig+0xe8>
 80072a2:	a201      	add	r2, pc, #4	@ (adr r2, 80072a8 <UART_SetConfig+0xb8>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072be:	e116      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072c0:	2302      	movs	r3, #2
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c6:	e112      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072c8:	2304      	movs	r3, #4
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ce:	e10e      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072d0:	2308      	movs	r3, #8
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d6:	e10a      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072d8:	2310      	movs	r3, #16
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072de:	e106      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a7c      	ldr	r2, [pc, #496]	@ (80074d8 <UART_SetConfig+0x2e8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d138      	bne.n	800735c <UART_SetConfig+0x16c>
 80072ea:	4b7a      	ldr	r3, [pc, #488]	@ (80074d4 <UART_SetConfig+0x2e4>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f0:	f003 030c 	and.w	r3, r3, #12
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	d82d      	bhi.n	8007354 <UART_SetConfig+0x164>
 80072f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007300 <UART_SetConfig+0x110>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007335 	.word	0x08007335
 8007304:	08007355 	.word	0x08007355
 8007308:	08007355 	.word	0x08007355
 800730c:	08007355 	.word	0x08007355
 8007310:	08007345 	.word	0x08007345
 8007314:	08007355 	.word	0x08007355
 8007318:	08007355 	.word	0x08007355
 800731c:	08007355 	.word	0x08007355
 8007320:	0800733d 	.word	0x0800733d
 8007324:	08007355 	.word	0x08007355
 8007328:	08007355 	.word	0x08007355
 800732c:	08007355 	.word	0x08007355
 8007330:	0800734d 	.word	0x0800734d
 8007334:	2300      	movs	r3, #0
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800733a:	e0d8      	b.n	80074ee <UART_SetConfig+0x2fe>
 800733c:	2302      	movs	r3, #2
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007342:	e0d4      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007344:	2304      	movs	r3, #4
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734a:	e0d0      	b.n	80074ee <UART_SetConfig+0x2fe>
 800734c:	2308      	movs	r3, #8
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007352:	e0cc      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007354:	2310      	movs	r3, #16
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735a:	e0c8      	b.n	80074ee <UART_SetConfig+0x2fe>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a5e      	ldr	r2, [pc, #376]	@ (80074dc <UART_SetConfig+0x2ec>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d125      	bne.n	80073b2 <UART_SetConfig+0x1c2>
 8007366:	4b5b      	ldr	r3, [pc, #364]	@ (80074d4 <UART_SetConfig+0x2e4>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007370:	2b30      	cmp	r3, #48	@ 0x30
 8007372:	d016      	beq.n	80073a2 <UART_SetConfig+0x1b2>
 8007374:	2b30      	cmp	r3, #48	@ 0x30
 8007376:	d818      	bhi.n	80073aa <UART_SetConfig+0x1ba>
 8007378:	2b20      	cmp	r3, #32
 800737a:	d00a      	beq.n	8007392 <UART_SetConfig+0x1a2>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d814      	bhi.n	80073aa <UART_SetConfig+0x1ba>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <UART_SetConfig+0x19a>
 8007384:	2b10      	cmp	r3, #16
 8007386:	d008      	beq.n	800739a <UART_SetConfig+0x1aa>
 8007388:	e00f      	b.n	80073aa <UART_SetConfig+0x1ba>
 800738a:	2300      	movs	r3, #0
 800738c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007390:	e0ad      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007392:	2302      	movs	r3, #2
 8007394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007398:	e0a9      	b.n	80074ee <UART_SetConfig+0x2fe>
 800739a:	2304      	movs	r3, #4
 800739c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a0:	e0a5      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073a2:	2308      	movs	r3, #8
 80073a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a8:	e0a1      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073aa:	2310      	movs	r3, #16
 80073ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b0:	e09d      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a4a      	ldr	r2, [pc, #296]	@ (80074e0 <UART_SetConfig+0x2f0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d125      	bne.n	8007408 <UART_SetConfig+0x218>
 80073bc:	4b45      	ldr	r3, [pc, #276]	@ (80074d4 <UART_SetConfig+0x2e4>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80073c8:	d016      	beq.n	80073f8 <UART_SetConfig+0x208>
 80073ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80073cc:	d818      	bhi.n	8007400 <UART_SetConfig+0x210>
 80073ce:	2b80      	cmp	r3, #128	@ 0x80
 80073d0:	d00a      	beq.n	80073e8 <UART_SetConfig+0x1f8>
 80073d2:	2b80      	cmp	r3, #128	@ 0x80
 80073d4:	d814      	bhi.n	8007400 <UART_SetConfig+0x210>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <UART_SetConfig+0x1f0>
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d008      	beq.n	80073f0 <UART_SetConfig+0x200>
 80073de:	e00f      	b.n	8007400 <UART_SetConfig+0x210>
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e6:	e082      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073e8:	2302      	movs	r3, #2
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ee:	e07e      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f6:	e07a      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073f8:	2308      	movs	r3, #8
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	e076      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007400:	2310      	movs	r3, #16
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007406:	e072      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a35      	ldr	r2, [pc, #212]	@ (80074e4 <UART_SetConfig+0x2f4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d12a      	bne.n	8007468 <UART_SetConfig+0x278>
 8007412:	4b30      	ldr	r3, [pc, #192]	@ (80074d4 <UART_SetConfig+0x2e4>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800741c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007420:	d01a      	beq.n	8007458 <UART_SetConfig+0x268>
 8007422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007426:	d81b      	bhi.n	8007460 <UART_SetConfig+0x270>
 8007428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800742c:	d00c      	beq.n	8007448 <UART_SetConfig+0x258>
 800742e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007432:	d815      	bhi.n	8007460 <UART_SetConfig+0x270>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <UART_SetConfig+0x250>
 8007438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800743c:	d008      	beq.n	8007450 <UART_SetConfig+0x260>
 800743e:	e00f      	b.n	8007460 <UART_SetConfig+0x270>
 8007440:	2300      	movs	r3, #0
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007446:	e052      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007448:	2302      	movs	r3, #2
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800744e:	e04e      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007450:	2304      	movs	r3, #4
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007456:	e04a      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007458:	2308      	movs	r3, #8
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745e:	e046      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007460:	2310      	movs	r3, #16
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007466:	e042      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a17      	ldr	r2, [pc, #92]	@ (80074cc <UART_SetConfig+0x2dc>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d13a      	bne.n	80074e8 <UART_SetConfig+0x2f8>
 8007472:	4b18      	ldr	r3, [pc, #96]	@ (80074d4 <UART_SetConfig+0x2e4>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007478:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800747c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007480:	d01a      	beq.n	80074b8 <UART_SetConfig+0x2c8>
 8007482:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007486:	d81b      	bhi.n	80074c0 <UART_SetConfig+0x2d0>
 8007488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800748c:	d00c      	beq.n	80074a8 <UART_SetConfig+0x2b8>
 800748e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007492:	d815      	bhi.n	80074c0 <UART_SetConfig+0x2d0>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <UART_SetConfig+0x2b0>
 8007498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749c:	d008      	beq.n	80074b0 <UART_SetConfig+0x2c0>
 800749e:	e00f      	b.n	80074c0 <UART_SetConfig+0x2d0>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a6:	e022      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ae:	e01e      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b6:	e01a      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074be:	e016      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c6:	e012      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074c8:	cfff69f3 	.word	0xcfff69f3
 80074cc:	40008000 	.word	0x40008000
 80074d0:	40013800 	.word	0x40013800
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40004400 	.word	0x40004400
 80074dc:	40004800 	.word	0x40004800
 80074e0:	40004c00 	.word	0x40004c00
 80074e4:	40005000 	.word	0x40005000
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4aae      	ldr	r2, [pc, #696]	@ (80077ac <UART_SetConfig+0x5bc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	f040 8097 	bne.w	8007628 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d823      	bhi.n	800754a <UART_SetConfig+0x35a>
 8007502:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <UART_SetConfig+0x318>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800752d 	.word	0x0800752d
 800750c:	0800754b 	.word	0x0800754b
 8007510:	08007535 	.word	0x08007535
 8007514:	0800754b 	.word	0x0800754b
 8007518:	0800753b 	.word	0x0800753b
 800751c:	0800754b 	.word	0x0800754b
 8007520:	0800754b 	.word	0x0800754b
 8007524:	0800754b 	.word	0x0800754b
 8007528:	08007543 	.word	0x08007543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800752c:	f7fd f8b8 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8007530:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007532:	e010      	b.n	8007556 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007534:	4b9e      	ldr	r3, [pc, #632]	@ (80077b0 <UART_SetConfig+0x5c0>)
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007538:	e00d      	b.n	8007556 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753a:	f7fd f843 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800753e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007540:	e009      	b.n	8007556 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007548:	e005      	b.n	8007556 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8130 	beq.w	80077be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007562:	4a94      	ldr	r2, [pc, #592]	@ (80077b4 <UART_SetConfig+0x5c4>)
 8007564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007568:	461a      	mov	r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007570:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4413      	add	r3, r2
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	429a      	cmp	r2, r3
 8007580:	d305      	bcc.n	800758e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	429a      	cmp	r2, r3
 800758c:	d903      	bls.n	8007596 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007594:	e113      	b.n	80077be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	2200      	movs	r2, #0
 800759a:	60bb      	str	r3, [r7, #8]
 800759c:	60fa      	str	r2, [r7, #12]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	4a84      	ldr	r2, [pc, #528]	@ (80077b4 <UART_SetConfig+0x5c4>)
 80075a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2200      	movs	r2, #0
 80075ac:	603b      	str	r3, [r7, #0]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075b8:	f7f9 fb18 	bl	8000bec <__aeabi_uldivmod>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4610      	mov	r0, r2
 80075c2:	4619      	mov	r1, r3
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	020b      	lsls	r3, r1, #8
 80075ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075d2:	0202      	lsls	r2, r0, #8
 80075d4:	6979      	ldr	r1, [r7, #20]
 80075d6:	6849      	ldr	r1, [r1, #4]
 80075d8:	0849      	lsrs	r1, r1, #1
 80075da:	2000      	movs	r0, #0
 80075dc:	460c      	mov	r4, r1
 80075de:	4605      	mov	r5, r0
 80075e0:	eb12 0804 	adds.w	r8, r2, r4
 80075e4:	eb43 0905 	adc.w	r9, r3, r5
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	469a      	mov	sl, r3
 80075f0:	4693      	mov	fp, r2
 80075f2:	4652      	mov	r2, sl
 80075f4:	465b      	mov	r3, fp
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f9 faf7 	bl	8000bec <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4613      	mov	r3, r2
 8007604:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800760c:	d308      	bcc.n	8007620 <UART_SetConfig+0x430>
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007614:	d204      	bcs.n	8007620 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a3a      	ldr	r2, [r7, #32]
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e0ce      	b.n	80077be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007626:	e0ca      	b.n	80077be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007630:	d166      	bne.n	8007700 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007632:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007636:	2b08      	cmp	r3, #8
 8007638:	d827      	bhi.n	800768a <UART_SetConfig+0x49a>
 800763a:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <UART_SetConfig+0x450>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007665 	.word	0x08007665
 8007644:	0800766d 	.word	0x0800766d
 8007648:	08007675 	.word	0x08007675
 800764c:	0800768b 	.word	0x0800768b
 8007650:	0800767b 	.word	0x0800767b
 8007654:	0800768b 	.word	0x0800768b
 8007658:	0800768b 	.word	0x0800768b
 800765c:	0800768b 	.word	0x0800768b
 8007660:	08007683 	.word	0x08007683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007664:	f7fd f81c 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8007668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800766a:	e014      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800766c:	f7fd f82e 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 8007670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007672:	e010      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007674:	4b4e      	ldr	r3, [pc, #312]	@ (80077b0 <UART_SetConfig+0x5c0>)
 8007676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007678:	e00d      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767a:	f7fc ffa3 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800767e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007680:	e009      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007688:	e005      	b.n	8007696 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8090 	beq.w	80077be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a2:	4a44      	ldr	r2, [pc, #272]	@ (80077b4 <UART_SetConfig+0x5c4>)
 80076a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b0:	005a      	lsls	r2, r3, #1
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	441a      	add	r2, r3
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	d916      	bls.n	80076f8 <UART_SetConfig+0x508>
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d0:	d212      	bcs.n	80076f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f023 030f 	bic.w	r3, r3, #15
 80076da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	8bfb      	ldrh	r3, [r7, #30]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	8bfa      	ldrh	r2, [r7, #30]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	e062      	b.n	80077be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076fe:	e05e      	b.n	80077be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007700:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007704:	2b08      	cmp	r3, #8
 8007706:	d828      	bhi.n	800775a <UART_SetConfig+0x56a>
 8007708:	a201      	add	r2, pc, #4	@ (adr r2, 8007710 <UART_SetConfig+0x520>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007735 	.word	0x08007735
 8007714:	0800773d 	.word	0x0800773d
 8007718:	08007745 	.word	0x08007745
 800771c:	0800775b 	.word	0x0800775b
 8007720:	0800774b 	.word	0x0800774b
 8007724:	0800775b 	.word	0x0800775b
 8007728:	0800775b 	.word	0x0800775b
 800772c:	0800775b 	.word	0x0800775b
 8007730:	08007753 	.word	0x08007753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007734:	f7fc ffb4 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8007738:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800773a:	e014      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800773c:	f7fc ffc6 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 8007740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007742:	e010      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007744:	4b1a      	ldr	r3, [pc, #104]	@ (80077b0 <UART_SetConfig+0x5c0>)
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007748:	e00d      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800774a:	f7fc ff3b 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800774e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007750:	e009      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007758:	e005      	b.n	8007766 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007764:	bf00      	nop
    }

    if (pclk != 0U)
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d028      	beq.n	80077be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	4a10      	ldr	r2, [pc, #64]	@ (80077b4 <UART_SetConfig+0x5c4>)
 8007772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007776:	461a      	mov	r2, r3
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	fbb3 f2f2 	udiv	r2, r3, r2
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	441a      	add	r2, r3
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	fbb2 f3f3 	udiv	r3, r2, r3
 800778e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b0f      	cmp	r3, #15
 8007794:	d910      	bls.n	80077b8 <UART_SetConfig+0x5c8>
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800779c:	d20c      	bcs.n	80077b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60da      	str	r2, [r3, #12]
 80077a8:	e009      	b.n	80077be <UART_SetConfig+0x5ce>
 80077aa:	bf00      	nop
 80077ac:	40008000 	.word	0x40008000
 80077b0:	00f42400 	.word	0x00f42400
 80077b4:	08009f40 	.word	0x08009f40
      }
      else
      {
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2200      	movs	r2, #0
 80077d2:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2200      	movs	r2, #0
 80077d8:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80077da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3730      	adds	r7, #48	@ 0x30
 80077e2:	46bd      	mov	sp, r7
 80077e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01a      	beq.n	80078fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e6:	d10a      	bne.n	80078fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800793c:	f7fa fcc6 	bl	80022cc <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d10e      	bne.n	800796e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007950:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f82f 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e025      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b04      	cmp	r3, #4
 800797a:	d10e      	bne.n	800799a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800797c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f819 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e00f      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b09c      	sub	sp, #112	@ 0x70
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d2:	e0a9      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	f000 80a5 	beq.w	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079de:	f7fa fc75 	bl	80022cc <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d302      	bcc.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80079ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d140      	bne.n	8007a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a04:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007a08:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a14:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a46:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e069      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d051      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a92:	d149      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007abe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007af0:	623a      	str	r2, [r7, #32]
 8007af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69f9      	ldr	r1, [r7, #28]
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e010      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4013      	ands	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	f43f af46 	beq.w	80079d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3770      	adds	r7, #112	@ 0x70
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b0a3      	sub	sp, #140	@ 0x8c
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b86:	d10e      	bne.n	8007ba6 <UART_Start_Receive_IT+0x52>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <UART_Start_Receive_IT+0x48>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007b96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b9a:	e02d      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	22ff      	movs	r2, #255	@ 0xff
 8007ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ba4:	e028      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10d      	bne.n	8007bca <UART_Start_Receive_IT+0x76>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <UART_Start_Receive_IT+0x6c>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	22ff      	movs	r2, #255	@ 0xff
 8007bba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bbe:	e01b      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	227f      	movs	r2, #127	@ 0x7f
 8007bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bc8:	e016      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bd2:	d10d      	bne.n	8007bf0 <UART_Start_Receive_IT+0x9c>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <UART_Start_Receive_IT+0x92>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	227f      	movs	r2, #127	@ 0x7f
 8007be0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007be4:	e008      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	223f      	movs	r2, #63	@ 0x3f
 8007bea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bee:	e003      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2222      	movs	r2, #34	@ 0x22
 8007c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3308      	adds	r3, #8
 8007c28:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c2c:	673a      	str	r2, [r7, #112]	@ 0x70
 8007c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007c32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007c3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e3      	bne.n	8007c08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c48:	d153      	bne.n	8007cf2 <UART_Start_Receive_IT+0x19e>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c50:	88fa      	ldrh	r2, [r7, #6]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d34d      	bcc.n	8007cf2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c5e:	d107      	bne.n	8007c70 <UART_Start_Receive_IT+0x11c>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8007d98 <UART_Start_Receive_IT+0x244>)
 8007c6c:	671a      	str	r2, [r3, #112]	@ 0x70
 8007c6e:	e002      	b.n	8007c76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a4a      	ldr	r2, [pc, #296]	@ (8007d9c <UART_Start_Receive_IT+0x248>)
 8007c74:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007caa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007cae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e4      	bne.n	8007c86 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007cdc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007cde:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e5      	bne.n	8007cbc <UART_Start_Receive_IT+0x168>
 8007cf0:	e04a      	b.n	8007d88 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cfa:	d107      	bne.n	8007d0c <UART_Start_Receive_IT+0x1b8>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4a26      	ldr	r2, [pc, #152]	@ (8007da0 <UART_Start_Receive_IT+0x24c>)
 8007d08:	671a      	str	r2, [r3, #112]	@ 0x70
 8007d0a:	e002      	b.n	8007d12 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a25      	ldr	r2, [pc, #148]	@ (8007da4 <UART_Start_Receive_IT+0x250>)
 8007d10:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d019      	beq.n	8007d56 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007d36:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d42:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_Start_Receive_IT+0x1ce>
 8007d54:	e018      	b.n	8007d88 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	613b      	str	r3, [r7, #16]
   return(result);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f043 0320 	orr.w	r3, r3, #32
 8007d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d74:	623b      	str	r3, [r7, #32]
 8007d76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	6a3a      	ldr	r2, [r7, #32]
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	378c      	adds	r7, #140	@ 0x8c
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	080084b1 	.word	0x080084b1
 8007d9c:	080081b9 	.word	0x080081b9
 8007da0:	08008057 	.word	0x08008057
 8007da4:	08007ef7 	.word	0x08007ef7

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b095      	sub	sp, #84	@ 0x54
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dce:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e3      	bne.n	8007de2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d118      	bne.n	8007e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f023 0310 	bic.w	r3, r3, #16
 8007e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e6      	bne.n	8007e22 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8007e68:	bf00      	nop
 8007e6a:	3754      	adds	r7, #84	@ 0x54
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff f996 	bl	80071c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	61bb      	str	r3, [r7, #24]
 8007ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6979      	ldr	r1, [r7, #20]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e6      	bne.n	8007ea8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff f961 	bl	80071b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eee:	bf00      	nop
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b096      	sub	sp, #88	@ 0x58
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f04:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f0e:	2b22      	cmp	r3, #34	@ 0x22
 8007f10:	f040 8095 	bne.w	800803e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f1e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007f22:	b2d9      	uxtb	r1, r3
 8007f24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2e:	400a      	ands	r2, r1
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d178      	bne.n	800804e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f70:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f7c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f82:	e841 2300 	strex	r3, r2, [r1]
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e6      	bne.n	8007f5c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fae:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d12e      	bne.n	8008036 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0310 	bic.w	r3, r3, #16
 8007ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	69b9      	ldr	r1, [r7, #24]
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	617b      	str	r3, [r7, #20]
   return(result);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e6      	bne.n	8007fde <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b10      	cmp	r3, #16
 800801c:	d103      	bne.n	8008026 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2210      	movs	r2, #16
 8008024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff f8d2 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008034:	e00b      	b.n	800804e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fa f864 	bl	8002104 <HAL_UART_RxCpltCallback>
}
 800803c:	e007      	b.n	800804e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0208 	orr.w	r2, r2, #8
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	3758      	adds	r7, #88	@ 0x58
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b096      	sub	sp, #88	@ 0x58
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008064:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800806e:	2b22      	cmp	r3, #34	@ 0x22
 8008070:	f040 8095 	bne.w	800819e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008082:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008084:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008088:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800808c:	4013      	ands	r3, r2
 800808e:	b29a      	uxth	r2, r3
 8008090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008092:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008098:	1c9a      	adds	r2, r3, #2
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d178      	bne.n	80081ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080da:	643b      	str	r3, [r7, #64]	@ 0x40
 80080dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e6      	bne.n	80080bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3308      	adds	r3, #8
 80080f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800810e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e5      	bne.n	80080ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008134:	2b01      	cmp	r3, #1
 8008136:	d12e      	bne.n	8008196 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	60bb      	str	r3, [r7, #8]
   return(result);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f023 0310 	bic.w	r3, r3, #16
 8008152:	647b      	str	r3, [r7, #68]	@ 0x44
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6979      	ldr	r1, [r7, #20]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	613b      	str	r3, [r7, #16]
   return(result);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e6      	bne.n	800813e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	2b10      	cmp	r3, #16
 800817c:	d103      	bne.n	8008186 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2210      	movs	r2, #16
 8008184:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff f822 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008194:	e00b      	b.n	80081ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7f9 ffb4 	bl	8002104 <HAL_UART_RxCpltCallback>
}
 800819c:	e007      	b.n	80081ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0208 	orr.w	r2, r2, #8
 80081ac:	619a      	str	r2, [r3, #24]
}
 80081ae:	bf00      	nop
 80081b0:	3758      	adds	r7, #88	@ 0x58
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b0a6      	sub	sp, #152	@ 0x98
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80081c6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ee:	2b22      	cmp	r3, #34	@ 0x22
 80081f0:	f040 814f 	bne.w	8008492 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80081fa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081fe:	e0f6      	b.n	80083ee <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008206:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800820a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800820e:	b2d9      	uxtb	r1, r3
 8008210:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008214:	b2da      	uxtb	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800821a:	400a      	ands	r2, r1
 800821c:	b2d2      	uxtb	r2, r2
 800821e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008246:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800824a:	f003 0307 	and.w	r3, r3, #7
 800824e:	2b00      	cmp	r3, #0
 8008250:	d053      	beq.n	80082fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008252:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d011      	beq.n	8008282 <UART_RxISR_8BIT_FIFOEN+0xca>
 800825e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2201      	movs	r2, #1
 8008270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008278:	f043 0201 	orr.w	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008282:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d011      	beq.n	80082b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800828e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00b      	beq.n	80082b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2202      	movs	r2, #2
 80082a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082a8:	f043 0204 	orr.w	r2, r3, #4
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d011      	beq.n	80082e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80082be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00b      	beq.n	80082e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2204      	movs	r2, #4
 80082d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d8:	f043 0202 	orr.w	r2, r3, #2
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d006      	beq.n	80082fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fe ff69 	bl	80071c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d173      	bne.n	80083ee <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800831a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800832a:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800832e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e4      	bne.n	8008306 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800834c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800834e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008352:	f023 0301 	bic.w	r3, r3, #1
 8008356:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008360:	657a      	str	r2, [r7, #84]	@ 0x54
 8008362:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008366:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800836e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e3      	bne.n	800833c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d12e      	bne.n	80083e8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a0:	f023 0310 	bic.w	r3, r3, #16
 80083a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80083b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e6      	bne.n	8008390 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d103      	bne.n	80083d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2210      	movs	r2, #16
 80083d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7fe fef9 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
 80083e6:	e002      	b.n	80083ee <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7f9 fe8b 	bl	8002104 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80083f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f47f aefe 	bne.w	8008200 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800840a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800840e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8008412:	2b00      	cmp	r3, #0
 8008414:	d045      	beq.n	80084a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800841c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008420:	429a      	cmp	r2, r3
 8008422:	d23e      	bcs.n	80084a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	61fb      	str	r3, [r7, #28]
   return(result);
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800843a:	673b      	str	r3, [r7, #112]	@ 0x70
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800844a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e5      	bne.n	8008424 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a14      	ldr	r2, [pc, #80]	@ (80084ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800845c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60bb      	str	r3, [r7, #8]
   return(result);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f043 0320 	orr.w	r3, r3, #32
 8008472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6979      	ldr	r1, [r7, #20]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	613b      	str	r3, [r7, #16]
   return(result);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008490:	e007      	b.n	80084a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	699a      	ldr	r2, [r3, #24]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0208 	orr.w	r2, r2, #8
 80084a0:	619a      	str	r2, [r3, #24]
}
 80084a2:	bf00      	nop
 80084a4:	3798      	adds	r7, #152	@ 0x98
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	08007ef7 	.word	0x08007ef7

080084b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b0a8      	sub	sp, #160	@ 0xa0
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80084be:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e6:	2b22      	cmp	r3, #34	@ 0x22
 80084e8:	f040 8153 	bne.w	8008792 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80084f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084f6:	e0fa      	b.n	80086ee <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fe:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800850a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800850e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8008512:	4013      	ands	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800851a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008520:	1c9a      	adds	r2, r3, #2
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008542:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d053      	beq.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800854e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d011      	beq.n	800857e <UART_RxISR_16BIT_FIFOEN+0xce>
 800855a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800855e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2201      	movs	r2, #1
 800856c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008574:	f043 0201 	orr.w	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800857e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d011      	beq.n	80085ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800858a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2202      	movs	r2, #2
 800859c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085a4:	f043 0204 	orr.w	r2, r3, #4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d011      	beq.n	80085de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80085ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2204      	movs	r2, #4
 80085cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085d4:	f043 0202 	orr.w	r2, r3, #2
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fe fdeb 	bl	80071c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d175      	bne.n	80086ee <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008612:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008616:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008624:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008626:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800862a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e4      	bne.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800864a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008660:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008662:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008666:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800866e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e1      	bne.n	8008638 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008686:	2b01      	cmp	r3, #1
 8008688:	d12e      	bne.n	80086e8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800869e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a0:	f023 0310 	bic.w	r3, r3, #16
 80086a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80086ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80086b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e6      	bne.n	8008690 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	f003 0310 	and.w	r3, r3, #16
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d103      	bne.n	80086d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2210      	movs	r2, #16
 80086d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fe fd79 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
 80086e6:	e002      	b.n	80086ee <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7f9 fd0b 	bl	8002104 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <UART_RxISR_16BIT_FIFOEN+0x254>
 80086f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f47f aefa 	bne.w	80084f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800870a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800870e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8008712:	2b00      	cmp	r3, #0
 8008714:	d045      	beq.n	80087a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800871c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008720:	429a      	cmp	r2, r3
 8008722:	d23e      	bcs.n	80087a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	623b      	str	r3, [r7, #32]
   return(result);
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800873a:	677b      	str	r3, [r7, #116]	@ 0x74
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008744:	633a      	str	r2, [r7, #48]	@ 0x30
 8008746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800874a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e5      	bne.n	8008724 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a14      	ldr	r2, [pc, #80]	@ (80087ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800875c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	60fb      	str	r3, [r7, #12]
   return(result);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f043 0320 	orr.w	r3, r3, #32
 8008772:	673b      	str	r3, [r7, #112]	@ 0x70
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	461a      	mov	r2, r3
 800877a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	69b9      	ldr	r1, [r7, #24]
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	617b      	str	r3, [r7, #20]
   return(result);
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e6      	bne.n	800875e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008790:	e007      	b.n	80087a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0208 	orr.w	r2, r2, #8
 80087a0:	619a      	str	r2, [r3, #24]
}
 80087a2:	bf00      	nop
 80087a4:	37a0      	adds	r7, #160	@ 0xa0
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	08008057 	.word	0x08008057

080087b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_UARTEx_DisableFifoMode+0x16>
 80087fe:	2302      	movs	r3, #2
 8008800:	e027      	b.n	8008852 <HAL_UARTEx_DisableFifoMode+0x66>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2224      	movs	r2, #36	@ 0x24
 800880e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0201 	bic.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008830:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008872:	2302      	movs	r3, #2
 8008874:	e02d      	b.n	80088d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2224      	movs	r2, #36	@ 0x24
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0201 	bic.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f850 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e02d      	b.n	800894e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2224      	movs	r2, #36	@ 0x24
 80088fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0201 	bic.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f812 	bl	8008958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008964:	2b00      	cmp	r3, #0
 8008966:	d108      	bne.n	800897a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008978:	e031      	b.n	80089de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800897a:	2308      	movs	r3, #8
 800897c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800897e:	2308      	movs	r3, #8
 8008980:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	0e5b      	lsrs	r3, r3, #25
 800898a:	b2db      	uxtb	r3, r3
 800898c:	f003 0307 	and.w	r3, r3, #7
 8008990:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	0f5b      	lsrs	r3, r3, #29
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	7b3a      	ldrb	r2, [r7, #12]
 80089a6:	4911      	ldr	r1, [pc, #68]	@ (80089ec <UARTEx_SetNbDataToProcess+0x94>)
 80089a8:	5c8a      	ldrb	r2, [r1, r2]
 80089aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089ae:	7b3a      	ldrb	r2, [r7, #12]
 80089b0:	490f      	ldr	r1, [pc, #60]	@ (80089f0 <UARTEx_SetNbDataToProcess+0x98>)
 80089b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	7b7a      	ldrb	r2, [r7, #13]
 80089c4:	4909      	ldr	r1, [pc, #36]	@ (80089ec <UARTEx_SetNbDataToProcess+0x94>)
 80089c6:	5c8a      	ldrb	r2, [r1, r2]
 80089c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089cc:	7b7a      	ldrb	r2, [r7, #13]
 80089ce:	4908      	ldr	r1, [pc, #32]	@ (80089f0 <UARTEx_SetNbDataToProcess+0x98>)
 80089d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	08009f58 	.word	0x08009f58
 80089f0:	08009f60 	.word	0x08009f60

080089f4 <atoi>:
 80089f4:	220a      	movs	r2, #10
 80089f6:	2100      	movs	r1, #0
 80089f8:	f000 b87a 	b.w	8008af0 <strtol>

080089fc <_strtol_l.constprop.0>:
 80089fc:	2b24      	cmp	r3, #36	@ 0x24
 80089fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a02:	4686      	mov	lr, r0
 8008a04:	4690      	mov	r8, r2
 8008a06:	d801      	bhi.n	8008a0c <_strtol_l.constprop.0+0x10>
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d106      	bne.n	8008a1a <_strtol_l.constprop.0+0x1e>
 8008a0c:	f000 fa5e 	bl	8008ecc <__errno>
 8008a10:	2316      	movs	r3, #22
 8008a12:	6003      	str	r3, [r0, #0]
 8008a14:	2000      	movs	r0, #0
 8008a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1a:	4834      	ldr	r0, [pc, #208]	@ (8008aec <_strtol_l.constprop.0+0xf0>)
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	462a      	mov	r2, r5
 8008a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a24:	5d06      	ldrb	r6, [r0, r4]
 8008a26:	f016 0608 	ands.w	r6, r6, #8
 8008a2a:	d1f8      	bne.n	8008a1e <_strtol_l.constprop.0+0x22>
 8008a2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008a2e:	d12d      	bne.n	8008a8c <_strtol_l.constprop.0+0x90>
 8008a30:	782c      	ldrb	r4, [r5, #0]
 8008a32:	2601      	movs	r6, #1
 8008a34:	1c95      	adds	r5, r2, #2
 8008a36:	f033 0210 	bics.w	r2, r3, #16
 8008a3a:	d109      	bne.n	8008a50 <_strtol_l.constprop.0+0x54>
 8008a3c:	2c30      	cmp	r4, #48	@ 0x30
 8008a3e:	d12a      	bne.n	8008a96 <_strtol_l.constprop.0+0x9a>
 8008a40:	782a      	ldrb	r2, [r5, #0]
 8008a42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a46:	2a58      	cmp	r2, #88	@ 0x58
 8008a48:	d125      	bne.n	8008a96 <_strtol_l.constprop.0+0x9a>
 8008a4a:	786c      	ldrb	r4, [r5, #1]
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	3502      	adds	r5, #2
 8008a50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a58:	2200      	movs	r2, #0
 8008a5a:	fbbc f9f3 	udiv	r9, ip, r3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a68:	2f09      	cmp	r7, #9
 8008a6a:	d81b      	bhi.n	8008aa4 <_strtol_l.constprop.0+0xa8>
 8008a6c:	463c      	mov	r4, r7
 8008a6e:	42a3      	cmp	r3, r4
 8008a70:	dd27      	ble.n	8008ac2 <_strtol_l.constprop.0+0xc6>
 8008a72:	1c57      	adds	r7, r2, #1
 8008a74:	d007      	beq.n	8008a86 <_strtol_l.constprop.0+0x8a>
 8008a76:	4581      	cmp	r9, r0
 8008a78:	d320      	bcc.n	8008abc <_strtol_l.constprop.0+0xc0>
 8008a7a:	d101      	bne.n	8008a80 <_strtol_l.constprop.0+0x84>
 8008a7c:	45a2      	cmp	sl, r4
 8008a7e:	db1d      	blt.n	8008abc <_strtol_l.constprop.0+0xc0>
 8008a80:	fb00 4003 	mla	r0, r0, r3, r4
 8008a84:	2201      	movs	r2, #1
 8008a86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a8a:	e7eb      	b.n	8008a64 <_strtol_l.constprop.0+0x68>
 8008a8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a8e:	bf04      	itt	eq
 8008a90:	782c      	ldrbeq	r4, [r5, #0]
 8008a92:	1c95      	addeq	r5, r2, #2
 8008a94:	e7cf      	b.n	8008a36 <_strtol_l.constprop.0+0x3a>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1da      	bne.n	8008a50 <_strtol_l.constprop.0+0x54>
 8008a9a:	2c30      	cmp	r4, #48	@ 0x30
 8008a9c:	bf0c      	ite	eq
 8008a9e:	2308      	moveq	r3, #8
 8008aa0:	230a      	movne	r3, #10
 8008aa2:	e7d5      	b.n	8008a50 <_strtol_l.constprop.0+0x54>
 8008aa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008aa8:	2f19      	cmp	r7, #25
 8008aaa:	d801      	bhi.n	8008ab0 <_strtol_l.constprop.0+0xb4>
 8008aac:	3c37      	subs	r4, #55	@ 0x37
 8008aae:	e7de      	b.n	8008a6e <_strtol_l.constprop.0+0x72>
 8008ab0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008ab4:	2f19      	cmp	r7, #25
 8008ab6:	d804      	bhi.n	8008ac2 <_strtol_l.constprop.0+0xc6>
 8008ab8:	3c57      	subs	r4, #87	@ 0x57
 8008aba:	e7d8      	b.n	8008a6e <_strtol_l.constprop.0+0x72>
 8008abc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac0:	e7e1      	b.n	8008a86 <_strtol_l.constprop.0+0x8a>
 8008ac2:	1c53      	adds	r3, r2, #1
 8008ac4:	d108      	bne.n	8008ad8 <_strtol_l.constprop.0+0xdc>
 8008ac6:	2322      	movs	r3, #34	@ 0x22
 8008ac8:	f8ce 3000 	str.w	r3, [lr]
 8008acc:	4660      	mov	r0, ip
 8008ace:	f1b8 0f00 	cmp.w	r8, #0
 8008ad2:	d0a0      	beq.n	8008a16 <_strtol_l.constprop.0+0x1a>
 8008ad4:	1e69      	subs	r1, r5, #1
 8008ad6:	e006      	b.n	8008ae6 <_strtol_l.constprop.0+0xea>
 8008ad8:	b106      	cbz	r6, 8008adc <_strtol_l.constprop.0+0xe0>
 8008ada:	4240      	negs	r0, r0
 8008adc:	f1b8 0f00 	cmp.w	r8, #0
 8008ae0:	d099      	beq.n	8008a16 <_strtol_l.constprop.0+0x1a>
 8008ae2:	2a00      	cmp	r2, #0
 8008ae4:	d1f6      	bne.n	8008ad4 <_strtol_l.constprop.0+0xd8>
 8008ae6:	f8c8 1000 	str.w	r1, [r8]
 8008aea:	e794      	b.n	8008a16 <_strtol_l.constprop.0+0x1a>
 8008aec:	08009f69 	.word	0x08009f69

08008af0 <strtol>:
 8008af0:	4613      	mov	r3, r2
 8008af2:	460a      	mov	r2, r1
 8008af4:	4601      	mov	r1, r0
 8008af6:	4802      	ldr	r0, [pc, #8]	@ (8008b00 <strtol+0x10>)
 8008af8:	6800      	ldr	r0, [r0, #0]
 8008afa:	f7ff bf7f 	b.w	80089fc <_strtol_l.constprop.0>
 8008afe:	bf00      	nop
 8008b00:	200000d4 	.word	0x200000d4

08008b04 <std>:
 8008b04:	2300      	movs	r3, #0
 8008b06:	b510      	push	{r4, lr}
 8008b08:	4604      	mov	r4, r0
 8008b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b12:	6083      	str	r3, [r0, #8]
 8008b14:	8181      	strh	r1, [r0, #12]
 8008b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b18:	81c2      	strh	r2, [r0, #14]
 8008b1a:	6183      	str	r3, [r0, #24]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	2208      	movs	r2, #8
 8008b20:	305c      	adds	r0, #92	@ 0x5c
 8008b22:	f000 f928 	bl	8008d76 <memset>
 8008b26:	4b0d      	ldr	r3, [pc, #52]	@ (8008b5c <std+0x58>)
 8008b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b60 <std+0x5c>)
 8008b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b64 <std+0x60>)
 8008b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b32:	4b0d      	ldr	r3, [pc, #52]	@ (8008b68 <std+0x64>)
 8008b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b36:	4b0d      	ldr	r3, [pc, #52]	@ (8008b6c <std+0x68>)
 8008b38:	6224      	str	r4, [r4, #32]
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	d006      	beq.n	8008b4c <std+0x48>
 8008b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b42:	4294      	cmp	r4, r2
 8008b44:	d002      	beq.n	8008b4c <std+0x48>
 8008b46:	33d0      	adds	r3, #208	@ 0xd0
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	d105      	bne.n	8008b58 <std+0x54>
 8008b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b54:	f000 b9e4 	b.w	8008f20 <__retarget_lock_init_recursive>
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	bf00      	nop
 8008b5c:	08008cf1 	.word	0x08008cf1
 8008b60:	08008d13 	.word	0x08008d13
 8008b64:	08008d4b 	.word	0x08008d4b
 8008b68:	08008d6f 	.word	0x08008d6f
 8008b6c:	200004e4 	.word	0x200004e4

08008b70 <stdio_exit_handler>:
 8008b70:	4a02      	ldr	r2, [pc, #8]	@ (8008b7c <stdio_exit_handler+0xc>)
 8008b72:	4903      	ldr	r1, [pc, #12]	@ (8008b80 <stdio_exit_handler+0x10>)
 8008b74:	4803      	ldr	r0, [pc, #12]	@ (8008b84 <stdio_exit_handler+0x14>)
 8008b76:	f000 b869 	b.w	8008c4c <_fwalk_sglue>
 8008b7a:	bf00      	nop
 8008b7c:	200000c8 	.word	0x200000c8
 8008b80:	08009839 	.word	0x08009839
 8008b84:	200000d8 	.word	0x200000d8

08008b88 <cleanup_stdio>:
 8008b88:	6841      	ldr	r1, [r0, #4]
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bbc <cleanup_stdio+0x34>)
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	b510      	push	{r4, lr}
 8008b90:	4604      	mov	r4, r0
 8008b92:	d001      	beq.n	8008b98 <cleanup_stdio+0x10>
 8008b94:	f000 fe50 	bl	8009838 <_fflush_r>
 8008b98:	68a1      	ldr	r1, [r4, #8]
 8008b9a:	4b09      	ldr	r3, [pc, #36]	@ (8008bc0 <cleanup_stdio+0x38>)
 8008b9c:	4299      	cmp	r1, r3
 8008b9e:	d002      	beq.n	8008ba6 <cleanup_stdio+0x1e>
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fe49 	bl	8009838 <_fflush_r>
 8008ba6:	68e1      	ldr	r1, [r4, #12]
 8008ba8:	4b06      	ldr	r3, [pc, #24]	@ (8008bc4 <cleanup_stdio+0x3c>)
 8008baa:	4299      	cmp	r1, r3
 8008bac:	d004      	beq.n	8008bb8 <cleanup_stdio+0x30>
 8008bae:	4620      	mov	r0, r4
 8008bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb4:	f000 be40 	b.w	8009838 <_fflush_r>
 8008bb8:	bd10      	pop	{r4, pc}
 8008bba:	bf00      	nop
 8008bbc:	200004e4 	.word	0x200004e4
 8008bc0:	2000054c 	.word	0x2000054c
 8008bc4:	200005b4 	.word	0x200005b4

08008bc8 <global_stdio_init.part.0>:
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf8 <global_stdio_init.part.0+0x30>)
 8008bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8008bfc <global_stdio_init.part.0+0x34>)
 8008bce:	4a0c      	ldr	r2, [pc, #48]	@ (8008c00 <global_stdio_init.part.0+0x38>)
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2104      	movs	r1, #4
 8008bd8:	f7ff ff94 	bl	8008b04 <std>
 8008bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008be0:	2201      	movs	r2, #1
 8008be2:	2109      	movs	r1, #9
 8008be4:	f7ff ff8e 	bl	8008b04 <std>
 8008be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008bec:	2202      	movs	r2, #2
 8008bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf2:	2112      	movs	r1, #18
 8008bf4:	f7ff bf86 	b.w	8008b04 <std>
 8008bf8:	2000061c 	.word	0x2000061c
 8008bfc:	200004e4 	.word	0x200004e4
 8008c00:	08008b71 	.word	0x08008b71

08008c04 <__sfp_lock_acquire>:
 8008c04:	4801      	ldr	r0, [pc, #4]	@ (8008c0c <__sfp_lock_acquire+0x8>)
 8008c06:	f000 b98c 	b.w	8008f22 <__retarget_lock_acquire_recursive>
 8008c0a:	bf00      	nop
 8008c0c:	20000625 	.word	0x20000625

08008c10 <__sfp_lock_release>:
 8008c10:	4801      	ldr	r0, [pc, #4]	@ (8008c18 <__sfp_lock_release+0x8>)
 8008c12:	f000 b987 	b.w	8008f24 <__retarget_lock_release_recursive>
 8008c16:	bf00      	nop
 8008c18:	20000625 	.word	0x20000625

08008c1c <__sinit>:
 8008c1c:	b510      	push	{r4, lr}
 8008c1e:	4604      	mov	r4, r0
 8008c20:	f7ff fff0 	bl	8008c04 <__sfp_lock_acquire>
 8008c24:	6a23      	ldr	r3, [r4, #32]
 8008c26:	b11b      	cbz	r3, 8008c30 <__sinit+0x14>
 8008c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c2c:	f7ff bff0 	b.w	8008c10 <__sfp_lock_release>
 8008c30:	4b04      	ldr	r3, [pc, #16]	@ (8008c44 <__sinit+0x28>)
 8008c32:	6223      	str	r3, [r4, #32]
 8008c34:	4b04      	ldr	r3, [pc, #16]	@ (8008c48 <__sinit+0x2c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f5      	bne.n	8008c28 <__sinit+0xc>
 8008c3c:	f7ff ffc4 	bl	8008bc8 <global_stdio_init.part.0>
 8008c40:	e7f2      	b.n	8008c28 <__sinit+0xc>
 8008c42:	bf00      	nop
 8008c44:	08008b89 	.word	0x08008b89
 8008c48:	2000061c 	.word	0x2000061c

08008c4c <_fwalk_sglue>:
 8008c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c50:	4607      	mov	r7, r0
 8008c52:	4688      	mov	r8, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	2600      	movs	r6, #0
 8008c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8008c60:	d505      	bpl.n	8008c6e <_fwalk_sglue+0x22>
 8008c62:	6824      	ldr	r4, [r4, #0]
 8008c64:	2c00      	cmp	r4, #0
 8008c66:	d1f7      	bne.n	8008c58 <_fwalk_sglue+0xc>
 8008c68:	4630      	mov	r0, r6
 8008c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d907      	bls.n	8008c84 <_fwalk_sglue+0x38>
 8008c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	d003      	beq.n	8008c84 <_fwalk_sglue+0x38>
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4638      	mov	r0, r7
 8008c80:	47c0      	blx	r8
 8008c82:	4306      	orrs	r6, r0
 8008c84:	3568      	adds	r5, #104	@ 0x68
 8008c86:	e7e9      	b.n	8008c5c <_fwalk_sglue+0x10>

08008c88 <sniprintf>:
 8008c88:	b40c      	push	{r2, r3}
 8008c8a:	b530      	push	{r4, r5, lr}
 8008c8c:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <sniprintf+0x64>)
 8008c8e:	1e0c      	subs	r4, r1, #0
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	b09d      	sub	sp, #116	@ 0x74
 8008c94:	da08      	bge.n	8008ca8 <sniprintf+0x20>
 8008c96:	238b      	movs	r3, #139	@ 0x8b
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9e:	b01d      	add	sp, #116	@ 0x74
 8008ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca4:	b002      	add	sp, #8
 8008ca6:	4770      	bx	lr
 8008ca8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008cac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008cb0:	bf14      	ite	ne
 8008cb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008cb6:	4623      	moveq	r3, r4
 8008cb8:	9304      	str	r3, [sp, #16]
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008cc0:	9002      	str	r0, [sp, #8]
 8008cc2:	9006      	str	r0, [sp, #24]
 8008cc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008cc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008cca:	ab21      	add	r3, sp, #132	@ 0x84
 8008ccc:	a902      	add	r1, sp, #8
 8008cce:	4628      	mov	r0, r5
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	f000 faa3 	bl	800921c <_svfiprintf_r>
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	bfbc      	itt	lt
 8008cda:	238b      	movlt	r3, #139	@ 0x8b
 8008cdc:	602b      	strlt	r3, [r5, #0]
 8008cde:	2c00      	cmp	r4, #0
 8008ce0:	d0dd      	beq.n	8008c9e <sniprintf+0x16>
 8008ce2:	9b02      	ldr	r3, [sp, #8]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	e7d9      	b.n	8008c9e <sniprintf+0x16>
 8008cea:	bf00      	nop
 8008cec:	200000d4 	.word	0x200000d4

08008cf0 <__sread>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf8:	f000 f8c4 	bl	8008e84 <_read_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	bfab      	itete	ge
 8008d00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d02:	89a3      	ldrhlt	r3, [r4, #12]
 8008d04:	181b      	addge	r3, r3, r0
 8008d06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d0a:	bfac      	ite	ge
 8008d0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d0e:	81a3      	strhlt	r3, [r4, #12]
 8008d10:	bd10      	pop	{r4, pc}

08008d12 <__swrite>:
 8008d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	461f      	mov	r7, r3
 8008d18:	898b      	ldrh	r3, [r1, #12]
 8008d1a:	05db      	lsls	r3, r3, #23
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	4616      	mov	r6, r2
 8008d22:	d505      	bpl.n	8008d30 <__swrite+0x1e>
 8008d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d28:	2302      	movs	r3, #2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f000 f898 	bl	8008e60 <_lseek_r>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	4632      	mov	r2, r6
 8008d3e:	463b      	mov	r3, r7
 8008d40:	4628      	mov	r0, r5
 8008d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d46:	f000 b8af 	b.w	8008ea8 <_write_r>

08008d4a <__sseek>:
 8008d4a:	b510      	push	{r4, lr}
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d52:	f000 f885 	bl	8008e60 <_lseek_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	bf15      	itete	ne
 8008d5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d66:	81a3      	strheq	r3, [r4, #12]
 8008d68:	bf18      	it	ne
 8008d6a:	81a3      	strhne	r3, [r4, #12]
 8008d6c:	bd10      	pop	{r4, pc}

08008d6e <__sclose>:
 8008d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d72:	f000 b865 	b.w	8008e40 <_close_r>

08008d76 <memset>:
 8008d76:	4402      	add	r2, r0
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d100      	bne.n	8008d80 <memset+0xa>
 8008d7e:	4770      	bx	lr
 8008d80:	f803 1b01 	strb.w	r1, [r3], #1
 8008d84:	e7f9      	b.n	8008d7a <memset+0x4>
	...

08008d88 <strtok>:
 8008d88:	4b16      	ldr	r3, [pc, #88]	@ (8008de4 <strtok+0x5c>)
 8008d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8e:	681f      	ldr	r7, [r3, #0]
 8008d90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008d92:	4605      	mov	r5, r0
 8008d94:	460e      	mov	r6, r1
 8008d96:	b9ec      	cbnz	r4, 8008dd4 <strtok+0x4c>
 8008d98:	2050      	movs	r0, #80	@ 0x50
 8008d9a:	f000 f92d 	bl	8008ff8 <malloc>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	6478      	str	r0, [r7, #68]	@ 0x44
 8008da2:	b920      	cbnz	r0, 8008dae <strtok+0x26>
 8008da4:	4b10      	ldr	r3, [pc, #64]	@ (8008de8 <strtok+0x60>)
 8008da6:	4811      	ldr	r0, [pc, #68]	@ (8008dec <strtok+0x64>)
 8008da8:	215b      	movs	r1, #91	@ 0x5b
 8008daa:	f000 f8bd 	bl	8008f28 <__assert_func>
 8008dae:	e9c0 4400 	strd	r4, r4, [r0]
 8008db2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008db6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008dba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008dbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008dc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008dc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008dca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008dce:	6184      	str	r4, [r0, #24]
 8008dd0:	7704      	strb	r4, [r0, #28]
 8008dd2:	6244      	str	r4, [r0, #36]	@ 0x24
 8008dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4628      	mov	r0, r5
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008de0:	f000 b806 	b.w	8008df0 <__strtok_r>
 8008de4:	200000d4 	.word	0x200000d4
 8008de8:	0800a069 	.word	0x0800a069
 8008dec:	0800a080 	.word	0x0800a080

08008df0 <__strtok_r>:
 8008df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008df2:	4604      	mov	r4, r0
 8008df4:	b908      	cbnz	r0, 8008dfa <__strtok_r+0xa>
 8008df6:	6814      	ldr	r4, [r2, #0]
 8008df8:	b144      	cbz	r4, 8008e0c <__strtok_r+0x1c>
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008e00:	460f      	mov	r7, r1
 8008e02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e06:	b91e      	cbnz	r6, 8008e10 <__strtok_r+0x20>
 8008e08:	b965      	cbnz	r5, 8008e24 <__strtok_r+0x34>
 8008e0a:	6015      	str	r5, [r2, #0]
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e005      	b.n	8008e1c <__strtok_r+0x2c>
 8008e10:	42b5      	cmp	r5, r6
 8008e12:	d1f6      	bne.n	8008e02 <__strtok_r+0x12>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1f0      	bne.n	8008dfa <__strtok_r+0xa>
 8008e18:	6014      	str	r4, [r2, #0]
 8008e1a:	7003      	strb	r3, [r0, #0]
 8008e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e1e:	461c      	mov	r4, r3
 8008e20:	e00c      	b.n	8008e3c <__strtok_r+0x4c>
 8008e22:	b915      	cbnz	r5, 8008e2a <__strtok_r+0x3a>
 8008e24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e28:	460e      	mov	r6, r1
 8008e2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008e2e:	42ab      	cmp	r3, r5
 8008e30:	d1f7      	bne.n	8008e22 <__strtok_r+0x32>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0f3      	beq.n	8008e1e <__strtok_r+0x2e>
 8008e36:	2300      	movs	r3, #0
 8008e38:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008e3c:	6014      	str	r4, [r2, #0]
 8008e3e:	e7ed      	b.n	8008e1c <__strtok_r+0x2c>

08008e40 <_close_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d06      	ldr	r5, [pc, #24]	@ (8008e5c <_close_r+0x1c>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7f8 fc7e 	bl	800174c <_close>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_close_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_close_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20000620 	.word	0x20000620

08008e60 <_lseek_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	@ (8008e80 <_lseek_r+0x20>)
 8008e64:	4604      	mov	r4, r0
 8008e66:	4608      	mov	r0, r1
 8008e68:	4611      	mov	r1, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f8 fc93 	bl	800179a <_lseek>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_lseek_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_lseek_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	20000620 	.word	0x20000620

08008e84 <_read_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d07      	ldr	r5, [pc, #28]	@ (8008ea4 <_read_r+0x20>)
 8008e88:	4604      	mov	r4, r0
 8008e8a:	4608      	mov	r0, r1
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	602a      	str	r2, [r5, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	f7f8 fc21 	bl	80016da <_read>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_read_r+0x1e>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_read_r+0x1e>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20000620 	.word	0x20000620

08008ea8 <_write_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ec8 <_write_r+0x20>)
 8008eac:	4604      	mov	r4, r0
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f8 fc2c 	bl	8001714 <_write>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_write_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_write_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20000620 	.word	0x20000620

08008ecc <__errno>:
 8008ecc:	4b01      	ldr	r3, [pc, #4]	@ (8008ed4 <__errno+0x8>)
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200000d4 	.word	0x200000d4

08008ed8 <__libc_init_array>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	4d0d      	ldr	r5, [pc, #52]	@ (8008f10 <__libc_init_array+0x38>)
 8008edc:	4c0d      	ldr	r4, [pc, #52]	@ (8008f14 <__libc_init_array+0x3c>)
 8008ede:	1b64      	subs	r4, r4, r5
 8008ee0:	10a4      	asrs	r4, r4, #2
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	42a6      	cmp	r6, r4
 8008ee6:	d109      	bne.n	8008efc <__libc_init_array+0x24>
 8008ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8008f18 <__libc_init_array+0x40>)
 8008eea:	4c0c      	ldr	r4, [pc, #48]	@ (8008f1c <__libc_init_array+0x44>)
 8008eec:	f000 fff0 	bl	8009ed0 <_init>
 8008ef0:	1b64      	subs	r4, r4, r5
 8008ef2:	10a4      	asrs	r4, r4, #2
 8008ef4:	2600      	movs	r6, #0
 8008ef6:	42a6      	cmp	r6, r4
 8008ef8:	d105      	bne.n	8008f06 <__libc_init_array+0x2e>
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f00:	4798      	blx	r3
 8008f02:	3601      	adds	r6, #1
 8008f04:	e7ee      	b.n	8008ee4 <__libc_init_array+0xc>
 8008f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0a:	4798      	blx	r3
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	e7f2      	b.n	8008ef6 <__libc_init_array+0x1e>
 8008f10:	0800a154 	.word	0x0800a154
 8008f14:	0800a154 	.word	0x0800a154
 8008f18:	0800a154 	.word	0x0800a154
 8008f1c:	0800a158 	.word	0x0800a158

08008f20 <__retarget_lock_init_recursive>:
 8008f20:	4770      	bx	lr

08008f22 <__retarget_lock_acquire_recursive>:
 8008f22:	4770      	bx	lr

08008f24 <__retarget_lock_release_recursive>:
 8008f24:	4770      	bx	lr
	...

08008f28 <__assert_func>:
 8008f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f2a:	4614      	mov	r4, r2
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <__assert_func+0x2c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4605      	mov	r5, r0
 8008f34:	68d8      	ldr	r0, [r3, #12]
 8008f36:	b954      	cbnz	r4, 8008f4e <__assert_func+0x26>
 8008f38:	4b07      	ldr	r3, [pc, #28]	@ (8008f58 <__assert_func+0x30>)
 8008f3a:	461c      	mov	r4, r3
 8008f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f40:	9100      	str	r1, [sp, #0]
 8008f42:	462b      	mov	r3, r5
 8008f44:	4905      	ldr	r1, [pc, #20]	@ (8008f5c <__assert_func+0x34>)
 8008f46:	f000 fc9f 	bl	8009888 <fiprintf>
 8008f4a:	f000 fce7 	bl	800991c <abort>
 8008f4e:	4b04      	ldr	r3, [pc, #16]	@ (8008f60 <__assert_func+0x38>)
 8008f50:	e7f4      	b.n	8008f3c <__assert_func+0x14>
 8008f52:	bf00      	nop
 8008f54:	200000d4 	.word	0x200000d4
 8008f58:	0800a115 	.word	0x0800a115
 8008f5c:	0800a0e7 	.word	0x0800a0e7
 8008f60:	0800a0da 	.word	0x0800a0da

08008f64 <_free_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4605      	mov	r5, r0
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	d041      	beq.n	8008ff0 <_free_r+0x8c>
 8008f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f70:	1f0c      	subs	r4, r1, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfb8      	it	lt
 8008f76:	18e4      	addlt	r4, r4, r3
 8008f78:	f000 f8e8 	bl	800914c <__malloc_lock>
 8008f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff4 <_free_r+0x90>)
 8008f7e:	6813      	ldr	r3, [r2, #0]
 8008f80:	b933      	cbnz	r3, 8008f90 <_free_r+0x2c>
 8008f82:	6063      	str	r3, [r4, #4]
 8008f84:	6014      	str	r4, [r2, #0]
 8008f86:	4628      	mov	r0, r5
 8008f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f8c:	f000 b8e4 	b.w	8009158 <__malloc_unlock>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d908      	bls.n	8008fa6 <_free_r+0x42>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	1821      	adds	r1, r4, r0
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf01      	itttt	eq
 8008f9c:	6819      	ldreq	r1, [r3, #0]
 8008f9e:	685b      	ldreq	r3, [r3, #4]
 8008fa0:	1809      	addeq	r1, r1, r0
 8008fa2:	6021      	streq	r1, [r4, #0]
 8008fa4:	e7ed      	b.n	8008f82 <_free_r+0x1e>
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	b10b      	cbz	r3, 8008fb0 <_free_r+0x4c>
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d9fa      	bls.n	8008fa6 <_free_r+0x42>
 8008fb0:	6811      	ldr	r1, [r2, #0]
 8008fb2:	1850      	adds	r0, r2, r1
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d10b      	bne.n	8008fd0 <_free_r+0x6c>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	4401      	add	r1, r0
 8008fbc:	1850      	adds	r0, r2, r1
 8008fbe:	4283      	cmp	r3, r0
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	d1e0      	bne.n	8008f86 <_free_r+0x22>
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	6053      	str	r3, [r2, #4]
 8008fca:	4408      	add	r0, r1
 8008fcc:	6010      	str	r0, [r2, #0]
 8008fce:	e7da      	b.n	8008f86 <_free_r+0x22>
 8008fd0:	d902      	bls.n	8008fd8 <_free_r+0x74>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	e7d6      	b.n	8008f86 <_free_r+0x22>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	1821      	adds	r1, r4, r0
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	bf04      	itt	eq
 8008fe0:	6819      	ldreq	r1, [r3, #0]
 8008fe2:	685b      	ldreq	r3, [r3, #4]
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	bf04      	itt	eq
 8008fe8:	1809      	addeq	r1, r1, r0
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	6054      	str	r4, [r2, #4]
 8008fee:	e7ca      	b.n	8008f86 <_free_r+0x22>
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
 8008ff2:	bf00      	nop
 8008ff4:	2000062c 	.word	0x2000062c

08008ff8 <malloc>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	@ (8009004 <malloc+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f000 b825 	b.w	800904c <_malloc_r>
 8009002:	bf00      	nop
 8009004:	200000d4 	.word	0x200000d4

08009008 <sbrk_aligned>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4e0f      	ldr	r6, [pc, #60]	@ (8009048 <sbrk_aligned+0x40>)
 800900c:	460c      	mov	r4, r1
 800900e:	6831      	ldr	r1, [r6, #0]
 8009010:	4605      	mov	r5, r0
 8009012:	b911      	cbnz	r1, 800901a <sbrk_aligned+0x12>
 8009014:	f000 fc64 	bl	80098e0 <_sbrk_r>
 8009018:	6030      	str	r0, [r6, #0]
 800901a:	4621      	mov	r1, r4
 800901c:	4628      	mov	r0, r5
 800901e:	f000 fc5f 	bl	80098e0 <_sbrk_r>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	d103      	bne.n	800902e <sbrk_aligned+0x26>
 8009026:	f04f 34ff 	mov.w	r4, #4294967295
 800902a:	4620      	mov	r0, r4
 800902c:	bd70      	pop	{r4, r5, r6, pc}
 800902e:	1cc4      	adds	r4, r0, #3
 8009030:	f024 0403 	bic.w	r4, r4, #3
 8009034:	42a0      	cmp	r0, r4
 8009036:	d0f8      	beq.n	800902a <sbrk_aligned+0x22>
 8009038:	1a21      	subs	r1, r4, r0
 800903a:	4628      	mov	r0, r5
 800903c:	f000 fc50 	bl	80098e0 <_sbrk_r>
 8009040:	3001      	adds	r0, #1
 8009042:	d1f2      	bne.n	800902a <sbrk_aligned+0x22>
 8009044:	e7ef      	b.n	8009026 <sbrk_aligned+0x1e>
 8009046:	bf00      	nop
 8009048:	20000628 	.word	0x20000628

0800904c <_malloc_r>:
 800904c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009050:	1ccd      	adds	r5, r1, #3
 8009052:	f025 0503 	bic.w	r5, r5, #3
 8009056:	3508      	adds	r5, #8
 8009058:	2d0c      	cmp	r5, #12
 800905a:	bf38      	it	cc
 800905c:	250c      	movcc	r5, #12
 800905e:	2d00      	cmp	r5, #0
 8009060:	4606      	mov	r6, r0
 8009062:	db01      	blt.n	8009068 <_malloc_r+0x1c>
 8009064:	42a9      	cmp	r1, r5
 8009066:	d904      	bls.n	8009072 <_malloc_r+0x26>
 8009068:	230c      	movs	r3, #12
 800906a:	6033      	str	r3, [r6, #0]
 800906c:	2000      	movs	r0, #0
 800906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009148 <_malloc_r+0xfc>
 8009076:	f000 f869 	bl	800914c <__malloc_lock>
 800907a:	f8d8 3000 	ldr.w	r3, [r8]
 800907e:	461c      	mov	r4, r3
 8009080:	bb44      	cbnz	r4, 80090d4 <_malloc_r+0x88>
 8009082:	4629      	mov	r1, r5
 8009084:	4630      	mov	r0, r6
 8009086:	f7ff ffbf 	bl	8009008 <sbrk_aligned>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	4604      	mov	r4, r0
 800908e:	d158      	bne.n	8009142 <_malloc_r+0xf6>
 8009090:	f8d8 4000 	ldr.w	r4, [r8]
 8009094:	4627      	mov	r7, r4
 8009096:	2f00      	cmp	r7, #0
 8009098:	d143      	bne.n	8009122 <_malloc_r+0xd6>
 800909a:	2c00      	cmp	r4, #0
 800909c:	d04b      	beq.n	8009136 <_malloc_r+0xea>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	4639      	mov	r1, r7
 80090a2:	4630      	mov	r0, r6
 80090a4:	eb04 0903 	add.w	r9, r4, r3
 80090a8:	f000 fc1a 	bl	80098e0 <_sbrk_r>
 80090ac:	4581      	cmp	r9, r0
 80090ae:	d142      	bne.n	8009136 <_malloc_r+0xea>
 80090b0:	6821      	ldr	r1, [r4, #0]
 80090b2:	1a6d      	subs	r5, r5, r1
 80090b4:	4629      	mov	r1, r5
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7ff ffa6 	bl	8009008 <sbrk_aligned>
 80090bc:	3001      	adds	r0, #1
 80090be:	d03a      	beq.n	8009136 <_malloc_r+0xea>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	442b      	add	r3, r5
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	f8d8 3000 	ldr.w	r3, [r8]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	bb62      	cbnz	r2, 8009128 <_malloc_r+0xdc>
 80090ce:	f8c8 7000 	str.w	r7, [r8]
 80090d2:	e00f      	b.n	80090f4 <_malloc_r+0xa8>
 80090d4:	6822      	ldr	r2, [r4, #0]
 80090d6:	1b52      	subs	r2, r2, r5
 80090d8:	d420      	bmi.n	800911c <_malloc_r+0xd0>
 80090da:	2a0b      	cmp	r2, #11
 80090dc:	d917      	bls.n	800910e <_malloc_r+0xc2>
 80090de:	1961      	adds	r1, r4, r5
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	6025      	str	r5, [r4, #0]
 80090e4:	bf18      	it	ne
 80090e6:	6059      	strne	r1, [r3, #4]
 80090e8:	6863      	ldr	r3, [r4, #4]
 80090ea:	bf08      	it	eq
 80090ec:	f8c8 1000 	streq.w	r1, [r8]
 80090f0:	5162      	str	r2, [r4, r5]
 80090f2:	604b      	str	r3, [r1, #4]
 80090f4:	4630      	mov	r0, r6
 80090f6:	f000 f82f 	bl	8009158 <__malloc_unlock>
 80090fa:	f104 000b 	add.w	r0, r4, #11
 80090fe:	1d23      	adds	r3, r4, #4
 8009100:	f020 0007 	bic.w	r0, r0, #7
 8009104:	1ac2      	subs	r2, r0, r3
 8009106:	bf1c      	itt	ne
 8009108:	1a1b      	subne	r3, r3, r0
 800910a:	50a3      	strne	r3, [r4, r2]
 800910c:	e7af      	b.n	800906e <_malloc_r+0x22>
 800910e:	6862      	ldr	r2, [r4, #4]
 8009110:	42a3      	cmp	r3, r4
 8009112:	bf0c      	ite	eq
 8009114:	f8c8 2000 	streq.w	r2, [r8]
 8009118:	605a      	strne	r2, [r3, #4]
 800911a:	e7eb      	b.n	80090f4 <_malloc_r+0xa8>
 800911c:	4623      	mov	r3, r4
 800911e:	6864      	ldr	r4, [r4, #4]
 8009120:	e7ae      	b.n	8009080 <_malloc_r+0x34>
 8009122:	463c      	mov	r4, r7
 8009124:	687f      	ldr	r7, [r7, #4]
 8009126:	e7b6      	b.n	8009096 <_malloc_r+0x4a>
 8009128:	461a      	mov	r2, r3
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	42a3      	cmp	r3, r4
 800912e:	d1fb      	bne.n	8009128 <_malloc_r+0xdc>
 8009130:	2300      	movs	r3, #0
 8009132:	6053      	str	r3, [r2, #4]
 8009134:	e7de      	b.n	80090f4 <_malloc_r+0xa8>
 8009136:	230c      	movs	r3, #12
 8009138:	6033      	str	r3, [r6, #0]
 800913a:	4630      	mov	r0, r6
 800913c:	f000 f80c 	bl	8009158 <__malloc_unlock>
 8009140:	e794      	b.n	800906c <_malloc_r+0x20>
 8009142:	6005      	str	r5, [r0, #0]
 8009144:	e7d6      	b.n	80090f4 <_malloc_r+0xa8>
 8009146:	bf00      	nop
 8009148:	2000062c 	.word	0x2000062c

0800914c <__malloc_lock>:
 800914c:	4801      	ldr	r0, [pc, #4]	@ (8009154 <__malloc_lock+0x8>)
 800914e:	f7ff bee8 	b.w	8008f22 <__retarget_lock_acquire_recursive>
 8009152:	bf00      	nop
 8009154:	20000624 	.word	0x20000624

08009158 <__malloc_unlock>:
 8009158:	4801      	ldr	r0, [pc, #4]	@ (8009160 <__malloc_unlock+0x8>)
 800915a:	f7ff bee3 	b.w	8008f24 <__retarget_lock_release_recursive>
 800915e:	bf00      	nop
 8009160:	20000624 	.word	0x20000624

08009164 <__ssputs_r>:
 8009164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009168:	688e      	ldr	r6, [r1, #8]
 800916a:	461f      	mov	r7, r3
 800916c:	42be      	cmp	r6, r7
 800916e:	680b      	ldr	r3, [r1, #0]
 8009170:	4682      	mov	sl, r0
 8009172:	460c      	mov	r4, r1
 8009174:	4690      	mov	r8, r2
 8009176:	d82d      	bhi.n	80091d4 <__ssputs_r+0x70>
 8009178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800917c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009180:	d026      	beq.n	80091d0 <__ssputs_r+0x6c>
 8009182:	6965      	ldr	r5, [r4, #20]
 8009184:	6909      	ldr	r1, [r1, #16]
 8009186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800918a:	eba3 0901 	sub.w	r9, r3, r1
 800918e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009192:	1c7b      	adds	r3, r7, #1
 8009194:	444b      	add	r3, r9
 8009196:	106d      	asrs	r5, r5, #1
 8009198:	429d      	cmp	r5, r3
 800919a:	bf38      	it	cc
 800919c:	461d      	movcc	r5, r3
 800919e:	0553      	lsls	r3, r2, #21
 80091a0:	d527      	bpl.n	80091f2 <__ssputs_r+0x8e>
 80091a2:	4629      	mov	r1, r5
 80091a4:	f7ff ff52 	bl	800904c <_malloc_r>
 80091a8:	4606      	mov	r6, r0
 80091aa:	b360      	cbz	r0, 8009206 <__ssputs_r+0xa2>
 80091ac:	6921      	ldr	r1, [r4, #16]
 80091ae:	464a      	mov	r2, r9
 80091b0:	f000 fba6 	bl	8009900 <memcpy>
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	6126      	str	r6, [r4, #16]
 80091c2:	6165      	str	r5, [r4, #20]
 80091c4:	444e      	add	r6, r9
 80091c6:	eba5 0509 	sub.w	r5, r5, r9
 80091ca:	6026      	str	r6, [r4, #0]
 80091cc:	60a5      	str	r5, [r4, #8]
 80091ce:	463e      	mov	r6, r7
 80091d0:	42be      	cmp	r6, r7
 80091d2:	d900      	bls.n	80091d6 <__ssputs_r+0x72>
 80091d4:	463e      	mov	r6, r7
 80091d6:	6820      	ldr	r0, [r4, #0]
 80091d8:	4632      	mov	r2, r6
 80091da:	4641      	mov	r1, r8
 80091dc:	f000 fb66 	bl	80098ac <memmove>
 80091e0:	68a3      	ldr	r3, [r4, #8]
 80091e2:	1b9b      	subs	r3, r3, r6
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	4433      	add	r3, r6
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	2000      	movs	r0, #0
 80091ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f2:	462a      	mov	r2, r5
 80091f4:	f000 fb99 	bl	800992a <_realloc_r>
 80091f8:	4606      	mov	r6, r0
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d1e0      	bne.n	80091c0 <__ssputs_r+0x5c>
 80091fe:	6921      	ldr	r1, [r4, #16]
 8009200:	4650      	mov	r0, sl
 8009202:	f7ff feaf 	bl	8008f64 <_free_r>
 8009206:	230c      	movs	r3, #12
 8009208:	f8ca 3000 	str.w	r3, [sl]
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009212:	81a3      	strh	r3, [r4, #12]
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	e7e9      	b.n	80091ee <__ssputs_r+0x8a>
	...

0800921c <_svfiprintf_r>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	4698      	mov	r8, r3
 8009222:	898b      	ldrh	r3, [r1, #12]
 8009224:	061b      	lsls	r3, r3, #24
 8009226:	b09d      	sub	sp, #116	@ 0x74
 8009228:	4607      	mov	r7, r0
 800922a:	460d      	mov	r5, r1
 800922c:	4614      	mov	r4, r2
 800922e:	d510      	bpl.n	8009252 <_svfiprintf_r+0x36>
 8009230:	690b      	ldr	r3, [r1, #16]
 8009232:	b973      	cbnz	r3, 8009252 <_svfiprintf_r+0x36>
 8009234:	2140      	movs	r1, #64	@ 0x40
 8009236:	f7ff ff09 	bl	800904c <_malloc_r>
 800923a:	6028      	str	r0, [r5, #0]
 800923c:	6128      	str	r0, [r5, #16]
 800923e:	b930      	cbnz	r0, 800924e <_svfiprintf_r+0x32>
 8009240:	230c      	movs	r3, #12
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	b01d      	add	sp, #116	@ 0x74
 800924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924e:	2340      	movs	r3, #64	@ 0x40
 8009250:	616b      	str	r3, [r5, #20]
 8009252:	2300      	movs	r3, #0
 8009254:	9309      	str	r3, [sp, #36]	@ 0x24
 8009256:	2320      	movs	r3, #32
 8009258:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800925c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009260:	2330      	movs	r3, #48	@ 0x30
 8009262:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009400 <_svfiprintf_r+0x1e4>
 8009266:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800926a:	f04f 0901 	mov.w	r9, #1
 800926e:	4623      	mov	r3, r4
 8009270:	469a      	mov	sl, r3
 8009272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009276:	b10a      	cbz	r2, 800927c <_svfiprintf_r+0x60>
 8009278:	2a25      	cmp	r2, #37	@ 0x25
 800927a:	d1f9      	bne.n	8009270 <_svfiprintf_r+0x54>
 800927c:	ebba 0b04 	subs.w	fp, sl, r4
 8009280:	d00b      	beq.n	800929a <_svfiprintf_r+0x7e>
 8009282:	465b      	mov	r3, fp
 8009284:	4622      	mov	r2, r4
 8009286:	4629      	mov	r1, r5
 8009288:	4638      	mov	r0, r7
 800928a:	f7ff ff6b 	bl	8009164 <__ssputs_r>
 800928e:	3001      	adds	r0, #1
 8009290:	f000 80a7 	beq.w	80093e2 <_svfiprintf_r+0x1c6>
 8009294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009296:	445a      	add	r2, fp
 8009298:	9209      	str	r2, [sp, #36]	@ 0x24
 800929a:	f89a 3000 	ldrb.w	r3, [sl]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 809f 	beq.w	80093e2 <_svfiprintf_r+0x1c6>
 80092a4:	2300      	movs	r3, #0
 80092a6:	f04f 32ff 	mov.w	r2, #4294967295
 80092aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ae:	f10a 0a01 	add.w	sl, sl, #1
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	9307      	str	r3, [sp, #28]
 80092b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80092bc:	4654      	mov	r4, sl
 80092be:	2205      	movs	r2, #5
 80092c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c4:	484e      	ldr	r0, [pc, #312]	@ (8009400 <_svfiprintf_r+0x1e4>)
 80092c6:	f7f6 ffc3 	bl	8000250 <memchr>
 80092ca:	9a04      	ldr	r2, [sp, #16]
 80092cc:	b9d8      	cbnz	r0, 8009306 <_svfiprintf_r+0xea>
 80092ce:	06d0      	lsls	r0, r2, #27
 80092d0:	bf44      	itt	mi
 80092d2:	2320      	movmi	r3, #32
 80092d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092d8:	0711      	lsls	r1, r2, #28
 80092da:	bf44      	itt	mi
 80092dc:	232b      	movmi	r3, #43	@ 0x2b
 80092de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092e2:	f89a 3000 	ldrb.w	r3, [sl]
 80092e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e8:	d015      	beq.n	8009316 <_svfiprintf_r+0xfa>
 80092ea:	9a07      	ldr	r2, [sp, #28]
 80092ec:	4654      	mov	r4, sl
 80092ee:	2000      	movs	r0, #0
 80092f0:	f04f 0c0a 	mov.w	ip, #10
 80092f4:	4621      	mov	r1, r4
 80092f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092fa:	3b30      	subs	r3, #48	@ 0x30
 80092fc:	2b09      	cmp	r3, #9
 80092fe:	d94b      	bls.n	8009398 <_svfiprintf_r+0x17c>
 8009300:	b1b0      	cbz	r0, 8009330 <_svfiprintf_r+0x114>
 8009302:	9207      	str	r2, [sp, #28]
 8009304:	e014      	b.n	8009330 <_svfiprintf_r+0x114>
 8009306:	eba0 0308 	sub.w	r3, r0, r8
 800930a:	fa09 f303 	lsl.w	r3, r9, r3
 800930e:	4313      	orrs	r3, r2
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	46a2      	mov	sl, r4
 8009314:	e7d2      	b.n	80092bc <_svfiprintf_r+0xa0>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	1d19      	adds	r1, r3, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	9103      	str	r1, [sp, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfbb      	ittet	lt
 8009322:	425b      	neglt	r3, r3
 8009324:	f042 0202 	orrlt.w	r2, r2, #2
 8009328:	9307      	strge	r3, [sp, #28]
 800932a:	9307      	strlt	r3, [sp, #28]
 800932c:	bfb8      	it	lt
 800932e:	9204      	strlt	r2, [sp, #16]
 8009330:	7823      	ldrb	r3, [r4, #0]
 8009332:	2b2e      	cmp	r3, #46	@ 0x2e
 8009334:	d10a      	bne.n	800934c <_svfiprintf_r+0x130>
 8009336:	7863      	ldrb	r3, [r4, #1]
 8009338:	2b2a      	cmp	r3, #42	@ 0x2a
 800933a:	d132      	bne.n	80093a2 <_svfiprintf_r+0x186>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	1d1a      	adds	r2, r3, #4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	9203      	str	r2, [sp, #12]
 8009344:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009348:	3402      	adds	r4, #2
 800934a:	9305      	str	r3, [sp, #20]
 800934c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009410 <_svfiprintf_r+0x1f4>
 8009350:	7821      	ldrb	r1, [r4, #0]
 8009352:	2203      	movs	r2, #3
 8009354:	4650      	mov	r0, sl
 8009356:	f7f6 ff7b 	bl	8000250 <memchr>
 800935a:	b138      	cbz	r0, 800936c <_svfiprintf_r+0x150>
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	eba0 000a 	sub.w	r0, r0, sl
 8009362:	2240      	movs	r2, #64	@ 0x40
 8009364:	4082      	lsls	r2, r0
 8009366:	4313      	orrs	r3, r2
 8009368:	3401      	adds	r4, #1
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009370:	4824      	ldr	r0, [pc, #144]	@ (8009404 <_svfiprintf_r+0x1e8>)
 8009372:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009376:	2206      	movs	r2, #6
 8009378:	f7f6 ff6a 	bl	8000250 <memchr>
 800937c:	2800      	cmp	r0, #0
 800937e:	d036      	beq.n	80093ee <_svfiprintf_r+0x1d2>
 8009380:	4b21      	ldr	r3, [pc, #132]	@ (8009408 <_svfiprintf_r+0x1ec>)
 8009382:	bb1b      	cbnz	r3, 80093cc <_svfiprintf_r+0x1b0>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	3307      	adds	r3, #7
 8009388:	f023 0307 	bic.w	r3, r3, #7
 800938c:	3308      	adds	r3, #8
 800938e:	9303      	str	r3, [sp, #12]
 8009390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009392:	4433      	add	r3, r6
 8009394:	9309      	str	r3, [sp, #36]	@ 0x24
 8009396:	e76a      	b.n	800926e <_svfiprintf_r+0x52>
 8009398:	fb0c 3202 	mla	r2, ip, r2, r3
 800939c:	460c      	mov	r4, r1
 800939e:	2001      	movs	r0, #1
 80093a0:	e7a8      	b.n	80092f4 <_svfiprintf_r+0xd8>
 80093a2:	2300      	movs	r3, #0
 80093a4:	3401      	adds	r4, #1
 80093a6:	9305      	str	r3, [sp, #20]
 80093a8:	4619      	mov	r1, r3
 80093aa:	f04f 0c0a 	mov.w	ip, #10
 80093ae:	4620      	mov	r0, r4
 80093b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b4:	3a30      	subs	r2, #48	@ 0x30
 80093b6:	2a09      	cmp	r2, #9
 80093b8:	d903      	bls.n	80093c2 <_svfiprintf_r+0x1a6>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0c6      	beq.n	800934c <_svfiprintf_r+0x130>
 80093be:	9105      	str	r1, [sp, #20]
 80093c0:	e7c4      	b.n	800934c <_svfiprintf_r+0x130>
 80093c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c6:	4604      	mov	r4, r0
 80093c8:	2301      	movs	r3, #1
 80093ca:	e7f0      	b.n	80093ae <_svfiprintf_r+0x192>
 80093cc:	ab03      	add	r3, sp, #12
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	462a      	mov	r2, r5
 80093d2:	4b0e      	ldr	r3, [pc, #56]	@ (800940c <_svfiprintf_r+0x1f0>)
 80093d4:	a904      	add	r1, sp, #16
 80093d6:	4638      	mov	r0, r7
 80093d8:	f3af 8000 	nop.w
 80093dc:	1c42      	adds	r2, r0, #1
 80093de:	4606      	mov	r6, r0
 80093e0:	d1d6      	bne.n	8009390 <_svfiprintf_r+0x174>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	065b      	lsls	r3, r3, #25
 80093e6:	f53f af2d 	bmi.w	8009244 <_svfiprintf_r+0x28>
 80093ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093ec:	e72c      	b.n	8009248 <_svfiprintf_r+0x2c>
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	462a      	mov	r2, r5
 80093f4:	4b05      	ldr	r3, [pc, #20]	@ (800940c <_svfiprintf_r+0x1f0>)
 80093f6:	a904      	add	r1, sp, #16
 80093f8:	4638      	mov	r0, r7
 80093fa:	f000 f879 	bl	80094f0 <_printf_i>
 80093fe:	e7ed      	b.n	80093dc <_svfiprintf_r+0x1c0>
 8009400:	0800a116 	.word	0x0800a116
 8009404:	0800a120 	.word	0x0800a120
 8009408:	00000000 	.word	0x00000000
 800940c:	08009165 	.word	0x08009165
 8009410:	0800a11c 	.word	0x0800a11c

08009414 <_printf_common>:
 8009414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009418:	4616      	mov	r6, r2
 800941a:	4698      	mov	r8, r3
 800941c:	688a      	ldr	r2, [r1, #8]
 800941e:	690b      	ldr	r3, [r1, #16]
 8009420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009424:	4293      	cmp	r3, r2
 8009426:	bfb8      	it	lt
 8009428:	4613      	movlt	r3, r2
 800942a:	6033      	str	r3, [r6, #0]
 800942c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009430:	4607      	mov	r7, r0
 8009432:	460c      	mov	r4, r1
 8009434:	b10a      	cbz	r2, 800943a <_printf_common+0x26>
 8009436:	3301      	adds	r3, #1
 8009438:	6033      	str	r3, [r6, #0]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	0699      	lsls	r1, r3, #26
 800943e:	bf42      	ittt	mi
 8009440:	6833      	ldrmi	r3, [r6, #0]
 8009442:	3302      	addmi	r3, #2
 8009444:	6033      	strmi	r3, [r6, #0]
 8009446:	6825      	ldr	r5, [r4, #0]
 8009448:	f015 0506 	ands.w	r5, r5, #6
 800944c:	d106      	bne.n	800945c <_printf_common+0x48>
 800944e:	f104 0a19 	add.w	sl, r4, #25
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	6832      	ldr	r2, [r6, #0]
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	42ab      	cmp	r3, r5
 800945a:	dc26      	bgt.n	80094aa <_printf_common+0x96>
 800945c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009460:	6822      	ldr	r2, [r4, #0]
 8009462:	3b00      	subs	r3, #0
 8009464:	bf18      	it	ne
 8009466:	2301      	movne	r3, #1
 8009468:	0692      	lsls	r2, r2, #26
 800946a:	d42b      	bmi.n	80094c4 <_printf_common+0xb0>
 800946c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009470:	4641      	mov	r1, r8
 8009472:	4638      	mov	r0, r7
 8009474:	47c8      	blx	r9
 8009476:	3001      	adds	r0, #1
 8009478:	d01e      	beq.n	80094b8 <_printf_common+0xa4>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	6922      	ldr	r2, [r4, #16]
 800947e:	f003 0306 	and.w	r3, r3, #6
 8009482:	2b04      	cmp	r3, #4
 8009484:	bf02      	ittt	eq
 8009486:	68e5      	ldreq	r5, [r4, #12]
 8009488:	6833      	ldreq	r3, [r6, #0]
 800948a:	1aed      	subeq	r5, r5, r3
 800948c:	68a3      	ldr	r3, [r4, #8]
 800948e:	bf0c      	ite	eq
 8009490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009494:	2500      	movne	r5, #0
 8009496:	4293      	cmp	r3, r2
 8009498:	bfc4      	itt	gt
 800949a:	1a9b      	subgt	r3, r3, r2
 800949c:	18ed      	addgt	r5, r5, r3
 800949e:	2600      	movs	r6, #0
 80094a0:	341a      	adds	r4, #26
 80094a2:	42b5      	cmp	r5, r6
 80094a4:	d11a      	bne.n	80094dc <_printf_common+0xc8>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e008      	b.n	80094bc <_printf_common+0xa8>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4641      	mov	r1, r8
 80094b0:	4638      	mov	r0, r7
 80094b2:	47c8      	blx	r9
 80094b4:	3001      	adds	r0, #1
 80094b6:	d103      	bne.n	80094c0 <_printf_common+0xac>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c0:	3501      	adds	r5, #1
 80094c2:	e7c6      	b.n	8009452 <_printf_common+0x3e>
 80094c4:	18e1      	adds	r1, r4, r3
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	2030      	movs	r0, #48	@ 0x30
 80094ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094ce:	4422      	add	r2, r4
 80094d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094d8:	3302      	adds	r3, #2
 80094da:	e7c7      	b.n	800946c <_printf_common+0x58>
 80094dc:	2301      	movs	r3, #1
 80094de:	4622      	mov	r2, r4
 80094e0:	4641      	mov	r1, r8
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c8      	blx	r9
 80094e6:	3001      	adds	r0, #1
 80094e8:	d0e6      	beq.n	80094b8 <_printf_common+0xa4>
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7d9      	b.n	80094a2 <_printf_common+0x8e>
	...

080094f0 <_printf_i>:
 80094f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	7e0f      	ldrb	r7, [r1, #24]
 80094f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094f8:	2f78      	cmp	r7, #120	@ 0x78
 80094fa:	4691      	mov	r9, r2
 80094fc:	4680      	mov	r8, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	469a      	mov	sl, r3
 8009502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009506:	d807      	bhi.n	8009518 <_printf_i+0x28>
 8009508:	2f62      	cmp	r7, #98	@ 0x62
 800950a:	d80a      	bhi.n	8009522 <_printf_i+0x32>
 800950c:	2f00      	cmp	r7, #0
 800950e:	f000 80d2 	beq.w	80096b6 <_printf_i+0x1c6>
 8009512:	2f58      	cmp	r7, #88	@ 0x58
 8009514:	f000 80b9 	beq.w	800968a <_printf_i+0x19a>
 8009518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800951c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009520:	e03a      	b.n	8009598 <_printf_i+0xa8>
 8009522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009526:	2b15      	cmp	r3, #21
 8009528:	d8f6      	bhi.n	8009518 <_printf_i+0x28>
 800952a:	a101      	add	r1, pc, #4	@ (adr r1, 8009530 <_printf_i+0x40>)
 800952c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009530:	08009589 	.word	0x08009589
 8009534:	0800959d 	.word	0x0800959d
 8009538:	08009519 	.word	0x08009519
 800953c:	08009519 	.word	0x08009519
 8009540:	08009519 	.word	0x08009519
 8009544:	08009519 	.word	0x08009519
 8009548:	0800959d 	.word	0x0800959d
 800954c:	08009519 	.word	0x08009519
 8009550:	08009519 	.word	0x08009519
 8009554:	08009519 	.word	0x08009519
 8009558:	08009519 	.word	0x08009519
 800955c:	0800969d 	.word	0x0800969d
 8009560:	080095c7 	.word	0x080095c7
 8009564:	08009657 	.word	0x08009657
 8009568:	08009519 	.word	0x08009519
 800956c:	08009519 	.word	0x08009519
 8009570:	080096bf 	.word	0x080096bf
 8009574:	08009519 	.word	0x08009519
 8009578:	080095c7 	.word	0x080095c7
 800957c:	08009519 	.word	0x08009519
 8009580:	08009519 	.word	0x08009519
 8009584:	0800965f 	.word	0x0800965f
 8009588:	6833      	ldr	r3, [r6, #0]
 800958a:	1d1a      	adds	r2, r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6032      	str	r2, [r6, #0]
 8009590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009598:	2301      	movs	r3, #1
 800959a:	e09d      	b.n	80096d8 <_printf_i+0x1e8>
 800959c:	6833      	ldr	r3, [r6, #0]
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	1d19      	adds	r1, r3, #4
 80095a2:	6031      	str	r1, [r6, #0]
 80095a4:	0606      	lsls	r6, r0, #24
 80095a6:	d501      	bpl.n	80095ac <_printf_i+0xbc>
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	e003      	b.n	80095b4 <_printf_i+0xc4>
 80095ac:	0645      	lsls	r5, r0, #25
 80095ae:	d5fb      	bpl.n	80095a8 <_printf_i+0xb8>
 80095b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	da03      	bge.n	80095c0 <_printf_i+0xd0>
 80095b8:	232d      	movs	r3, #45	@ 0x2d
 80095ba:	426d      	negs	r5, r5
 80095bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095c0:	4859      	ldr	r0, [pc, #356]	@ (8009728 <_printf_i+0x238>)
 80095c2:	230a      	movs	r3, #10
 80095c4:	e011      	b.n	80095ea <_printf_i+0xfa>
 80095c6:	6821      	ldr	r1, [r4, #0]
 80095c8:	6833      	ldr	r3, [r6, #0]
 80095ca:	0608      	lsls	r0, r1, #24
 80095cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80095d0:	d402      	bmi.n	80095d8 <_printf_i+0xe8>
 80095d2:	0649      	lsls	r1, r1, #25
 80095d4:	bf48      	it	mi
 80095d6:	b2ad      	uxthmi	r5, r5
 80095d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095da:	4853      	ldr	r0, [pc, #332]	@ (8009728 <_printf_i+0x238>)
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	bf14      	ite	ne
 80095e0:	230a      	movne	r3, #10
 80095e2:	2308      	moveq	r3, #8
 80095e4:	2100      	movs	r1, #0
 80095e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ea:	6866      	ldr	r6, [r4, #4]
 80095ec:	60a6      	str	r6, [r4, #8]
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	bfa2      	ittt	ge
 80095f2:	6821      	ldrge	r1, [r4, #0]
 80095f4:	f021 0104 	bicge.w	r1, r1, #4
 80095f8:	6021      	strge	r1, [r4, #0]
 80095fa:	b90d      	cbnz	r5, 8009600 <_printf_i+0x110>
 80095fc:	2e00      	cmp	r6, #0
 80095fe:	d04b      	beq.n	8009698 <_printf_i+0x1a8>
 8009600:	4616      	mov	r6, r2
 8009602:	fbb5 f1f3 	udiv	r1, r5, r3
 8009606:	fb03 5711 	mls	r7, r3, r1, r5
 800960a:	5dc7      	ldrb	r7, [r0, r7]
 800960c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009610:	462f      	mov	r7, r5
 8009612:	42bb      	cmp	r3, r7
 8009614:	460d      	mov	r5, r1
 8009616:	d9f4      	bls.n	8009602 <_printf_i+0x112>
 8009618:	2b08      	cmp	r3, #8
 800961a:	d10b      	bne.n	8009634 <_printf_i+0x144>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	07df      	lsls	r7, r3, #31
 8009620:	d508      	bpl.n	8009634 <_printf_i+0x144>
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	6861      	ldr	r1, [r4, #4]
 8009626:	4299      	cmp	r1, r3
 8009628:	bfde      	ittt	le
 800962a:	2330      	movle	r3, #48	@ 0x30
 800962c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009630:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009634:	1b92      	subs	r2, r2, r6
 8009636:	6122      	str	r2, [r4, #16]
 8009638:	f8cd a000 	str.w	sl, [sp]
 800963c:	464b      	mov	r3, r9
 800963e:	aa03      	add	r2, sp, #12
 8009640:	4621      	mov	r1, r4
 8009642:	4640      	mov	r0, r8
 8009644:	f7ff fee6 	bl	8009414 <_printf_common>
 8009648:	3001      	adds	r0, #1
 800964a:	d14a      	bne.n	80096e2 <_printf_i+0x1f2>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	b004      	add	sp, #16
 8009652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	f043 0320 	orr.w	r3, r3, #32
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	4833      	ldr	r0, [pc, #204]	@ (800972c <_printf_i+0x23c>)
 8009660:	2778      	movs	r7, #120	@ 0x78
 8009662:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6831      	ldr	r1, [r6, #0]
 800966a:	061f      	lsls	r7, r3, #24
 800966c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009670:	d402      	bmi.n	8009678 <_printf_i+0x188>
 8009672:	065f      	lsls	r7, r3, #25
 8009674:	bf48      	it	mi
 8009676:	b2ad      	uxthmi	r5, r5
 8009678:	6031      	str	r1, [r6, #0]
 800967a:	07d9      	lsls	r1, r3, #31
 800967c:	bf44      	itt	mi
 800967e:	f043 0320 	orrmi.w	r3, r3, #32
 8009682:	6023      	strmi	r3, [r4, #0]
 8009684:	b11d      	cbz	r5, 800968e <_printf_i+0x19e>
 8009686:	2310      	movs	r3, #16
 8009688:	e7ac      	b.n	80095e4 <_printf_i+0xf4>
 800968a:	4827      	ldr	r0, [pc, #156]	@ (8009728 <_printf_i+0x238>)
 800968c:	e7e9      	b.n	8009662 <_printf_i+0x172>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f023 0320 	bic.w	r3, r3, #32
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	e7f6      	b.n	8009686 <_printf_i+0x196>
 8009698:	4616      	mov	r6, r2
 800969a:	e7bd      	b.n	8009618 <_printf_i+0x128>
 800969c:	6833      	ldr	r3, [r6, #0]
 800969e:	6825      	ldr	r5, [r4, #0]
 80096a0:	6961      	ldr	r1, [r4, #20]
 80096a2:	1d18      	adds	r0, r3, #4
 80096a4:	6030      	str	r0, [r6, #0]
 80096a6:	062e      	lsls	r6, r5, #24
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0x1c0>
 80096ac:	6019      	str	r1, [r3, #0]
 80096ae:	e002      	b.n	80096b6 <_printf_i+0x1c6>
 80096b0:	0668      	lsls	r0, r5, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0x1bc>
 80096b4:	8019      	strh	r1, [r3, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	4616      	mov	r6, r2
 80096bc:	e7bc      	b.n	8009638 <_printf_i+0x148>
 80096be:	6833      	ldr	r3, [r6, #0]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	6032      	str	r2, [r6, #0]
 80096c4:	681e      	ldr	r6, [r3, #0]
 80096c6:	6862      	ldr	r2, [r4, #4]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7f6 fdc0 	bl	8000250 <memchr>
 80096d0:	b108      	cbz	r0, 80096d6 <_printf_i+0x1e6>
 80096d2:	1b80      	subs	r0, r0, r6
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	2300      	movs	r3, #0
 80096dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096e0:	e7aa      	b.n	8009638 <_printf_i+0x148>
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	4632      	mov	r2, r6
 80096e6:	4649      	mov	r1, r9
 80096e8:	4640      	mov	r0, r8
 80096ea:	47d0      	blx	sl
 80096ec:	3001      	adds	r0, #1
 80096ee:	d0ad      	beq.n	800964c <_printf_i+0x15c>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	079b      	lsls	r3, r3, #30
 80096f4:	d413      	bmi.n	800971e <_printf_i+0x22e>
 80096f6:	68e0      	ldr	r0, [r4, #12]
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	4298      	cmp	r0, r3
 80096fc:	bfb8      	it	lt
 80096fe:	4618      	movlt	r0, r3
 8009700:	e7a6      	b.n	8009650 <_printf_i+0x160>
 8009702:	2301      	movs	r3, #1
 8009704:	4632      	mov	r2, r6
 8009706:	4649      	mov	r1, r9
 8009708:	4640      	mov	r0, r8
 800970a:	47d0      	blx	sl
 800970c:	3001      	adds	r0, #1
 800970e:	d09d      	beq.n	800964c <_printf_i+0x15c>
 8009710:	3501      	adds	r5, #1
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	9903      	ldr	r1, [sp, #12]
 8009716:	1a5b      	subs	r3, r3, r1
 8009718:	42ab      	cmp	r3, r5
 800971a:	dcf2      	bgt.n	8009702 <_printf_i+0x212>
 800971c:	e7eb      	b.n	80096f6 <_printf_i+0x206>
 800971e:	2500      	movs	r5, #0
 8009720:	f104 0619 	add.w	r6, r4, #25
 8009724:	e7f5      	b.n	8009712 <_printf_i+0x222>
 8009726:	bf00      	nop
 8009728:	0800a127 	.word	0x0800a127
 800972c:	0800a138 	.word	0x0800a138

08009730 <__sflush_r>:
 8009730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	0716      	lsls	r6, r2, #28
 800973a:	4605      	mov	r5, r0
 800973c:	460c      	mov	r4, r1
 800973e:	d454      	bmi.n	80097ea <__sflush_r+0xba>
 8009740:	684b      	ldr	r3, [r1, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	dc02      	bgt.n	800974c <__sflush_r+0x1c>
 8009746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	dd48      	ble.n	80097de <__sflush_r+0xae>
 800974c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800974e:	2e00      	cmp	r6, #0
 8009750:	d045      	beq.n	80097de <__sflush_r+0xae>
 8009752:	2300      	movs	r3, #0
 8009754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009758:	682f      	ldr	r7, [r5, #0]
 800975a:	6a21      	ldr	r1, [r4, #32]
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	d030      	beq.n	80097c2 <__sflush_r+0x92>
 8009760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	0759      	lsls	r1, r3, #29
 8009766:	d505      	bpl.n	8009774 <__sflush_r+0x44>
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800976e:	b10b      	cbz	r3, 8009774 <__sflush_r+0x44>
 8009770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009772:	1ad2      	subs	r2, r2, r3
 8009774:	2300      	movs	r3, #0
 8009776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009778:	6a21      	ldr	r1, [r4, #32]
 800977a:	4628      	mov	r0, r5
 800977c:	47b0      	blx	r6
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	d106      	bne.n	8009792 <__sflush_r+0x62>
 8009784:	6829      	ldr	r1, [r5, #0]
 8009786:	291d      	cmp	r1, #29
 8009788:	d82b      	bhi.n	80097e2 <__sflush_r+0xb2>
 800978a:	4a2a      	ldr	r2, [pc, #168]	@ (8009834 <__sflush_r+0x104>)
 800978c:	410a      	asrs	r2, r1
 800978e:	07d6      	lsls	r6, r2, #31
 8009790:	d427      	bmi.n	80097e2 <__sflush_r+0xb2>
 8009792:	2200      	movs	r2, #0
 8009794:	6062      	str	r2, [r4, #4]
 8009796:	04d9      	lsls	r1, r3, #19
 8009798:	6922      	ldr	r2, [r4, #16]
 800979a:	6022      	str	r2, [r4, #0]
 800979c:	d504      	bpl.n	80097a8 <__sflush_r+0x78>
 800979e:	1c42      	adds	r2, r0, #1
 80097a0:	d101      	bne.n	80097a6 <__sflush_r+0x76>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	b903      	cbnz	r3, 80097a8 <__sflush_r+0x78>
 80097a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80097a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097aa:	602f      	str	r7, [r5, #0]
 80097ac:	b1b9      	cbz	r1, 80097de <__sflush_r+0xae>
 80097ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097b2:	4299      	cmp	r1, r3
 80097b4:	d002      	beq.n	80097bc <__sflush_r+0x8c>
 80097b6:	4628      	mov	r0, r5
 80097b8:	f7ff fbd4 	bl	8008f64 <_free_r>
 80097bc:	2300      	movs	r3, #0
 80097be:	6363      	str	r3, [r4, #52]	@ 0x34
 80097c0:	e00d      	b.n	80097de <__sflush_r+0xae>
 80097c2:	2301      	movs	r3, #1
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b0      	blx	r6
 80097c8:	4602      	mov	r2, r0
 80097ca:	1c50      	adds	r0, r2, #1
 80097cc:	d1c9      	bne.n	8009762 <__sflush_r+0x32>
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0c6      	beq.n	8009762 <__sflush_r+0x32>
 80097d4:	2b1d      	cmp	r3, #29
 80097d6:	d001      	beq.n	80097dc <__sflush_r+0xac>
 80097d8:	2b16      	cmp	r3, #22
 80097da:	d11e      	bne.n	800981a <__sflush_r+0xea>
 80097dc:	602f      	str	r7, [r5, #0]
 80097de:	2000      	movs	r0, #0
 80097e0:	e022      	b.n	8009828 <__sflush_r+0xf8>
 80097e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e6:	b21b      	sxth	r3, r3
 80097e8:	e01b      	b.n	8009822 <__sflush_r+0xf2>
 80097ea:	690f      	ldr	r7, [r1, #16]
 80097ec:	2f00      	cmp	r7, #0
 80097ee:	d0f6      	beq.n	80097de <__sflush_r+0xae>
 80097f0:	0793      	lsls	r3, r2, #30
 80097f2:	680e      	ldr	r6, [r1, #0]
 80097f4:	bf08      	it	eq
 80097f6:	694b      	ldreq	r3, [r1, #20]
 80097f8:	600f      	str	r7, [r1, #0]
 80097fa:	bf18      	it	ne
 80097fc:	2300      	movne	r3, #0
 80097fe:	eba6 0807 	sub.w	r8, r6, r7
 8009802:	608b      	str	r3, [r1, #8]
 8009804:	f1b8 0f00 	cmp.w	r8, #0
 8009808:	dde9      	ble.n	80097de <__sflush_r+0xae>
 800980a:	6a21      	ldr	r1, [r4, #32]
 800980c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800980e:	4643      	mov	r3, r8
 8009810:	463a      	mov	r2, r7
 8009812:	4628      	mov	r0, r5
 8009814:	47b0      	blx	r6
 8009816:	2800      	cmp	r0, #0
 8009818:	dc08      	bgt.n	800982c <__sflush_r+0xfc>
 800981a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	4407      	add	r7, r0
 800982e:	eba8 0800 	sub.w	r8, r8, r0
 8009832:	e7e7      	b.n	8009804 <__sflush_r+0xd4>
 8009834:	dfbffffe 	.word	0xdfbffffe

08009838 <_fflush_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	690b      	ldr	r3, [r1, #16]
 800983c:	4605      	mov	r5, r0
 800983e:	460c      	mov	r4, r1
 8009840:	b913      	cbnz	r3, 8009848 <_fflush_r+0x10>
 8009842:	2500      	movs	r5, #0
 8009844:	4628      	mov	r0, r5
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	b118      	cbz	r0, 8009852 <_fflush_r+0x1a>
 800984a:	6a03      	ldr	r3, [r0, #32]
 800984c:	b90b      	cbnz	r3, 8009852 <_fflush_r+0x1a>
 800984e:	f7ff f9e5 	bl	8008c1c <__sinit>
 8009852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0f3      	beq.n	8009842 <_fflush_r+0xa>
 800985a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800985c:	07d0      	lsls	r0, r2, #31
 800985e:	d404      	bmi.n	800986a <_fflush_r+0x32>
 8009860:	0599      	lsls	r1, r3, #22
 8009862:	d402      	bmi.n	800986a <_fflush_r+0x32>
 8009864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009866:	f7ff fb5c 	bl	8008f22 <__retarget_lock_acquire_recursive>
 800986a:	4628      	mov	r0, r5
 800986c:	4621      	mov	r1, r4
 800986e:	f7ff ff5f 	bl	8009730 <__sflush_r>
 8009872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009874:	07da      	lsls	r2, r3, #31
 8009876:	4605      	mov	r5, r0
 8009878:	d4e4      	bmi.n	8009844 <_fflush_r+0xc>
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	059b      	lsls	r3, r3, #22
 800987e:	d4e1      	bmi.n	8009844 <_fflush_r+0xc>
 8009880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009882:	f7ff fb4f 	bl	8008f24 <__retarget_lock_release_recursive>
 8009886:	e7dd      	b.n	8009844 <_fflush_r+0xc>

08009888 <fiprintf>:
 8009888:	b40e      	push	{r1, r2, r3}
 800988a:	b503      	push	{r0, r1, lr}
 800988c:	4601      	mov	r1, r0
 800988e:	ab03      	add	r3, sp, #12
 8009890:	4805      	ldr	r0, [pc, #20]	@ (80098a8 <fiprintf+0x20>)
 8009892:	f853 2b04 	ldr.w	r2, [r3], #4
 8009896:	6800      	ldr	r0, [r0, #0]
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	f000 f89d 	bl	80099d8 <_vfiprintf_r>
 800989e:	b002      	add	sp, #8
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	200000d4 	.word	0x200000d4

080098ac <memmove>:
 80098ac:	4288      	cmp	r0, r1
 80098ae:	b510      	push	{r4, lr}
 80098b0:	eb01 0402 	add.w	r4, r1, r2
 80098b4:	d902      	bls.n	80098bc <memmove+0x10>
 80098b6:	4284      	cmp	r4, r0
 80098b8:	4623      	mov	r3, r4
 80098ba:	d807      	bhi.n	80098cc <memmove+0x20>
 80098bc:	1e43      	subs	r3, r0, #1
 80098be:	42a1      	cmp	r1, r4
 80098c0:	d008      	beq.n	80098d4 <memmove+0x28>
 80098c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ca:	e7f8      	b.n	80098be <memmove+0x12>
 80098cc:	4402      	add	r2, r0
 80098ce:	4601      	mov	r1, r0
 80098d0:	428a      	cmp	r2, r1
 80098d2:	d100      	bne.n	80098d6 <memmove+0x2a>
 80098d4:	bd10      	pop	{r4, pc}
 80098d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098de:	e7f7      	b.n	80098d0 <memmove+0x24>

080098e0 <_sbrk_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4d06      	ldr	r5, [pc, #24]	@ (80098fc <_sbrk_r+0x1c>)
 80098e4:	2300      	movs	r3, #0
 80098e6:	4604      	mov	r4, r0
 80098e8:	4608      	mov	r0, r1
 80098ea:	602b      	str	r3, [r5, #0]
 80098ec:	f7f7 ff62 	bl	80017b4 <_sbrk>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_sbrk_r+0x1a>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_sbrk_r+0x1a>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20000620 	.word	0x20000620

08009900 <memcpy>:
 8009900:	440a      	add	r2, r1
 8009902:	4291      	cmp	r1, r2
 8009904:	f100 33ff 	add.w	r3, r0, #4294967295
 8009908:	d100      	bne.n	800990c <memcpy+0xc>
 800990a:	4770      	bx	lr
 800990c:	b510      	push	{r4, lr}
 800990e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009916:	4291      	cmp	r1, r2
 8009918:	d1f9      	bne.n	800990e <memcpy+0xe>
 800991a:	bd10      	pop	{r4, pc}

0800991c <abort>:
 800991c:	b508      	push	{r3, lr}
 800991e:	2006      	movs	r0, #6
 8009920:	f000 fa2e 	bl	8009d80 <raise>
 8009924:	2001      	movs	r0, #1
 8009926:	f7f7 fecd 	bl	80016c4 <_exit>

0800992a <_realloc_r>:
 800992a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	4680      	mov	r8, r0
 8009930:	4615      	mov	r5, r2
 8009932:	460c      	mov	r4, r1
 8009934:	b921      	cbnz	r1, 8009940 <_realloc_r+0x16>
 8009936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993a:	4611      	mov	r1, r2
 800993c:	f7ff bb86 	b.w	800904c <_malloc_r>
 8009940:	b92a      	cbnz	r2, 800994e <_realloc_r+0x24>
 8009942:	f7ff fb0f 	bl	8008f64 <_free_r>
 8009946:	2400      	movs	r4, #0
 8009948:	4620      	mov	r0, r4
 800994a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800994e:	f000 fa33 	bl	8009db8 <_malloc_usable_size_r>
 8009952:	4285      	cmp	r5, r0
 8009954:	4606      	mov	r6, r0
 8009956:	d802      	bhi.n	800995e <_realloc_r+0x34>
 8009958:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800995c:	d8f4      	bhi.n	8009948 <_realloc_r+0x1e>
 800995e:	4629      	mov	r1, r5
 8009960:	4640      	mov	r0, r8
 8009962:	f7ff fb73 	bl	800904c <_malloc_r>
 8009966:	4607      	mov	r7, r0
 8009968:	2800      	cmp	r0, #0
 800996a:	d0ec      	beq.n	8009946 <_realloc_r+0x1c>
 800996c:	42b5      	cmp	r5, r6
 800996e:	462a      	mov	r2, r5
 8009970:	4621      	mov	r1, r4
 8009972:	bf28      	it	cs
 8009974:	4632      	movcs	r2, r6
 8009976:	f7ff ffc3 	bl	8009900 <memcpy>
 800997a:	4621      	mov	r1, r4
 800997c:	4640      	mov	r0, r8
 800997e:	f7ff faf1 	bl	8008f64 <_free_r>
 8009982:	463c      	mov	r4, r7
 8009984:	e7e0      	b.n	8009948 <_realloc_r+0x1e>

08009986 <__sfputc_r>:
 8009986:	6893      	ldr	r3, [r2, #8]
 8009988:	3b01      	subs	r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	b410      	push	{r4}
 800998e:	6093      	str	r3, [r2, #8]
 8009990:	da08      	bge.n	80099a4 <__sfputc_r+0x1e>
 8009992:	6994      	ldr	r4, [r2, #24]
 8009994:	42a3      	cmp	r3, r4
 8009996:	db01      	blt.n	800999c <__sfputc_r+0x16>
 8009998:	290a      	cmp	r1, #10
 800999a:	d103      	bne.n	80099a4 <__sfputc_r+0x1e>
 800999c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a0:	f000 b932 	b.w	8009c08 <__swbuf_r>
 80099a4:	6813      	ldr	r3, [r2, #0]
 80099a6:	1c58      	adds	r0, r3, #1
 80099a8:	6010      	str	r0, [r2, #0]
 80099aa:	7019      	strb	r1, [r3, #0]
 80099ac:	4608      	mov	r0, r1
 80099ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <__sfputs_r>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	4614      	mov	r4, r2
 80099bc:	18d5      	adds	r5, r2, r3
 80099be:	42ac      	cmp	r4, r5
 80099c0:	d101      	bne.n	80099c6 <__sfputs_r+0x12>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e007      	b.n	80099d6 <__sfputs_r+0x22>
 80099c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ca:	463a      	mov	r2, r7
 80099cc:	4630      	mov	r0, r6
 80099ce:	f7ff ffda 	bl	8009986 <__sfputc_r>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d1f3      	bne.n	80099be <__sfputs_r+0xa>
 80099d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099d8 <_vfiprintf_r>:
 80099d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	460d      	mov	r5, r1
 80099de:	b09d      	sub	sp, #116	@ 0x74
 80099e0:	4614      	mov	r4, r2
 80099e2:	4698      	mov	r8, r3
 80099e4:	4606      	mov	r6, r0
 80099e6:	b118      	cbz	r0, 80099f0 <_vfiprintf_r+0x18>
 80099e8:	6a03      	ldr	r3, [r0, #32]
 80099ea:	b90b      	cbnz	r3, 80099f0 <_vfiprintf_r+0x18>
 80099ec:	f7ff f916 	bl	8008c1c <__sinit>
 80099f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099f2:	07d9      	lsls	r1, r3, #31
 80099f4:	d405      	bmi.n	8009a02 <_vfiprintf_r+0x2a>
 80099f6:	89ab      	ldrh	r3, [r5, #12]
 80099f8:	059a      	lsls	r2, r3, #22
 80099fa:	d402      	bmi.n	8009a02 <_vfiprintf_r+0x2a>
 80099fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099fe:	f7ff fa90 	bl	8008f22 <__retarget_lock_acquire_recursive>
 8009a02:	89ab      	ldrh	r3, [r5, #12]
 8009a04:	071b      	lsls	r3, r3, #28
 8009a06:	d501      	bpl.n	8009a0c <_vfiprintf_r+0x34>
 8009a08:	692b      	ldr	r3, [r5, #16]
 8009a0a:	b99b      	cbnz	r3, 8009a34 <_vfiprintf_r+0x5c>
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f000 f938 	bl	8009c84 <__swsetup_r>
 8009a14:	b170      	cbz	r0, 8009a34 <_vfiprintf_r+0x5c>
 8009a16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a18:	07dc      	lsls	r4, r3, #31
 8009a1a:	d504      	bpl.n	8009a26 <_vfiprintf_r+0x4e>
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	b01d      	add	sp, #116	@ 0x74
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	0598      	lsls	r0, r3, #22
 8009a2a:	d4f7      	bmi.n	8009a1c <_vfiprintf_r+0x44>
 8009a2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a2e:	f7ff fa79 	bl	8008f24 <__retarget_lock_release_recursive>
 8009a32:	e7f3      	b.n	8009a1c <_vfiprintf_r+0x44>
 8009a34:	2300      	movs	r3, #0
 8009a36:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a38:	2320      	movs	r3, #32
 8009a3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a42:	2330      	movs	r3, #48	@ 0x30
 8009a44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bf4 <_vfiprintf_r+0x21c>
 8009a48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a4c:	f04f 0901 	mov.w	r9, #1
 8009a50:	4623      	mov	r3, r4
 8009a52:	469a      	mov	sl, r3
 8009a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a58:	b10a      	cbz	r2, 8009a5e <_vfiprintf_r+0x86>
 8009a5a:	2a25      	cmp	r2, #37	@ 0x25
 8009a5c:	d1f9      	bne.n	8009a52 <_vfiprintf_r+0x7a>
 8009a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a62:	d00b      	beq.n	8009a7c <_vfiprintf_r+0xa4>
 8009a64:	465b      	mov	r3, fp
 8009a66:	4622      	mov	r2, r4
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ffa2 	bl	80099b4 <__sfputs_r>
 8009a70:	3001      	adds	r0, #1
 8009a72:	f000 80a7 	beq.w	8009bc4 <_vfiprintf_r+0x1ec>
 8009a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a78:	445a      	add	r2, fp
 8009a7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 809f 	beq.w	8009bc4 <_vfiprintf_r+0x1ec>
 8009a86:	2300      	movs	r3, #0
 8009a88:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a90:	f10a 0a01 	add.w	sl, sl, #1
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	9307      	str	r3, [sp, #28]
 8009a98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a9e:	4654      	mov	r4, sl
 8009aa0:	2205      	movs	r2, #5
 8009aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa6:	4853      	ldr	r0, [pc, #332]	@ (8009bf4 <_vfiprintf_r+0x21c>)
 8009aa8:	f7f6 fbd2 	bl	8000250 <memchr>
 8009aac:	9a04      	ldr	r2, [sp, #16]
 8009aae:	b9d8      	cbnz	r0, 8009ae8 <_vfiprintf_r+0x110>
 8009ab0:	06d1      	lsls	r1, r2, #27
 8009ab2:	bf44      	itt	mi
 8009ab4:	2320      	movmi	r3, #32
 8009ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aba:	0713      	lsls	r3, r2, #28
 8009abc:	bf44      	itt	mi
 8009abe:	232b      	movmi	r3, #43	@ 0x2b
 8009ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aca:	d015      	beq.n	8009af8 <_vfiprintf_r+0x120>
 8009acc:	9a07      	ldr	r2, [sp, #28]
 8009ace:	4654      	mov	r4, sl
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f04f 0c0a 	mov.w	ip, #10
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009adc:	3b30      	subs	r3, #48	@ 0x30
 8009ade:	2b09      	cmp	r3, #9
 8009ae0:	d94b      	bls.n	8009b7a <_vfiprintf_r+0x1a2>
 8009ae2:	b1b0      	cbz	r0, 8009b12 <_vfiprintf_r+0x13a>
 8009ae4:	9207      	str	r2, [sp, #28]
 8009ae6:	e014      	b.n	8009b12 <_vfiprintf_r+0x13a>
 8009ae8:	eba0 0308 	sub.w	r3, r0, r8
 8009aec:	fa09 f303 	lsl.w	r3, r9, r3
 8009af0:	4313      	orrs	r3, r2
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	46a2      	mov	sl, r4
 8009af6:	e7d2      	b.n	8009a9e <_vfiprintf_r+0xc6>
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	1d19      	adds	r1, r3, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	9103      	str	r1, [sp, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bfbb      	ittet	lt
 8009b04:	425b      	neglt	r3, r3
 8009b06:	f042 0202 	orrlt.w	r2, r2, #2
 8009b0a:	9307      	strge	r3, [sp, #28]
 8009b0c:	9307      	strlt	r3, [sp, #28]
 8009b0e:	bfb8      	it	lt
 8009b10:	9204      	strlt	r2, [sp, #16]
 8009b12:	7823      	ldrb	r3, [r4, #0]
 8009b14:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b16:	d10a      	bne.n	8009b2e <_vfiprintf_r+0x156>
 8009b18:	7863      	ldrb	r3, [r4, #1]
 8009b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b1c:	d132      	bne.n	8009b84 <_vfiprintf_r+0x1ac>
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	1d1a      	adds	r2, r3, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	9203      	str	r2, [sp, #12]
 8009b26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b2a:	3402      	adds	r4, #2
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c04 <_vfiprintf_r+0x22c>
 8009b32:	7821      	ldrb	r1, [r4, #0]
 8009b34:	2203      	movs	r2, #3
 8009b36:	4650      	mov	r0, sl
 8009b38:	f7f6 fb8a 	bl	8000250 <memchr>
 8009b3c:	b138      	cbz	r0, 8009b4e <_vfiprintf_r+0x176>
 8009b3e:	9b04      	ldr	r3, [sp, #16]
 8009b40:	eba0 000a 	sub.w	r0, r0, sl
 8009b44:	2240      	movs	r2, #64	@ 0x40
 8009b46:	4082      	lsls	r2, r0
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	3401      	adds	r4, #1
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	4829      	ldr	r0, [pc, #164]	@ (8009bf8 <_vfiprintf_r+0x220>)
 8009b54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b58:	2206      	movs	r2, #6
 8009b5a:	f7f6 fb79 	bl	8000250 <memchr>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d03f      	beq.n	8009be2 <_vfiprintf_r+0x20a>
 8009b62:	4b26      	ldr	r3, [pc, #152]	@ (8009bfc <_vfiprintf_r+0x224>)
 8009b64:	bb1b      	cbnz	r3, 8009bae <_vfiprintf_r+0x1d6>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	3307      	adds	r3, #7
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	3308      	adds	r3, #8
 8009b70:	9303      	str	r3, [sp, #12]
 8009b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b74:	443b      	add	r3, r7
 8009b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b78:	e76a      	b.n	8009a50 <_vfiprintf_r+0x78>
 8009b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b7e:	460c      	mov	r4, r1
 8009b80:	2001      	movs	r0, #1
 8009b82:	e7a8      	b.n	8009ad6 <_vfiprintf_r+0xfe>
 8009b84:	2300      	movs	r3, #0
 8009b86:	3401      	adds	r4, #1
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	f04f 0c0a 	mov.w	ip, #10
 8009b90:	4620      	mov	r0, r4
 8009b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b96:	3a30      	subs	r2, #48	@ 0x30
 8009b98:	2a09      	cmp	r2, #9
 8009b9a:	d903      	bls.n	8009ba4 <_vfiprintf_r+0x1cc>
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0c6      	beq.n	8009b2e <_vfiprintf_r+0x156>
 8009ba0:	9105      	str	r1, [sp, #20]
 8009ba2:	e7c4      	b.n	8009b2e <_vfiprintf_r+0x156>
 8009ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ba8:	4604      	mov	r4, r0
 8009baa:	2301      	movs	r3, #1
 8009bac:	e7f0      	b.n	8009b90 <_vfiprintf_r+0x1b8>
 8009bae:	ab03      	add	r3, sp, #12
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	4b12      	ldr	r3, [pc, #72]	@ (8009c00 <_vfiprintf_r+0x228>)
 8009bb6:	a904      	add	r1, sp, #16
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f3af 8000 	nop.w
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	1c78      	adds	r0, r7, #1
 8009bc2:	d1d6      	bne.n	8009b72 <_vfiprintf_r+0x19a>
 8009bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bc6:	07d9      	lsls	r1, r3, #31
 8009bc8:	d405      	bmi.n	8009bd6 <_vfiprintf_r+0x1fe>
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	059a      	lsls	r2, r3, #22
 8009bce:	d402      	bmi.n	8009bd6 <_vfiprintf_r+0x1fe>
 8009bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bd2:	f7ff f9a7 	bl	8008f24 <__retarget_lock_release_recursive>
 8009bd6:	89ab      	ldrh	r3, [r5, #12]
 8009bd8:	065b      	lsls	r3, r3, #25
 8009bda:	f53f af1f 	bmi.w	8009a1c <_vfiprintf_r+0x44>
 8009bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009be0:	e71e      	b.n	8009a20 <_vfiprintf_r+0x48>
 8009be2:	ab03      	add	r3, sp, #12
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	462a      	mov	r2, r5
 8009be8:	4b05      	ldr	r3, [pc, #20]	@ (8009c00 <_vfiprintf_r+0x228>)
 8009bea:	a904      	add	r1, sp, #16
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7ff fc7f 	bl	80094f0 <_printf_i>
 8009bf2:	e7e4      	b.n	8009bbe <_vfiprintf_r+0x1e6>
 8009bf4:	0800a116 	.word	0x0800a116
 8009bf8:	0800a120 	.word	0x0800a120
 8009bfc:	00000000 	.word	0x00000000
 8009c00:	080099b5 	.word	0x080099b5
 8009c04:	0800a11c 	.word	0x0800a11c

08009c08 <__swbuf_r>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	460e      	mov	r6, r1
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	4605      	mov	r5, r0
 8009c10:	b118      	cbz	r0, 8009c1a <__swbuf_r+0x12>
 8009c12:	6a03      	ldr	r3, [r0, #32]
 8009c14:	b90b      	cbnz	r3, 8009c1a <__swbuf_r+0x12>
 8009c16:	f7ff f801 	bl	8008c1c <__sinit>
 8009c1a:	69a3      	ldr	r3, [r4, #24]
 8009c1c:	60a3      	str	r3, [r4, #8]
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	071a      	lsls	r2, r3, #28
 8009c22:	d501      	bpl.n	8009c28 <__swbuf_r+0x20>
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	b943      	cbnz	r3, 8009c3a <__swbuf_r+0x32>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 f82a 	bl	8009c84 <__swsetup_r>
 8009c30:	b118      	cbz	r0, 8009c3a <__swbuf_r+0x32>
 8009c32:	f04f 37ff 	mov.w	r7, #4294967295
 8009c36:	4638      	mov	r0, r7
 8009c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	6922      	ldr	r2, [r4, #16]
 8009c3e:	1a98      	subs	r0, r3, r2
 8009c40:	6963      	ldr	r3, [r4, #20]
 8009c42:	b2f6      	uxtb	r6, r6
 8009c44:	4283      	cmp	r3, r0
 8009c46:	4637      	mov	r7, r6
 8009c48:	dc05      	bgt.n	8009c56 <__swbuf_r+0x4e>
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f7ff fdf3 	bl	8009838 <_fflush_r>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d1ed      	bne.n	8009c32 <__swbuf_r+0x2a>
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	60a3      	str	r3, [r4, #8]
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	6022      	str	r2, [r4, #0]
 8009c62:	701e      	strb	r6, [r3, #0]
 8009c64:	6962      	ldr	r2, [r4, #20]
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d004      	beq.n	8009c76 <__swbuf_r+0x6e>
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	07db      	lsls	r3, r3, #31
 8009c70:	d5e1      	bpl.n	8009c36 <__swbuf_r+0x2e>
 8009c72:	2e0a      	cmp	r6, #10
 8009c74:	d1df      	bne.n	8009c36 <__swbuf_r+0x2e>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f7ff fddd 	bl	8009838 <_fflush_r>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d0d9      	beq.n	8009c36 <__swbuf_r+0x2e>
 8009c82:	e7d6      	b.n	8009c32 <__swbuf_r+0x2a>

08009c84 <__swsetup_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4b29      	ldr	r3, [pc, #164]	@ (8009d2c <__swsetup_r+0xa8>)
 8009c88:	4605      	mov	r5, r0
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	b118      	cbz	r0, 8009c98 <__swsetup_r+0x14>
 8009c90:	6a03      	ldr	r3, [r0, #32]
 8009c92:	b90b      	cbnz	r3, 8009c98 <__swsetup_r+0x14>
 8009c94:	f7fe ffc2 	bl	8008c1c <__sinit>
 8009c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9c:	0719      	lsls	r1, r3, #28
 8009c9e:	d422      	bmi.n	8009ce6 <__swsetup_r+0x62>
 8009ca0:	06da      	lsls	r2, r3, #27
 8009ca2:	d407      	bmi.n	8009cb4 <__swsetup_r+0x30>
 8009ca4:	2209      	movs	r2, #9
 8009ca6:	602a      	str	r2, [r5, #0]
 8009ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb2:	e033      	b.n	8009d1c <__swsetup_r+0x98>
 8009cb4:	0758      	lsls	r0, r3, #29
 8009cb6:	d512      	bpl.n	8009cde <__swsetup_r+0x5a>
 8009cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cba:	b141      	cbz	r1, 8009cce <__swsetup_r+0x4a>
 8009cbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cc0:	4299      	cmp	r1, r3
 8009cc2:	d002      	beq.n	8009cca <__swsetup_r+0x46>
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f7ff f94d 	bl	8008f64 <_free_r>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	6063      	str	r3, [r4, #4]
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f043 0308 	orr.w	r3, r3, #8
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	b94b      	cbnz	r3, 8009cfe <__swsetup_r+0x7a>
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf4:	d003      	beq.n	8009cfe <__swsetup_r+0x7a>
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	f000 f88b 	bl	8009e14 <__smakebuf_r>
 8009cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d02:	f013 0201 	ands.w	r2, r3, #1
 8009d06:	d00a      	beq.n	8009d1e <__swsetup_r+0x9a>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	60a2      	str	r2, [r4, #8]
 8009d0c:	6962      	ldr	r2, [r4, #20]
 8009d0e:	4252      	negs	r2, r2
 8009d10:	61a2      	str	r2, [r4, #24]
 8009d12:	6922      	ldr	r2, [r4, #16]
 8009d14:	b942      	cbnz	r2, 8009d28 <__swsetup_r+0xa4>
 8009d16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d1a:	d1c5      	bne.n	8009ca8 <__swsetup_r+0x24>
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
 8009d1e:	0799      	lsls	r1, r3, #30
 8009d20:	bf58      	it	pl
 8009d22:	6962      	ldrpl	r2, [r4, #20]
 8009d24:	60a2      	str	r2, [r4, #8]
 8009d26:	e7f4      	b.n	8009d12 <__swsetup_r+0x8e>
 8009d28:	2000      	movs	r0, #0
 8009d2a:	e7f7      	b.n	8009d1c <__swsetup_r+0x98>
 8009d2c:	200000d4 	.word	0x200000d4

08009d30 <_raise_r>:
 8009d30:	291f      	cmp	r1, #31
 8009d32:	b538      	push	{r3, r4, r5, lr}
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	d904      	bls.n	8009d44 <_raise_r+0x14>
 8009d3a:	2316      	movs	r3, #22
 8009d3c:	6003      	str	r3, [r0, #0]
 8009d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d46:	b112      	cbz	r2, 8009d4e <_raise_r+0x1e>
 8009d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d4c:	b94b      	cbnz	r3, 8009d62 <_raise_r+0x32>
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 f830 	bl	8009db4 <_getpid_r>
 8009d54:	4622      	mov	r2, r4
 8009d56:	4601      	mov	r1, r0
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d5e:	f000 b817 	b.w	8009d90 <_kill_r>
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d00a      	beq.n	8009d7c <_raise_r+0x4c>
 8009d66:	1c59      	adds	r1, r3, #1
 8009d68:	d103      	bne.n	8009d72 <_raise_r+0x42>
 8009d6a:	2316      	movs	r3, #22
 8009d6c:	6003      	str	r3, [r0, #0]
 8009d6e:	2001      	movs	r0, #1
 8009d70:	e7e7      	b.n	8009d42 <_raise_r+0x12>
 8009d72:	2100      	movs	r1, #0
 8009d74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d78:	4620      	mov	r0, r4
 8009d7a:	4798      	blx	r3
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e7e0      	b.n	8009d42 <_raise_r+0x12>

08009d80 <raise>:
 8009d80:	4b02      	ldr	r3, [pc, #8]	@ (8009d8c <raise+0xc>)
 8009d82:	4601      	mov	r1, r0
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	f7ff bfd3 	b.w	8009d30 <_raise_r>
 8009d8a:	bf00      	nop
 8009d8c:	200000d4 	.word	0x200000d4

08009d90 <_kill_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d07      	ldr	r5, [pc, #28]	@ (8009db0 <_kill_r+0x20>)
 8009d94:	2300      	movs	r3, #0
 8009d96:	4604      	mov	r4, r0
 8009d98:	4608      	mov	r0, r1
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	f7f7 fc81 	bl	80016a4 <_kill>
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	d102      	bne.n	8009dac <_kill_r+0x1c>
 8009da6:	682b      	ldr	r3, [r5, #0]
 8009da8:	b103      	cbz	r3, 8009dac <_kill_r+0x1c>
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
 8009dae:	bf00      	nop
 8009db0:	20000620 	.word	0x20000620

08009db4 <_getpid_r>:
 8009db4:	f7f7 bc6e 	b.w	8001694 <_getpid>

08009db8 <_malloc_usable_size_r>:
 8009db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dbc:	1f18      	subs	r0, r3, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfbc      	itt	lt
 8009dc2:	580b      	ldrlt	r3, [r1, r0]
 8009dc4:	18c0      	addlt	r0, r0, r3
 8009dc6:	4770      	bx	lr

08009dc8 <__swhatbuf_r>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	460c      	mov	r4, r1
 8009dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd0:	2900      	cmp	r1, #0
 8009dd2:	b096      	sub	sp, #88	@ 0x58
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	461e      	mov	r6, r3
 8009dd8:	da0d      	bge.n	8009df6 <__swhatbuf_r+0x2e>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009de0:	f04f 0100 	mov.w	r1, #0
 8009de4:	bf14      	ite	ne
 8009de6:	2340      	movne	r3, #64	@ 0x40
 8009de8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009dec:	2000      	movs	r0, #0
 8009dee:	6031      	str	r1, [r6, #0]
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	b016      	add	sp, #88	@ 0x58
 8009df4:	bd70      	pop	{r4, r5, r6, pc}
 8009df6:	466a      	mov	r2, sp
 8009df8:	f000 f848 	bl	8009e8c <_fstat_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	dbec      	blt.n	8009dda <__swhatbuf_r+0x12>
 8009e00:	9901      	ldr	r1, [sp, #4]
 8009e02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e0a:	4259      	negs	r1, r3
 8009e0c:	4159      	adcs	r1, r3
 8009e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e12:	e7eb      	b.n	8009dec <__swhatbuf_r+0x24>

08009e14 <__smakebuf_r>:
 8009e14:	898b      	ldrh	r3, [r1, #12]
 8009e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e18:	079d      	lsls	r5, r3, #30
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	d507      	bpl.n	8009e30 <__smakebuf_r+0x1c>
 8009e20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	2301      	movs	r3, #1
 8009e2a:	6163      	str	r3, [r4, #20]
 8009e2c:	b003      	add	sp, #12
 8009e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e30:	ab01      	add	r3, sp, #4
 8009e32:	466a      	mov	r2, sp
 8009e34:	f7ff ffc8 	bl	8009dc8 <__swhatbuf_r>
 8009e38:	9f00      	ldr	r7, [sp, #0]
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7ff f904 	bl	800904c <_malloc_r>
 8009e44:	b948      	cbnz	r0, 8009e5a <__smakebuf_r+0x46>
 8009e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e4a:	059a      	lsls	r2, r3, #22
 8009e4c:	d4ee      	bmi.n	8009e2c <__smakebuf_r+0x18>
 8009e4e:	f023 0303 	bic.w	r3, r3, #3
 8009e52:	f043 0302 	orr.w	r3, r3, #2
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	e7e2      	b.n	8009e20 <__smakebuf_r+0xc>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	6020      	str	r0, [r4, #0]
 8009e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e6a:	b15b      	cbz	r3, 8009e84 <__smakebuf_r+0x70>
 8009e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e70:	4630      	mov	r0, r6
 8009e72:	f000 f81d 	bl	8009eb0 <_isatty_r>
 8009e76:	b128      	cbz	r0, 8009e84 <__smakebuf_r+0x70>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f023 0303 	bic.w	r3, r3, #3
 8009e7e:	f043 0301 	orr.w	r3, r3, #1
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	431d      	orrs	r5, r3
 8009e88:	81a5      	strh	r5, [r4, #12]
 8009e8a:	e7cf      	b.n	8009e2c <__smakebuf_r+0x18>

08009e8c <_fstat_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	@ (8009eac <_fstat_r+0x20>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	4611      	mov	r1, r2
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	f7f7 fc63 	bl	8001764 <_fstat>
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	d102      	bne.n	8009ea8 <_fstat_r+0x1c>
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	b103      	cbz	r3, 8009ea8 <_fstat_r+0x1c>
 8009ea6:	6023      	str	r3, [r4, #0]
 8009ea8:	bd38      	pop	{r3, r4, r5, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000620 	.word	0x20000620

08009eb0 <_isatty_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d06      	ldr	r5, [pc, #24]	@ (8009ecc <_isatty_r+0x1c>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	602b      	str	r3, [r5, #0]
 8009ebc:	f7f7 fc62 	bl	8001784 <_isatty>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_isatty_r+0x1a>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_isatty_r+0x1a>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	20000620 	.word	0x20000620

08009ed0 <_init>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr

08009edc <_fini>:
 8009edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ede:	bf00      	nop
 8009ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee2:	bc08      	pop	{r3}
 8009ee4:	469e      	mov	lr, r3
 8009ee6:	4770      	bx	lr
